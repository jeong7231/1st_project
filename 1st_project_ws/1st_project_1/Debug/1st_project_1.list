
1st_project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009288  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08009428  08009428  0000a428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009be4  08009be4  0000b084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009be4  08009be4  0000abe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bec  08009bec  0000b084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bec  08009bec  0000abec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bf0  08009bf0  0000abf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08009bf4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d4c  20000084  08009c78  0000b084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dd0  08009c78  0000bdd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a86  00000000  00000000  0000b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003273  00000000  00000000  00021b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  00024db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001117  00000000  00000000  00026378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5e4  00000000  00000000  0002748f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b60  00000000  00000000  00041a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a14db  00000000  00000000  0005b5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcaae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006948  00000000  00000000  000fcaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0010343c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009410 	.word	0x08009410

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08009410 	.word	0x08009410

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <LCD_init>:
#include "clcd.h"

uint8_t lcdData = 0;
I2C_HandleTypeDef *phLcdI2C;

void LCD_init(I2C_HandleTypeDef *phI2C) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	phLcdI2C = phI2C;
 80005e4:	4a18      	ldr	r2, [pc, #96]	@ (8000648 <LCD_init+0x6c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6013      	str	r3, [r2, #0]

	HAL_Delay(50);
 80005ea:	2032      	movs	r0, #50	@ 0x32
 80005ec:	f002 fd34 	bl	8003058 <HAL_Delay>
	LCD_cmdMode();
 80005f0:	f000 f89a 	bl	8000728 <LCD_cmdMode>
	LCD_writeMode();
 80005f4:	f000 f8b8 	bl	8000768 <LCD_writeMode>
	LCD_sendData(0x30);
 80005f8:	2030      	movs	r0, #48	@ 0x30
 80005fa:	f000 f849 	bl	8000690 <LCD_sendData>
	HAL_Delay(5);
 80005fe:	2005      	movs	r0, #5
 8000600:	f002 fd2a 	bl	8003058 <HAL_Delay>
	LCD_sendData(0x30);
 8000604:	2030      	movs	r0, #48	@ 0x30
 8000606:	f000 f843 	bl	8000690 <LCD_sendData>
	HAL_Delay(1);
 800060a:	2001      	movs	r0, #1
 800060c:	f002 fd24 	bl	8003058 <HAL_Delay>
	LCD_sendData(0x30);
 8000610:	2030      	movs	r0, #48	@ 0x30
 8000612:	f000 f83d 	bl	8000690 <LCD_sendData>
	LCD_sendData(0x20);
 8000616:	2020      	movs	r0, #32
 8000618:	f000 f83a 	bl	8000690 <LCD_sendData>
	LCD_sendByte(LCD_4BIT_FUNC_SET);
 800061c:	2028      	movs	r0, #40	@ 0x28
 800061e:	f000 f85f 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF);
 8000622:	2008      	movs	r0, #8
 8000624:	f000 f85c 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);
 8000628:	2001      	movs	r0, #1
 800062a:	f000 f859 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);
 800062e:	2006      	movs	r0, #6
 8000630:	f000 f856 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);
 8000634:	200c      	movs	r0, #12
 8000636:	f000 f853 	bl	80006e0 <LCD_sendByte>
	LCD_backLightOn();
 800063a:	f000 f865 	bl	8000708 <LCD_backLightOn>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000a4 	.word	0x200000a4

0800064c <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();			// RS pin Low
 8000656:	f000 f867 	bl	8000728 <LCD_cmdMode>
	LCD_writeMode();		// R/W pin Low
 800065a:	f000 f885 	bl	8000768 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f83d 	bl	80006e0 <LCD_sendByte>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	4603      	mov	r3, r0
 8000676:	71fb      	strb	r3, [r7, #7]
	LCD_charMode(); 		// RS pin High
 8000678:	f000 f866 	bl	8000748 <LCD_charMode>
	LCD_writeMode(); 		// R/W pin Low
 800067c:	f000 f874 	bl	8000768 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f82c 	bl	80006e0 <LCD_sendByte>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <LCD_sendData>:
void LCD_sendData(uint8_t data) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	LCD_enableHigh();		// E pin High
 800069a:	f000 f875 	bl	8000788 <LCD_enableHigh>
	HAL_Delay(2);			// LCD need delay
 800069e:	2002      	movs	r0, #2
 80006a0:	f002 fcda 	bl	8003058 <HAL_Delay>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);
 80006a4:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <LCD_sendData+0x4c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	b25a      	sxtb	r2, r3
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <LCD_sendData+0x4c>)
 80006c2:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80006c4:	f000 f880 	bl	80007c8 <LCD_sendDataToInterface>
	LCD_enableLow();		// E pin Low
 80006c8:	f000 f86e 	bl	80007a8 <LCD_enableLow>
	HAL_Delay(2);			// LCD delay
 80006cc:	2002      	movs	r0, #2
 80006ce:	f002 fcc3 	bl	8003058 <HAL_Delay>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000a0 	.word	0x200000a0

080006e0 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send upper data
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffcf 	bl	8000690 <LCD_sendData>
	data = data << 4;		// 4bit data shift (move to upper bit)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send lower data
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffc8 	bl	8000690 <LCD_sendData>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <LCD_backLightOn>:
void LCD_backLightOn() {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_BL);
 800070c:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <LCD_backLightOn+0x1c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f043 0308 	orr.w	r3, r3, #8
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b03      	ldr	r3, [pc, #12]	@ (8000724 <LCD_backLightOn+0x1c>)
 8000718:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800071a:	f000 f855 	bl	80007c8 <LCD_sendDataToInterface>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200000a0 	.word	0x200000a0

08000728 <LCD_cmdMode>:
void LCD_backLightOff() {
	lcdData &= ~(1 << LCD_BL);
	LCD_sendDataToInterface();
}

void LCD_cmdMode() {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS); // 0 bit low
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <LCD_cmdMode+0x1c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b03      	ldr	r3, [pc, #12]	@ (8000744 <LCD_cmdMode+0x1c>)
 8000738:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800073a:	f000 f845 	bl	80007c8 <LCD_sendDataToInterface>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000a0 	.word	0x200000a0

08000748 <LCD_charMode>:

void LCD_charMode() {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS); // 0 bit high
 800074c:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <LCD_charMode+0x1c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <LCD_charMode+0x1c>)
 8000758:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800075a:	f000 f835 	bl	80007c8 <LCD_sendDataToInterface>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000a0 	.word	0x200000a0

08000768 <LCD_writeMode>:

void LCD_writeMode() {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW); // 1 bit low
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <LCD_writeMode+0x1c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	f023 0302 	bic.w	r3, r3, #2
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b03      	ldr	r3, [pc, #12]	@ (8000784 <LCD_writeMode+0x1c>)
 8000778:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800077a:	f000 f825 	bl	80007c8 <LCD_sendDataToInterface>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000a0 	.word	0x200000a0

08000788 <LCD_enableHigh>:

void LCD_enableHigh() {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E); // 2 bit high
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <LCD_enableHigh+0x1c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <LCD_enableHigh+0x1c>)
 8000798:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800079a:	f000 f815 	bl	80007c8 <LCD_sendDataToInterface>
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000a0 	.word	0x200000a0

080007a8 <LCD_enableLow>:

void LCD_enableLow() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E); // 2 bit low
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <LCD_enableLow+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	f023 0304 	bic.w	r3, r3, #4
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <LCD_enableLow+0x1c>)
 80007b8:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80007ba:	f000 f805 	bl	80007c8 <LCD_sendDataToInterface>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000a0 	.word	0x200000a0

080007c8 <LCD_sendDataToInterface>:


void LCD_sendDataToInterface() {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(phLcdI2C, LCD_DEV_ADDR << 1, &lcdData, 1, 100);
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <LCD_sendDataToInterface+0x20>)
 80007d0:	6818      	ldr	r0, [r3, #0]
 80007d2:	2364      	movs	r3, #100	@ 0x64
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2301      	movs	r3, #1
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <LCD_sendDataToInterface+0x24>)
 80007da:	214e      	movs	r1, #78	@ 0x4e
 80007dc:	f003 fd82 	bl	80042e4 <HAL_I2C_Master_Transmit>
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000a4 	.word	0x200000a4
 80007ec:	200000a0 	.word	0x200000a0

080007f0 <LCD_writeString>:

void LCD_writeString(char *str) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e009      	b.n	8000812 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff31 	bl	800066e <LCD_writeCharData>
	for (int i = 0; str[i]; i++) {
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3301      	adds	r3, #1
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1ef      	bne.n	80007fe <LCD_writeString+0xe>
	}
}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	460a      	mov	r2, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = ((0x40 * row) + col);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	019b      	lsls	r3, r3, #6
 800084c:	b2da      	uxtb	r2, r3
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	4413      	add	r3, r2
 8000852:	73fb      	strb	r3, [r7, #15]
	uint8_t command = (0x80 + lcdRegAddr);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	3b80      	subs	r3, #128	@ 0x80
 8000858:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fef5 	bl	800064c <LCD_writeCmdData>
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str) {
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	603a      	str	r2, [r7, #0]
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	460b      	mov	r3, r1
 8000878:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 800087a:	79ba      	ldrb	r2, [r7, #6]
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffd1 	bl	8000828 <LCD_gotoXY>
	LCD_writeString(str);
 8000886:	6838      	ldr	r0, [r7, #0]
 8000888:	f7ff ffb2 	bl	80007f0 <LCD_writeString>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <DWT_Delay_Init+0x58>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <DWT_Delay_Init+0x58>)
 800089e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80008a2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <DWT_Delay_Init+0x58>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <DWT_Delay_Init+0x58>)
 80008aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008ae:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008b6:	f023 0301 	bic.w	r3, r3, #1
 80008ba:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0b      	ldr	r2, [pc, #44]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80008ce:	bf00      	nop
  __ASM volatile ("NOP");
 80008d0:	bf00      	nop
  __ASM volatile ("NOP");
 80008d2:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 80008dc:	2300      	movs	r3, #0
 80008de:	e000      	b.n	80008e2 <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 80008e0:	2301      	movs	r3, #1
  }

}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000edf0 	.word	0xe000edf0
 80008f0:	e0001000 	.word	0xe0001000

080008f4 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <DWT_Delay_us+0x40>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000902:	f004 fcad 	bl	8005260 <HAL_RCC_GetHCLKFreq>
 8000906:	4603      	mov	r3, r0
 8000908:	4a0b      	ldr	r2, [pc, #44]	@ (8000938 <DWT_Delay_us+0x44>)
 800090a:	fba2 2303 	umull	r2, r3, r2, r3
 800090e:	0c9b      	lsrs	r3, r3, #18
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	fb02 f303 	mul.w	r3, r2, r3
 8000916:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000918:	bf00      	nop
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <DWT_Delay_us+0x40>)
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	1ad2      	subs	r2, r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	429a      	cmp	r2, r3
 8000926:	d3f8      	bcc.n	800091a <DWT_Delay_us+0x26>
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e0001000 	.word	0xe0001000
 8000938:	431bde83 	.word	0x431bde83

0800093c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000958:	887b      	ldrh	r3, [r7, #2]
 800095a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4619      	mov	r1, r3
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f003 f9a8 	bl	8003cc0 <HAL_GPIO_Init>
}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	460b      	mov	r3, r1
 8000982:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f003 f98c 	bl	8003cc0 <HAL_GPIO_Init>
}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80009b4:	f7ff ff6e 	bl	8000894 <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80009b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009bc:	4807      	ldr	r0, [pc, #28]	@ (80009dc <DHT11_Init+0x2c>)
 80009be:	f7ff ffbd 	bl	800093c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009c8:	4804      	ldr	r0, [pc, #16]	@ (80009dc <DHT11_Init+0x2c>)
 80009ca:	f003 fb15 	bl	8003ff8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80009ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d2:	f002 fb41 	bl	8003058 <HAL_Delay>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40020800 	.word	0x40020800

080009e0 <DHT11_Start>:

void DHT11_Start (void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80009e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009e8:	4811      	ldr	r0, [pc, #68]	@ (8000a30 <DHT11_Start+0x50>)
 80009ea:	f7ff ffa7 	bl	800093c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009f4:	480e      	ldr	r0, [pc, #56]	@ (8000a30 <DHT11_Start+0x50>)
 80009f6:	f003 faff 	bl	8003ff8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a00:	480b      	ldr	r0, [pc, #44]	@ (8000a30 <DHT11_Start+0x50>)
 8000a02:	f003 faf9 	bl	8003ff8 <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 8000a06:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000a0a:	f7ff ff73 	bl	80008f4 <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a14:	4806      	ldr	r0, [pc, #24]	@ (8000a30 <DHT11_Start+0x50>)
 8000a16:	f003 faef 	bl	8003ff8 <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 8000a1a:	2014      	movs	r0, #20
 8000a1c:	f7ff ff6a 	bl	80008f4 <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000a20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <DHT11_Start+0x50>)
 8000a26:	f7ff ffa7 	bl	8000978 <Set_Pin_Input>
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40020800 	.word	0x40020800

08000a34 <DHT11_Stop>:

void DHT11_Stop (void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000a38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a3c:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <DHT11_Stop+0x20>)
 8000a3e:	f7ff ff7d 	bl	800093c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a48:	4802      	ldr	r0, [pc, #8]	@ (8000a54 <DHT11_Stop+0x20>)
 8000a4a:	f003 fad5 	bl	8003ff8 <HAL_GPIO_WritePin>
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40020800 	.word	0x40020800

08000a58 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000a62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a66:	4812      	ldr	r0, [pc, #72]	@ (8000ab0 <DHT11_Check_Response+0x58>)
 8000a68:	f003 faae 	bl	8003fc8 <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d10f      	bne.n	8000a92 <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 8000a72:	2050      	movs	r0, #80	@ 0x50
 8000a74:	f7ff ff3e 	bl	80008f4 <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000a78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <DHT11_Check_Response+0x58>)
 8000a7e:	f003 faa3 	bl	8003fc8 <HAL_GPIO_ReadPin>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <DHT11_Check_Response+0x36>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	e001      	b.n	8000a92 <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 8000a8e:	23ff      	movs	r3, #255	@ 0xff
 8000a90:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8000a92:	bf00      	nop
 8000a94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a98:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <DHT11_Check_Response+0x58>)
 8000a9a:	f003 fa95 	bl	8003fc8 <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1f7      	bne.n	8000a94 <DHT11_Check_Response+0x3c>

	return Response;
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	71bb      	strb	r3, [r7, #6]
 8000abe:	e03a      	b.n	8000b36 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000ac0:	bf00      	nop
 8000ac2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ac6:	4820      	ldr	r0, [pc, #128]	@ (8000b48 <DHT11_Read+0x94>)
 8000ac8:	f003 fa7e 	bl	8003fc8 <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0f7      	beq.n	8000ac2 <DHT11_Read+0xe>
		DWT_Delay_us(40);
 8000ad2:	2028      	movs	r0, #40	@ 0x28
 8000ad4:	f7ff ff0e 	bl	80008f4 <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000ad8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000adc:	481a      	ldr	r0, [pc, #104]	@ (8000b48 <DHT11_Read+0x94>)
 8000ade:	f003 fa73 	bl	8003fc8 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10e      	bne.n	8000b06 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2201      	movs	r2, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	b25b      	sxtb	r3, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	b25a      	sxtb	r2, r3
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	4013      	ands	r3, r2
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	e00b      	b.n	8000b1e <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000b06:	79bb      	ldrb	r3, [r7, #6]
 8000b08:	f1c3 0307 	rsb	r3, r3, #7
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	b25a      	sxtb	r2, r3
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000b1e:	bf00      	nop
 8000b20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b24:	4808      	ldr	r0, [pc, #32]	@ (8000b48 <DHT11_Read+0x94>)
 8000b26:	f003 fa4f 	bl	8003fc8 <HAL_GPIO_ReadPin>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f7      	bne.n	8000b20 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	3301      	adds	r3, #1
 8000b34:	71bb      	strb	r3, [r7, #6]
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	2b07      	cmp	r3, #7
 8000b3a:	d9c1      	bls.n	8000ac0 <DHT11_Read+0xc>
	}
	return i;
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40020800 	.word	0x40020800

08000b4c <DHT11_readData>:

DHT11_TypeDef DHT11_readData()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 8000b54:	f7ff ff44 	bl	80009e0 <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 8000b58:	f7ff ff7e 	bl	8000a58 <DHT11_Check_Response>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 8000b60:	f7ff ffa8 	bl	8000ab4 <DHT11_Read>
 8000b64:	4603      	mov	r3, r0
 8000b66:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 8000b68:	f7ff ffa4 	bl	8000ab4 <DHT11_Read>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 8000b70:	f7ff ffa0 	bl	8000ab4 <DHT11_Read>
 8000b74:	4603      	mov	r3, r0
 8000b76:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 8000b78:	f7ff ff9c 	bl	8000ab4 <DHT11_Read>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 8000b80:	f7ff ff98 	bl	8000ab4 <DHT11_Read>
 8000b84:	4603      	mov	r3, r0
 8000b86:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 8000b88:	f7ff ff54 	bl	8000a34 <DHT11_Stop>
	return dht11;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	6010      	str	r0, [r2, #0]
 8000b98:	889b      	ldrh	r3, [r3, #4]
 8000b9a:	8093      	strh	r3, [r2, #4]
}
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	807b      	strh	r3, [r7, #2]
    *length = 0;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8000bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	68b8      	ldr	r0, [r7, #8]
 8000bc0:	f007 fb9c 	bl	80082fc <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 8000bc4:	f240 4202 	movw	r2, #1026	@ 0x402
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4826      	ldr	r0, [pc, #152]	@ (8000c64 <esp_at_command+0xc0>)
 8000bcc:	f007 fb96 	bl	80082fc <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f7ff fb0f 	bl	80001f4 <strlen>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	2364      	movs	r3, #100	@ 0x64
 8000bdc:	68f9      	ldr	r1, [r7, #12]
 8000bde:	4822      	ldr	r0, [pc, #136]	@ (8000c68 <esp_at_command+0xc4>)
 8000be0:	f006 f93c 	bl	8006e5c <HAL_UART_Transmit>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d032      	beq.n	8000c50 <esp_at_command+0xac>
        return -1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e035      	b.n	8000c5c <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <esp_at_command+0xc0>)
 8000bf2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bfa:	d302      	bcc.n	8000c02 <esp_at_command+0x5e>
            return -2;
 8000bfc:	f06f 0301 	mvn.w	r3, #1
 8000c00:	e02c      	b.n	8000c5c <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 8000c02:	491a      	ldr	r1, [pc, #104]	@ (8000c6c <esp_at_command+0xc8>)
 8000c04:	4817      	ldr	r0, [pc, #92]	@ (8000c64 <esp_at_command+0xc0>)
 8000c06:	f007 fbfd 	bl	8008404 <strstr>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <esp_at_command+0x72>
            return -3;
 8000c10:	f06f 0302 	mvn.w	r3, #2
 8000c14:	e022      	b.n	8000c5c <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 8000c16:	4916      	ldr	r1, [pc, #88]	@ (8000c70 <esp_at_command+0xcc>)
 8000c18:	4812      	ldr	r0, [pc, #72]	@ (8000c64 <esp_at_command+0xc0>)
 8000c1a:	f007 fbf3 	bl	8008404 <strstr>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00e      	beq.n	8000c42 <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 8000c24:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <esp_at_command+0xc0>)
 8000c26:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <esp_at_command+0xc0>)
 8000c2e:	68b8      	ldr	r0, [r7, #8]
 8000c30:	f007 fc79 	bl	8008526 <memcpy>
            *length = cb_data.length;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <esp_at_command+0xc0>)
 8000c36:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	801a      	strh	r2, [r3, #0]
            return 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e00c      	b.n	8000c5c <esp_at_command+0xb8>
        }
        time_out -= 10;
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	3b0a      	subs	r3, #10
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8000c4a:	200a      	movs	r0, #10
 8000c4c:	f002 fa04 	bl	8003058 <HAL_Delay>
    while(time_out > 0)
 8000c50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	dccb      	bgt.n	8000bf0 <esp_at_command+0x4c>
    }
    return -4;
 8000c58:	f06f 0303 	mvn.w	r3, #3
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200004f0 	.word	0x200004f0
 8000c68:	20000ac4 	.word	0x20000ac4
 8000c6c:	08009428 	.word	0x08009428
 8000c70:	08009430 	.word	0x08009430

08000c74 <esp_reset>:

static int esp_reset(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000c7e:	1dba      	adds	r2, r7, #6
 8000c80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c84:	4909      	ldr	r1, [pc, #36]	@ (8000cac <esp_reset+0x38>)
 8000c86:	480a      	ldr	r0, [pc, #40]	@ (8000cb0 <esp_reset+0x3c>)
 8000c88:	f7ff ff8c 	bl	8000ba4 <esp_at_command>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <esp_reset+0x24>
    {
    	return -1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e004      	b.n	8000ca2 <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8000c98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c9c:	f002 f9dc 	bl	8003058 <HAL_Delay>
    return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000b8 	.word	0x200000b8
 8000cb0:	08009434 	.word	0x08009434

08000cb4 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000cc2:	f107 020a 	add.w	r2, r7, #10
 8000cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cca:	492d      	ldr	r1, [pc, #180]	@ (8000d80 <request_ip_addr+0xcc>)
 8000ccc:	482d      	ldr	r0, [pc, #180]	@ (8000d84 <request_ip_addr+0xd0>)
 8000cce:	f7ff ff69 	bl	8000ba4 <esp_at_command>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8000cd8:	482b      	ldr	r0, [pc, #172]	@ (8000d88 <request_ip_addr+0xd4>)
 8000cda:	f007 fa0d 	bl	80080f8 <puts>
 8000cde:	e049      	b.n	8000d74 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8000ce0:	492a      	ldr	r1, [pc, #168]	@ (8000d8c <request_ip_addr+0xd8>)
 8000ce2:	4827      	ldr	r0, [pc, #156]	@ (8000d80 <request_ip_addr+0xcc>)
 8000ce4:	f007 fb32 	bl	800834c <strtok>
 8000ce8:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d03e      	beq.n	8000d6e <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	e009      	b.n	8000d0a <request_ip_addr+0x56>
                printf("%c", response[i]);
 8000cf6:	4a22      	ldr	r2, [pc, #136]	@ (8000d80 <request_ip_addr+0xcc>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f007 f99c 	bl	800803c <putchar>
            for(int i = 0 ; i < length ; i++)
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	3301      	adds	r3, #1
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	897b      	ldrh	r3, [r7, #10]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	4293      	cmp	r3, r2
 8000d12:	dbf0      	blt.n	8000cf6 <request_ip_addr+0x42>
        }

        while(line != NULL)
 8000d14:	e02b      	b.n	8000d6e <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8000d16:	491e      	ldr	r1, [pc, #120]	@ (8000d90 <request_ip_addr+0xdc>)
 8000d18:	6978      	ldr	r0, [r7, #20]
 8000d1a:	f007 fb73 	bl	8008404 <strstr>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d01f      	beq.n	8000d64 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8000d24:	491b      	ldr	r1, [pc, #108]	@ (8000d94 <request_ip_addr+0xe0>)
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f007 fb10 	bl	800834c <strtok>
                ip = strtok(NULL, "\"");
 8000d2c:	4919      	ldr	r1, [pc, #100]	@ (8000d94 <request_ip_addr+0xe0>)
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f007 fb0c 	bl	800834c <strtok>
 8000d34:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 8000d36:	4918      	ldr	r1, [pc, #96]	@ (8000d98 <request_ip_addr+0xe4>)
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f7ff fa51 	bl	80001e0 <strcmp>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d00f      	beq.n	8000d64 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000d44:	2210      	movs	r2, #16
 8000d46:	2100      	movs	r1, #0
 8000d48:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <request_ip_addr+0xe8>)
 8000d4a:	f007 fad7 	bl	80082fc <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f7ff fa50 	bl	80001f4 <strlen>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	68f9      	ldr	r1, [r7, #12]
 8000d5a:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <request_ip_addr+0xe8>)
 8000d5c:	f007 fbe3 	bl	8008526 <memcpy>
                    return 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	e009      	b.n	8000d78 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8000d64:	4909      	ldr	r1, [pc, #36]	@ (8000d8c <request_ip_addr+0xd8>)
 8000d66:	2000      	movs	r0, #0
 8000d68:	f007 faf0 	bl	800834c <strtok>
 8000d6c:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1d0      	bne.n	8000d16 <request_ip_addr+0x62>
        }
    }
    return -1;
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200000b8 	.word	0x200000b8
 8000d84:	0800947c 	.word	0x0800947c
 8000d88:	08009488 	.word	0x08009488
 8000d8c:	08009470 	.word	0x08009470
 8000d90:	080094a8 	.word	0x080094a8
 8000d94:	08009478 	.word	0x08009478
 8000d98:	08009440 	.word	0x08009440
 8000d9c:	200000a8 	.word	0x200000a8

08000da0 <esp_client_conn>:
int esp_client_conn()
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b092      	sub	sp, #72	@ 0x48
 8000da4:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	2240      	movs	r2, #64	@ 0x40
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f007 faa4 	bl	80082fc <memset>
  uint16_t length = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8000db8:	f107 0008 	add.w	r0, r7, #8
 8000dbc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000dc0:	4a09      	ldr	r2, [pc, #36]	@ (8000de8 <esp_client_conn+0x48>)
 8000dc2:	490a      	ldr	r1, [pc, #40]	@ (8000dec <esp_client_conn+0x4c>)
 8000dc4:	f007 f9a0 	bl	8008108 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8000dc8:	1dba      	adds	r2, r7, #6
 8000dca:	f107 0008 	add.w	r0, r7, #8
 8000dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd2:	4907      	ldr	r1, [pc, #28]	@ (8000df0 <esp_client_conn+0x50>)
 8000dd4:	f7ff fee6 	bl	8000ba4 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8000dd8:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <esp_client_conn+0x54>)
 8000dda:	f000 f909 	bl	8000ff0 <esp_send_data>
	return 0;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3748      	adds	r7, #72	@ 0x48
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	080094b4 	.word	0x080094b4
 8000dec:	080094c4 	.word	0x080094c4
 8000df0:	200000b8 	.word	0x200000b8
 8000df4:	080094e0 	.word	0x080094e0

08000df8 <esp_get_status>:
int esp_get_status()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 8000e02:	1dba      	adds	r2, r7, #6
 8000e04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e08:	4909      	ldr	r1, [pc, #36]	@ (8000e30 <esp_get_status+0x38>)
 8000e0a:	480a      	ldr	r0, [pc, #40]	@ (8000e34 <esp_get_status+0x3c>)
 8000e0c:	f7ff feca 	bl	8000ba4 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8000e10:	4909      	ldr	r1, [pc, #36]	@ (8000e38 <esp_get_status+0x40>)
 8000e12:	4807      	ldr	r0, [pc, #28]	@ (8000e30 <esp_get_status+0x38>)
 8000e14:	f007 faf6 	bl	8008404 <strstr>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <esp_get_status+0x2a>
    {
    	return 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e001      	b.n	8000e26 <esp_get_status+0x2e>
    }
	return -1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000b8 	.word	0x200000b8
 8000e34:	080094f4 	.word	0x080094f4
 8000e38:	08009504 	.word	0x08009504

08000e3c <drv_esp_init>:
int drv_esp_init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000e40:	2210      	movs	r2, #16
 8000e42:	2100      	movs	r1, #0
 8000e44:	4806      	ldr	r0, [pc, #24]	@ (8000e60 <drv_esp_init+0x24>)
 8000e46:	f007 fa59 	bl	80082fc <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4905      	ldr	r1, [pc, #20]	@ (8000e64 <drv_esp_init+0x28>)
 8000e4e:	4806      	ldr	r0, [pc, #24]	@ (8000e68 <drv_esp_init+0x2c>)
 8000e50:	f006 f88f 	bl	8006f72 <HAL_UART_Receive_IT>

    return esp_reset();
 8000e54:	f7ff ff0e 	bl	8000c74 <esp_reset>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200000a8 	.word	0x200000a8
 8000e64:	200004ef 	.word	0x200004ef
 8000e68:	20000ac4 	.word	0x20000ac4

08000e6c <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b094      	sub	sp, #80	@ 0x50
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2240      	movs	r2, #64	@ 0x40
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f007 fa39 	bl	80082fc <memset>
  if(ssid == NULL || passwd == NULL)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <ap_conn_func+0x2a>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d103      	bne.n	8000e9e <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8000e96:	4817      	ldr	r0, [pc, #92]	@ (8000ef4 <ap_conn_func+0x88>)
 8000e98:	f007 f92e 	bl	80080f8 <puts>
 8000e9c:	e026      	b.n	8000eec <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000e9e:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea6:	4914      	ldr	r1, [pc, #80]	@ (8000ef8 <ap_conn_func+0x8c>)
 8000ea8:	4814      	ldr	r0, [pc, #80]	@ (8000efc <ap_conn_func+0x90>)
 8000eaa:	f7ff fe7b 	bl	8000ba4 <esp_at_command>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8000eb4:	4812      	ldr	r0, [pc, #72]	@ (8000f00 <ap_conn_func+0x94>)
 8000eb6:	f007 f91f 	bl	80080f8 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8000eba:	f107 000c 	add.w	r0, r7, #12
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	4910      	ldr	r1, [pc, #64]	@ (8000f04 <ap_conn_func+0x98>)
 8000ec4:	f007 f920 	bl	8008108 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000ec8:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000ecc:	f107 000c 	add.w	r0, r7, #12
 8000ed0:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000ed4:	4908      	ldr	r1, [pc, #32]	@ (8000ef8 <ap_conn_func+0x8c>)
 8000ed6:	f7ff fe65 	bl	8000ba4 <esp_at_command>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4808      	ldr	r0, [pc, #32]	@ (8000f08 <ap_conn_func+0x9c>)
 8000ee8:	f007 f896 	bl	8008018 <iprintf>
}
 8000eec:	3750      	adds	r7, #80	@ 0x50
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08009568 	.word	0x08009568
 8000ef8:	200000b8 	.word	0x200000b8
 8000efc:	08009594 	.word	0x08009594
 8000f00:	080095a4 	.word	0x080095a4
 8000f04:	080095b8 	.word	0x080095b8
 8000f08:	080095d0 	.word	0x080095d0

08000f0c <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a23      	ldr	r2, [pc, #140]	@ (8000fa8 <HAL_UART_RxCpltCallback+0x9c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d117      	bne.n	8000f4e <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8000f1e:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <HAL_UART_RxCpltCallback+0xa0>)
 8000f20:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f28:	d20c      	bcs.n	8000f44 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <HAL_UART_RxCpltCallback+0xa0>)
 8000f2c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	b291      	uxth	r1, r2
 8000f34:	4a1d      	ldr	r2, [pc, #116]	@ (8000fac <HAL_UART_RxCpltCallback+0xa0>)
 8000f36:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <HAL_UART_RxCpltCallback+0xa4>)
 8000f3e:	7819      	ldrb	r1, [r3, #0]
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <HAL_UART_RxCpltCallback+0xa0>)
 8000f42:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	491a      	ldr	r1, [pc, #104]	@ (8000fb0 <HAL_UART_RxCpltCallback+0xa4>)
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f006 f812 	bl	8006f72 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a18      	ldr	r2, [pc, #96]	@ (8000fb4 <HAL_UART_RxCpltCallback+0xa8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d122      	bne.n	8000f9e <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8000f58:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a17      	ldr	r2, [pc, #92]	@ (8000fbc <HAL_UART_RxCpltCallback+0xb0>)
 8000f5e:	7811      	ldrb	r1, [r2, #0]
 8000f60:	4a17      	ldr	r2, [pc, #92]	@ (8000fc0 <HAL_UART_RxCpltCallback+0xb4>)
 8000f62:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a15      	ldr	r2, [pc, #84]	@ (8000fc0 <HAL_UART_RxCpltCallback+0xb4>)
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b0d      	cmp	r3, #13
 8000f70:	d10b      	bne.n	8000f8a <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <HAL_UART_RxCpltCallback+0xb4>)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <HAL_UART_RxCpltCallback+0xb8>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e004      	b.n	8000f94 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f92:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8000f94:	2201      	movs	r2, #1
 8000f96:	4909      	ldr	r1, [pc, #36]	@ (8000fbc <HAL_UART_RxCpltCallback+0xb0>)
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f005 ffea 	bl	8006f72 <HAL_UART_Receive_IT>
    }
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40011400 	.word	0x40011400
 8000fac:	200004f0 	.word	0x200004f0
 8000fb0:	200004ef 	.word	0x200004ef
 8000fb4:	40004400 	.word	0x40004400
 8000fb8:	200008f4 	.word	0x200008f4
 8000fbc:	200004ee 	.word	0x200004ee
 8000fc0:	200004bc 	.word	0x200004bc
 8000fc4:	200004b8 	.word	0x200004b8

08000fc8 <AiotClient_Init>:


void AiotClient_Init()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 8000fcc:	4906      	ldr	r1, [pc, #24]	@ (8000fe8 <AiotClient_Init+0x20>)
 8000fce:	4807      	ldr	r0, [pc, #28]	@ (8000fec <AiotClient_Init+0x24>)
 8000fd0:	f7ff ff4c 	bl	8000e6c <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff fe6d 	bl	8000cb4 <request_ip_addr>
	esp_client_conn();
 8000fda:	f7ff fee1 	bl	8000da0 <esp_client_conn>
	esp_get_status();
 8000fde:	f7ff ff0b 	bl	8000df8 <esp_get_status>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	08009630 	.word	0x08009630
 8000fec:	0800963c 	.word	0x0800963c

08000ff0 <esp_send_data>:

void esp_send_data(char *data)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	@ 0x50
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	2240      	movs	r2, #64	@ 0x40
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f007 f97b 	bl	80082fc <memset>
	uint16_t length = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff f8f2 	bl	80001f4 <strlen>
 8001010:	4602      	mov	r2, r0
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	490e      	ldr	r1, [pc, #56]	@ (8001050 <esp_send_data+0x60>)
 8001018:	4618      	mov	r0, r3
 800101a:	f007 f875 	bl	8008108 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 800101e:	f107 020e 	add.w	r2, r7, #14
 8001022:	f107 0010 	add.w	r0, r7, #16
 8001026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102a:	490a      	ldr	r1, [pc, #40]	@ (8001054 <esp_send_data+0x64>)
 800102c:	f7ff fdba 	bl	8000ba4 <esp_at_command>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d107      	bne.n	8001046 <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8001036:	f107 020e 	add.w	r2, r7, #14
 800103a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103e:	4905      	ldr	r1, [pc, #20]	@ (8001054 <esp_send_data+0x64>)
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fdaf 	bl	8000ba4 <esp_at_command>
	}
}
 8001046:	bf00      	nop
 8001048:	3750      	adds	r7, #80	@ 0x50
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	08009644 	.word	0x08009644
 8001054:	200000b8 	.word	0x200000b8

08001058 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 800105c:	2201      	movs	r2, #1
 800105e:	4903      	ldr	r1, [pc, #12]	@ (800106c <drv_uart_init+0x14>)
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <drv_uart_init+0x18>)
 8001062:	f005 ff86 	bl	8006f72 <HAL_UART_Receive_IT>
    return 0;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200004ee 	.word	0x200004ee
 8001070:	20000a7c 	.word	0x20000a7c

08001074 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 800107c:	1d39      	adds	r1, r7, #4
 800107e:	230a      	movs	r3, #10
 8001080:	2201      	movs	r2, #1
 8001082:	4807      	ldr	r0, [pc, #28]	@ (80010a0 <__io_putchar+0x2c>)
 8001084:	f005 feea 	bl	8006e5c <HAL_UART_Transmit>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <__io_putchar+0x1e>
        return ch;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	e001      	b.n	8001096 <__io_putchar+0x22>
    return -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000a7c 	.word	0x20000a7c

080010a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010aa:	f001 ff63 	bl	8002f74 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010ae:	f000 f921 	bl	80012f4 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010b2:	f000 fb45 	bl	8001740 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80010b6:	f000 faef 	bl	8001698 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80010ba:	f000 f985 	bl	80013c8 <MX_ADC1_Init>
	MX_TIM3_Init();
 80010be:	f000 fa39 	bl	8001534 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 80010c2:	f000 fb13 	bl	80016ec <MX_USART6_UART_Init>
	MX_I2C1_Init();
 80010c6:	f000 f9d1 	bl	800146c <MX_I2C1_Init>
	MX_SPI1_Init();
 80010ca:	f000 f9fd 	bl	80014c8 <MX_SPI1_Init>
	MX_TIM4_Init();
 80010ce:	f000 fa7f 	bl	80015d0 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */

	// TIMER 4
	if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 80010d2:	4870      	ldr	r0, [pc, #448]	@ (8001294 <main+0x1f0>)
 80010d4:	f004 ff1a 	bl	8005f0c <HAL_TIM_Base_Start_IT>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <main+0x3e>
		Error_Handler();
 80010de:	f001 f997 	bl	8002410 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 80010e2:	2100      	movs	r1, #0
 80010e4:	486b      	ldr	r0, [pc, #428]	@ (8001294 <main+0x1f0>)
 80010e6:	f004 ffc3 	bl	8006070 <HAL_TIM_PWM_Start>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <main+0x50>
		Error_Handler();
 80010f0:	f001 f98e 	bl	8002410 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK)
 80010f4:	2104      	movs	r1, #4
 80010f6:	4867      	ldr	r0, [pc, #412]	@ (8001294 <main+0x1f0>)
 80010f8:	f004 ffba 	bl	8006070 <HAL_TIM_PWM_Start>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <main+0x62>
		Error_Handler();
 8001102:	f001 f985 	bl	8002410 <Error_Handler>

	// ESP
	printf("Start main() - wifi\r\n");
 8001106:	4864      	ldr	r0, [pc, #400]	@ (8001298 <main+0x1f4>)
 8001108:	f006 fff6 	bl	80080f8 <puts>
	ret |= drv_uart_init();
 800110c:	f7ff ffa4 	bl	8001058 <drv_uart_init>
 8001110:	4602      	mov	r2, r0
 8001112:	4b62      	ldr	r3, [pc, #392]	@ (800129c <main+0x1f8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4313      	orrs	r3, r2
 8001118:	4a60      	ldr	r2, [pc, #384]	@ (800129c <main+0x1f8>)
 800111a:	6013      	str	r3, [r2, #0]
	ret |= drv_esp_init();
 800111c:	f7ff fe8e 	bl	8000e3c <drv_esp_init>
 8001120:	4602      	mov	r2, r0
 8001122:	4b5e      	ldr	r3, [pc, #376]	@ (800129c <main+0x1f8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4313      	orrs	r3, r2
 8001128:	4a5c      	ldr	r2, [pc, #368]	@ (800129c <main+0x1f8>)
 800112a:	6013      	str	r3, [r2, #0]
	if (ret != 0) {
 800112c:	4b5b      	ldr	r3, [pc, #364]	@ (800129c <main+0x1f8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <main+0x9a>
		printf("Esp response error\r\n");
 8001134:	485a      	ldr	r0, [pc, #360]	@ (80012a0 <main+0x1fc>)
 8001136:	f006 ffdf 	bl	80080f8 <puts>
		Error_Handler();
 800113a:	f001 f969 	bl	8002410 <Error_Handler>
	}

	AiotClient_Init();
 800113e:	f7ff ff43 	bl	8000fc8 <AiotClient_Init>
	// DHT
	DHT11_Init();
 8001142:	f7ff fc35 	bl	80009b0 <DHT11_Init>

	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8001146:	4857      	ldr	r0, [pc, #348]	@ (80012a4 <main+0x200>)
 8001148:	f004 fee0 	bl	8005f0c <HAL_TIM_Base_Start_IT>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <main+0xb2>
		Error_Handler();
 8001152:	f001 f95d 	bl	8002410 <Error_Handler>
	// LCD
	LCD_init(&hi2c1);
 8001156:	4854      	ldr	r0, [pc, #336]	@ (80012a8 <main+0x204>)
 8001158:	f7ff fa40 	bl	80005dc <LCD_init>
	LCD_writeStringXY(0, 0, "hello lcd");
 800115c:	4a53      	ldr	r2, [pc, #332]	@ (80012ac <main+0x208>)
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fb82 	bl	800086a <LCD_writeStringXY>

	// RFID
	MFRC522_Init();                               // RC522 초기화
 8001166:	f001 fa1f 	bl	80025a8 <MFRC522_Init>
	uint8_t version = MFRC522_ReadRegister(0x37); // VersionReg
 800116a:	2037      	movs	r0, #55	@ 0x37
 800116c:	f001 f990 	bl	8002490 <MFRC522_ReadRegister>
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
	printf("RC522 Version: 0x%02X\r\n", version);
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4619      	mov	r1, r3
 8001178:	484d      	ldr	r0, [pc, #308]	@ (80012b0 <main+0x20c>)
 800117a:	f006 ff4d 	bl	8008018 <iprintf>
	printf("카드를 인식해주세요\r\n");
 800117e:	484d      	ldr	r0, [pc, #308]	@ (80012b4 <main+0x210>)
 8001180:	f006 ffba 	bl	80080f8 <puts>

	//PIR
	PIR_Init();
 8001184:	f000 ffa8 	bl	80020d8 <PIR_Init>

	//ADC
	if (HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8001188:	484b      	ldr	r0, [pc, #300]	@ (80012b8 <main+0x214>)
 800118a:	f001 ffcd 	bl	8003128 <HAL_ADC_Start_IT>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <main+0xf4>
		Error_Handler();
 8001194:	f001 f93c 	bl	8002410 <Error_Handler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (strstr((char*) cb_data.buf, "+IPD")
 8001198:	4948      	ldr	r1, [pc, #288]	@ (80012bc <main+0x218>)
 800119a:	4849      	ldr	r0, [pc, #292]	@ (80012c0 <main+0x21c>)
 800119c:	f007 f932 	bl	8008404 <strstr>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01d      	beq.n	80011e2 <main+0x13e>
				&& cb_data.buf[cb_data.length - 1] == '\n') {
 80011a6:	4b46      	ldr	r3, [pc, #280]	@ (80012c0 <main+0x21c>)
 80011a8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80011ac:	3b01      	subs	r3, #1
 80011ae:	4a44      	ldr	r2, [pc, #272]	@ (80012c0 <main+0x21c>)
 80011b0:	5cd3      	ldrb	r3, [r2, r3]
 80011b2:	2b0a      	cmp	r3, #10
 80011b4:	d115      	bne.n	80011e2 <main+0x13e>
			//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff, strchr((char*) cb_data.buf, '['));
 80011b6:	215b      	movs	r1, #91	@ 0x5b
 80011b8:	4841      	ldr	r0, [pc, #260]	@ (80012c0 <main+0x21c>)
 80011ba:	f007 f8a7 	bl	800830c <strchr>
 80011be:	4603      	mov	r3, r0
 80011c0:	4619      	mov	r1, r3
 80011c2:	4840      	ldr	r0, [pc, #256]	@ (80012c4 <main+0x220>)
 80011c4:	f007 f9a7 	bl	8008516 <strcpy>
			memset(cb_data.buf, 0x0, sizeof(cb_data.buf));
 80011c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011cc:	2100      	movs	r1, #0
 80011ce:	483c      	ldr	r0, [pc, #240]	@ (80012c0 <main+0x21c>)
 80011d0:	f007 f894 	bl	80082fc <memset>
			cb_data.length = 0;
 80011d4:	4b3a      	ldr	r3, [pc, #232]	@ (80012c0 <main+0x21c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 80011dc:	4839      	ldr	r0, [pc, #228]	@ (80012c4 <main+0x220>)
 80011de:	f000 fdb5 	bl	8001d4c <esp_event>
		}
		if (rx2Flag) {
 80011e2:	4b39      	ldr	r3, [pc, #228]	@ (80012c8 <main+0x224>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d006      	beq.n	80011fa <main+0x156>
			printf("recv2 : %s\r\n", rx2Data);
 80011ec:	4937      	ldr	r1, [pc, #220]	@ (80012cc <main+0x228>)
 80011ee:	4838      	ldr	r0, [pc, #224]	@ (80012d0 <main+0x22c>)
 80011f0:	f006 ff12 	bl	8008018 <iprintf>
			rx2Flag = 0;
 80011f4:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <main+0x224>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
		}

		room_status_display();
 80011fa:	f000 fcbd 	bl	8001b78 <room_status_display>
		user_authentication();
 80011fe:	f000 fce3 	bl	8001bc8 <user_authentication>
		authentication_timeout();
 8001202:	f001 f8d3 	bl	80023ac <authentication_timeout>

		if (door_state != last_door_state) {
 8001206:	4b33      	ldr	r3, [pc, #204]	@ (80012d4 <main+0x230>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4b33      	ldr	r3, [pc, #204]	@ (80012d8 <main+0x234>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d016      	beq.n	8001240 <main+0x19c>
			if (door_state == 1) {
 8001212:	4b30      	ldr	r3, [pc, #192]	@ (80012d4 <main+0x230>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d107      	bne.n	800122a <main+0x186>
				door_pulse = 1500;
 800121a:	4b30      	ldr	r3, [pc, #192]	@ (80012dc <main+0x238>)
 800121c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001220:	601a      	str	r2, [r3, #0]
				printf("UNLOCK!!\r\n");
 8001222:	482f      	ldr	r0, [pc, #188]	@ (80012e0 <main+0x23c>)
 8001224:	f006 ff68 	bl	80080f8 <puts>
 8001228:	e006      	b.n	8001238 <main+0x194>
			} else {
				door_pulse = 500;
 800122a:	4b2c      	ldr	r3, [pc, #176]	@ (80012dc <main+0x238>)
 800122c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001230:	601a      	str	r2, [r3, #0]
				printf("LOCK!!\r\n");
 8001232:	482c      	ldr	r0, [pc, #176]	@ (80012e4 <main+0x240>)
 8001234:	f006 ff60 	bl	80080f8 <puts>
			}
			last_door_state = door_state;
 8001238:	4b26      	ldr	r3, [pc, #152]	@ (80012d4 <main+0x230>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a26      	ldr	r2, [pc, #152]	@ (80012d8 <main+0x234>)
 800123e:	6013      	str	r3, [r2, #0]
		}
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, door_pulse - 1);
 8001240:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <main+0x238>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <main+0x1f0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	639a      	str	r2, [r3, #56]	@ 0x38

		room_status_set();
 800124c:	f000 fb7c 	bl	8001948 <room_status_set>
		detect();
 8001250:	f001 f888 	bl	8002364 <detect>

		// DHT, DC
		if (door_state == 1) {
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <main+0x230>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d19d      	bne.n	8001198 <main+0xf4>

			if (tim3Sec % 5 == 0 && tim3Sec != last_checked_sec) //5초에 한번 실행되게
 800125c:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <main+0x244>)
 800125e:	6819      	ldr	r1, [r3, #0]
 8001260:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <main+0x248>)
 8001262:	fba3 2301 	umull	r2, r3, r3, r1
 8001266:	089a      	lsrs	r2, r3, #2
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	1aca      	subs	r2, r1, r3
 8001270:	2a00      	cmp	r2, #0
 8001272:	d191      	bne.n	8001198 <main+0xf4>
 8001274:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <main+0x244>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1d      	ldr	r2, [pc, #116]	@ (80012f0 <main+0x24c>)
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	4293      	cmp	r3, r2
 800127e:	d08b      	beq.n	8001198 <main+0xf4>
					{
				dht_status_motor(); // 한번 실행
 8001280:	f000 ff7c 	bl	800217c <dht_status_motor>
				cds_status_servo();
 8001284:	f001 f80e 	bl	80022a4 <cds_status_servo>
				last_checked_sec = tim3Sec; // 재실행 방지용
 8001288:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <main+0x244>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <main+0x24c>)
 8001290:	601a      	str	r2, [r3, #0]
		if (strstr((char*) cb_data.buf, "+IPD")
 8001292:	e781      	b.n	8001198 <main+0xf4>
 8001294:	20000a34 	.word	0x20000a34
 8001298:	08009654 	.word	0x08009654
 800129c:	20000b0c 	.word	0x20000b0c
 80012a0:	0800966c 	.word	0x0800966c
 80012a4:	200009ec 	.word	0x200009ec
 80012a8:	20000940 	.word	0x20000940
 80012ac:	08009680 	.word	0x08009680
 80012b0:	0800968c 	.word	0x0800968c
 80012b4:	080096a4 	.word	0x080096a4
 80012b8:	200008f8 	.word	0x200008f8
 80012bc:	080096c4 	.word	0x080096c4
 80012c0:	200004f0 	.word	0x200004f0
 80012c4:	20000c38 	.word	0x20000c38
 80012c8:	200004b8 	.word	0x200004b8
 80012cc:	200004bc 	.word	0x200004bc
 80012d0:	080096cc 	.word	0x080096cc
 80012d4:	20000bf4 	.word	0x20000bf4
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000bf0 	.word	0x20000bf0
 80012e0:	080096dc 	.word	0x080096dc
 80012e4:	080096e8 	.word	0x080096e8
 80012e8:	20000b74 	.word	0x20000b74
 80012ec:	cccccccd 	.word	0xcccccccd
 80012f0:	20000c34 	.word	0x20000c34

080012f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	@ 0x50
 80012f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	2230      	movs	r2, #48	@ 0x30
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f006 fffa 	bl	80082fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <SystemClock_Config+0xcc>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	4a27      	ldr	r2, [pc, #156]	@ (80013c0 <SystemClock_Config+0xcc>)
 8001322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001326:	6413      	str	r3, [r2, #64]	@ 0x40
 8001328:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <SystemClock_Config+0xcc>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <SystemClock_Config+0xd0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a21      	ldr	r2, [pc, #132]	@ (80013c4 <SystemClock_Config+0xd0>)
 800133e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <SystemClock_Config+0xd0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001354:	2301      	movs	r3, #1
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001358:	2310      	movs	r3, #16
 800135a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135c:	2302      	movs	r3, #2
 800135e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001360:	2300      	movs	r3, #0
 8001362:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001364:	2310      	movs	r3, #16
 8001366:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001368:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800136c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800136e:	2304      	movs	r3, #4
 8001370:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001372:	2304      	movs	r3, #4
 8001374:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001376:	f107 0320 	add.w	r3, r7, #32
 800137a:	4618      	mov	r0, r3
 800137c:	f003 fb0c 	bl	8004998 <HAL_RCC_OscConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x96>
		Error_Handler();
 8001386:	f001 f843 	bl	8002410 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800138a:	230f      	movs	r3, #15
 800138c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138e:	2302      	movs	r3, #2
 8001390:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800139a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	2102      	movs	r1, #2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 fd6e 	bl	8004e88 <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0xc2>
		Error_Handler();
 80013b2:	f001 f82d 	bl	8002410 <Error_Handler>
	}
}
 80013b6:	bf00      	nop
 80013b8:	3750      	adds	r7, #80	@ 0x50
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000

080013c8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */
	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80013ce:	463b      	mov	r3, r7
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */
	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80013da:	4b21      	ldr	r3, [pc, #132]	@ (8001460 <MX_ADC1_Init+0x98>)
 80013dc:	4a21      	ldr	r2, [pc, #132]	@ (8001464 <MX_ADC1_Init+0x9c>)
 80013de:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <MX_ADC1_Init+0x98>)
 80013e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013e6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001460 <MX_ADC1_Init+0x98>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80013ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001460 <MX_ADC1_Init+0x98>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <MX_ADC1_Init+0x98>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013fa:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <MX_ADC1_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001402:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <MX_ADC1_Init+0x98>)
 8001404:	2200      	movs	r2, #0
 8001406:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001408:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <MX_ADC1_Init+0x98>)
 800140a:	4a17      	ldr	r2, [pc, #92]	@ (8001468 <MX_ADC1_Init+0xa0>)
 800140c:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800140e:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <MX_ADC1_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <MX_ADC1_Init+0x98>)
 8001416:	2201      	movs	r2, #1
 8001418:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800141a:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <MX_ADC1_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001422:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <MX_ADC1_Init+0x98>)
 8001424:	2201      	movs	r2, #1
 8001426:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001428:	480d      	ldr	r0, [pc, #52]	@ (8001460 <MX_ADC1_Init+0x98>)
 800142a:	f001 fe39 	bl	80030a0 <HAL_ADC_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001434:	f000 ffec 	bl	8002410 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001438:	2300      	movs	r3, #0
 800143a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800143c:	2301      	movs	r3, #1
 800143e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001440:	2304      	movs	r3, #4
 8001442:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001444:	463b      	mov	r3, r7
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	@ (8001460 <MX_ADC1_Init+0x98>)
 800144a:	f002 f85d 	bl	8003508 <HAL_ADC_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001454:	f000 ffdc 	bl	8002410 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	/* USER CODE END ADC1_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200008f8 	.word	0x200008f8
 8001464:	40012000 	.word	0x40012000
 8001468:	0f000001 	.word	0x0f000001

0800146c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_Init 0 */
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */
	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <MX_I2C1_Init+0x50>)
 8001472:	4a13      	ldr	r2, [pc, #76]	@ (80014c0 <MX_I2C1_Init+0x54>)
 8001474:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <MX_I2C1_Init+0x50>)
 8001478:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <MX_I2C1_Init+0x58>)
 800147a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_I2C1_Init+0x50>)
 800148a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800148e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <MX_I2C1_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_I2C1_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <MX_I2C1_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_I2C1_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_I2C1_Init+0x50>)
 80014aa:	f002 fdd7 	bl	800405c <HAL_I2C_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80014b4:	f000 ffac 	bl	8002410 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	/* USER CODE END I2C1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000940 	.word	0x20000940
 80014c0:	40005400 	.word	0x40005400
 80014c4:	000186a0 	.word	0x000186a0

080014c8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80014cc:	4b17      	ldr	r3, [pc, #92]	@ (800152c <MX_SPI1_Init+0x64>)
 80014ce:	4a18      	ldr	r2, [pc, #96]	@ (8001530 <MX_SPI1_Init+0x68>)
 80014d0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80014d2:	4b16      	ldr	r3, [pc, #88]	@ (800152c <MX_SPI1_Init+0x64>)
 80014d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014d8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <MX_SPI1_Init+0x64>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <MX_SPI1_Init+0x64>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_SPI1_Init+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <MX_SPI1_Init+0x64>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <MX_SPI1_Init+0x64>)
 80014f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014f8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80014fa:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <MX_SPI1_Init+0x64>)
 80014fc:	2210      	movs	r2, #16
 80014fe:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001500:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <MX_SPI1_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <MX_SPI1_Init+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <MX_SPI1_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <MX_SPI1_Init+0x64>)
 8001514:	220a      	movs	r2, #10
 8001516:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001518:	4804      	ldr	r0, [pc, #16]	@ (800152c <MX_SPI1_Init+0x64>)
 800151a:	f003 fed5 	bl	80052c8 <HAL_SPI_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001524:	f000 ff74 	bl	8002410 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000994 	.word	0x20000994
 8001530:	40013000 	.word	0x40013000

08001534 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */
	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */
	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001550:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <MX_TIM3_Init+0x94>)
 8001552:	4a1e      	ldr	r2, [pc, #120]	@ (80015cc <MX_TIM3_Init+0x98>)
 8001554:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84 - 1;
 8001556:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <MX_TIM3_Init+0x94>)
 8001558:	2253      	movs	r2, #83	@ 0x53
 800155a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155c:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <MX_TIM3_Init+0x94>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8001562:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <MX_TIM3_Init+0x94>)
 8001564:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001568:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156a:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <MX_TIM3_Init+0x94>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001570:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <MX_TIM3_Init+0x94>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001576:	4814      	ldr	r0, [pc, #80]	@ (80015c8 <MX_TIM3_Init+0x94>)
 8001578:	f004 fc78 	bl	8005e6c <HAL_TIM_Base_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM3_Init+0x52>
		Error_Handler();
 8001582:	f000 ff45 	bl	8002410 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001586:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800158a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	4619      	mov	r1, r3
 8001592:	480d      	ldr	r0, [pc, #52]	@ (80015c8 <MX_TIM3_Init+0x94>)
 8001594:	f004 ffce 	bl	8006534 <HAL_TIM_ConfigClockSource>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM3_Init+0x6e>
		Error_Handler();
 800159e:	f000 ff37 	bl	8002410 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80015aa:	463b      	mov	r3, r7
 80015ac:	4619      	mov	r1, r3
 80015ae:	4806      	ldr	r0, [pc, #24]	@ (80015c8 <MX_TIM3_Init+0x94>)
 80015b0:	f005 fb82 	bl	8006cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80015ba:	f000 ff29 	bl	8002410 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	/* USER CODE END TIM3_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200009ec 	.word	0x200009ec
 80015cc:	40000400 	.word	0x40000400

080015d0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	@ 0x28
 80015d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
 80015ee:	615a      	str	r2, [r3, #20]
 80015f0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80015f2:	4b27      	ldr	r3, [pc, #156]	@ (8001690 <MX_TIM4_Init+0xc0>)
 80015f4:	4a27      	ldr	r2, [pc, #156]	@ (8001694 <MX_TIM4_Init+0xc4>)
 80015f6:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 84 - 1;
 80015f8:	4b25      	ldr	r3, [pc, #148]	@ (8001690 <MX_TIM4_Init+0xc0>)
 80015fa:	2253      	movs	r2, #83	@ 0x53
 80015fc:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fe:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <MX_TIM4_Init+0xc0>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 20000 - 1;
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <MX_TIM4_Init+0xc0>)
 8001606:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800160a:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160c:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <MX_TIM4_Init+0xc0>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001612:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <MX_TIM4_Init+0xc0>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001618:	481d      	ldr	r0, [pc, #116]	@ (8001690 <MX_TIM4_Init+0xc0>)
 800161a:	f004 fcd9 	bl	8005fd0 <HAL_TIM_PWM_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM4_Init+0x58>
		Error_Handler();
 8001624:	f000 fef4 	bl	8002410 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001630:	f107 0320 	add.w	r3, r7, #32
 8001634:	4619      	mov	r1, r3
 8001636:	4816      	ldr	r0, [pc, #88]	@ (8001690 <MX_TIM4_Init+0xc0>)
 8001638:	f005 fb3e 	bl	8006cb8 <HAL_TIMEx_MasterConfigSynchronization>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM4_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8001642:	f000 fee5 	bl	8002410 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001646:	2360      	movs	r3, #96	@ 0x60
 8001648:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2200      	movs	r2, #0
 800165a:	4619      	mov	r1, r3
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <MX_TIM4_Init+0xc0>)
 800165e:	f004 fea7 	bl	80063b0 <HAL_TIM_PWM_ConfigChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM4_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8001668:	f000 fed2 	bl	8002410 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2204      	movs	r2, #4
 8001670:	4619      	mov	r1, r3
 8001672:	4807      	ldr	r0, [pc, #28]	@ (8001690 <MX_TIM4_Init+0xc0>)
 8001674:	f004 fe9c 	bl	80063b0 <HAL_TIM_PWM_ConfigChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM4_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800167e:	f000 fec7 	bl	8002410 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8001682:	4803      	ldr	r0, [pc, #12]	@ (8001690 <MX_TIM4_Init+0xc0>)
 8001684:	f001 fa58 	bl	8002b38 <HAL_TIM_MspPostInit>

}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	@ 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000a34 	.word	0x20000a34
 8001694:	40000800 	.word	0x40000800

08001698 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_Init 0 */
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */
	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800169c:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 800169e:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <MX_USART2_UART_Init+0x50>)
 80016a0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016d0:	f005 fb74 	bl	8006dbc <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80016da:	f000 fe99 	bl	8002410 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
	/* USER CODE END USART2_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000a7c 	.word	0x20000a7c
 80016e8:	40004400 	.word	0x40004400

080016ec <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART6_Init 0 */
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */
	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <MX_USART6_UART_Init+0x4c>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	@ (800173c <MX_USART6_UART_Init+0x50>)
 80016f4:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 38400;
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <MX_USART6_UART_Init+0x4c>)
 80016f8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80016fc:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <MX_USART6_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <MX_USART6_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <MX_USART6_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <MX_USART6_UART_Init+0x4c>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <MX_USART6_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <MX_USART6_UART_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8001722:	4805      	ldr	r0, [pc, #20]	@ (8001738 <MX_USART6_UART_Init+0x4c>)
 8001724:	f005 fb4a 	bl	8006dbc <HAL_UART_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 800172e:	f000 fe6f 	bl	8002410 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */
	/* USER CODE END USART6_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000ac4 	.word	0x20000ac4
 800173c:	40011400 	.word	0x40011400

08001740 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	@ 0x28
 8001744:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	4b5b      	ldr	r3, [pc, #364]	@ (80018c8 <MX_GPIO_Init+0x188>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a5a      	ldr	r2, [pc, #360]	@ (80018c8 <MX_GPIO_Init+0x188>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b58      	ldr	r3, [pc, #352]	@ (80018c8 <MX_GPIO_Init+0x188>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b54      	ldr	r3, [pc, #336]	@ (80018c8 <MX_GPIO_Init+0x188>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a53      	ldr	r2, [pc, #332]	@ (80018c8 <MX_GPIO_Init+0x188>)
 800177c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b51      	ldr	r3, [pc, #324]	@ (80018c8 <MX_GPIO_Init+0x188>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b4d      	ldr	r3, [pc, #308]	@ (80018c8 <MX_GPIO_Init+0x188>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a4c      	ldr	r2, [pc, #304]	@ (80018c8 <MX_GPIO_Init+0x188>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b4a      	ldr	r3, [pc, #296]	@ (80018c8 <MX_GPIO_Init+0x188>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b46      	ldr	r3, [pc, #280]	@ (80018c8 <MX_GPIO_Init+0x188>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a45      	ldr	r2, [pc, #276]	@ (80018c8 <MX_GPIO_Init+0x188>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b43      	ldr	r3, [pc, #268]	@ (80018c8 <MX_GPIO_Init+0x188>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2110      	movs	r1, #16
 80017ca:	4840      	ldr	r0, [pc, #256]	@ (80018cc <MX_GPIO_Init+0x18c>)
 80017cc:	f002 fc14 	bl	8003ff8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RC522_RST_Pin | GPIO_PIN_13 | GPIO_PIN_14,
 80017d0:	2200      	movs	r2, #0
 80017d2:	f246 0104 	movw	r1, #24580	@ 0x6004
 80017d6:	483e      	ldr	r0, [pc, #248]	@ (80018d0 <MX_GPIO_Init+0x190>)
 80017d8:	f002 fc0e 	bl	8003ff8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	2180      	movs	r1, #128	@ 0x80
 80017e0:	483c      	ldr	r0, [pc, #240]	@ (80018d4 <MX_GPIO_Init+0x194>)
 80017e2:	f002 fc09 	bl	8003ff8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80017e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4835      	ldr	r0, [pc, #212]	@ (80018d4 <MX_GPIO_Init+0x194>)
 80017fe:	f002 fa5f 	bl	8003cc0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin
	 BUTTON4_Pin BUTTON5_Pin BUTTON6_Pin DHT_Pin */
	GPIO_InitStruct.Pin = BUTTON0_Pin | BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin
 8001802:	f240 437f 	movw	r3, #1151	@ 0x47f
 8001806:	617b      	str	r3, [r7, #20]
			| BUTTON4_Pin | BUTTON5_Pin | BUTTON6_Pin | DHT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	482f      	ldr	r0, [pc, #188]	@ (80018d4 <MX_GPIO_Init+0x194>)
 8001818:	f002 fa52 	bl	8003cc0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800181c:	2310      	movs	r3, #16
 800181e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	4826      	ldr	r0, [pc, #152]	@ (80018cc <MX_GPIO_Init+0x18c>)
 8001834:	f002 fa44 	bl	8003cc0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PIR_Pin */
	GPIO_InitStruct.Pin = PIR_Pin;
 8001838:	2302      	movs	r3, #2
 800183a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800183c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001840:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4820      	ldr	r0, [pc, #128]	@ (80018d0 <MX_GPIO_Init+0x190>)
 800184e:	f002 fa37 	bl	8003cc0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RC522_RST_Pin PB13 PB14 */
	GPIO_InitStruct.Pin = RC522_RST_Pin | GPIO_PIN_13 | GPIO_PIN_14;
 8001852:	f246 0304 	movw	r3, #24580	@ 0x6004
 8001856:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	4819      	ldr	r0, [pc, #100]	@ (80018d0 <MX_GPIO_Init+0x190>)
 800186c:	f002 fa28 	bl	8003cc0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	4813      	ldr	r0, [pc, #76]	@ (80018d4 <MX_GPIO_Init+0x194>)
 8001888:	f002 fa1a 	bl	8003cc0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 800188c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001890:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800189e:	2307      	movs	r3, #7
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4808      	ldr	r0, [pc, #32]	@ (80018cc <MX_GPIO_Init+0x18c>)
 80018aa:	f002 fa09 	bl	8003cc0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	2007      	movs	r0, #7
 80018b4:	f002 f93b 	bl	8003b2e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80018b8:	2007      	movs	r0, #7
 80018ba:	f002 f954 	bl	8003b66 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80018be:	bf00      	nop
 80018c0:	3728      	adds	r7, #40	@ 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40020800 	.word	0x40020800

080018d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 1ms 마다 호출
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 80018e0:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a13      	ldr	r2, [pc, #76]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80018e8:	6013      	str	r3, [r2, #0]
	if (tim3Cnt >= 1000) { // 1ms * 1000 = 1Sec
 80018ea:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018f2:	db0a      	blt.n	800190a <HAL_TIM_PeriodElapsedCallback+0x32>
		tim3Flag1Sec = 1;
 80018f4:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a0e      	ldr	r2, [pc, #56]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001902:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
	}
	if (tim3Sec % 5 == 0) {
 800190a:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800190c:	6819      	ldr	r1, [r3, #0]
 800190e:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001910:	fba3 2301 	umull	r2, r3, r3, r1
 8001914:	089a      	lsrs	r2, r3, #2
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	1aca      	subs	r2, r1, r3
 800191e:	2a00      	cmp	r2, #0
 8001920:	d102      	bne.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x50>
		tim3Flag5Sec = 1;
 8001922:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]
	}
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	20000c78 	.word	0x20000c78
 8001938:	20000b70 	.word	0x20000b70
 800193c:	20000b74 	.word	0x20000b74
 8001940:	cccccccd 	.word	0xcccccccd
 8001944:	20000b78 	.word	0x20000b78

08001948 <room_status_set>:

void room_status_set() {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++) {
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	e0da      	b.n	8001b0a <room_status_set+0x1c2>
		button_state[i] = HAL_GPIO_ReadPin(GPIOC, button_pins[i]);
 8001954:	4a71      	ldr	r2, [pc, #452]	@ (8001b1c <room_status_set+0x1d4>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800195c:	4619      	mov	r1, r3
 800195e:	4870      	ldr	r0, [pc, #448]	@ (8001b20 <room_status_set+0x1d8>)
 8001960:	f002 fb32 	bl	8003fc8 <HAL_GPIO_ReadPin>
 8001964:	4603      	mov	r3, r0
 8001966:	4619      	mov	r1, r3
 8001968:	4a6e      	ldr	r2, [pc, #440]	@ (8001b24 <room_status_set+0x1dc>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if (last_button_state[i] == 0 && button_state[i] == 1
 8001970:	4a6d      	ldr	r2, [pc, #436]	@ (8001b28 <room_status_set+0x1e0>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001978:	2b00      	cmp	r3, #0
 800197a:	f040 80bb 	bne.w	8001af4 <room_status_set+0x1ac>
 800197e:	4a69      	ldr	r2, [pc, #420]	@ (8001b24 <room_status_set+0x1dc>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	2b01      	cmp	r3, #1
 8001988:	f040 80b4 	bne.w	8001af4 <room_status_set+0x1ac>
				&& authentication_flag == 1) {
 800198c:	4b67      	ldr	r3, [pc, #412]	@ (8001b2c <room_status_set+0x1e4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	f040 80af 	bne.w	8001af4 <room_status_set+0x1ac>
			switch (i) {
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b05      	cmp	r3, #5
 800199a:	f200 80ab 	bhi.w	8001af4 <room_status_set+0x1ac>
 800199e:	a201      	add	r2, pc, #4	@ (adr r2, 80019a4 <room_status_set+0x5c>)
 80019a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a4:	080019bd 	.word	0x080019bd
 80019a8:	080019f1 	.word	0x080019f1
 80019ac:	08001a25 	.word	0x08001a25
 80019b0:	08001a59 	.word	0x08001a59
 80019b4:	08001a8d 	.word	0x08001a8d
 80019b8:	08001ac1 	.word	0x08001ac1
			case 0:
				printf("button : %d\r\n", i);
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	485c      	ldr	r0, [pc, #368]	@ (8001b30 <room_status_set+0x1e8>)
 80019c0:	f006 fb2a 	bl	8008018 <iprintf>
				sprintf(current_room_status.room_status, "%s",
 80019c4:	4a5b      	ldr	r2, [pc, #364]	@ (8001b34 <room_status_set+0x1ec>)
 80019c6:	495c      	ldr	r1, [pc, #368]	@ (8001b38 <room_status_set+0x1f0>)
 80019c8:	485c      	ldr	r0, [pc, #368]	@ (8001b3c <room_status_set+0x1f4>)
 80019ca:	f006 fb9d 	bl	8008108 <siprintf>
						"In Room        ");
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@IN\n", ROOM_NUMBER);
 80019ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001b40 <room_status_set+0x1f8>)
 80019d0:	495c      	ldr	r1, [pc, #368]	@ (8001b44 <room_status_set+0x1fc>)
 80019d2:	485d      	ldr	r0, [pc, #372]	@ (8001b48 <room_status_set+0x200>)
 80019d4:	f006 fb98 	bl	8008108 <siprintf>
				esp_send_data(sendBuf);
 80019d8:	485b      	ldr	r0, [pc, #364]	@ (8001b48 <room_status_set+0x200>)
 80019da:	f7ff fb09 	bl	8000ff0 <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80019de:	2201      	movs	r2, #1
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	484f      	ldr	r0, [pc, #316]	@ (8001b20 <room_status_set+0x1d8>)
 80019e4:	f002 fb08 	bl	8003ff8 <HAL_GPIO_WritePin>
				door_state = 1;
 80019e8:	4b58      	ldr	r3, [pc, #352]	@ (8001b4c <room_status_set+0x204>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]
				break;
 80019ee:	e081      	b.n	8001af4 <room_status_set+0x1ac>
			case 1:
				printf("button : %d\r\n", i);
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	484f      	ldr	r0, [pc, #316]	@ (8001b30 <room_status_set+0x1e8>)
 80019f4:	f006 fb10 	bl	8008018 <iprintf>
				sprintf(current_room_status.room_status, "%s",
 80019f8:	4a55      	ldr	r2, [pc, #340]	@ (8001b50 <room_status_set+0x208>)
 80019fa:	494f      	ldr	r1, [pc, #316]	@ (8001b38 <room_status_set+0x1f0>)
 80019fc:	484f      	ldr	r0, [pc, #316]	@ (8001b3c <room_status_set+0x1f4>)
 80019fe:	f006 fb83 	bl	8008108 <siprintf>
						"Lecture        ");
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@LEC\n", ROOM_NUMBER);
 8001a02:	4a4f      	ldr	r2, [pc, #316]	@ (8001b40 <room_status_set+0x1f8>)
 8001a04:	4953      	ldr	r1, [pc, #332]	@ (8001b54 <room_status_set+0x20c>)
 8001a06:	4850      	ldr	r0, [pc, #320]	@ (8001b48 <room_status_set+0x200>)
 8001a08:	f006 fb7e 	bl	8008108 <siprintf>
				esp_send_data(sendBuf);
 8001a0c:	484e      	ldr	r0, [pc, #312]	@ (8001b48 <room_status_set+0x200>)
 8001a0e:	f7ff faef 	bl	8000ff0 <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2180      	movs	r1, #128	@ 0x80
 8001a16:	4842      	ldr	r0, [pc, #264]	@ (8001b20 <room_status_set+0x1d8>)
 8001a18:	f002 faee 	bl	8003ff8 <HAL_GPIO_WritePin>
				door_state = 0;
 8001a1c:	4b4b      	ldr	r3, [pc, #300]	@ (8001b4c <room_status_set+0x204>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
				break;
 8001a22:	e067      	b.n	8001af4 <room_status_set+0x1ac>
			case 2:
				printf("button : %d\r\n", i);
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4842      	ldr	r0, [pc, #264]	@ (8001b30 <room_status_set+0x1e8>)
 8001a28:	f006 faf6 	bl	8008018 <iprintf>
				sprintf(current_room_status.room_status, "%s",
 8001a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b58 <room_status_set+0x210>)
 8001a2e:	4942      	ldr	r1, [pc, #264]	@ (8001b38 <room_status_set+0x1f0>)
 8001a30:	4842      	ldr	r0, [pc, #264]	@ (8001b3c <room_status_set+0x1f4>)
 8001a32:	f006 fb69 	bl	8008108 <siprintf>
						"Vacation       ");
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@VAC\n", ROOM_NUMBER);
 8001a36:	4a42      	ldr	r2, [pc, #264]	@ (8001b40 <room_status_set+0x1f8>)
 8001a38:	4948      	ldr	r1, [pc, #288]	@ (8001b5c <room_status_set+0x214>)
 8001a3a:	4843      	ldr	r0, [pc, #268]	@ (8001b48 <room_status_set+0x200>)
 8001a3c:	f006 fb64 	bl	8008108 <siprintf>
				esp_send_data(sendBuf);
 8001a40:	4841      	ldr	r0, [pc, #260]	@ (8001b48 <room_status_set+0x200>)
 8001a42:	f7ff fad5 	bl	8000ff0 <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2180      	movs	r1, #128	@ 0x80
 8001a4a:	4835      	ldr	r0, [pc, #212]	@ (8001b20 <room_status_set+0x1d8>)
 8001a4c:	f002 fad4 	bl	8003ff8 <HAL_GPIO_WritePin>
				door_state = 0;
 8001a50:	4b3e      	ldr	r3, [pc, #248]	@ (8001b4c <room_status_set+0x204>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
				break;
 8001a56:	e04d      	b.n	8001af4 <room_status_set+0x1ac>
			case 3:
				printf("button : %d\r\n", i);
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4835      	ldr	r0, [pc, #212]	@ (8001b30 <room_status_set+0x1e8>)
 8001a5c:	f006 fadc 	bl	8008018 <iprintf>
				sprintf(current_room_status.room_status, "%s",
 8001a60:	4a3f      	ldr	r2, [pc, #252]	@ (8001b60 <room_status_set+0x218>)
 8001a62:	4935      	ldr	r1, [pc, #212]	@ (8001b38 <room_status_set+0x1f0>)
 8001a64:	4835      	ldr	r0, [pc, #212]	@ (8001b3c <room_status_set+0x1f4>)
 8001a66:	f006 fb4f 	bl	8008108 <siprintf>
						"Meeting        ");
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@MTG\n", ROOM_NUMBER);
 8001a6a:	4a35      	ldr	r2, [pc, #212]	@ (8001b40 <room_status_set+0x1f8>)
 8001a6c:	493d      	ldr	r1, [pc, #244]	@ (8001b64 <room_status_set+0x21c>)
 8001a6e:	4836      	ldr	r0, [pc, #216]	@ (8001b48 <room_status_set+0x200>)
 8001a70:	f006 fb4a 	bl	8008108 <siprintf>
				esp_send_data(sendBuf);
 8001a74:	4834      	ldr	r0, [pc, #208]	@ (8001b48 <room_status_set+0x200>)
 8001a76:	f7ff fabb 	bl	8000ff0 <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2180      	movs	r1, #128	@ 0x80
 8001a7e:	4828      	ldr	r0, [pc, #160]	@ (8001b20 <room_status_set+0x1d8>)
 8001a80:	f002 faba 	bl	8003ff8 <HAL_GPIO_WritePin>
				door_state = 0;
 8001a84:	4b31      	ldr	r3, [pc, #196]	@ (8001b4c <room_status_set+0x204>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
				break;
 8001a8a:	e033      	b.n	8001af4 <room_status_set+0x1ac>
			case 4:
				printf("button : %d\r\n", i);
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4828      	ldr	r0, [pc, #160]	@ (8001b30 <room_status_set+0x1e8>)
 8001a90:	f006 fac2 	bl	8008018 <iprintf>
				sprintf(current_room_status.room_status, "%s",
 8001a94:	4a34      	ldr	r2, [pc, #208]	@ (8001b68 <room_status_set+0x220>)
 8001a96:	4928      	ldr	r1, [pc, #160]	@ (8001b38 <room_status_set+0x1f0>)
 8001a98:	4828      	ldr	r0, [pc, #160]	@ (8001b3c <room_status_set+0x1f4>)
 8001a9a:	f006 fb35 	bl	8008108 <siprintf>
						"Break          ");
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@BRK\n", ROOM_NUMBER);
 8001a9e:	4a28      	ldr	r2, [pc, #160]	@ (8001b40 <room_status_set+0x1f8>)
 8001aa0:	4932      	ldr	r1, [pc, #200]	@ (8001b6c <room_status_set+0x224>)
 8001aa2:	4829      	ldr	r0, [pc, #164]	@ (8001b48 <room_status_set+0x200>)
 8001aa4:	f006 fb30 	bl	8008108 <siprintf>
				esp_send_data(sendBuf);
 8001aa8:	4827      	ldr	r0, [pc, #156]	@ (8001b48 <room_status_set+0x200>)
 8001aaa:	f7ff faa1 	bl	8000ff0 <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2180      	movs	r1, #128	@ 0x80
 8001ab2:	481b      	ldr	r0, [pc, #108]	@ (8001b20 <room_status_set+0x1d8>)
 8001ab4:	f002 faa0 	bl	8003ff8 <HAL_GPIO_WritePin>
				door_state = 0;
 8001ab8:	4b24      	ldr	r3, [pc, #144]	@ (8001b4c <room_status_set+0x204>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
				break;
 8001abe:	e019      	b.n	8001af4 <room_status_set+0x1ac>
			case 5:
				printf("button : %d\r\n", i);
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	481b      	ldr	r0, [pc, #108]	@ (8001b30 <room_status_set+0x1e8>)
 8001ac4:	f006 faa8 	bl	8008018 <iprintf>
				sprintf(current_room_status.room_status, "%s",
 8001ac8:	4a29      	ldr	r2, [pc, #164]	@ (8001b70 <room_status_set+0x228>)
 8001aca:	491b      	ldr	r1, [pc, #108]	@ (8001b38 <room_status_set+0x1f0>)
 8001acc:	481b      	ldr	r0, [pc, #108]	@ (8001b3c <room_status_set+0x1f4>)
 8001ace:	f006 fb1b 	bl	8008108 <siprintf>
						"Off Work       ");
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@OUT\n", ROOM_NUMBER);
 8001ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b40 <room_status_set+0x1f8>)
 8001ad4:	4927      	ldr	r1, [pc, #156]	@ (8001b74 <room_status_set+0x22c>)
 8001ad6:	481c      	ldr	r0, [pc, #112]	@ (8001b48 <room_status_set+0x200>)
 8001ad8:	f006 fb16 	bl	8008108 <siprintf>
				esp_send_data(sendBuf);
 8001adc:	481a      	ldr	r0, [pc, #104]	@ (8001b48 <room_status_set+0x200>)
 8001ade:	f7ff fa87 	bl	8000ff0 <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2180      	movs	r1, #128	@ 0x80
 8001ae6:	480e      	ldr	r0, [pc, #56]	@ (8001b20 <room_status_set+0x1d8>)
 8001ae8:	f002 fa86 	bl	8003ff8 <HAL_GPIO_WritePin>
				door_state = 0;
 8001aec:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <room_status_set+0x204>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
				break;
 8001af2:	bf00      	nop
			}
		}

		last_button_state[i] = button_state[i];
 8001af4:	4a0b      	ldr	r2, [pc, #44]	@ (8001b24 <room_status_set+0x1dc>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001afc:	490a      	ldr	r1, [pc, #40]	@ (8001b28 <room_status_set+0x1e0>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 6; i++) {
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3301      	adds	r3, #1
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b05      	cmp	r3, #5
 8001b0e:	f77f af21 	ble.w	8001954 <room_status_set+0xc>
	}
}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	08009ae0 	.word	0x08009ae0
 8001b20:	40020800 	.word	0x40020800
 8001b24:	20000b18 	.word	0x20000b18
 8001b28:	20000b30 	.word	0x20000b30
 8001b2c:	20000b94 	.word	0x20000b94
 8001b30:	080096f0 	.word	0x080096f0
 8001b34:	08009700 	.word	0x08009700
 8001b38:	08009710 	.word	0x08009710
 8001b3c:	20000004 	.word	0x20000004
 8001b40:	08009714 	.word	0x08009714
 8001b44:	08009718 	.word	0x08009718
 8001b48:	20000b98 	.word	0x20000b98
 8001b4c:	20000bf4 	.word	0x20000bf4
 8001b50:	08009730 	.word	0x08009730
 8001b54:	08009740 	.word	0x08009740
 8001b58:	0800975c 	.word	0x0800975c
 8001b5c:	0800976c 	.word	0x0800976c
 8001b60:	08009788 	.word	0x08009788
 8001b64:	08009798 	.word	0x08009798
 8001b68:	080097b4 	.word	0x080097b4
 8001b6c:	080097c4 	.word	0x080097c4
 8001b70:	080097e0 	.word	0x080097e0
 8001b74:	080097f0 	.word	0x080097f0

08001b78 <room_status_display>:

void room_status_display() {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0

	sprintf(line1, "%s - %s", ROOM_NUMBER, USER_NAME);
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <room_status_display+0x34>)
 8001b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb0 <room_status_display+0x38>)
 8001b80:	490c      	ldr	r1, [pc, #48]	@ (8001bb4 <room_status_display+0x3c>)
 8001b82:	480d      	ldr	r0, [pc, #52]	@ (8001bb8 <room_status_display+0x40>)
 8001b84:	f006 fac0 	bl	8008108 <siprintf>
	// sprintf(line2, "%s", "LEC");
	sprintf(line2, "%s", current_room_status.room_status);
 8001b88:	4a0c      	ldr	r2, [pc, #48]	@ (8001bbc <room_status_display+0x44>)
 8001b8a:	490d      	ldr	r1, [pc, #52]	@ (8001bc0 <room_status_display+0x48>)
 8001b8c:	480d      	ldr	r0, [pc, #52]	@ (8001bc4 <room_status_display+0x4c>)
 8001b8e:	f006 fabb 	bl	8008108 <siprintf>

	LCD_writeStringXY(0, 0, line1);
 8001b92:	4a09      	ldr	r2, [pc, #36]	@ (8001bb8 <room_status_display+0x40>)
 8001b94:	2100      	movs	r1, #0
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7fe fe67 	bl	800086a <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, line2);
 8001b9c:	4a09      	ldr	r2, [pc, #36]	@ (8001bc4 <room_status_display+0x4c>)
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7fe fe62 	bl	800086a <LCD_writeStringXY>
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	0800980c 	.word	0x0800980c
 8001bb0:	08009714 	.word	0x08009714
 8001bb4:	08009814 	.word	0x08009814
 8001bb8:	20000b48 	.word	0x20000b48
 8001bbc:	20000004 	.word	0x20000004
 8001bc0:	08009710 	.word	0x08009710
 8001bc4:	20000b5c 	.word	0x20000b5c

08001bc8 <user_authentication>:
//			LCD_writeStringXY(1, 0, line2);
//		}
//	}
//}

void user_authentication() {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af02      	add	r7, sp, #8
	if (MFRC522_Check(cardID) == MI_OK) {
 8001bce:	4849      	ldr	r0, [pc, #292]	@ (8001cf4 <user_authentication+0x12c>)
 8001bd0:	f000 fe3e 	bl	8002850 <MFRC522_Check>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 8088 	bne.w	8001cec <user_authentication+0x124>
		sprintf(uid_str, "%02X%02X%02X%02X", cardID[0], cardID[1], cardID[2],
 8001bdc:	4b45      	ldr	r3, [pc, #276]	@ (8001cf4 <user_authentication+0x12c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	4b44      	ldr	r3, [pc, #272]	@ (8001cf4 <user_authentication+0x12c>)
 8001be4:	785b      	ldrb	r3, [r3, #1]
 8001be6:	4618      	mov	r0, r3
 8001be8:	4b42      	ldr	r3, [pc, #264]	@ (8001cf4 <user_authentication+0x12c>)
 8001bea:	789b      	ldrb	r3, [r3, #2]
 8001bec:	461a      	mov	r2, r3
				cardID[3]);
 8001bee:	4b41      	ldr	r3, [pc, #260]	@ (8001cf4 <user_authentication+0x12c>)
 8001bf0:	78db      	ldrb	r3, [r3, #3]
		sprintf(uid_str, "%02X%02X%02X%02X", cardID[0], cardID[1], cardID[2],
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	9200      	str	r2, [sp, #0]
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	460a      	mov	r2, r1
 8001bfa:	493f      	ldr	r1, [pc, #252]	@ (8001cf8 <user_authentication+0x130>)
 8001bfc:	483f      	ldr	r0, [pc, #252]	@ (8001cfc <user_authentication+0x134>)
 8001bfe:	f006 fa83 	bl	8008108 <siprintf>
		printf("Card UID: %s\r\n", uid_str);
 8001c02:	493e      	ldr	r1, [pc, #248]	@ (8001cfc <user_authentication+0x134>)
 8001c04:	483e      	ldr	r0, [pc, #248]	@ (8001d00 <user_authentication+0x138>)
 8001c06:	f006 fa07 	bl	8008018 <iprintf>

		// SQL 클라이언트로 인증 요청 전송
		sprintf(sendBuf, "[PRJ_SQL]CERT@%s@%s\n", ROOM_NUMBER, uid_str);
 8001c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8001cfc <user_authentication+0x134>)
 8001c0c:	4a3d      	ldr	r2, [pc, #244]	@ (8001d04 <user_authentication+0x13c>)
 8001c0e:	493e      	ldr	r1, [pc, #248]	@ (8001d08 <user_authentication+0x140>)
 8001c10:	483e      	ldr	r0, [pc, #248]	@ (8001d0c <user_authentication+0x144>)
 8001c12:	f006 fa79 	bl	8008108 <siprintf>
		esp_send_data(sendBuf);
 8001c16:	483d      	ldr	r0, [pc, #244]	@ (8001d0c <user_authentication+0x144>)
 8001c18:	f7ff f9ea 	bl	8000ff0 <esp_send_data>
		printf("Send to SQL client: %s\r\n", sendBuf);
 8001c1c:	493b      	ldr	r1, [pc, #236]	@ (8001d0c <user_authentication+0x144>)
 8001c1e:	483c      	ldr	r0, [pc, #240]	@ (8001d10 <user_authentication+0x148>)
 8001c20:	f006 f9fa 	bl	8008018 <iprintf>

		// 응답 대기 타이머 시작
		int wait_start_time = tim3Sec;
 8001c24:	4b3b      	ldr	r3, [pc, #236]	@ (8001d14 <user_authentication+0x14c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	607b      	str	r3, [r7, #4]
		int timeout_sec = 2;  // 최대 대기 시간 (초)
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	603b      	str	r3, [r7, #0]

		while ((tim3Sec - wait_start_time) < timeout_sec) {
 8001c2e:	e038      	b.n	8001ca2 <user_authentication+0xda>
			if (strstr((char*) cb_data.buf, "[PRJ_SQL]CERT@OK")) {
 8001c30:	4939      	ldr	r1, [pc, #228]	@ (8001d18 <user_authentication+0x150>)
 8001c32:	483a      	ldr	r0, [pc, #232]	@ (8001d1c <user_authentication+0x154>)
 8001c34:	f006 fbe6 	bl	8008404 <strstr>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d015      	beq.n	8001c6a <user_authentication+0xa2>
				authentication_flag = 1;
 8001c3e:	4b38      	ldr	r3, [pc, #224]	@ (8001d20 <user_authentication+0x158>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
				auth_start_time = tim3Sec;
 8001c44:	4b33      	ldr	r3, [pc, #204]	@ (8001d14 <user_authentication+0x14c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b36      	ldr	r3, [pc, #216]	@ (8001d24 <user_authentication+0x15c>)
 8001c4c:	601a      	str	r2, [r3, #0]
				printf("인증성공!\r\n");
 8001c4e:	4836      	ldr	r0, [pc, #216]	@ (8001d28 <user_authentication+0x160>)
 8001c50:	f006 fa52 	bl	80080f8 <puts>
				sprintf(line2, "%s", "Success!!");
 8001c54:	4a35      	ldr	r2, [pc, #212]	@ (8001d2c <user_authentication+0x164>)
 8001c56:	4936      	ldr	r1, [pc, #216]	@ (8001d30 <user_authentication+0x168>)
 8001c58:	4836      	ldr	r0, [pc, #216]	@ (8001d34 <user_authentication+0x16c>)
 8001c5a:	f006 fa55 	bl	8008108 <siprintf>
				LCD_writeStringXY(1, 0, line2);
 8001c5e:	4a35      	ldr	r2, [pc, #212]	@ (8001d34 <user_authentication+0x16c>)
 8001c60:	2100      	movs	r1, #0
 8001c62:	2001      	movs	r0, #1
 8001c64:	f7fe fe01 	bl	800086a <LCD_writeStringXY>

				goto auth_done;
 8001c68:	e036      	b.n	8001cd8 <user_authentication+0x110>
			} else if (strstr((char*) cb_data.buf, "[PRJ_SQL]CERT@NO")) {
 8001c6a:	4933      	ldr	r1, [pc, #204]	@ (8001d38 <user_authentication+0x170>)
 8001c6c:	482b      	ldr	r0, [pc, #172]	@ (8001d1c <user_authentication+0x154>)
 8001c6e:	f006 fbc9 	bl	8008404 <strstr>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d014      	beq.n	8001ca2 <user_authentication+0xda>
				authentication_flag = 0;
 8001c78:	4b29      	ldr	r3, [pc, #164]	@ (8001d20 <user_authentication+0x158>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
				auth_start_time = -1;
 8001c7e:	4b29      	ldr	r3, [pc, #164]	@ (8001d24 <user_authentication+0x15c>)
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	601a      	str	r2, [r3, #0]
				printf("인증실패!\r\n");
 8001c86:	482d      	ldr	r0, [pc, #180]	@ (8001d3c <user_authentication+0x174>)
 8001c88:	f006 fa36 	bl	80080f8 <puts>
				sprintf(line2, "%s", "Failed!!");
 8001c8c:	4a2c      	ldr	r2, [pc, #176]	@ (8001d40 <user_authentication+0x178>)
 8001c8e:	4928      	ldr	r1, [pc, #160]	@ (8001d30 <user_authentication+0x168>)
 8001c90:	4828      	ldr	r0, [pc, #160]	@ (8001d34 <user_authentication+0x16c>)
 8001c92:	f006 fa39 	bl	8008108 <siprintf>
				LCD_writeStringXY(1, 0, line2);
 8001c96:	4a27      	ldr	r2, [pc, #156]	@ (8001d34 <user_authentication+0x16c>)
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f7fe fde5 	bl	800086a <LCD_writeStringXY>

				goto auth_done;
 8001ca0:	e01a      	b.n	8001cd8 <user_authentication+0x110>
		while ((tim3Sec - wait_start_time) < timeout_sec) {
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <user_authentication+0x14c>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	1ad2      	subs	r2, r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d3bf      	bcc.n	8001c30 <user_authentication+0x68>
			}
		}

		// 응답 없음 (타임아웃)
		authentication_flag = 0;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <user_authentication+0x158>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
		auth_start_time = -1;
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <user_authentication+0x15c>)
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	601a      	str	r2, [r3, #0]
		printf("인증응답 없음!\r\n");
 8001cbe:	4821      	ldr	r0, [pc, #132]	@ (8001d44 <user_authentication+0x17c>)
 8001cc0:	f006 fa1a 	bl	80080f8 <puts>
		sprintf(line2, "%s", "No Resp!!");
 8001cc4:	4a20      	ldr	r2, [pc, #128]	@ (8001d48 <user_authentication+0x180>)
 8001cc6:	491a      	ldr	r1, [pc, #104]	@ (8001d30 <user_authentication+0x168>)
 8001cc8:	481a      	ldr	r0, [pc, #104]	@ (8001d34 <user_authentication+0x16c>)
 8001cca:	f006 fa1d 	bl	8008108 <siprintf>
		LCD_writeStringXY(1, 0, line2);
 8001cce:	4a19      	ldr	r2, [pc, #100]	@ (8001d34 <user_authentication+0x16c>)
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f7fe fdc9 	bl	800086a <LCD_writeStringXY>

		auth_done:
		// 수신 버퍼 정리
		memset(cb_data.buf, 0, sizeof(cb_data.buf));
 8001cd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cdc:	2100      	movs	r1, #0
 8001cde:	480f      	ldr	r0, [pc, #60]	@ (8001d1c <user_authentication+0x154>)
 8001ce0:	f006 fb0c 	bl	80082fc <memset>
		cb_data.length = 0;
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <user_authentication+0x154>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
	}
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000b7c 	.word	0x20000b7c
 8001cf8:	0800981c 	.word	0x0800981c
 8001cfc:	20000b84 	.word	0x20000b84
 8001d00:	08009830 	.word	0x08009830
 8001d04:	08009714 	.word	0x08009714
 8001d08:	08009840 	.word	0x08009840
 8001d0c:	20000b98 	.word	0x20000b98
 8001d10:	08009858 	.word	0x08009858
 8001d14:	20000b74 	.word	0x20000b74
 8001d18:	08009874 	.word	0x08009874
 8001d1c:	200004f0 	.word	0x200004f0
 8001d20:	20000b94 	.word	0x20000b94
 8001d24:	20000018 	.word	0x20000018
 8001d28:	08009888 	.word	0x08009888
 8001d2c:	08009898 	.word	0x08009898
 8001d30:	08009710 	.word	0x08009710
 8001d34:	20000b5c 	.word	0x20000b5c
 8001d38:	080098a4 	.word	0x080098a4
 8001d3c:	080098b8 	.word	0x080098b8
 8001d40:	080098c8 	.word	0x080098c8
 8001d44:	080098d4 	.word	0x080098d4
 8001d48:	080098ec 	.word	0x080098ec

08001d4c <esp_event>:

void esp_event(char *recvBuf) {
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b09d      	sub	sp, #116	@ 0x74
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	667b      	str	r3, [r7, #100]	@ 0x64
	char *pToken;
	char *pArray[ARR_CNT] = { 0 };
 8001d58:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
	char sendBuf[MAX_UART_COMMAND_LEN] = { 0 };
 8001d68:	f107 0308 	add.w	r3, r7, #8
 8001d6c:	2240      	movs	r2, #64	@ 0x40
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f006 fac3 	bl	80082fc <memset>

	strBuff[strlen(recvBuf) - 1] = '\0'; //'\n' cut
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7fe fa3c 	bl	80001f4 <strlen>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	4a9f      	ldr	r2, [pc, #636]	@ (8002000 <esp_event+0x2b4>)
 8001d82:	2100      	movs	r1, #0
 8001d84:	54d1      	strb	r1, [r2, r3]
	printf("\r\nDebug recv : %s\r\n", recvBuf);
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	489e      	ldr	r0, [pc, #632]	@ (8002004 <esp_event+0x2b8>)
 8001d8a:	f006 f945 	bl	8008018 <iprintf>

	pToken = strtok(recvBuf, "[@]");
 8001d8e:	499e      	ldr	r1, [pc, #632]	@ (8002008 <esp_event+0x2bc>)
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f006 fadb 	bl	800834c <strtok>
 8001d96:	6638      	str	r0, [r7, #96]	@ 0x60
	while (pToken != NULL) {
 8001d98:	e011      	b.n	8001dbe <esp_event+0x72>
		pArray[i] = pToken;
 8001d9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	3368      	adds	r3, #104	@ 0x68
 8001da0:	443b      	add	r3, r7
 8001da2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001da4:	f843 2c20 	str.w	r2, [r3, #-32]
		if (++i >= ARR_CNT)
 8001da8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001daa:	3301      	adds	r3, #1
 8001dac:	667b      	str	r3, [r7, #100]	@ 0x64
 8001dae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	dc08      	bgt.n	8001dc6 <esp_event+0x7a>
			break;
		pToken = strtok(NULL, "[@]");
 8001db4:	4994      	ldr	r1, [pc, #592]	@ (8002008 <esp_event+0x2bc>)
 8001db6:	2000      	movs	r0, #0
 8001db8:	f006 fac8 	bl	800834c <strtok>
 8001dbc:	6638      	str	r0, [r7, #96]	@ 0x60
	while (pToken != NULL) {
 8001dbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1ea      	bne.n	8001d9a <esp_event+0x4e>
 8001dc4:	e000      	b.n	8001dc8 <esp_event+0x7c>
			break;
 8001dc6:	bf00      	nop
	}

	for (int j = 0; j < i; j++) {
 8001dc8:	2300      	movs	r3, #0
 8001dca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001dcc:	e00f      	b.n	8001dee <esp_event+0xa2>
		if (pArray[j] == NULL) {
 8001dce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	3368      	adds	r3, #104	@ 0x68
 8001dd4:	443b      	add	r3, r7
 8001dd6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d104      	bne.n	8001de8 <esp_event+0x9c>
			printf("Warning: NULL in pArray[%d]\r\n", j);
 8001dde:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001de0:	488a      	ldr	r0, [pc, #552]	@ (800200c <esp_event+0x2c0>)
 8001de2:	f006 f919 	bl	8008018 <iprintf>
			return;
 8001de6:	e15e      	b.n	80020a6 <esp_event+0x35a>
	for (int j = 0; j < i; j++) {
 8001de8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dea:	3301      	adds	r3, #1
 8001dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001dee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001df2:	429a      	cmp	r2, r3
 8001df4:	dbeb      	blt.n	8001dce <esp_event+0x82>
		}
	}

	if (i < 2) {
 8001df6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	dc04      	bgt.n	8001e06 <esp_event+0xba>
		printf("Parsing error: too few tokens (%d)\r\n", i);
 8001dfc:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001dfe:	4884      	ldr	r0, [pc, #528]	@ (8002010 <esp_event+0x2c4>)
 8001e00:	f006 f90a 	bl	8008018 <iprintf>
		return;
 8001e04:	e14f      	b.n	80020a6 <esp_event+0x35a>
	}

	if (i == 2) {
 8001e06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d11a      	bne.n	8001e42 <esp_event+0xf6>
		ppAArray.client = pArray[0];
 8001e0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e0e:	4a81      	ldr	r2, [pc, #516]	@ (8002014 <esp_event+0x2c8>)
 8001e10:	6013      	str	r3, [r2, #0]
		ppAArray.door = pArray[1];
 8001e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e14:	4a7f      	ldr	r2, [pc, #508]	@ (8002014 <esp_event+0x2c8>)
 8001e16:	6053      	str	r3, [r2, #4]

		if (!strcmp(pArray[1], "UNLOCK")) {
 8001e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e1a:	497f      	ldr	r1, [pc, #508]	@ (8002018 <esp_event+0x2cc>)
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe f9df 	bl	80001e0 <strcmp>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f040 812d 	bne.w	8002084 <esp_event+0x338>
			sprintf(sendBuf, "[%s]%s\r\n", "PRJ_SQL", ppAArray.door);
 8001e2a:	4b7a      	ldr	r3, [pc, #488]	@ (8002014 <esp_event+0x2c8>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f107 0008 	add.w	r0, r7, #8
 8001e32:	4a7a      	ldr	r2, [pc, #488]	@ (800201c <esp_event+0x2d0>)
 8001e34:	497a      	ldr	r1, [pc, #488]	@ (8002020 <esp_event+0x2d4>)
 8001e36:	f006 f967 	bl	8008108 <siprintf>
			door_state = 1;
 8001e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8002024 <esp_event+0x2d8>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e120      	b.n	8002084 <esp_event+0x338>
		}
	}

	else if (i == 4) {
 8001e42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	f040 80c5 	bne.w	8001fd4 <esp_event+0x288>

		pppAAArray.cclient = pArray[0];
 8001e4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e4c:	4a76      	ldr	r2, [pc, #472]	@ (8002028 <esp_event+0x2dc>)
 8001e4e:	6013      	str	r3, [r2, #0]
		pppAAArray.ssetroom = pArray[1];
 8001e50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e52:	4a75      	ldr	r2, [pc, #468]	@ (8002028 <esp_event+0x2dc>)
 8001e54:	6053      	str	r3, [r2, #4]
		pppAAArray.rroom = pArray[2];
 8001e56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e58:	4a73      	ldr	r2, [pc, #460]	@ (8002028 <esp_event+0x2dc>)
 8001e5a:	6093      	str	r3, [r2, #8]
		pppAAArray.sstatus = pArray[3];
 8001e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e5e:	4a72      	ldr	r2, [pc, #456]	@ (8002028 <esp_event+0x2dc>)
 8001e60:	60d3      	str	r3, [r2, #12]

		if (!strcmp(pppAAArray.ssetroom, "SETROOM")
 8001e62:	4b71      	ldr	r3, [pc, #452]	@ (8002028 <esp_event+0x2dc>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4971      	ldr	r1, [pc, #452]	@ (800202c <esp_event+0x2e0>)
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe f9b9 	bl	80001e0 <strcmp>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f040 8107 	bne.w	8002084 <esp_event+0x338>
				&& !strcmp(pppAAArray.rroom, ROOM_NUMBER)) {
 8001e76:	4b6c      	ldr	r3, [pc, #432]	@ (8002028 <esp_event+0x2dc>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	496d      	ldr	r1, [pc, #436]	@ (8002030 <esp_event+0x2e4>)
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe f9af 	bl	80001e0 <strcmp>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f040 80fd 	bne.w	8002084 <esp_event+0x338>

			if (!strcmp(pppAAArray.sstatus, "IN")) {
 8001e8a:	4b67      	ldr	r3, [pc, #412]	@ (8002028 <esp_event+0x2dc>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	4969      	ldr	r1, [pc, #420]	@ (8002034 <esp_event+0x2e8>)
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe f9a5 	bl	80001e0 <strcmp>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10d      	bne.n	8001eb8 <esp_event+0x16c>
				sprintf(current_room_status.room_status, "%s",
 8001e9c:	4a66      	ldr	r2, [pc, #408]	@ (8002038 <esp_event+0x2ec>)
 8001e9e:	4967      	ldr	r1, [pc, #412]	@ (800203c <esp_event+0x2f0>)
 8001ea0:	4867      	ldr	r0, [pc, #412]	@ (8002040 <esp_event+0x2f4>)
 8001ea2:	f006 f931 	bl	8008108 <siprintf>
						"In Room        ");
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2180      	movs	r1, #128	@ 0x80
 8001eaa:	4866      	ldr	r0, [pc, #408]	@ (8002044 <esp_event+0x2f8>)
 8001eac:	f002 f8a4 	bl	8003ff8 <HAL_GPIO_WritePin>
				door_state = 1;
 8001eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8002024 <esp_event+0x2d8>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	e075      	b.n	8001fa4 <esp_event+0x258>

			} else if (!strcmp(pppAAArray.sstatus, "LEC")) {
 8001eb8:	4b5b      	ldr	r3, [pc, #364]	@ (8002028 <esp_event+0x2dc>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4962      	ldr	r1, [pc, #392]	@ (8002048 <esp_event+0x2fc>)
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe f98e 	bl	80001e0 <strcmp>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10d      	bne.n	8001ee6 <esp_event+0x19a>
				sprintf(current_room_status.room_status, "%s",
 8001eca:	4a60      	ldr	r2, [pc, #384]	@ (800204c <esp_event+0x300>)
 8001ecc:	495b      	ldr	r1, [pc, #364]	@ (800203c <esp_event+0x2f0>)
 8001ece:	485c      	ldr	r0, [pc, #368]	@ (8002040 <esp_event+0x2f4>)
 8001ed0:	f006 f91a 	bl	8008108 <siprintf>
						"Lecture        ");
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2180      	movs	r1, #128	@ 0x80
 8001ed8:	485a      	ldr	r0, [pc, #360]	@ (8002044 <esp_event+0x2f8>)
 8001eda:	f002 f88d 	bl	8003ff8 <HAL_GPIO_WritePin>
				door_state = 0;
 8001ede:	4b51      	ldr	r3, [pc, #324]	@ (8002024 <esp_event+0x2d8>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e05e      	b.n	8001fa4 <esp_event+0x258>

			} else if (!strcmp(pppAAArray.sstatus, "VAC")) {
 8001ee6:	4b50      	ldr	r3, [pc, #320]	@ (8002028 <esp_event+0x2dc>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	4959      	ldr	r1, [pc, #356]	@ (8002050 <esp_event+0x304>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe f977 	bl	80001e0 <strcmp>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10d      	bne.n	8001f14 <esp_event+0x1c8>
				sprintf(current_room_status.room_status, "%s",
 8001ef8:	4a56      	ldr	r2, [pc, #344]	@ (8002054 <esp_event+0x308>)
 8001efa:	4950      	ldr	r1, [pc, #320]	@ (800203c <esp_event+0x2f0>)
 8001efc:	4850      	ldr	r0, [pc, #320]	@ (8002040 <esp_event+0x2f4>)
 8001efe:	f006 f903 	bl	8008108 <siprintf>
						"Vacation       ");
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2180      	movs	r1, #128	@ 0x80
 8001f06:	484f      	ldr	r0, [pc, #316]	@ (8002044 <esp_event+0x2f8>)
 8001f08:	f002 f876 	bl	8003ff8 <HAL_GPIO_WritePin>
				door_state = 0;
 8001f0c:	4b45      	ldr	r3, [pc, #276]	@ (8002024 <esp_event+0x2d8>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e047      	b.n	8001fa4 <esp_event+0x258>

			} else if (!strcmp(pppAAArray.sstatus, "MTG")) {
 8001f14:	4b44      	ldr	r3, [pc, #272]	@ (8002028 <esp_event+0x2dc>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	494f      	ldr	r1, [pc, #316]	@ (8002058 <esp_event+0x30c>)
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe f960 	bl	80001e0 <strcmp>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10d      	bne.n	8001f42 <esp_event+0x1f6>
				sprintf(current_room_status.room_status, "%s",
 8001f26:	4a4d      	ldr	r2, [pc, #308]	@ (800205c <esp_event+0x310>)
 8001f28:	4944      	ldr	r1, [pc, #272]	@ (800203c <esp_event+0x2f0>)
 8001f2a:	4845      	ldr	r0, [pc, #276]	@ (8002040 <esp_event+0x2f4>)
 8001f2c:	f006 f8ec 	bl	8008108 <siprintf>
						"Meeting        ");
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2180      	movs	r1, #128	@ 0x80
 8001f34:	4843      	ldr	r0, [pc, #268]	@ (8002044 <esp_event+0x2f8>)
 8001f36:	f002 f85f 	bl	8003ff8 <HAL_GPIO_WritePin>
				door_state = 0;
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002024 <esp_event+0x2d8>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e030      	b.n	8001fa4 <esp_event+0x258>

			} else if (!strcmp(pppAAArray.sstatus, "BRK")) {
 8001f42:	4b39      	ldr	r3, [pc, #228]	@ (8002028 <esp_event+0x2dc>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	4946      	ldr	r1, [pc, #280]	@ (8002060 <esp_event+0x314>)
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe f949 	bl	80001e0 <strcmp>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10d      	bne.n	8001f70 <esp_event+0x224>
				sprintf(current_room_status.room_status, "%s",
 8001f54:	4a43      	ldr	r2, [pc, #268]	@ (8002064 <esp_event+0x318>)
 8001f56:	4939      	ldr	r1, [pc, #228]	@ (800203c <esp_event+0x2f0>)
 8001f58:	4839      	ldr	r0, [pc, #228]	@ (8002040 <esp_event+0x2f4>)
 8001f5a:	f006 f8d5 	bl	8008108 <siprintf>
						"Break          ");
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2180      	movs	r1, #128	@ 0x80
 8001f62:	4838      	ldr	r0, [pc, #224]	@ (8002044 <esp_event+0x2f8>)
 8001f64:	f002 f848 	bl	8003ff8 <HAL_GPIO_WritePin>
				door_state = 0;
 8001f68:	4b2e      	ldr	r3, [pc, #184]	@ (8002024 <esp_event+0x2d8>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	e019      	b.n	8001fa4 <esp_event+0x258>

			} else if (!strcmp(pppAAArray.sstatus, "OUT")) {
 8001f70:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <esp_event+0x2dc>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	493c      	ldr	r1, [pc, #240]	@ (8002068 <esp_event+0x31c>)
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe f932 	bl	80001e0 <strcmp>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 808c 	bne.w	800209c <esp_event+0x350>
				printf("out!!!!!!!\r\n");
 8001f84:	4839      	ldr	r0, [pc, #228]	@ (800206c <esp_event+0x320>)
 8001f86:	f006 f8b7 	bl	80080f8 <puts>
				sprintf(current_room_status.room_status, "%s",
 8001f8a:	4a39      	ldr	r2, [pc, #228]	@ (8002070 <esp_event+0x324>)
 8001f8c:	492b      	ldr	r1, [pc, #172]	@ (800203c <esp_event+0x2f0>)
 8001f8e:	482c      	ldr	r0, [pc, #176]	@ (8002040 <esp_event+0x2f4>)
 8001f90:	f006 f8ba 	bl	8008108 <siprintf>
						"Off Work       ");
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2180      	movs	r1, #128	@ 0x80
 8001f98:	482a      	ldr	r0, [pc, #168]	@ (8002044 <esp_event+0x2f8>)
 8001f9a:	f002 f82d 	bl	8003ff8 <HAL_GPIO_WritePin>
				door_state = 0;
 8001f9e:	4b21      	ldr	r3, [pc, #132]	@ (8002024 <esp_event+0x2d8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
			} else {
				// 처리할 수 없는 상태일 경우 무시
				return;
			}

			sprintf(sendBuf, "[PRJ_SQL]%s@%s@%s@%s\r\n", pppAAArray.ssetroom,
 8001fa4:	4b20      	ldr	r3, [pc, #128]	@ (8002028 <esp_event+0x2dc>)
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <esp_event+0x2dc>)
 8001faa:	689c      	ldr	r4, [r3, #8]
 8001fac:	4b1e      	ldr	r3, [pc, #120]	@ (8002028 <esp_event+0x2dc>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8002028 <esp_event+0x2dc>)
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	f107 0008 	add.w	r0, r7, #8
 8001fb8:	9201      	str	r2, [sp, #4]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	4623      	mov	r3, r4
 8001fbe:	460a      	mov	r2, r1
 8001fc0:	492c      	ldr	r1, [pc, #176]	@ (8002074 <esp_event+0x328>)
 8001fc2:	f006 f8a1 	bl	8008108 <siprintf>
					pppAAArray.rroom, pppAAArray.sstatus, pppAAArray.cclient);
			printf("client = %s\r\n", pppAAArray.cclient);
 8001fc6:	4b18      	ldr	r3, [pc, #96]	@ (8002028 <esp_event+0x2dc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	482a      	ldr	r0, [pc, #168]	@ (8002078 <esp_event+0x32c>)
 8001fce:	f006 f823 	bl	8008018 <iprintf>
 8001fd2:	e057      	b.n	8002084 <esp_event+0x338>
		}

	}

	else if (!strncmp(pArray[1], " New conn", 8)) {
 8001fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	4928      	ldr	r1, [pc, #160]	@ (800207c <esp_event+0x330>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f006 f9a3 	bl	8008326 <strncmp>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d05c      	beq.n	80020a0 <esp_event+0x354>
		//	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
		return;
	} else if (!strncmp(pArray[1], " Already log", 8)) {
 8001fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fe8:	2208      	movs	r2, #8
 8001fea:	4925      	ldr	r1, [pc, #148]	@ (8002080 <esp_event+0x334>)
 8001fec:	4618      	mov	r0, r3
 8001fee:	f006 f99a 	bl	8008326 <strncmp>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d155      	bne.n	80020a4 <esp_event+0x358>
		// 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
		esp_client_conn();
 8001ff8:	f7fe fed2 	bl	8000da0 <esp_client_conn>
		return;
 8001ffc:	e053      	b.n	80020a6 <esp_event+0x35a>
 8001ffe:	bf00      	nop
 8002000:	20000c38 	.word	0x20000c38
 8002004:	080098f8 	.word	0x080098f8
 8002008:	0800990c 	.word	0x0800990c
 800200c:	08009910 	.word	0x08009910
 8002010:	08009930 	.word	0x08009930
 8002014:	20000bd8 	.word	0x20000bd8
 8002018:	08009958 	.word	0x08009958
 800201c:	08009960 	.word	0x08009960
 8002020:	08009968 	.word	0x08009968
 8002024:	20000bf4 	.word	0x20000bf4
 8002028:	20000be0 	.word	0x20000be0
 800202c:	08009974 	.word	0x08009974
 8002030:	08009714 	.word	0x08009714
 8002034:	0800997c 	.word	0x0800997c
 8002038:	08009700 	.word	0x08009700
 800203c:	08009710 	.word	0x08009710
 8002040:	20000004 	.word	0x20000004
 8002044:	40020800 	.word	0x40020800
 8002048:	08009980 	.word	0x08009980
 800204c:	08009730 	.word	0x08009730
 8002050:	08009984 	.word	0x08009984
 8002054:	0800975c 	.word	0x0800975c
 8002058:	08009988 	.word	0x08009988
 800205c:	08009788 	.word	0x08009788
 8002060:	0800998c 	.word	0x0800998c
 8002064:	080097b4 	.word	0x080097b4
 8002068:	08009990 	.word	0x08009990
 800206c:	08009994 	.word	0x08009994
 8002070:	080097e0 	.word	0x080097e0
 8002074:	080099a0 	.word	0x080099a0
 8002078:	080099b8 	.word	0x080099b8
 800207c:	080099c8 	.word	0x080099c8
 8002080:	080099d4 	.word	0x080099d4
	} else
		return;

	esp_send_data(sendBuf);
 8002084:	f107 0308 	add.w	r3, r7, #8
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe ffb1 	bl	8000ff0 <esp_send_data>
	printf("Debug send : %s\r\n", sendBuf);
 800208e:	f107 0308 	add.w	r3, r7, #8
 8002092:	4619      	mov	r1, r3
 8002094:	4805      	ldr	r0, [pc, #20]	@ (80020ac <esp_event+0x360>)
 8002096:	f005 ffbf 	bl	8008018 <iprintf>
 800209a:	e004      	b.n	80020a6 <esp_event+0x35a>
				return;
 800209c:	bf00      	nop
 800209e:	e002      	b.n	80020a6 <esp_event+0x35a>
		return;
 80020a0:	bf00      	nop
 80020a2:	e000      	b.n	80020a6 <esp_event+0x35a>
		return;
 80020a4:	bf00      	nop
}
 80020a6:	376c      	adds	r7, #108	@ 0x6c
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	080099e4 	.word	0x080099e4

080020b0 <HAL_GPIO_EXTI_Callback>:

// pir
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PIR_Pin) {
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d102      	bne.n	80020c6 <HAL_GPIO_EXTI_Callback+0x16>

		pir_flag = 1;
 80020c0:	4b04      	ldr	r3, [pc, #16]	@ (80020d4 <HAL_GPIO_EXTI_Callback+0x24>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]

	}
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000bf8 	.word	0x20000bf8

080020d8 <PIR_Init>:

void PIR_Init(void) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <PIR_Init+0x60>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f4:	4a10      	ldr	r2, [pc, #64]	@ (8002138 <PIR_Init+0x60>)
 80020f6:	f043 0302 	orr.w	r3, r3, #2
 80020fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002138 <PIR_Init+0x60>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = PIR_Pin;
 8002108:	2302      	movs	r3, #2
 800210a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800210c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002110:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4808      	ldr	r0, [pc, #32]	@ (800213c <PIR_Init+0x64>)
 800211c:	f001 fdd0 	bl	8003cc0 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	2007      	movs	r0, #7
 8002126:	f001 fd02 	bl	8003b2e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800212a:	2007      	movs	r0, #7
 800212c:	f001 fd1b 	bl	8003b66 <HAL_NVIC_EnableIRQ>
}
 8002130:	bf00      	nop
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	40020400 	.word	0x40020400

08002140 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a08      	ldr	r2, [pc, #32]	@ (8002170 <HAL_ADC_ConvCpltCallback+0x30>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d109      	bne.n	8002166 <HAL_ADC_ConvCpltCallback+0x26>
		ADC1ConvertValue = HAL_ADC_GetValue(hadc);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f001 f9b6 	bl	80034c4 <HAL_ADC_GetValue>
 8002158:	4603      	mov	r3, r0
 800215a:	b29a      	uxth	r2, r3
 800215c:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <HAL_ADC_ConvCpltCallback+0x34>)
 800215e:	801a      	strh	r2, [r3, #0]
		adcFlag = 1;                     // 메인 루프에 알림
 8002160:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <HAL_ADC_ConvCpltCallback+0x38>)
 8002162:	2201      	movs	r2, #1
 8002164:	801a      	strh	r2, [r3, #0]
	}
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40012000 	.word	0x40012000
 8002174:	20000c04 	.word	0x20000c04
 8002178:	20000c06 	.word	0x20000c06

0800217c <dht_status_motor>:

void dht_status_motor() {
 800217c:	b590      	push	{r4, r7, lr}
 800217e:	b085      	sub	sp, #20
 8002180:	af02      	add	r7, sp, #8
	dht11Data = DHT11_readData();
 8002182:	4c3d      	ldr	r4, [pc, #244]	@ (8002278 <dht_status_motor+0xfc>)
 8002184:	463b      	mov	r3, r7
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fce0 	bl	8000b4c <DHT11_readData>
 800218c:	4622      	mov	r2, r4
 800218e:	463b      	mov	r3, r7
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	6010      	str	r0, [r2, #0]
 8002194:	889b      	ldrh	r3, [r3, #4]
 8002196:	8093      	strh	r3, [r2, #4]
	if (dht11Data.rh_byte1 != 255) {
 8002198:	4b37      	ldr	r3, [pc, #220]	@ (8002278 <dht_status_motor+0xfc>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2bff      	cmp	r3, #255	@ 0xff
 800219e:	d064      	beq.n	800226a <dht_status_motor+0xee>
		sprintf(dhtbuff, "h: %d%% t: %d.%d'C", dht11Data.rh_byte1,
 80021a0:	4b35      	ldr	r3, [pc, #212]	@ (8002278 <dht_status_motor+0xfc>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
				dht11Data.temp_byte1, dht11Data.temp_byte2);
 80021a6:	4b34      	ldr	r3, [pc, #208]	@ (8002278 <dht_status_motor+0xfc>)
 80021a8:	789b      	ldrb	r3, [r3, #2]
		sprintf(dhtbuff, "h: %d%% t: %d.%d'C", dht11Data.rh_byte1,
 80021aa:	4619      	mov	r1, r3
				dht11Data.temp_byte1, dht11Data.temp_byte2);
 80021ac:	4b32      	ldr	r3, [pc, #200]	@ (8002278 <dht_status_motor+0xfc>)
 80021ae:	78db      	ldrb	r3, [r3, #3]
		sprintf(dhtbuff, "h: %d%% t: %d.%d'C", dht11Data.rh_byte1,
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	460b      	mov	r3, r1
 80021b4:	4931      	ldr	r1, [pc, #196]	@ (800227c <dht_status_motor+0x100>)
 80021b6:	4832      	ldr	r0, [pc, #200]	@ (8002280 <dht_status_motor+0x104>)
 80021b8:	f005 ffa6 	bl	8008108 <siprintf>
		printf("%s\r\n", dhtbuff);
 80021bc:	4930      	ldr	r1, [pc, #192]	@ (8002280 <dht_status_motor+0x104>)
 80021be:	4831      	ldr	r0, [pc, #196]	@ (8002284 <dht_status_motor+0x108>)
 80021c0:	f005 ff2a 	bl	8008018 <iprintf>
		printf("dht11Data.rh_byte1 = %d \r\n", dht11Data.rh_byte1);
 80021c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <dht_status_motor+0xfc>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	482f      	ldr	r0, [pc, #188]	@ (8002288 <dht_status_motor+0x10c>)
 80021cc:	f005 ff24 	bl	8008018 <iprintf>

		if (dht11Data.rh_byte1 >= 60 || dht11Data.temp_byte1 > 30)
 80021d0:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <dht_status_motor+0xfc>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b3b      	cmp	r3, #59	@ 0x3b
 80021d6:	d803      	bhi.n	80021e0 <dht_status_motor+0x64>
 80021d8:	4b27      	ldr	r3, [pc, #156]	@ (8002278 <dht_status_motor+0xfc>)
 80021da:	789b      	ldrb	r3, [r3, #2]
 80021dc:	2b1e      	cmp	r3, #30
 80021de:	d903      	bls.n	80021e8 <dht_status_motor+0x6c>
			fanFlag = 1;
 80021e0:	4b2a      	ldr	r3, [pc, #168]	@ (800228c <dht_status_motor+0x110>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e002      	b.n	80021ee <dht_status_motor+0x72>
		else
			fanFlag = 0;
 80021e8:	4b28      	ldr	r3, [pc, #160]	@ (800228c <dht_status_motor+0x110>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]

		if (fanFlag != last_fanFlag) {
 80021ee:	4b27      	ldr	r3, [pc, #156]	@ (800228c <dht_status_motor+0x110>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b27      	ldr	r3, [pc, #156]	@ (8002290 <dht_status_motor+0x114>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d03a      	beq.n	8002270 <dht_status_motor+0xf4>
			if (fanFlag == 1) {
 80021fa:	4b24      	ldr	r3, [pc, #144]	@ (800228c <dht_status_motor+0x110>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d115      	bne.n	800222e <dht_status_motor+0xb2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8002202:	2201      	movs	r2, #1
 8002204:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002208:	4822      	ldr	r0, [pc, #136]	@ (8002294 <dht_status_motor+0x118>)
 800220a:	f001 fef5 	bl	8003ff8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800220e:	2201      	movs	r2, #1
 8002210:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002214:	481f      	ldr	r0, [pc, #124]	@ (8002294 <dht_status_motor+0x118>)
 8002216:	f001 feef 	bl	8003ff8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800221a:	2200      	movs	r2, #0
 800221c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002220:	481c      	ldr	r0, [pc, #112]	@ (8002294 <dht_status_motor+0x118>)
 8002222:	f001 fee9 	bl	8003ff8 <HAL_GPIO_WritePin>
				printf("fan on!!\r\n");
 8002226:	481c      	ldr	r0, [pc, #112]	@ (8002298 <dht_status_motor+0x11c>)
 8002228:	f005 ff66 	bl	80080f8 <puts>
 800222c:	e018      	b.n	8002260 <dht_status_motor+0xe4>
			} else if (fanFlag == 0) {
 800222e:	4b17      	ldr	r3, [pc, #92]	@ (800228c <dht_status_motor+0x110>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d114      	bne.n	8002260 <dht_status_motor+0xe4>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800223c:	4815      	ldr	r0, [pc, #84]	@ (8002294 <dht_status_motor+0x118>)
 800223e:	f001 fedb 	bl	8003ff8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002248:	4812      	ldr	r0, [pc, #72]	@ (8002294 <dht_status_motor+0x118>)
 800224a:	f001 fed5 	bl	8003ff8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002254:	480f      	ldr	r0, [pc, #60]	@ (8002294 <dht_status_motor+0x118>)
 8002256:	f001 fecf 	bl	8003ff8 <HAL_GPIO_WritePin>
				printf("fan off!!\r\n");
 800225a:	4810      	ldr	r0, [pc, #64]	@ (800229c <dht_status_motor+0x120>)
 800225c:	f005 ff4c 	bl	80080f8 <puts>
			}
			last_fanFlag = fanFlag;
 8002260:	4b0a      	ldr	r3, [pc, #40]	@ (800228c <dht_status_motor+0x110>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0a      	ldr	r2, [pc, #40]	@ (8002290 <dht_status_motor+0x114>)
 8002266:	6013      	str	r3, [r2, #0]
		}
	} else
		printf("DHT11 response error\r\n");

}
 8002268:	e002      	b.n	8002270 <dht_status_motor+0xf4>
		printf("DHT11 response error\r\n");
 800226a:	480d      	ldr	r0, [pc, #52]	@ (80022a0 <dht_status_motor+0x124>)
 800226c:	f005 ff44 	bl	80080f8 <puts>
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}
 8002278:	20000b10 	.word	0x20000b10
 800227c:	080099f8 	.word	0x080099f8
 8002280:	20000c14 	.word	0x20000c14
 8002284:	08009a0c 	.word	0x08009a0c
 8002288:	08009a14 	.word	0x08009a14
 800228c:	20000c00 	.word	0x20000c00
 8002290:	20000bfc 	.word	0x20000bfc
 8002294:	40020400 	.word	0x40020400
 8002298:	08009a30 	.word	0x08009a30
 800229c:	08009a3c 	.word	0x08009a3c
 80022a0:	08009a48 	.word	0x08009a48

080022a4 <cds_status_servo>:

void cds_status_servo() {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
	//ADC
	if (adcFlag) {
 80022a8:	4b24      	ldr	r3, [pc, #144]	@ (800233c <cds_status_servo+0x98>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d01a      	beq.n	80022e8 <cds_status_servo+0x44>
		adcFlag = 0;
 80022b2:	4b22      	ldr	r3, [pc, #136]	@ (800233c <cds_status_servo+0x98>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	801a      	strh	r2, [r3, #0]
		if (ADC1ConvertValue > 1500) {
 80022b8:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <cds_status_servo+0x9c>)
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d903      	bls.n	80022ce <cds_status_servo+0x2a>
			curtainFlag = 1;
 80022c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002344 <cds_status_servo+0xa0>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e002      	b.n	80022d4 <cds_status_servo+0x30>
		} else {
			curtainFlag = 0;
 80022ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002344 <cds_status_servo+0xa0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
		}
		printf("CDS : %d\r\n", ADC1ConvertValue);
 80022d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <cds_status_servo+0x9c>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	4619      	mov	r1, r3
 80022dc:	481a      	ldr	r0, [pc, #104]	@ (8002348 <cds_status_servo+0xa4>)
 80022de:	f005 fe9b 	bl	8008018 <iprintf>

		HAL_ADC_Start_IT(&hadc1);   // 다음 변환 시작
 80022e2:	481a      	ldr	r0, [pc, #104]	@ (800234c <cds_status_servo+0xa8>)
 80022e4:	f000 ff20 	bl	8003128 <HAL_ADC_Start_IT>
	}

	if (curtainFlag != last_curtainFlag) {
 80022e8:	4b16      	ldr	r3, [pc, #88]	@ (8002344 <cds_status_servo+0xa0>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b18      	ldr	r3, [pc, #96]	@ (8002350 <cds_status_servo+0xac>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d01a      	beq.n	800232a <cds_status_servo+0x86>
		if (curtainFlag == 1) {
 80022f4:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <cds_status_servo+0xa0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d107      	bne.n	800230c <cds_status_servo+0x68>
			curtain_pulse = 500;
 80022fc:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <cds_status_servo+0xb0>)
 80022fe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002302:	601a      	str	r2, [r3, #0]
			printf("curtain on!!\r\n");
 8002304:	4814      	ldr	r0, [pc, #80]	@ (8002358 <cds_status_servo+0xb4>)
 8002306:	f005 fef7 	bl	80080f8 <puts>
 800230a:	e00a      	b.n	8002322 <cds_status_servo+0x7e>
		} else if (curtainFlag == 0) {
 800230c:	4b0d      	ldr	r3, [pc, #52]	@ (8002344 <cds_status_servo+0xa0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <cds_status_servo+0x7e>
			curtain_pulse = 1500;
 8002314:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <cds_status_servo+0xb0>)
 8002316:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800231a:	601a      	str	r2, [r3, #0]
			printf("curtain off!!\r\n");
 800231c:	480f      	ldr	r0, [pc, #60]	@ (800235c <cds_status_servo+0xb8>)
 800231e:	f005 feeb 	bl	80080f8 <puts>
		}
		last_curtainFlag = curtainFlag;
 8002322:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <cds_status_servo+0xa0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a0a      	ldr	r2, [pc, #40]	@ (8002350 <cds_status_servo+0xac>)
 8002328:	6013      	str	r3, [r2, #0]
	}
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, curtain_pulse - 1);
 800232a:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <cds_status_servo+0xb0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	1e5a      	subs	r2, r3, #1
 8002330:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <cds_status_servo+0xbc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000c06 	.word	0x20000c06
 8002340:	20000c04 	.word	0x20000c04
 8002344:	20000c08 	.word	0x20000c08
 8002348:	08009a60 	.word	0x08009a60
 800234c:	200008f8 	.word	0x200008f8
 8002350:	20000c0c 	.word	0x20000c0c
 8002354:	20000c10 	.word	0x20000c10
 8002358:	08009a6c 	.word	0x08009a6c
 800235c:	08009a7c 	.word	0x08009a7c
 8002360:	20000a34 	.word	0x20000a34

08002364 <detect>:

void detect() {
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	if (pir_flag == 1 && door_state == 0) {
 8002368:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <detect+0x34>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d110      	bne.n	8002392 <detect+0x2e>
 8002370:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <detect+0x38>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10c      	bne.n	8002392 <detect+0x2e>
		pir_flag = 0;
 8002378:	4b07      	ldr	r3, [pc, #28]	@ (8002398 <detect+0x34>)
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
		printf("움직임 감지됨!\r\n");
 800237e:	4808      	ldr	r0, [pc, #32]	@ (80023a0 <detect+0x3c>)
 8002380:	f005 feba 	bl	80080f8 <puts>
		sprintf(sendBuf, "[PRJ_CEN]DETECTED@101\r\n");
 8002384:	4907      	ldr	r1, [pc, #28]	@ (80023a4 <detect+0x40>)
 8002386:	4808      	ldr	r0, [pc, #32]	@ (80023a8 <detect+0x44>)
 8002388:	f005 febe 	bl	8008108 <siprintf>
		esp_send_data(sendBuf);
 800238c:	4806      	ldr	r0, [pc, #24]	@ (80023a8 <detect+0x44>)
 800238e:	f7fe fe2f 	bl	8000ff0 <esp_send_data>
	}
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000bf8 	.word	0x20000bf8
 800239c:	20000bf4 	.word	0x20000bf4
 80023a0:	08009a8c 	.word	0x08009a8c
 80023a4:	08009aa4 	.word	0x08009aa4
 80023a8:	20000b98 	.word	0x20000b98

080023ac <authentication_timeout>:

void authentication_timeout() {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0

	// 10초 경과 확인
	if (authentication_flag == 1 && (tim3Sec - auth_start_time >= 10)) {
 80023b0:	4b10      	ldr	r3, [pc, #64]	@ (80023f4 <authentication_timeout+0x48>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d11a      	bne.n	80023ee <authentication_timeout+0x42>
 80023b8:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <authentication_timeout+0x4c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0f      	ldr	r2, [pc, #60]	@ (80023fc <authentication_timeout+0x50>)
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	2b09      	cmp	r3, #9
 80023c4:	d913      	bls.n	80023ee <authentication_timeout+0x42>
		authentication_flag = 0;
 80023c6:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <authentication_timeout+0x48>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
		auth_start_time = -1;
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <authentication_timeout+0x50>)
 80023ce:	f04f 32ff 	mov.w	r2, #4294967295
 80023d2:	601a      	str	r2, [r3, #0]
		printf("인증시간 초과\r\n");
 80023d4:	480a      	ldr	r0, [pc, #40]	@ (8002400 <authentication_timeout+0x54>)
 80023d6:	f005 fe8f 	bl	80080f8 <puts>
		sprintf(line2, "%s", "Time Over");
 80023da:	4a0a      	ldr	r2, [pc, #40]	@ (8002404 <authentication_timeout+0x58>)
 80023dc:	490a      	ldr	r1, [pc, #40]	@ (8002408 <authentication_timeout+0x5c>)
 80023de:	480b      	ldr	r0, [pc, #44]	@ (800240c <authentication_timeout+0x60>)
 80023e0:	f005 fe92 	bl	8008108 <siprintf>
		LCD_writeStringXY(1, 0, line2);
 80023e4:	4a09      	ldr	r2, [pc, #36]	@ (800240c <authentication_timeout+0x60>)
 80023e6:	2100      	movs	r1, #0
 80023e8:	2001      	movs	r0, #1
 80023ea:	f7fe fa3e 	bl	800086a <LCD_writeStringXY>
	}
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000b94 	.word	0x20000b94
 80023f8:	20000b74 	.word	0x20000b74
 80023fc:	20000018 	.word	0x20000018
 8002400:	08009abc 	.word	0x08009abc
 8002404:	08009ad4 	.word	0x08009ad4
 8002408:	08009710 	.word	0x08009710
 800240c:	20000b5c 	.word	0x20000b5c

08002410 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* USER CODE END Error_Handler_Debug */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <MFRC522_WriteRegister>:
#include "string.h"
#include "stm32f4xx_hal.h"

extern SPI_HandleTypeDef hspi1;

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	460a      	mov	r2, r1
 800242a:	71fb      	strb	r3, [r7, #7]
 800242c:	4613      	mov	r3, r2
 800242e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = (addr << 1) & 0x7E;
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800243a:	b2db      	uxtb	r3, r3
 800243c:	733b      	strb	r3, [r7, #12]
	data[1] = val;
 800243e:	79bb      	ldrb	r3, [r7, #6]
 8002440:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	2104      	movs	r1, #4
 8002446:	480f      	ldr	r0, [pc, #60]	@ (8002484 <MFRC522_WriteRegister+0x64>)
 8002448:	f001 fdd6 	bl	8003ff8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);
 800244c:	2201      	movs	r2, #1
 800244e:	2104      	movs	r1, #4
 8002450:	480c      	ldr	r0, [pc, #48]	@ (8002484 <MFRC522_WriteRegister+0x64>)
 8002452:	f001 fdd1 	bl	8003ff8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // NSS = LOW
 8002456:	2200      	movs	r2, #0
 8002458:	2110      	movs	r1, #16
 800245a:	480b      	ldr	r0, [pc, #44]	@ (8002488 <MFRC522_WriteRegister+0x68>)
 800245c:	f001 fdcc 	bl	8003ff8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 8002460:	f107 010c 	add.w	r1, r7, #12
 8002464:	f04f 33ff 	mov.w	r3, #4294967295
 8002468:	2202      	movs	r2, #2
 800246a:	4808      	ldr	r0, [pc, #32]	@ (800248c <MFRC522_WriteRegister+0x6c>)
 800246c:	f002 ffb5 	bl	80053da <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // NSS = HIGH
 8002470:	2201      	movs	r2, #1
 8002472:	2110      	movs	r1, #16
 8002474:	4804      	ldr	r0, [pc, #16]	@ (8002488 <MFRC522_WriteRegister+0x68>)
 8002476:	f001 fdbf 	bl	8003ff8 <HAL_GPIO_WritePin>
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40020400 	.word	0x40020400
 8002488:	40020000 	.word	0x40020000
 800248c:	20000994 	.word	0x20000994

08002490 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
	uint8_t tx = ((addr << 1) & 0x7E) | 0x80;
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80024a6:	b25b      	sxtb	r3, r3
 80024a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024ac:	b25b      	sxtb	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	73fb      	strb	r3, [r7, #15]
	uint8_t rx;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2110      	movs	r1, #16
 80024b6:	480e      	ldr	r0, [pc, #56]	@ (80024f0 <MFRC522_ReadRegister+0x60>)
 80024b8:	f001 fd9e 	bl	8003ff8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 80024bc:	f107 010f 	add.w	r1, r7, #15
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295
 80024c4:	2201      	movs	r2, #1
 80024c6:	480b      	ldr	r0, [pc, #44]	@ (80024f4 <MFRC522_ReadRegister+0x64>)
 80024c8:	f002 ff87 	bl	80053da <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 80024cc:	f107 010e 	add.w	r1, r7, #14
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295
 80024d4:	2201      	movs	r2, #1
 80024d6:	4807      	ldr	r0, [pc, #28]	@ (80024f4 <MFRC522_ReadRegister+0x64>)
 80024d8:	f003 f8c3 	bl	8005662 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80024dc:	2201      	movs	r2, #1
 80024de:	2110      	movs	r1, #16
 80024e0:	4803      	ldr	r0, [pc, #12]	@ (80024f0 <MFRC522_ReadRegister+0x60>)
 80024e2:	f001 fd89 	bl	8003ff8 <HAL_GPIO_WritePin>
	return rx;
 80024e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40020000 	.word	0x40020000
 80024f4:	20000994 	.word	0x20000994

080024f8 <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	460a      	mov	r2, r1
 8002502:	71fb      	strb	r3, [r7, #7]
 8002504:	4613      	mov	r3, r2
 8002506:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = MFRC522_ReadRegister(reg);
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ffc0 	bl	8002490 <MFRC522_ReadRegister>
 8002510:	4603      	mov	r3, r0
 8002512:	73fb      	strb	r3, [r7, #15]
	MFRC522_WriteRegister(reg, tmp | mask);
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	79bb      	ldrb	r3, [r7, #6]
 8002518:	4313      	orrs	r3, r2
 800251a:	b2da      	uxtb	r2, r3
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff7d 	bl	8002420 <MFRC522_WriteRegister>
}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask) {
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	460a      	mov	r2, r1
 8002538:	71fb      	strb	r3, [r7, #7]
 800253a:	4613      	mov	r3, r2
 800253c:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = MFRC522_ReadRegister(reg);
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ffa5 	bl	8002490 <MFRC522_ReadRegister>
 8002546:	4603      	mov	r3, r0
 8002548:	73fb      	strb	r3, [r7, #15]
	MFRC522_WriteRegister(reg, tmp & (~mask));
 800254a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800254e:	43db      	mvns	r3, r3
 8002550:	b25a      	sxtb	r2, r3
 8002552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002556:	4013      	ands	r3, r2
 8002558:	b25b      	sxtb	r3, r3
 800255a:	b2da      	uxtb	r2, r3
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff5d 	bl	8002420 <MFRC522_WriteRegister>
}
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
	uint8_t temp = MFRC522_ReadRegister(TxControlReg);
 8002574:	2014      	movs	r0, #20
 8002576:	f7ff ff8b 	bl	8002490 <MFRC522_ReadRegister>
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d103      	bne.n	8002590 <MFRC522_AntennaOn+0x22>
		MFRC522_SetBitMask(TxControlReg, 0x03);
 8002588:	2103      	movs	r1, #3
 800258a:	2014      	movs	r0, #20
 800258c:	f7ff ffb4 	bl	80024f8 <MFRC522_SetBitMask>
	}
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(CommandReg, PCD_RESETPHASE);
 800259c:	210f      	movs	r1, #15
 800259e:	2001      	movs	r0, #1
 80025a0:	f7ff ff3e 	bl	8002420 <MFRC522_WriteRegister>
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <MFRC522_Init>:

void MFRC522_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
    // ① RST 핀으로 리셋 신호 제공
    HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_RESET);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2104      	movs	r1, #4
 80025b0:	4815      	ldr	r0, [pc, #84]	@ (8002608 <MFRC522_Init+0x60>)
 80025b2:	f001 fd21 	bl	8003ff8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80025b6:	2032      	movs	r0, #50	@ 0x32
 80025b8:	f000 fd4e 	bl	8003058 <HAL_Delay>
    HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);
 80025bc:	2201      	movs	r2, #1
 80025be:	2104      	movs	r1, #4
 80025c0:	4811      	ldr	r0, [pc, #68]	@ (8002608 <MFRC522_Init+0x60>)
 80025c2:	f001 fd19 	bl	8003ff8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80025c6:	2032      	movs	r0, #50	@ 0x32
 80025c8:	f000 fd46 	bl	8003058 <HAL_Delay>

    // ② 소프트웨어 초기화
    MFRC522_Reset();
 80025cc:	f7ff ffe4 	bl	8002598 <MFRC522_Reset>

    MFRC522_WriteRegister(TModeReg, 0x8D);
 80025d0:	218d      	movs	r1, #141	@ 0x8d
 80025d2:	202a      	movs	r0, #42	@ 0x2a
 80025d4:	f7ff ff24 	bl	8002420 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(TPrescalerReg, 0x3E);
 80025d8:	213e      	movs	r1, #62	@ 0x3e
 80025da:	202b      	movs	r0, #43	@ 0x2b
 80025dc:	f7ff ff20 	bl	8002420 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(TReloadRegL, 30);
 80025e0:	211e      	movs	r1, #30
 80025e2:	202d      	movs	r0, #45	@ 0x2d
 80025e4:	f7ff ff1c 	bl	8002420 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(TReloadRegH, 0);
 80025e8:	2100      	movs	r1, #0
 80025ea:	202c      	movs	r0, #44	@ 0x2c
 80025ec:	f7ff ff18 	bl	8002420 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(TxASKReg, 0x40);
 80025f0:	2140      	movs	r1, #64	@ 0x40
 80025f2:	2015      	movs	r0, #21
 80025f4:	f7ff ff14 	bl	8002420 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(ModeReg, 0x3D);
 80025f8:	213d      	movs	r1, #61	@ 0x3d
 80025fa:	2011      	movs	r0, #17
 80025fc:	f7ff ff10 	bl	8002420 <MFRC522_WriteRegister>

    // ③ 안테나 켜기
    MFRC522_AntennaOn();
 8002600:	f7ff ffb5 	bl	800256e <MFRC522_AntennaOn>
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40020400 	.word	0x40020400

0800260c <MFRC522_Request>:


char MFRC522_Request(uint8_t reqMode, uint8_t *TagType) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af02      	add	r7, sp, #8
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	71fb      	strb	r3, [r7, #7]
	char status;
	uint16_t backBits;

	MFRC522_WriteRegister(BitFramingReg, 0x07);
 8002618:	2107      	movs	r1, #7
 800261a:	200d      	movs	r0, #13
 800261c:	f7ff ff00 	bl	8002420 <MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	79fa      	ldrb	r2, [r7, #7]
 8002624:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2201      	movs	r2, #1
 8002630:	6839      	ldr	r1, [r7, #0]
 8002632:	200c      	movs	r0, #12
 8002634:	f000 f80f 	bl	8002656 <MFRC522_ToCard>
 8002638:	4603      	mov	r3, r0
 800263a:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <MFRC522_Request+0x3c>
 8002642:	89bb      	ldrh	r3, [r7, #12]
 8002644:	2b10      	cmp	r3, #16
 8002646:	d001      	beq.n	800264c <MFRC522_Request+0x40>
		status = MI_ERR;
 8002648:	2302      	movs	r3, #2
 800264a:	73fb      	strb	r3, [r7, #15]

	return status;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <MFRC522_ToCard>:

char MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen,
					uint8_t *backData, uint16_t *backLen) {
 8002656:	b590      	push	{r4, r7, lr}
 8002658:	b087      	sub	sp, #28
 800265a:	af00      	add	r7, sp, #0
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	4603      	mov	r3, r0
 8002662:	73fb      	strb	r3, [r7, #15]
 8002664:	4613      	mov	r3, r2
 8002666:	73bb      	strb	r3, [r7, #14]
	char status = MI_ERR;
 8002668:	2302      	movs	r3, #2
 800266a:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800266c:	2300      	movs	r3, #0
 800266e:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8002670:	2300      	movs	r3, #0
 8002672:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d006      	beq.n	8002688 <MFRC522_ToCard+0x32>
 800267a:	2b0e      	cmp	r3, #14
 800267c:	d109      	bne.n	8002692 <MFRC522_ToCard+0x3c>
	case PCD_AUTHENT:
		irqEn = 0x12;
 800267e:	2312      	movs	r3, #18
 8002680:	75bb      	strb	r3, [r7, #22]
		waitIRq = 0x10;
 8002682:	2310      	movs	r3, #16
 8002684:	757b      	strb	r3, [r7, #21]
		break;
 8002686:	e004      	b.n	8002692 <MFRC522_ToCard+0x3c>
	case PCD_TRANSCEIVE:
		irqEn = 0x77;
 8002688:	2377      	movs	r3, #119	@ 0x77
 800268a:	75bb      	strb	r3, [r7, #22]
		waitIRq = 0x30;
 800268c:	2330      	movs	r3, #48	@ 0x30
 800268e:	757b      	strb	r3, [r7, #21]
		break;
 8002690:	bf00      	nop
	}

	MFRC522_WriteRegister(CommIEnReg, irqEn | 0x80);
 8002692:	7dbb      	ldrb	r3, [r7, #22]
 8002694:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4619      	mov	r1, r3
 800269c:	2002      	movs	r0, #2
 800269e:	f7ff febf 	bl	8002420 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(CommIrqReg, 0x80);
 80026a2:	2180      	movs	r1, #128	@ 0x80
 80026a4:	2004      	movs	r0, #4
 80026a6:	f7ff ff42 	bl	800252e <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(FIFOLevelReg, 0x80);
 80026aa:	2180      	movs	r1, #128	@ 0x80
 80026ac:	200a      	movs	r0, #10
 80026ae:	f7ff ff23 	bl	80024f8 <MFRC522_SetBitMask>

	MFRC522_WriteRegister(CommandReg, PCD_IDLE);
 80026b2:	2100      	movs	r1, #0
 80026b4:	2001      	movs	r0, #1
 80026b6:	f7ff feb3 	bl	8002420 <MFRC522_WriteRegister>

	for (i = 0; i < sendLen; i++) {
 80026ba:	2300      	movs	r3, #0
 80026bc:	827b      	strh	r3, [r7, #18]
 80026be:	e00a      	b.n	80026d6 <MFRC522_ToCard+0x80>
		MFRC522_WriteRegister(FIFODataReg, sendData[i]);
 80026c0:	8a7b      	ldrh	r3, [r7, #18]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	4413      	add	r3, r2
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	4619      	mov	r1, r3
 80026ca:	2009      	movs	r0, #9
 80026cc:	f7ff fea8 	bl	8002420 <MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 80026d0:	8a7b      	ldrh	r3, [r7, #18]
 80026d2:	3301      	adds	r3, #1
 80026d4:	827b      	strh	r3, [r7, #18]
 80026d6:	7bbb      	ldrb	r3, [r7, #14]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	8a7a      	ldrh	r2, [r7, #18]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d3ef      	bcc.n	80026c0 <MFRC522_ToCard+0x6a>
	}
	MFRC522_WriteRegister(CommandReg, command);
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	4619      	mov	r1, r3
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7ff fe9b 	bl	8002420 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b0c      	cmp	r3, #12
 80026ee:	d103      	bne.n	80026f8 <MFRC522_ToCard+0xa2>
		MFRC522_SetBitMask(BitFramingReg, 0x80);
 80026f0:	2180      	movs	r1, #128	@ 0x80
 80026f2:	200d      	movs	r0, #13
 80026f4:	f7ff ff00 	bl	80024f8 <MFRC522_SetBitMask>
	}

	i = 2000;
 80026f8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80026fc:	827b      	strh	r3, [r7, #18]
	do {
		n = MFRC522_ReadRegister(CommIrqReg);
 80026fe:	2004      	movs	r0, #4
 8002700:	f7ff fec6 	bl	8002490 <MFRC522_ReadRegister>
 8002704:	4603      	mov	r3, r0
 8002706:	747b      	strb	r3, [r7, #17]
		i--;
 8002708:	8a7b      	ldrh	r3, [r7, #18]
 800270a:	3b01      	subs	r3, #1
 800270c:	827b      	strh	r3, [r7, #18]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 800270e:	8a7b      	ldrh	r3, [r7, #18]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <MFRC522_ToCard+0xd4>
 8002714:	7c7b      	ldrb	r3, [r7, #17]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d105      	bne.n	800272a <MFRC522_ToCard+0xd4>
 800271e:	7c7a      	ldrb	r2, [r7, #17]
 8002720:	7d7b      	ldrb	r3, [r7, #21]
 8002722:	4013      	ands	r3, r2
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0e9      	beq.n	80026fe <MFRC522_ToCard+0xa8>

	MFRC522_ClearBitMask(BitFramingReg, 0x80);
 800272a:	2180      	movs	r1, #128	@ 0x80
 800272c:	200d      	movs	r0, #13
 800272e:	f7ff fefe 	bl	800252e <MFRC522_ClearBitMask>

	if (i != 0) {
 8002732:	8a7b      	ldrh	r3, [r7, #18]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d04a      	beq.n	80027ce <MFRC522_ToCard+0x178>
		if (!(MFRC522_ReadRegister(ErrorReg) & 0x1B)) {
 8002738:	2006      	movs	r0, #6
 800273a:	f7ff fea9 	bl	8002490 <MFRC522_ReadRegister>
 800273e:	4603      	mov	r3, r0
 8002740:	f003 031b 	and.w	r3, r3, #27
 8002744:	2b00      	cmp	r3, #0
 8002746:	d142      	bne.n	80027ce <MFRC522_ToCard+0x178>
			status = MI_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01)
 800274c:	7c7a      	ldrb	r2, [r7, #17]
 800274e:	7dbb      	ldrb	r3, [r7, #22]
 8002750:	4013      	ands	r3, r2
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MFRC522_ToCard+0x10a>
				status = MI_NOTAGERR;
 800275c:	2301      	movs	r3, #1
 800275e:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d133      	bne.n	80027ce <MFRC522_ToCard+0x178>
				n = MFRC522_ReadRegister(FIFOLevelReg);
 8002766:	200a      	movs	r0, #10
 8002768:	f7ff fe92 	bl	8002490 <MFRC522_ReadRegister>
 800276c:	4603      	mov	r3, r0
 800276e:	747b      	strb	r3, [r7, #17]
				lastBits = MFRC522_ReadRegister(ControlReg) & 0x07;
 8002770:	200c      	movs	r0, #12
 8002772:	f7ff fe8d 	bl	8002490 <MFRC522_ReadRegister>
 8002776:	4603      	mov	r3, r0
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	743b      	strb	r3, [r7, #16]
				if (lastBits)
 800277e:	7c3b      	ldrb	r3, [r7, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00b      	beq.n	800279c <MFRC522_ToCard+0x146>
					*backLen = (n - 1) * 8 + lastBits;
 8002784:	7c7b      	ldrb	r3, [r7, #17]
 8002786:	3b01      	subs	r3, #1
 8002788:	b29b      	uxth	r3, r3
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	b29a      	uxth	r2, r3
 800278e:	7c3b      	ldrb	r3, [r7, #16]
 8002790:	b29b      	uxth	r3, r3
 8002792:	4413      	add	r3, r2
 8002794:	b29a      	uxth	r2, r3
 8002796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002798:	801a      	strh	r2, [r3, #0]
 800279a:	e005      	b.n	80027a8 <MFRC522_ToCard+0x152>
				else
					*backLen = n * 8;
 800279c:	7c7b      	ldrb	r3, [r7, #17]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a6:	801a      	strh	r2, [r3, #0]
				for (i = 0; i < n; i++) {
 80027a8:	2300      	movs	r3, #0
 80027aa:	827b      	strh	r3, [r7, #18]
 80027ac:	e00a      	b.n	80027c4 <MFRC522_ToCard+0x16e>
					backData[i] = MFRC522_ReadRegister(FIFODataReg);
 80027ae:	8a7b      	ldrh	r3, [r7, #18]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	18d4      	adds	r4, r2, r3
 80027b4:	2009      	movs	r0, #9
 80027b6:	f7ff fe6b 	bl	8002490 <MFRC522_ReadRegister>
 80027ba:	4603      	mov	r3, r0
 80027bc:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 80027be:	8a7b      	ldrh	r3, [r7, #18]
 80027c0:	3301      	adds	r3, #1
 80027c2:	827b      	strh	r3, [r7, #18]
 80027c4:	7c7b      	ldrb	r3, [r7, #17]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	8a7a      	ldrh	r2, [r7, #18]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d3ef      	bcc.n	80027ae <MFRC522_ToCard+0x158>
				}
			}
		}
	}
	return status;
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd90      	pop	{r4, r7, pc}

080027d8 <MFRC522_Anticoll>:

char MFRC522_Anticoll(uint8_t *serNum) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af02      	add	r7, sp, #8
 80027de:	6078      	str	r0, [r7, #4]
	char status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(BitFramingReg, 0x00);
 80027e4:	2100      	movs	r1, #0
 80027e6:	200d      	movs	r0, #13
 80027e8:	f7ff fe1a 	bl	8002420 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2293      	movs	r2, #147	@ 0x93
 80027f0:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3301      	adds	r3, #1
 80027f6:	2220      	movs	r2, #32
 80027f8:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80027fa:	f107 030a 	add.w	r3, r7, #10
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	200c      	movs	r0, #12
 8002808:	f7ff ff25 	bl	8002656 <MFRC522_ToCard>
 800280c:	4603      	mov	r3, r0
 800280e:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d117      	bne.n	8002846 <MFRC522_Anticoll+0x6e>
		for (i = 0; i < 4; i++) {
 8002816:	2300      	movs	r3, #0
 8002818:	73bb      	strb	r3, [r7, #14]
 800281a:	e009      	b.n	8002830 <MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 800281c:	7bbb      	ldrb	r3, [r7, #14]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	781a      	ldrb	r2, [r3, #0]
 8002824:	7b7b      	ldrb	r3, [r7, #13]
 8002826:	4053      	eors	r3, r2
 8002828:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 800282a:	7bbb      	ldrb	r3, [r7, #14]
 800282c:	3301      	adds	r3, #1
 800282e:	73bb      	strb	r3, [r7, #14]
 8002830:	7bbb      	ldrb	r3, [r7, #14]
 8002832:	2b03      	cmp	r3, #3
 8002834:	d9f2      	bls.n	800281c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[4])
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3304      	adds	r3, #4
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	7b7a      	ldrb	r2, [r7, #13]
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <MFRC522_Anticoll+0x6e>
			status = MI_ERR;
 8002842:	2302      	movs	r3, #2
 8002844:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <MFRC522_Check>:

char MFRC522_Check(uint8_t *id)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
    char status;
    uint8_t type[2];

    // ① 카드가 감지되는지 먼저 확인 (Request)
    status = MFRC522_Request(PICC_REQIDL, type);
 8002858:	f107 030c 	add.w	r3, r7, #12
 800285c:	4619      	mov	r1, r3
 800285e:	2026      	movs	r0, #38	@ 0x26
 8002860:	f7ff fed4 	bl	800260c <MFRC522_Request>
 8002864:	4603      	mov	r3, r0
 8002866:	73fb      	strb	r3, [r7, #15]
    if (status != MI_OK)
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MFRC522_Check+0x22>
        return MI_ERR; // 카드 없음
 800286e:	2302      	movs	r3, #2
 8002870:	e00a      	b.n	8002888 <MFRC522_Check+0x38>

    // ② UID 읽기 (Anti-collision)
    status = MFRC522_Anticoll(id);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ffb0 	bl	80027d8 <MFRC522_Anticoll>
 8002878:	4603      	mov	r3, r0
 800287a:	73fb      	strb	r3, [r7, #15]
    if (status != MI_OK)
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MFRC522_Check+0x36>
        return MI_ERR; // UID 읽기 실패
 8002882:	2302      	movs	r3, #2
 8002884:	e000      	b.n	8002888 <MFRC522_Check+0x38>

    return MI_OK; // 성공
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <HAL_MspInit+0x4c>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289e:	4a0f      	ldr	r2, [pc, #60]	@ (80028dc <HAL_MspInit+0x4c>)
 80028a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028a6:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <HAL_MspInit+0x4c>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <HAL_MspInit+0x4c>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	4a08      	ldr	r2, [pc, #32]	@ (80028dc <HAL_MspInit+0x4c>)
 80028bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028c2:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <HAL_MspInit+0x4c>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028ce:	2007      	movs	r0, #7
 80028d0:	f001 f922 	bl	8003b18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40023800 	.word	0x40023800

080028e0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	@ 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1b      	ldr	r2, [pc, #108]	@ (800296c <HAL_ADC_MspInit+0x8c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d12f      	bne.n	8002962 <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	4b1a      	ldr	r3, [pc, #104]	@ (8002970 <HAL_ADC_MspInit+0x90>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	4a19      	ldr	r2, [pc, #100]	@ (8002970 <HAL_ADC_MspInit+0x90>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002910:	6453      	str	r3, [r2, #68]	@ 0x44
 8002912:	4b17      	ldr	r3, [pc, #92]	@ (8002970 <HAL_ADC_MspInit+0x90>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <HAL_ADC_MspInit+0x90>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4a12      	ldr	r2, [pc, #72]	@ (8002970 <HAL_ADC_MspInit+0x90>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6313      	str	r3, [r2, #48]	@ 0x30
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <HAL_ADC_MspInit+0x90>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800293a:	2301      	movs	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800293e:	2303      	movs	r3, #3
 8002940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	4619      	mov	r1, r3
 800294c:	4809      	ldr	r0, [pc, #36]	@ (8002974 <HAL_ADC_MspInit+0x94>)
 800294e:	f001 f9b7 	bl	8003cc0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	2012      	movs	r0, #18
 8002958:	f001 f8e9 	bl	8003b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800295c:	2012      	movs	r0, #18
 800295e:	f001 f902 	bl	8003b66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002962:	bf00      	nop
 8002964:	3728      	adds	r7, #40	@ 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40012000 	.word	0x40012000
 8002970:	40023800 	.word	0x40023800
 8002974:	40020000 	.word	0x40020000

08002978 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	@ 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a19      	ldr	r2, [pc, #100]	@ (80029fc <HAL_I2C_MspInit+0x84>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d12c      	bne.n	80029f4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	4b18      	ldr	r3, [pc, #96]	@ (8002a00 <HAL_I2C_MspInit+0x88>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	4a17      	ldr	r2, [pc, #92]	@ (8002a00 <HAL_I2C_MspInit+0x88>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029aa:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <HAL_I2C_MspInit+0x88>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029bc:	2312      	movs	r3, #18
 80029be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c4:	2303      	movs	r3, #3
 80029c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029c8:	2304      	movs	r3, #4
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	4619      	mov	r1, r3
 80029d2:	480c      	ldr	r0, [pc, #48]	@ (8002a04 <HAL_I2C_MspInit+0x8c>)
 80029d4:	f001 f974 	bl	8003cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <HAL_I2C_MspInit+0x88>)
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	4a07      	ldr	r2, [pc, #28]	@ (8002a00 <HAL_I2C_MspInit+0x88>)
 80029e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80029e8:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <HAL_I2C_MspInit+0x88>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80029f4:	bf00      	nop
 80029f6:	3728      	adds	r7, #40	@ 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40005400 	.word	0x40005400
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40020400 	.word	0x40020400

08002a08 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	@ 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a19      	ldr	r2, [pc, #100]	@ (8002a8c <HAL_SPI_MspInit+0x84>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d12b      	bne.n	8002a82 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	4b18      	ldr	r3, [pc, #96]	@ (8002a90 <HAL_SPI_MspInit+0x88>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	4a17      	ldr	r2, [pc, #92]	@ (8002a90 <HAL_SPI_MspInit+0x88>)
 8002a34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a3a:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <HAL_SPI_MspInit+0x88>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <HAL_SPI_MspInit+0x88>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	4a10      	ldr	r2, [pc, #64]	@ (8002a90 <HAL_SPI_MspInit+0x88>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a56:	4b0e      	ldr	r3, [pc, #56]	@ (8002a90 <HAL_SPI_MspInit+0x88>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a62:	23e0      	movs	r3, #224	@ 0xe0
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a72:	2305      	movs	r3, #5
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4805      	ldr	r0, [pc, #20]	@ (8002a94 <HAL_SPI_MspInit+0x8c>)
 8002a7e:	f001 f91f 	bl	8003cc0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002a82:	bf00      	nop
 8002a84:	3728      	adds	r7, #40	@ 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40013000 	.word	0x40013000
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40020000 	.word	0x40020000

08002a98 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae0 <HAL_TIM_Base_MspInit+0x48>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d115      	bne.n	8002ad6 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae4 <HAL_TIM_Base_MspInit+0x4c>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ae4 <HAL_TIM_Base_MspInit+0x4c>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae4 <HAL_TIM_Base_MspInit+0x4c>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	201d      	movs	r0, #29
 8002acc:	f001 f82f 	bl	8003b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ad0:	201d      	movs	r0, #29
 8002ad2:	f001 f848 	bl	8003b66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0e      	ldr	r2, [pc, #56]	@ (8002b30 <HAL_TIM_PWM_MspInit+0x48>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d115      	bne.n	8002b26 <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	4b0d      	ldr	r3, [pc, #52]	@ (8002b34 <HAL_TIM_PWM_MspInit+0x4c>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	4a0c      	ldr	r2, [pc, #48]	@ (8002b34 <HAL_TIM_PWM_MspInit+0x4c>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b34 <HAL_TIM_PWM_MspInit+0x4c>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2100      	movs	r1, #0
 8002b1a:	201e      	movs	r0, #30
 8002b1c:	f001 f807 	bl	8003b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b20:	201e      	movs	r0, #30
 8002b22:	f001 f820 	bl	8003b66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40023800 	.word	0x40023800

08002b38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 030c 	add.w	r3, r7, #12
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a12      	ldr	r2, [pc, #72]	@ (8002ba0 <HAL_TIM_MspPostInit+0x68>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d11d      	bne.n	8002b96 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <HAL_TIM_MspPostInit+0x6c>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	4a10      	ldr	r2, [pc, #64]	@ (8002ba4 <HAL_TIM_MspPostInit+0x6c>)
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba4 <HAL_TIM_MspPostInit+0x6c>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = TIM4_PWM1_SERVO2_Pin|TIM4_PWM2_SERVO_Pin;
 8002b76:	23c0      	movs	r3, #192	@ 0xc0
 8002b78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b86:	2302      	movs	r3, #2
 8002b88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8a:	f107 030c 	add.w	r3, r7, #12
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4805      	ldr	r0, [pc, #20]	@ (8002ba8 <HAL_TIM_MspPostInit+0x70>)
 8002b92:	f001 f895 	bl	8003cc0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002b96:	bf00      	nop
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40000800 	.word	0x40000800
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40020400 	.word	0x40020400

08002bac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08c      	sub	sp, #48	@ 0x30
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a36      	ldr	r2, [pc, #216]	@ (8002ca4 <HAL_UART_MspInit+0xf8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d12c      	bne.n	8002c28 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	4b35      	ldr	r3, [pc, #212]	@ (8002ca8 <HAL_UART_MspInit+0xfc>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	4a34      	ldr	r2, [pc, #208]	@ (8002ca8 <HAL_UART_MspInit+0xfc>)
 8002bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bde:	4b32      	ldr	r3, [pc, #200]	@ (8002ca8 <HAL_UART_MspInit+0xfc>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca8 <HAL_UART_MspInit+0xfc>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca8 <HAL_UART_MspInit+0xfc>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca8 <HAL_UART_MspInit+0xfc>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c06:	230c      	movs	r3, #12
 8002c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c12:	2303      	movs	r3, #3
 8002c14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c16:	2307      	movs	r3, #7
 8002c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1a:	f107 031c 	add.w	r3, r7, #28
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4822      	ldr	r0, [pc, #136]	@ (8002cac <HAL_UART_MspInit+0x100>)
 8002c22:	f001 f84d 	bl	8003cc0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c26:	e039      	b.n	8002c9c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a20      	ldr	r2, [pc, #128]	@ (8002cb0 <HAL_UART_MspInit+0x104>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d134      	bne.n	8002c9c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca8 <HAL_UART_MspInit+0xfc>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca8 <HAL_UART_MspInit+0xfc>)
 8002c3c:	f043 0320 	orr.w	r3, r3, #32
 8002c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c42:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <HAL_UART_MspInit+0xfc>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b15      	ldr	r3, [pc, #84]	@ (8002ca8 <HAL_UART_MspInit+0xfc>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	4a14      	ldr	r2, [pc, #80]	@ (8002ca8 <HAL_UART_MspInit+0xfc>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <HAL_UART_MspInit+0xfc>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c6a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c80:	f107 031c 	add.w	r3, r7, #28
 8002c84:	4619      	mov	r1, r3
 8002c86:	4809      	ldr	r0, [pc, #36]	@ (8002cac <HAL_UART_MspInit+0x100>)
 8002c88:	f001 f81a 	bl	8003cc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2100      	movs	r1, #0
 8002c90:	2047      	movs	r0, #71	@ 0x47
 8002c92:	f000 ff4c 	bl	8003b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002c96:	2047      	movs	r0, #71	@ 0x47
 8002c98:	f000 ff65 	bl	8003b66 <HAL_NVIC_EnableIRQ>
}
 8002c9c:	bf00      	nop
 8002c9e:	3730      	adds	r7, #48	@ 0x30
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40004400 	.word	0x40004400
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020000 	.word	0x40020000
 8002cb0:	40011400 	.word	0x40011400

08002cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cb8:	bf00      	nop
 8002cba:	e7fd      	b.n	8002cb8 <NMI_Handler+0x4>

08002cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <HardFault_Handler+0x4>

08002cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <MemManage_Handler+0x4>

08002ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <BusFault_Handler+0x4>

08002cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <UsageFault_Handler+0x4>

08002cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d0a:	f000 f985 	bl	8003018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_Pin);
 8002d16:	2002      	movs	r0, #2
 8002d18:	f001 f988 	bl	800402c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002d1c:	bf00      	nop
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002d24:	4802      	ldr	r0, [pc, #8]	@ (8002d30 <ADC_IRQHandler+0x10>)
 8002d26:	f000 fabd 	bl	80032a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	200008f8 	.word	0x200008f8

08002d34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d38:	4802      	ldr	r0, [pc, #8]	@ (8002d44 <TIM3_IRQHandler+0x10>)
 8002d3a:	f003 fa49 	bl	80061d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	200009ec 	.word	0x200009ec

08002d48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d4c:	4802      	ldr	r0, [pc, #8]	@ (8002d58 <TIM4_IRQHandler+0x10>)
 8002d4e:	f003 fa3f 	bl	80061d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000a34 	.word	0x20000a34

08002d5c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002d60:	4802      	ldr	r0, [pc, #8]	@ (8002d6c <USART6_IRQHandler+0x10>)
 8002d62:	f004 f92b 	bl	8006fbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000ac4 	.word	0x20000ac4

08002d70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return 1;
 8002d74:	2301      	movs	r3, #1
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <_kill>:

int _kill(int pid, int sig)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d8a:	f005 fb97 	bl	80084bc <__errno>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2216      	movs	r2, #22
 8002d92:	601a      	str	r2, [r3, #0]
  return -1;
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <_exit>:

void _exit (int status)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002da8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ffe7 	bl	8002d80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002db2:	bf00      	nop
 8002db4:	e7fd      	b.n	8002db2 <_exit+0x12>

08002db6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	e00a      	b.n	8002dde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dc8:	f3af 8000 	nop.w
 8002dcc:	4601      	mov	r1, r0
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	60ba      	str	r2, [r7, #8]
 8002dd4:	b2ca      	uxtb	r2, r1
 8002dd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	dbf0      	blt.n	8002dc8 <_read+0x12>
  }

  return len;
 8002de6:	687b      	ldr	r3, [r7, #4]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	e009      	b.n	8002e16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	60ba      	str	r2, [r7, #8]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe f932 	bl	8001074 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	3301      	adds	r3, #1
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	dbf1      	blt.n	8002e02 <_write+0x12>
  }
  return len;
 8002e1e:	687b      	ldr	r3, [r7, #4]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <_close>:

int _close(int file)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e50:	605a      	str	r2, [r3, #4]
  return 0;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <_isatty>:

int _isatty(int file)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e68:	2301      	movs	r3, #1
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e98:	4a14      	ldr	r2, [pc, #80]	@ (8002eec <_sbrk+0x5c>)
 8002e9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <_sbrk+0x60>)
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ea4:	4b13      	ldr	r3, [pc, #76]	@ (8002ef4 <_sbrk+0x64>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eac:	4b11      	ldr	r3, [pc, #68]	@ (8002ef4 <_sbrk+0x64>)
 8002eae:	4a12      	ldr	r2, [pc, #72]	@ (8002ef8 <_sbrk+0x68>)
 8002eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ef4 <_sbrk+0x64>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4413      	add	r3, r2
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d207      	bcs.n	8002ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ec0:	f005 fafc 	bl	80084bc <__errno>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	220c      	movs	r2, #12
 8002ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ece:	e009      	b.n	8002ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ed0:	4b08      	ldr	r3, [pc, #32]	@ (8002ef4 <_sbrk+0x64>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ed6:	4b07      	ldr	r3, [pc, #28]	@ (8002ef4 <_sbrk+0x64>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	4a05      	ldr	r2, [pc, #20]	@ (8002ef4 <_sbrk+0x64>)
 8002ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20020000 	.word	0x20020000
 8002ef0:	00000400 	.word	0x00000400
 8002ef4:	20000c7c 	.word	0x20000c7c
 8002ef8:	20000dd0 	.word	0x20000dd0

08002efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f00:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <SystemInit+0x20>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f06:	4a05      	ldr	r2, [pc, #20]	@ (8002f1c <SystemInit+0x20>)
 8002f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f24:	f7ff ffea 	bl	8002efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f28:	480c      	ldr	r0, [pc, #48]	@ (8002f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f2a:	490d      	ldr	r1, [pc, #52]	@ (8002f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f30:	e002      	b.n	8002f38 <LoopCopyDataInit>

08002f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f36:	3304      	adds	r3, #4

08002f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f3c:	d3f9      	bcc.n	8002f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f40:	4c0a      	ldr	r4, [pc, #40]	@ (8002f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f44:	e001      	b.n	8002f4a <LoopFillZerobss>

08002f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f48:	3204      	adds	r2, #4

08002f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f4c:	d3fb      	bcc.n	8002f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f4e:	f005 fabb 	bl	80084c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f52:	f7fe f8a7 	bl	80010a4 <main>
  bx  lr    
 8002f56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f60:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002f64:	08009bf4 	.word	0x08009bf4
  ldr r2, =_sbss
 8002f68:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002f6c:	20000dd0 	.word	0x20000dd0

08002f70 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f70:	e7fe      	b.n	8002f70 <DMA1_Stream0_IRQHandler>
	...

08002f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f78:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb4 <HAL_Init+0x40>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb4 <HAL_Init+0x40>)
 8002f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f84:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <HAL_Init+0x40>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb4 <HAL_Init+0x40>)
 8002f8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f90:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <HAL_Init+0x40>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a07      	ldr	r2, [pc, #28]	@ (8002fb4 <HAL_Init+0x40>)
 8002f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f9c:	2003      	movs	r0, #3
 8002f9e:	f000 fdbb 	bl	8003b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f000 f808 	bl	8002fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fa8:	f7ff fc72 	bl	8002890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023c00 	.word	0x40023c00

08002fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fc0:	4b12      	ldr	r3, [pc, #72]	@ (800300c <HAL_InitTick+0x54>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b12      	ldr	r3, [pc, #72]	@ (8003010 <HAL_InitTick+0x58>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fdd3 	bl	8003b82 <HAL_SYSTICK_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00e      	b.n	8003004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b0f      	cmp	r3, #15
 8002fea:	d80a      	bhi.n	8003002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fec:	2200      	movs	r2, #0
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	f000 fd9b 	bl	8003b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff8:	4a06      	ldr	r2, [pc, #24]	@ (8003014 <HAL_InitTick+0x5c>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e000      	b.n	8003004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	2000001c 	.word	0x2000001c
 8003010:	20000024 	.word	0x20000024
 8003014:	20000020 	.word	0x20000020

08003018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800301c:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <HAL_IncTick+0x20>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <HAL_IncTick+0x24>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4413      	add	r3, r2
 8003028:	4a04      	ldr	r2, [pc, #16]	@ (800303c <HAL_IncTick+0x24>)
 800302a:	6013      	str	r3, [r2, #0]
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000024 	.word	0x20000024
 800303c:	20000c80 	.word	0x20000c80

08003040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return uwTick;
 8003044:	4b03      	ldr	r3, [pc, #12]	@ (8003054 <HAL_GetTick+0x14>)
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000c80 	.word	0x20000c80

08003058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7ff ffee 	bl	8003040 <HAL_GetTick>
 8003064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d005      	beq.n	800307e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003072:	4b0a      	ldr	r3, [pc, #40]	@ (800309c <HAL_Delay+0x44>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800307e:	bf00      	nop
 8003080:	f7ff ffde 	bl	8003040 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	429a      	cmp	r2, r3
 800308e:	d8f7      	bhi.n	8003080 <HAL_Delay+0x28>
  {
  }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000024 	.word	0x20000024

080030a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e033      	b.n	800311e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff fc0e 	bl	80028e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d118      	bne.n	8003110 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030e6:	f023 0302 	bic.w	r3, r3, #2
 80030ea:	f043 0202 	orr.w	r2, r3, #2
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fb3a 	bl	800376c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f023 0303 	bic.w	r3, r3, #3
 8003106:	f043 0201 	orr.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	641a      	str	r2, [r3, #64]	@ 0x40
 800310e:	e001      	b.n	8003114 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800311c:	7bfb      	ldrb	r3, [r7, #15]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_ADC_Start_IT+0x1a>
 800313e:	2302      	movs	r3, #2
 8003140:	e0a1      	b.n	8003286 <HAL_ADC_Start_IT+0x15e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d018      	beq.n	800318a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003168:	4b4a      	ldr	r3, [pc, #296]	@ (8003294 <HAL_ADC_Start_IT+0x16c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a4a      	ldr	r2, [pc, #296]	@ (8003298 <HAL_ADC_Start_IT+0x170>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0c9a      	lsrs	r2, r3, #18
 8003174:	4613      	mov	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800317c:	e002      	b.n	8003184 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	3b01      	subs	r3, #1
 8003182:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f9      	bne.n	800317e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d169      	bne.n	800326c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031d6:	d106      	bne.n	80031e6 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031dc:	f023 0206 	bic.w	r2, r3, #6
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80031e4:	e002      	b.n	80031ec <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031f4:	4b29      	ldr	r3, [pc, #164]	@ (800329c <HAL_ADC_Start_IT+0x174>)
 80031f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003200:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003210:	f043 0320 	orr.w	r3, r3, #32
 8003214:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10f      	bne.n	8003242 <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d129      	bne.n	8003284 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	e020      	b.n	8003284 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a16      	ldr	r2, [pc, #88]	@ (80032a0 <HAL_ADC_Start_IT+0x178>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d11b      	bne.n	8003284 <HAL_ADC_Start_IT+0x15c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d114      	bne.n	8003284 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	e00b      	b.n	8003284 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	f043 0210 	orr.w	r2, r3, #16
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327c:	f043 0201 	orr.w	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	2000001c 	.word	0x2000001c
 8003298:	431bde83 	.word	0x431bde83
 800329c:	40012300 	.word	0x40012300
 80032a0:	40012000 	.word	0x40012000

080032a4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	2300      	movs	r3, #0
 80032b2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d049      	beq.n	800336e <HAL_ADC_IRQHandler+0xca>
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d046      	beq.n	800336e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d105      	bne.n	80032f8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d12b      	bne.n	800335e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800330a:	2b00      	cmp	r3, #0
 800330c:	d127      	bne.n	800335e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003314:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003318:	2b00      	cmp	r3, #0
 800331a:	d006      	beq.n	800332a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003326:	2b00      	cmp	r3, #0
 8003328:	d119      	bne.n	800335e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0220 	bic.w	r2, r2, #32
 8003338:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d105      	bne.n	800335e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	f043 0201 	orr.w	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fe feee 	bl	8002140 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0212 	mvn.w	r2, #18
 800336c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800337c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d057      	beq.n	8003434 <HAL_ADC_IRQHandler+0x190>
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d054      	beq.n	8003434 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	d105      	bne.n	80033a2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d139      	bne.n	8003424 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d006      	beq.n	80033cc <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d12b      	bne.n	8003424 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d124      	bne.n	8003424 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d11d      	bne.n	8003424 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d119      	bne.n	8003424 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033fe:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d105      	bne.n	8003424 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	f043 0201 	orr.w	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fa9d 	bl	8003964 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f06f 020c 	mvn.w	r2, #12
 8003432:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003442:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d017      	beq.n	800347a <HAL_ADC_IRQHandler+0x1d6>
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d014      	beq.n	800347a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b01      	cmp	r3, #1
 800345c:	d10d      	bne.n	800347a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f837 	bl	80034de <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0201 	mvn.w	r2, #1
 8003478:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003488:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d015      	beq.n	80034bc <HAL_ADC_IRQHandler+0x218>
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d012      	beq.n	80034bc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	f043 0202 	orr.w	r2, r3, #2
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f06f 0220 	mvn.w	r2, #32
 80034aa:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f820 	bl	80034f2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f06f 0220 	mvn.w	r2, #32
 80034ba:	601a      	str	r2, [r3, #0]
  }
}
 80034bc:	bf00      	nop
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x1c>
 8003520:	2302      	movs	r3, #2
 8003522:	e113      	b.n	800374c <HAL_ADC_ConfigChannel+0x244>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b09      	cmp	r3, #9
 8003532:	d925      	bls.n	8003580 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68d9      	ldr	r1, [r3, #12]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	3b1e      	subs	r3, #30
 800354a:	2207      	movs	r2, #7
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43da      	mvns	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	400a      	ands	r2, r1
 8003558:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68d9      	ldr	r1, [r3, #12]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	b29b      	uxth	r3, r3
 800356a:	4618      	mov	r0, r3
 800356c:	4603      	mov	r3, r0
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	4403      	add	r3, r0
 8003572:	3b1e      	subs	r3, #30
 8003574:	409a      	lsls	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	e022      	b.n	80035c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6919      	ldr	r1, [r3, #16]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	4613      	mov	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4413      	add	r3, r2
 8003594:	2207      	movs	r2, #7
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43da      	mvns	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	400a      	ands	r2, r1
 80035a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6919      	ldr	r1, [r3, #16]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	4618      	mov	r0, r3
 80035b6:	4603      	mov	r3, r0
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	4403      	add	r3, r0
 80035bc:	409a      	lsls	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d824      	bhi.n	8003618 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	3b05      	subs	r3, #5
 80035e0:	221f      	movs	r2, #31
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43da      	mvns	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	400a      	ands	r2, r1
 80035ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	4618      	mov	r0, r3
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	3b05      	subs	r3, #5
 800360a:	fa00 f203 	lsl.w	r2, r0, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	635a      	str	r2, [r3, #52]	@ 0x34
 8003616:	e04c      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b0c      	cmp	r3, #12
 800361e:	d824      	bhi.n	800366a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	3b23      	subs	r3, #35	@ 0x23
 8003632:	221f      	movs	r2, #31
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43da      	mvns	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	400a      	ands	r2, r1
 8003640:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	b29b      	uxth	r3, r3
 800364e:	4618      	mov	r0, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	3b23      	subs	r3, #35	@ 0x23
 800365c:	fa00 f203 	lsl.w	r2, r0, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	631a      	str	r2, [r3, #48]	@ 0x30
 8003668:	e023      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	3b41      	subs	r3, #65	@ 0x41
 800367c:	221f      	movs	r2, #31
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43da      	mvns	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	400a      	ands	r2, r1
 800368a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	b29b      	uxth	r3, r3
 8003698:	4618      	mov	r0, r3
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	3b41      	subs	r3, #65	@ 0x41
 80036a6:	fa00 f203 	lsl.w	r2, r0, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036b2:	4b29      	ldr	r3, [pc, #164]	@ (8003758 <HAL_ADC_ConfigChannel+0x250>)
 80036b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a28      	ldr	r2, [pc, #160]	@ (800375c <HAL_ADC_ConfigChannel+0x254>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d10f      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x1d8>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b12      	cmp	r3, #18
 80036c6:	d10b      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1d      	ldr	r2, [pc, #116]	@ (800375c <HAL_ADC_ConfigChannel+0x254>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d12b      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x23a>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003760 <HAL_ADC_ConfigChannel+0x258>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <HAL_ADC_ConfigChannel+0x1f4>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b11      	cmp	r3, #17
 80036fa:	d122      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a11      	ldr	r2, [pc, #68]	@ (8003760 <HAL_ADC_ConfigChannel+0x258>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d111      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800371e:	4b11      	ldr	r3, [pc, #68]	@ (8003764 <HAL_ADC_ConfigChannel+0x25c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a11      	ldr	r2, [pc, #68]	@ (8003768 <HAL_ADC_ConfigChannel+0x260>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	0c9a      	lsrs	r2, r3, #18
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003734:	e002      	b.n	800373c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	3b01      	subs	r3, #1
 800373a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f9      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	40012300 	.word	0x40012300
 800375c:	40012000 	.word	0x40012000
 8003760:	10000012 	.word	0x10000012
 8003764:	2000001c 	.word	0x2000001c
 8003768:	431bde83 	.word	0x431bde83

0800376c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003774:	4b79      	ldr	r3, [pc, #484]	@ (800395c <ADC_Init+0x1f0>)
 8003776:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	431a      	orrs	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	021a      	lsls	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80037c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6899      	ldr	r1, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fe:	4a58      	ldr	r2, [pc, #352]	@ (8003960 <ADC_Init+0x1f4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d022      	beq.n	800384a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003812:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6899      	ldr	r1, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003834:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6899      	ldr	r1, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	e00f      	b.n	800386a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003858:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003868:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0202 	bic.w	r2, r2, #2
 8003878:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6899      	ldr	r1, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	7e1b      	ldrb	r3, [r3, #24]
 8003884:	005a      	lsls	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01b      	beq.n	80038d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80038b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6859      	ldr	r1, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	3b01      	subs	r3, #1
 80038c4:	035a      	lsls	r2, r3, #13
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	e007      	b.n	80038e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80038ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	051a      	lsls	r2, r3, #20
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6899      	ldr	r1, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003922:	025a      	lsls	r2, r3, #9
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800393a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6899      	ldr	r1, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	029a      	lsls	r2, r3, #10
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	609a      	str	r2, [r3, #8]
}
 8003950:	bf00      	nop
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	40012300 	.word	0x40012300
 8003960:	0f000001 	.word	0x0f000001

08003964 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003988:	4b0c      	ldr	r3, [pc, #48]	@ (80039bc <__NVIC_SetPriorityGrouping+0x44>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003994:	4013      	ands	r3, r2
 8003996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039aa:	4a04      	ldr	r2, [pc, #16]	@ (80039bc <__NVIC_SetPriorityGrouping+0x44>)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	60d3      	str	r3, [r2, #12]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c4:	4b04      	ldr	r3, [pc, #16]	@ (80039d8 <__NVIC_GetPriorityGrouping+0x18>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	f003 0307 	and.w	r3, r3, #7
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	db0b      	blt.n	8003a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	f003 021f 	and.w	r2, r3, #31
 80039f4:	4907      	ldr	r1, [pc, #28]	@ (8003a14 <__NVIC_EnableIRQ+0x38>)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	2001      	movs	r0, #1
 80039fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	e000e100 	.word	0xe000e100

08003a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	6039      	str	r1, [r7, #0]
 8003a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	db0a      	blt.n	8003a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	490c      	ldr	r1, [pc, #48]	@ (8003a64 <__NVIC_SetPriority+0x4c>)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	0112      	lsls	r2, r2, #4
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a40:	e00a      	b.n	8003a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	4908      	ldr	r1, [pc, #32]	@ (8003a68 <__NVIC_SetPriority+0x50>)
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	3b04      	subs	r3, #4
 8003a50:	0112      	lsls	r2, r2, #4
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	440b      	add	r3, r1
 8003a56:	761a      	strb	r2, [r3, #24]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000e100 	.word	0xe000e100
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	@ 0x24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f1c3 0307 	rsb	r3, r3, #7
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	bf28      	it	cs
 8003a8a:	2304      	movcs	r3, #4
 8003a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3304      	adds	r3, #4
 8003a92:	2b06      	cmp	r3, #6
 8003a94:	d902      	bls.n	8003a9c <NVIC_EncodePriority+0x30>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3b03      	subs	r3, #3
 8003a9a:	e000      	b.n	8003a9e <NVIC_EncodePriority+0x32>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	401a      	ands	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	43d9      	mvns	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac4:	4313      	orrs	r3, r2
         );
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3724      	adds	r7, #36	@ 0x24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ae4:	d301      	bcc.n	8003aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e00f      	b.n	8003b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aea:	4a0a      	ldr	r2, [pc, #40]	@ (8003b14 <SysTick_Config+0x40>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003af2:	210f      	movs	r1, #15
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	f7ff ff8e 	bl	8003a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003afc:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <SysTick_Config+0x40>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b02:	4b04      	ldr	r3, [pc, #16]	@ (8003b14 <SysTick_Config+0x40>)
 8003b04:	2207      	movs	r2, #7
 8003b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	e000e010 	.word	0xe000e010

08003b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff ff29 	bl	8003978 <__NVIC_SetPriorityGrouping>
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b086      	sub	sp, #24
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	4603      	mov	r3, r0
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b40:	f7ff ff3e 	bl	80039c0 <__NVIC_GetPriorityGrouping>
 8003b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	6978      	ldr	r0, [r7, #20]
 8003b4c:	f7ff ff8e 	bl	8003a6c <NVIC_EncodePriority>
 8003b50:	4602      	mov	r2, r0
 8003b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ff5d 	bl	8003a18 <__NVIC_SetPriority>
}
 8003b5e:	bf00      	nop
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ff31 	bl	80039dc <__NVIC_EnableIRQ>
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff ffa2 	bl	8003ad4 <SysTick_Config>
 8003b90:	4603      	mov	r3, r0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ba8:	f7ff fa4a 	bl	8003040 <HAL_GetTick>
 8003bac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d008      	beq.n	8003bcc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2280      	movs	r2, #128	@ 0x80
 8003bbe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e052      	b.n	8003c72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0216 	bic.w	r2, r2, #22
 8003bda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d103      	bne.n	8003bfc <HAL_DMA_Abort+0x62>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d007      	beq.n	8003c0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0208 	bic.w	r2, r2, #8
 8003c0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0201 	bic.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c1c:	e013      	b.n	8003c46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c1e:	f7ff fa0f 	bl	8003040 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b05      	cmp	r3, #5
 8003c2a:	d90c      	bls.n	8003c46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2203      	movs	r2, #3
 8003c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e015      	b.n	8003c72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e4      	bne.n	8003c1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c58:	223f      	movs	r2, #63	@ 0x3f
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d004      	beq.n	8003c98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2280      	movs	r2, #128	@ 0x80
 8003c92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e00c      	b.n	8003cb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2205      	movs	r2, #5
 8003c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	@ 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	e159      	b.n	8003f90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cdc:	2201      	movs	r2, #1
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4013      	ands	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	f040 8148 	bne.w	8003f8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d005      	beq.n	8003d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d130      	bne.n	8003d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	2203      	movs	r2, #3
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	43db      	mvns	r3, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4013      	ands	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d48:	2201      	movs	r2, #1
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4013      	ands	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 0201 	and.w	r2, r3, #1
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d017      	beq.n	8003db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d123      	bne.n	8003e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	08da      	lsrs	r2, r3, #3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3208      	adds	r2, #8
 8003dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	220f      	movs	r2, #15
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	08da      	lsrs	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3208      	adds	r2, #8
 8003dfe:	69b9      	ldr	r1, [r7, #24]
 8003e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	2203      	movs	r2, #3
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0203 	and.w	r2, r3, #3
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 80a2 	beq.w	8003f8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	4b57      	ldr	r3, [pc, #348]	@ (8003fa8 <HAL_GPIO_Init+0x2e8>)
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	4a56      	ldr	r2, [pc, #344]	@ (8003fa8 <HAL_GPIO_Init+0x2e8>)
 8003e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e56:	4b54      	ldr	r3, [pc, #336]	@ (8003fa8 <HAL_GPIO_Init+0x2e8>)
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e62:	4a52      	ldr	r2, [pc, #328]	@ (8003fac <HAL_GPIO_Init+0x2ec>)
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	089b      	lsrs	r3, r3, #2
 8003e68:	3302      	adds	r3, #2
 8003e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	220f      	movs	r2, #15
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a49      	ldr	r2, [pc, #292]	@ (8003fb0 <HAL_GPIO_Init+0x2f0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d019      	beq.n	8003ec2 <HAL_GPIO_Init+0x202>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a48      	ldr	r2, [pc, #288]	@ (8003fb4 <HAL_GPIO_Init+0x2f4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <HAL_GPIO_Init+0x1fe>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a47      	ldr	r2, [pc, #284]	@ (8003fb8 <HAL_GPIO_Init+0x2f8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00d      	beq.n	8003eba <HAL_GPIO_Init+0x1fa>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a46      	ldr	r2, [pc, #280]	@ (8003fbc <HAL_GPIO_Init+0x2fc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d007      	beq.n	8003eb6 <HAL_GPIO_Init+0x1f6>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a45      	ldr	r2, [pc, #276]	@ (8003fc0 <HAL_GPIO_Init+0x300>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d101      	bne.n	8003eb2 <HAL_GPIO_Init+0x1f2>
 8003eae:	2304      	movs	r3, #4
 8003eb0:	e008      	b.n	8003ec4 <HAL_GPIO_Init+0x204>
 8003eb2:	2307      	movs	r3, #7
 8003eb4:	e006      	b.n	8003ec4 <HAL_GPIO_Init+0x204>
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e004      	b.n	8003ec4 <HAL_GPIO_Init+0x204>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e002      	b.n	8003ec4 <HAL_GPIO_Init+0x204>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <HAL_GPIO_Init+0x204>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	f002 0203 	and.w	r2, r2, #3
 8003eca:	0092      	lsls	r2, r2, #2
 8003ecc:	4093      	lsls	r3, r2
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ed4:	4935      	ldr	r1, [pc, #212]	@ (8003fac <HAL_GPIO_Init+0x2ec>)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	089b      	lsrs	r3, r3, #2
 8003eda:	3302      	adds	r3, #2
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ee2:	4b38      	ldr	r3, [pc, #224]	@ (8003fc4 <HAL_GPIO_Init+0x304>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	43db      	mvns	r3, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f06:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc4 <HAL_GPIO_Init+0x304>)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8003fc4 <HAL_GPIO_Init+0x304>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f30:	4a24      	ldr	r2, [pc, #144]	@ (8003fc4 <HAL_GPIO_Init+0x304>)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f36:	4b23      	ldr	r3, [pc, #140]	@ (8003fc4 <HAL_GPIO_Init+0x304>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4013      	ands	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc4 <HAL_GPIO_Init+0x304>)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f60:	4b18      	ldr	r3, [pc, #96]	@ (8003fc4 <HAL_GPIO_Init+0x304>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f84:	4a0f      	ldr	r2, [pc, #60]	@ (8003fc4 <HAL_GPIO_Init+0x304>)
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b0f      	cmp	r3, #15
 8003f94:	f67f aea2 	bls.w	8003cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	3724      	adds	r7, #36	@ 0x24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40013800 	.word	0x40013800
 8003fb0:	40020000 	.word	0x40020000
 8003fb4:	40020400 	.word	0x40020400
 8003fb8:	40020800 	.word	0x40020800
 8003fbc:	40020c00 	.word	0x40020c00
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40013c00 	.word	0x40013c00

08003fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	887b      	ldrh	r3, [r7, #2]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
 8003fe4:	e001      	b.n	8003fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	807b      	strh	r3, [r7, #2]
 8004004:	4613      	mov	r3, r2
 8004006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004008:	787b      	ldrb	r3, [r7, #1]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004014:	e003      	b.n	800401e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004016:	887b      	ldrh	r3, [r7, #2]
 8004018:	041a      	lsls	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	619a      	str	r2, [r3, #24]
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
	...

0800402c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004036:	4b08      	ldr	r3, [pc, #32]	@ (8004058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	4013      	ands	r3, r2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d006      	beq.n	8004050 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004042:	4a05      	ldr	r2, [pc, #20]	@ (8004058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004044:	88fb      	ldrh	r3, [r7, #6]
 8004046:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe f830 	bl	80020b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004050:	bf00      	nop
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40013c00 	.word	0x40013c00

0800405c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e12b      	b.n	80042c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fe fc78 	bl	8002978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	@ 0x24
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040c0:	f001 f8da 	bl	8005278 <HAL_RCC_GetPCLK1Freq>
 80040c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4a81      	ldr	r2, [pc, #516]	@ (80042d0 <HAL_I2C_Init+0x274>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d807      	bhi.n	80040e0 <HAL_I2C_Init+0x84>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4a80      	ldr	r2, [pc, #512]	@ (80042d4 <HAL_I2C_Init+0x278>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	bf94      	ite	ls
 80040d8:	2301      	movls	r3, #1
 80040da:	2300      	movhi	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	e006      	b.n	80040ee <HAL_I2C_Init+0x92>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a7d      	ldr	r2, [pc, #500]	@ (80042d8 <HAL_I2C_Init+0x27c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	bf94      	ite	ls
 80040e8:	2301      	movls	r3, #1
 80040ea:	2300      	movhi	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0e7      	b.n	80042c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4a78      	ldr	r2, [pc, #480]	@ (80042dc <HAL_I2C_Init+0x280>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	0c9b      	lsrs	r3, r3, #18
 8004100:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a6a      	ldr	r2, [pc, #424]	@ (80042d0 <HAL_I2C_Init+0x274>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d802      	bhi.n	8004130 <HAL_I2C_Init+0xd4>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	3301      	adds	r3, #1
 800412e:	e009      	b.n	8004144 <HAL_I2C_Init+0xe8>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	4a69      	ldr	r2, [pc, #420]	@ (80042e0 <HAL_I2C_Init+0x284>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	099b      	lsrs	r3, r3, #6
 8004142:	3301      	adds	r3, #1
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	430b      	orrs	r3, r1
 800414a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004156:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	495c      	ldr	r1, [pc, #368]	@ (80042d0 <HAL_I2C_Init+0x274>)
 8004160:	428b      	cmp	r3, r1
 8004162:	d819      	bhi.n	8004198 <HAL_I2C_Init+0x13c>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1e59      	subs	r1, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004172:	1c59      	adds	r1, r3, #1
 8004174:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004178:	400b      	ands	r3, r1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_I2C_Init+0x138>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1e59      	subs	r1, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	fbb1 f3f3 	udiv	r3, r1, r3
 800418c:	3301      	adds	r3, #1
 800418e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004192:	e051      	b.n	8004238 <HAL_I2C_Init+0x1dc>
 8004194:	2304      	movs	r3, #4
 8004196:	e04f      	b.n	8004238 <HAL_I2C_Init+0x1dc>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d111      	bne.n	80041c4 <HAL_I2C_Init+0x168>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1e58      	subs	r0, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6859      	ldr	r1, [r3, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	440b      	add	r3, r1
 80041ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b2:	3301      	adds	r3, #1
 80041b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	e012      	b.n	80041ea <HAL_I2C_Init+0x18e>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1e58      	subs	r0, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6859      	ldr	r1, [r3, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	0099      	lsls	r1, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041da:	3301      	adds	r3, #1
 80041dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_I2C_Init+0x196>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e022      	b.n	8004238 <HAL_I2C_Init+0x1dc>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10e      	bne.n	8004218 <HAL_I2C_Init+0x1bc>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	1e58      	subs	r0, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6859      	ldr	r1, [r3, #4]
 8004202:	460b      	mov	r3, r1
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	440b      	add	r3, r1
 8004208:	fbb0 f3f3 	udiv	r3, r0, r3
 800420c:	3301      	adds	r3, #1
 800420e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004216:	e00f      	b.n	8004238 <HAL_I2C_Init+0x1dc>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1e58      	subs	r0, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6859      	ldr	r1, [r3, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	0099      	lsls	r1, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	fbb0 f3f3 	udiv	r3, r0, r3
 800422e:	3301      	adds	r3, #1
 8004230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004234:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	6809      	ldr	r1, [r1, #0]
 800423c:	4313      	orrs	r3, r2
 800423e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69da      	ldr	r2, [r3, #28]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004266:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6911      	ldr	r1, [r2, #16]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68d2      	ldr	r2, [r2, #12]
 8004272:	4311      	orrs	r1, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	430b      	orrs	r3, r1
 800427a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	000186a0 	.word	0x000186a0
 80042d4:	001e847f 	.word	0x001e847f
 80042d8:	003d08ff 	.word	0x003d08ff
 80042dc:	431bde83 	.word	0x431bde83
 80042e0:	10624dd3 	.word	0x10624dd3

080042e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	607a      	str	r2, [r7, #4]
 80042ee:	461a      	mov	r2, r3
 80042f0:	460b      	mov	r3, r1
 80042f2:	817b      	strh	r3, [r7, #10]
 80042f4:	4613      	mov	r3, r2
 80042f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042f8:	f7fe fea2 	bl	8003040 <HAL_GetTick>
 80042fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b20      	cmp	r3, #32
 8004308:	f040 80e0 	bne.w	80044cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	2319      	movs	r3, #25
 8004312:	2201      	movs	r2, #1
 8004314:	4970      	ldr	r1, [pc, #448]	@ (80044d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f964 	bl	80045e4 <I2C_WaitOnFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004322:	2302      	movs	r3, #2
 8004324:	e0d3      	b.n	80044ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_I2C_Master_Transmit+0x50>
 8004330:	2302      	movs	r3, #2
 8004332:	e0cc      	b.n	80044ce <HAL_I2C_Master_Transmit+0x1ea>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b01      	cmp	r3, #1
 8004348:	d007      	beq.n	800435a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0201 	orr.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004368:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2221      	movs	r2, #33	@ 0x21
 800436e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2210      	movs	r2, #16
 8004376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	893a      	ldrh	r2, [r7, #8]
 800438a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4a50      	ldr	r2, [pc, #320]	@ (80044dc <HAL_I2C_Master_Transmit+0x1f8>)
 800439a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800439c:	8979      	ldrh	r1, [r7, #10]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	6a3a      	ldr	r2, [r7, #32]
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 f89c 	bl	80044e0 <I2C_MasterRequestWrite>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e08d      	b.n	80044ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b2:	2300      	movs	r3, #0
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80043c8:	e066      	b.n	8004498 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	6a39      	ldr	r1, [r7, #32]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fa22 	bl	8004818 <I2C_WaitOnTXEFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00d      	beq.n	80043f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d107      	bne.n	80043f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e06b      	b.n	80044ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	781a      	ldrb	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b04      	cmp	r3, #4
 8004432:	d11b      	bne.n	800446c <HAL_I2C_Master_Transmit+0x188>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	d017      	beq.n	800446c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	781a      	ldrb	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	6a39      	ldr	r1, [r7, #32]
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fa19 	bl	80048a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00d      	beq.n	8004498 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004480:	2b04      	cmp	r3, #4
 8004482:	d107      	bne.n	8004494 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004492:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e01a      	b.n	80044ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449c:	2b00      	cmp	r3, #0
 800449e:	d194      	bne.n	80043ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e000      	b.n	80044ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
  }
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	00100002 	.word	0x00100002
 80044dc:	ffff0000 	.word	0xffff0000

080044e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	460b      	mov	r3, r1
 80044ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d006      	beq.n	800450a <I2C_MasterRequestWrite+0x2a>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d003      	beq.n	800450a <I2C_MasterRequestWrite+0x2a>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004508:	d108      	bne.n	800451c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	e00b      	b.n	8004534 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004520:	2b12      	cmp	r3, #18
 8004522:	d107      	bne.n	8004534 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004532:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f84f 	bl	80045e4 <I2C_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00d      	beq.n	8004568 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800455a:	d103      	bne.n	8004564 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004562:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e035      	b.n	80045d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004570:	d108      	bne.n	8004584 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004572:	897b      	ldrh	r3, [r7, #10]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	461a      	mov	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004580:	611a      	str	r2, [r3, #16]
 8004582:	e01b      	b.n	80045bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004584:	897b      	ldrh	r3, [r7, #10]
 8004586:	11db      	asrs	r3, r3, #7
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f003 0306 	and.w	r3, r3, #6
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f063 030f 	orn	r3, r3, #15
 8004594:	b2da      	uxtb	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	490e      	ldr	r1, [pc, #56]	@ (80045dc <I2C_MasterRequestWrite+0xfc>)
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f898 	bl	80046d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e010      	b.n	80045d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045b2:	897b      	ldrh	r3, [r7, #10]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4907      	ldr	r1, [pc, #28]	@ (80045e0 <I2C_MasterRequestWrite+0x100>)
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f888 	bl	80046d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	00010008 	.word	0x00010008
 80045e0:	00010002 	.word	0x00010002

080045e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	4613      	mov	r3, r2
 80045f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045f4:	e048      	b.n	8004688 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fc:	d044      	beq.n	8004688 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fe:	f7fe fd1f 	bl	8003040 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d139      	bne.n	8004688 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	0c1b      	lsrs	r3, r3, #16
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	d10d      	bne.n	800463a <I2C_WaitOnFlagUntilTimeout+0x56>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	43da      	mvns	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4013      	ands	r3, r2
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	e00c      	b.n	8004654 <I2C_WaitOnFlagUntilTimeout+0x70>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	43da      	mvns	r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4013      	ands	r3, r2
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf0c      	ite	eq
 800464c:	2301      	moveq	r3, #1
 800464e:	2300      	movne	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	429a      	cmp	r2, r3
 8004658:	d116      	bne.n	8004688 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004674:	f043 0220 	orr.w	r2, r3, #32
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e023      	b.n	80046d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	0c1b      	lsrs	r3, r3, #16
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	d10d      	bne.n	80046ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	43da      	mvns	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	4013      	ands	r3, r2
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	461a      	mov	r2, r3
 80046ac:	e00c      	b.n	80046c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	43da      	mvns	r2, r3
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4013      	ands	r3, r2
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf0c      	ite	eq
 80046c0:	2301      	moveq	r3, #1
 80046c2:	2300      	movne	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	461a      	mov	r2, r3
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d093      	beq.n	80045f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046e6:	e071      	b.n	80047cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046f6:	d123      	bne.n	8004740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004706:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004710:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472c:	f043 0204 	orr.w	r2, r3, #4
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e067      	b.n	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004746:	d041      	beq.n	80047cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004748:	f7fe fc7a 	bl	8003040 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	429a      	cmp	r2, r3
 8004756:	d302      	bcc.n	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d136      	bne.n	80047cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	d10c      	bne.n	8004782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	43da      	mvns	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4013      	ands	r3, r2
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	bf14      	ite	ne
 800477a:	2301      	movne	r3, #1
 800477c:	2300      	moveq	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	e00b      	b.n	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	43da      	mvns	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4013      	ands	r3, r2
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	bf14      	ite	ne
 8004794:	2301      	movne	r3, #1
 8004796:	2300      	moveq	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d016      	beq.n	80047cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b8:	f043 0220 	orr.w	r2, r3, #32
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e021      	b.n	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d10c      	bne.n	80047f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	43da      	mvns	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4013      	ands	r3, r2
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf14      	ite	ne
 80047e8:	2301      	movne	r3, #1
 80047ea:	2300      	moveq	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e00b      	b.n	8004808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	43da      	mvns	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4013      	ands	r3, r2
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bf14      	ite	ne
 8004802:	2301      	movne	r3, #1
 8004804:	2300      	moveq	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	f47f af6d 	bne.w	80046e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004824:	e034      	b.n	8004890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f886 	bl	8004938 <I2C_IsAcknowledgeFailed>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e034      	b.n	80048a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d028      	beq.n	8004890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483e:	f7fe fbff 	bl	8003040 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	429a      	cmp	r2, r3
 800484c:	d302      	bcc.n	8004854 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d11d      	bne.n	8004890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485e:	2b80      	cmp	r3, #128	@ 0x80
 8004860:	d016      	beq.n	8004890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487c:	f043 0220 	orr.w	r2, r3, #32
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e007      	b.n	80048a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489a:	2b80      	cmp	r3, #128	@ 0x80
 800489c:	d1c3      	bne.n	8004826 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048b4:	e034      	b.n	8004920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f83e 	bl	8004938 <I2C_IsAcknowledgeFailed>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e034      	b.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d028      	beq.n	8004920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ce:	f7fe fbb7 	bl	8003040 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d302      	bcc.n	80048e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d11d      	bne.n	8004920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d016      	beq.n	8004920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	f043 0220 	orr.w	r2, r3, #32
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e007      	b.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b04      	cmp	r3, #4
 800492c:	d1c3      	bne.n	80048b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800494e:	d11b      	bne.n	8004988 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004958:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004974:	f043 0204 	orr.w	r2, r3, #4
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e267      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d075      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049b6:	4b88      	ldr	r3, [pc, #544]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 030c 	and.w	r3, r3, #12
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d00c      	beq.n	80049dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049c2:	4b85      	ldr	r3, [pc, #532]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d112      	bne.n	80049f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ce:	4b82      	ldr	r3, [pc, #520]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049da:	d10b      	bne.n	80049f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049dc:	4b7e      	ldr	r3, [pc, #504]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d05b      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x108>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d157      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e242      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049fc:	d106      	bne.n	8004a0c <HAL_RCC_OscConfig+0x74>
 80049fe:	4b76      	ldr	r3, [pc, #472]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a75      	ldr	r2, [pc, #468]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e01d      	b.n	8004a48 <HAL_RCC_OscConfig+0xb0>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a14:	d10c      	bne.n	8004a30 <HAL_RCC_OscConfig+0x98>
 8004a16:	4b70      	ldr	r3, [pc, #448]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a6f      	ldr	r2, [pc, #444]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	4b6d      	ldr	r3, [pc, #436]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a6c      	ldr	r2, [pc, #432]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	e00b      	b.n	8004a48 <HAL_RCC_OscConfig+0xb0>
 8004a30:	4b69      	ldr	r3, [pc, #420]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a68      	ldr	r2, [pc, #416]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	4b66      	ldr	r3, [pc, #408]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a65      	ldr	r2, [pc, #404]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d013      	beq.n	8004a78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a50:	f7fe faf6 	bl	8003040 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a58:	f7fe faf2 	bl	8003040 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b64      	cmp	r3, #100	@ 0x64
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e207      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f0      	beq.n	8004a58 <HAL_RCC_OscConfig+0xc0>
 8004a76:	e014      	b.n	8004aa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a78:	f7fe fae2 	bl	8003040 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a80:	f7fe fade 	bl	8003040 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b64      	cmp	r3, #100	@ 0x64
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e1f3      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a92:	4b51      	ldr	r3, [pc, #324]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0xe8>
 8004a9e:	e000      	b.n	8004aa2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d063      	beq.n	8004b76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004aae:	4b4a      	ldr	r3, [pc, #296]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00b      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aba:	4b47      	ldr	r3, [pc, #284]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d11c      	bne.n	8004b00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ac6:	4b44      	ldr	r3, [pc, #272]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d116      	bne.n	8004b00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ad2:	4b41      	ldr	r3, [pc, #260]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d005      	beq.n	8004aea <HAL_RCC_OscConfig+0x152>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d001      	beq.n	8004aea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e1c7      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aea:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	4937      	ldr	r1, [pc, #220]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004afe:	e03a      	b.n	8004b76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d020      	beq.n	8004b4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b08:	4b34      	ldr	r3, [pc, #208]	@ (8004bdc <HAL_RCC_OscConfig+0x244>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0e:	f7fe fa97 	bl	8003040 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b16:	f7fe fa93 	bl	8003040 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e1a8      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b28:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0f0      	beq.n	8004b16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b34:	4b28      	ldr	r3, [pc, #160]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	4925      	ldr	r1, [pc, #148]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	600b      	str	r3, [r1, #0]
 8004b48:	e015      	b.n	8004b76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b4a:	4b24      	ldr	r3, [pc, #144]	@ (8004bdc <HAL_RCC_OscConfig+0x244>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b50:	f7fe fa76 	bl	8003040 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b58:	f7fe fa72 	bl	8003040 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e187      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f0      	bne.n	8004b58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d036      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d016      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b8a:	4b15      	ldr	r3, [pc, #84]	@ (8004be0 <HAL_RCC_OscConfig+0x248>)
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b90:	f7fe fa56 	bl	8003040 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b98:	f7fe fa52 	bl	8003040 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e167      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004baa:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd8 <HAL_RCC_OscConfig+0x240>)
 8004bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0f0      	beq.n	8004b98 <HAL_RCC_OscConfig+0x200>
 8004bb6:	e01b      	b.n	8004bf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bb8:	4b09      	ldr	r3, [pc, #36]	@ (8004be0 <HAL_RCC_OscConfig+0x248>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bbe:	f7fe fa3f 	bl	8003040 <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc4:	e00e      	b.n	8004be4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bc6:	f7fe fa3b 	bl	8003040 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d907      	bls.n	8004be4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e150      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	42470000 	.word	0x42470000
 8004be0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be4:	4b88      	ldr	r3, [pc, #544]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1ea      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8097 	beq.w	8004d2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c02:	4b81      	ldr	r3, [pc, #516]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10f      	bne.n	8004c2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	4b7d      	ldr	r3, [pc, #500]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c16:	4a7c      	ldr	r2, [pc, #496]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c1e:	4b7a      	ldr	r3, [pc, #488]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c26:	60bb      	str	r3, [r7, #8]
 8004c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c2e:	4b77      	ldr	r3, [pc, #476]	@ (8004e0c <HAL_RCC_OscConfig+0x474>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d118      	bne.n	8004c6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c3a:	4b74      	ldr	r3, [pc, #464]	@ (8004e0c <HAL_RCC_OscConfig+0x474>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a73      	ldr	r2, [pc, #460]	@ (8004e0c <HAL_RCC_OscConfig+0x474>)
 8004c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c46:	f7fe f9fb 	bl	8003040 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c4e:	f7fe f9f7 	bl	8003040 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e10c      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c60:	4b6a      	ldr	r3, [pc, #424]	@ (8004e0c <HAL_RCC_OscConfig+0x474>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f0      	beq.n	8004c4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d106      	bne.n	8004c82 <HAL_RCC_OscConfig+0x2ea>
 8004c74:	4b64      	ldr	r3, [pc, #400]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c78:	4a63      	ldr	r2, [pc, #396]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004c7a:	f043 0301 	orr.w	r3, r3, #1
 8004c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c80:	e01c      	b.n	8004cbc <HAL_RCC_OscConfig+0x324>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b05      	cmp	r3, #5
 8004c88:	d10c      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x30c>
 8004c8a:	4b5f      	ldr	r3, [pc, #380]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8e:	4a5e      	ldr	r2, [pc, #376]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004c90:	f043 0304 	orr.w	r3, r3, #4
 8004c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c96:	4b5c      	ldr	r3, [pc, #368]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9a:	4a5b      	ldr	r2, [pc, #364]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ca2:	e00b      	b.n	8004cbc <HAL_RCC_OscConfig+0x324>
 8004ca4:	4b58      	ldr	r3, [pc, #352]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca8:	4a57      	ldr	r2, [pc, #348]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cb0:	4b55      	ldr	r3, [pc, #340]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb4:	4a54      	ldr	r2, [pc, #336]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004cb6:	f023 0304 	bic.w	r3, r3, #4
 8004cba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d015      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc4:	f7fe f9bc 	bl	8003040 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cca:	e00a      	b.n	8004ce2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ccc:	f7fe f9b8 	bl	8003040 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e0cb      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce2:	4b49      	ldr	r3, [pc, #292]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0ee      	beq.n	8004ccc <HAL_RCC_OscConfig+0x334>
 8004cee:	e014      	b.n	8004d1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf0:	f7fe f9a6 	bl	8003040 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cf6:	e00a      	b.n	8004d0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf8:	f7fe f9a2 	bl	8003040 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e0b5      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1ee      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d1a:	7dfb      	ldrb	r3, [r7, #23]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d105      	bne.n	8004d2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d20:	4b39      	ldr	r3, [pc, #228]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d24:	4a38      	ldr	r2, [pc, #224]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004d26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80a1 	beq.w	8004e78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d36:	4b34      	ldr	r3, [pc, #208]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d05c      	beq.n	8004dfc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d141      	bne.n	8004dce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4a:	4b31      	ldr	r3, [pc, #196]	@ (8004e10 <HAL_RCC_OscConfig+0x478>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d50:	f7fe f976 	bl	8003040 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d58:	f7fe f972 	bl	8003040 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e087      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6a:	4b27      	ldr	r3, [pc, #156]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69da      	ldr	r2, [r3, #28]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	019b      	lsls	r3, r3, #6
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8c:	085b      	lsrs	r3, r3, #1
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	041b      	lsls	r3, r3, #16
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	061b      	lsls	r3, r3, #24
 8004d9a:	491b      	ldr	r1, [pc, #108]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004da0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e10 <HAL_RCC_OscConfig+0x478>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da6:	f7fe f94b 	bl	8003040 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dae:	f7fe f947 	bl	8003040 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e05c      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dc0:	4b11      	ldr	r3, [pc, #68]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0f0      	beq.n	8004dae <HAL_RCC_OscConfig+0x416>
 8004dcc:	e054      	b.n	8004e78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dce:	4b10      	ldr	r3, [pc, #64]	@ (8004e10 <HAL_RCC_OscConfig+0x478>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd4:	f7fe f934 	bl	8003040 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ddc:	f7fe f930 	bl	8003040 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e045      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dee:	4b06      	ldr	r3, [pc, #24]	@ (8004e08 <HAL_RCC_OscConfig+0x470>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x444>
 8004dfa:	e03d      	b.n	8004e78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d107      	bne.n	8004e14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e038      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	40007000 	.word	0x40007000
 8004e10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e14:	4b1b      	ldr	r3, [pc, #108]	@ (8004e84 <HAL_RCC_OscConfig+0x4ec>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d028      	beq.n	8004e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d121      	bne.n	8004e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d11a      	bne.n	8004e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e44:	4013      	ands	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d111      	bne.n	8004e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d107      	bne.n	8004e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d001      	beq.n	8004e78 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40023800 	.word	0x40023800

08004e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0cc      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e9c:	4b68      	ldr	r3, [pc, #416]	@ (8005040 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d90c      	bls.n	8004ec4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eaa:	4b65      	ldr	r3, [pc, #404]	@ (8005040 <HAL_RCC_ClockConfig+0x1b8>)
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb2:	4b63      	ldr	r3, [pc, #396]	@ (8005040 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0b8      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d020      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004edc:	4b59      	ldr	r3, [pc, #356]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	4a58      	ldr	r2, [pc, #352]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ee6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ef4:	4b53      	ldr	r3, [pc, #332]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	4a52      	ldr	r2, [pc, #328]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004efe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f00:	4b50      	ldr	r3, [pc, #320]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	494d      	ldr	r1, [pc, #308]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d044      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d107      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f26:	4b47      	ldr	r3, [pc, #284]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d119      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e07f      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d003      	beq.n	8004f46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d107      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f46:	4b3f      	ldr	r3, [pc, #252]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e06f      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f56:	4b3b      	ldr	r3, [pc, #236]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e067      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f66:	4b37      	ldr	r3, [pc, #220]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f023 0203 	bic.w	r2, r3, #3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	4934      	ldr	r1, [pc, #208]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f78:	f7fe f862 	bl	8003040 <HAL_GetTick>
 8004f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f7e:	e00a      	b.n	8004f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f80:	f7fe f85e 	bl	8003040 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e04f      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f96:	4b2b      	ldr	r3, [pc, #172]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 020c 	and.w	r2, r3, #12
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d1eb      	bne.n	8004f80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa8:	4b25      	ldr	r3, [pc, #148]	@ (8005040 <HAL_RCC_ClockConfig+0x1b8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d20c      	bcs.n	8004fd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb6:	4b22      	ldr	r3, [pc, #136]	@ (8005040 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fbe:	4b20      	ldr	r3, [pc, #128]	@ (8005040 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d001      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e032      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fdc:	4b19      	ldr	r3, [pc, #100]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4916      	ldr	r1, [pc, #88]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d009      	beq.n	800500e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ffa:	4b12      	ldr	r3, [pc, #72]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	490e      	ldr	r1, [pc, #56]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 800500a:	4313      	orrs	r3, r2
 800500c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800500e:	f000 f821 	bl	8005054 <HAL_RCC_GetSysClockFreq>
 8005012:	4602      	mov	r2, r0
 8005014:	4b0b      	ldr	r3, [pc, #44]	@ (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	091b      	lsrs	r3, r3, #4
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	490a      	ldr	r1, [pc, #40]	@ (8005048 <HAL_RCC_ClockConfig+0x1c0>)
 8005020:	5ccb      	ldrb	r3, [r1, r3]
 8005022:	fa22 f303 	lsr.w	r3, r2, r3
 8005026:	4a09      	ldr	r2, [pc, #36]	@ (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8005028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800502a:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <HAL_RCC_ClockConfig+0x1c8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f7fd ffc2 	bl	8002fb8 <HAL_InitTick>

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40023c00 	.word	0x40023c00
 8005044:	40023800 	.word	0x40023800
 8005048:	08009aec 	.word	0x08009aec
 800504c:	2000001c 	.word	0x2000001c
 8005050:	20000020 	.word	0x20000020

08005054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005058:	b094      	sub	sp, #80	@ 0x50
 800505a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800506c:	4b79      	ldr	r3, [pc, #484]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 030c 	and.w	r3, r3, #12
 8005074:	2b08      	cmp	r3, #8
 8005076:	d00d      	beq.n	8005094 <HAL_RCC_GetSysClockFreq+0x40>
 8005078:	2b08      	cmp	r3, #8
 800507a:	f200 80e1 	bhi.w	8005240 <HAL_RCC_GetSysClockFreq+0x1ec>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_RCC_GetSysClockFreq+0x34>
 8005082:	2b04      	cmp	r3, #4
 8005084:	d003      	beq.n	800508e <HAL_RCC_GetSysClockFreq+0x3a>
 8005086:	e0db      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005088:	4b73      	ldr	r3, [pc, #460]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x204>)
 800508a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800508c:	e0db      	b.n	8005246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800508e:	4b73      	ldr	r3, [pc, #460]	@ (800525c <HAL_RCC_GetSysClockFreq+0x208>)
 8005090:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005092:	e0d8      	b.n	8005246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005094:	4b6f      	ldr	r3, [pc, #444]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800509c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800509e:	4b6d      	ldr	r3, [pc, #436]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d063      	beq.n	8005172 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	099b      	lsrs	r3, r3, #6
 80050b0:	2200      	movs	r2, #0
 80050b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80050be:	2300      	movs	r3, #0
 80050c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80050c6:	4622      	mov	r2, r4
 80050c8:	462b      	mov	r3, r5
 80050ca:	f04f 0000 	mov.w	r0, #0
 80050ce:	f04f 0100 	mov.w	r1, #0
 80050d2:	0159      	lsls	r1, r3, #5
 80050d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d8:	0150      	lsls	r0, r2, #5
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4621      	mov	r1, r4
 80050e0:	1a51      	subs	r1, r2, r1
 80050e2:	6139      	str	r1, [r7, #16]
 80050e4:	4629      	mov	r1, r5
 80050e6:	eb63 0301 	sbc.w	r3, r3, r1
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050f8:	4659      	mov	r1, fp
 80050fa:	018b      	lsls	r3, r1, #6
 80050fc:	4651      	mov	r1, sl
 80050fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005102:	4651      	mov	r1, sl
 8005104:	018a      	lsls	r2, r1, #6
 8005106:	4651      	mov	r1, sl
 8005108:	ebb2 0801 	subs.w	r8, r2, r1
 800510c:	4659      	mov	r1, fp
 800510e:	eb63 0901 	sbc.w	r9, r3, r1
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800511e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005126:	4690      	mov	r8, r2
 8005128:	4699      	mov	r9, r3
 800512a:	4623      	mov	r3, r4
 800512c:	eb18 0303 	adds.w	r3, r8, r3
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	462b      	mov	r3, r5
 8005134:	eb49 0303 	adc.w	r3, r9, r3
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005146:	4629      	mov	r1, r5
 8005148:	024b      	lsls	r3, r1, #9
 800514a:	4621      	mov	r1, r4
 800514c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005150:	4621      	mov	r1, r4
 8005152:	024a      	lsls	r2, r1, #9
 8005154:	4610      	mov	r0, r2
 8005156:	4619      	mov	r1, r3
 8005158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800515a:	2200      	movs	r2, #0
 800515c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800515e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005160:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005164:	f7fb f8a4 	bl	80002b0 <__aeabi_uldivmod>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4613      	mov	r3, r2
 800516e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005170:	e058      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005172:	4b38      	ldr	r3, [pc, #224]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	099b      	lsrs	r3, r3, #6
 8005178:	2200      	movs	r2, #0
 800517a:	4618      	mov	r0, r3
 800517c:	4611      	mov	r1, r2
 800517e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005182:	623b      	str	r3, [r7, #32]
 8005184:	2300      	movs	r3, #0
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
 8005188:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800518c:	4642      	mov	r2, r8
 800518e:	464b      	mov	r3, r9
 8005190:	f04f 0000 	mov.w	r0, #0
 8005194:	f04f 0100 	mov.w	r1, #0
 8005198:	0159      	lsls	r1, r3, #5
 800519a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800519e:	0150      	lsls	r0, r2, #5
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4641      	mov	r1, r8
 80051a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80051aa:	4649      	mov	r1, r9
 80051ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051c4:	ebb2 040a 	subs.w	r4, r2, sl
 80051c8:	eb63 050b 	sbc.w	r5, r3, fp
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	00eb      	lsls	r3, r5, #3
 80051d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051da:	00e2      	lsls	r2, r4, #3
 80051dc:	4614      	mov	r4, r2
 80051de:	461d      	mov	r5, r3
 80051e0:	4643      	mov	r3, r8
 80051e2:	18e3      	adds	r3, r4, r3
 80051e4:	603b      	str	r3, [r7, #0]
 80051e6:	464b      	mov	r3, r9
 80051e8:	eb45 0303 	adc.w	r3, r5, r3
 80051ec:	607b      	str	r3, [r7, #4]
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051fa:	4629      	mov	r1, r5
 80051fc:	028b      	lsls	r3, r1, #10
 80051fe:	4621      	mov	r1, r4
 8005200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005204:	4621      	mov	r1, r4
 8005206:	028a      	lsls	r2, r1, #10
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
 800520c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800520e:	2200      	movs	r2, #0
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	61fa      	str	r2, [r7, #28]
 8005214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005218:	f7fb f84a 	bl	80002b0 <__aeabi_uldivmod>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4613      	mov	r3, r2
 8005222:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005224:	4b0b      	ldr	r3, [pc, #44]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	0c1b      	lsrs	r3, r3, #16
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	3301      	adds	r3, #1
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005234:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005238:	fbb2 f3f3 	udiv	r3, r2, r3
 800523c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800523e:	e002      	b.n	8005246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005240:	4b05      	ldr	r3, [pc, #20]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x204>)
 8005242:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005248:	4618      	mov	r0, r3
 800524a:	3750      	adds	r7, #80	@ 0x50
 800524c:	46bd      	mov	sp, r7
 800524e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005252:	bf00      	nop
 8005254:	40023800 	.word	0x40023800
 8005258:	00f42400 	.word	0x00f42400
 800525c:	007a1200 	.word	0x007a1200

08005260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005264:	4b03      	ldr	r3, [pc, #12]	@ (8005274 <HAL_RCC_GetHCLKFreq+0x14>)
 8005266:	681b      	ldr	r3, [r3, #0]
}
 8005268:	4618      	mov	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	2000001c 	.word	0x2000001c

08005278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800527c:	f7ff fff0 	bl	8005260 <HAL_RCC_GetHCLKFreq>
 8005280:	4602      	mov	r2, r0
 8005282:	4b05      	ldr	r3, [pc, #20]	@ (8005298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	0a9b      	lsrs	r3, r3, #10
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	4903      	ldr	r1, [pc, #12]	@ (800529c <HAL_RCC_GetPCLK1Freq+0x24>)
 800528e:	5ccb      	ldrb	r3, [r1, r3]
 8005290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005294:	4618      	mov	r0, r3
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40023800 	.word	0x40023800
 800529c:	08009afc 	.word	0x08009afc

080052a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052a4:	f7ff ffdc 	bl	8005260 <HAL_RCC_GetHCLKFreq>
 80052a8:	4602      	mov	r2, r0
 80052aa:	4b05      	ldr	r3, [pc, #20]	@ (80052c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	0b5b      	lsrs	r3, r3, #13
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	4903      	ldr	r1, [pc, #12]	@ (80052c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052b6:	5ccb      	ldrb	r3, [r1, r3]
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052bc:	4618      	mov	r0, r3
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40023800 	.word	0x40023800
 80052c4:	08009afc 	.word	0x08009afc

080052c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e07b      	b.n	80053d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d108      	bne.n	80052f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052ea:	d009      	beq.n	8005300 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	61da      	str	r2, [r3, #28]
 80052f2:	e005      	b.n	8005300 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fd fb74 	bl	8002a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005336:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005384:	ea42 0103 	orr.w	r1, r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	f003 0104 	and.w	r1, r3, #4
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a6:	f003 0210 	and.w	r2, r3, #16
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69da      	ldr	r2, [r3, #28]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b088      	sub	sp, #32
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	4613      	mov	r3, r2
 80053e8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ea:	f7fd fe29 	bl	8003040 <HAL_GetTick>
 80053ee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d001      	beq.n	8005404 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005400:	2302      	movs	r3, #2
 8005402:	e12a      	b.n	800565a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_SPI_Transmit+0x36>
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e122      	b.n	800565a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_SPI_Transmit+0x48>
 800541e:	2302      	movs	r3, #2
 8005420:	e11b      	b.n	800565a <HAL_SPI_Transmit+0x280>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2203      	movs	r2, #3
 800542e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	88fa      	ldrh	r2, [r7, #6]
 8005442:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	88fa      	ldrh	r2, [r7, #6]
 8005448:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005470:	d10f      	bne.n	8005492 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005480:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005490:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800549c:	2b40      	cmp	r3, #64	@ 0x40
 800549e:	d007      	beq.n	80054b0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054b8:	d152      	bne.n	8005560 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <HAL_SPI_Transmit+0xee>
 80054c2:	8b7b      	ldrh	r3, [r7, #26]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d145      	bne.n	8005554 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054cc:	881a      	ldrh	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d8:	1c9a      	adds	r2, r3, #2
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054ec:	e032      	b.n	8005554 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d112      	bne.n	8005522 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005500:	881a      	ldrh	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550c:	1c9a      	adds	r2, r3, #2
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005520:	e018      	b.n	8005554 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005522:	f7fd fd8d 	bl	8003040 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d803      	bhi.n	800553a <HAL_SPI_Transmit+0x160>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005538:	d102      	bne.n	8005540 <HAL_SPI_Transmit+0x166>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d109      	bne.n	8005554 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e082      	b.n	800565a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1c7      	bne.n	80054ee <HAL_SPI_Transmit+0x114>
 800555e:	e053      	b.n	8005608 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_SPI_Transmit+0x194>
 8005568:	8b7b      	ldrh	r3, [r7, #26]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d147      	bne.n	80055fe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	330c      	adds	r3, #12
 8005578:	7812      	ldrb	r2, [r2, #0]
 800557a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005594:	e033      	b.n	80055fe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d113      	bne.n	80055cc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	7812      	ldrb	r2, [r2, #0]
 80055b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80055ca:	e018      	b.n	80055fe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055cc:	f7fd fd38 	bl	8003040 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d803      	bhi.n	80055e4 <HAL_SPI_Transmit+0x20a>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e2:	d102      	bne.n	80055ea <HAL_SPI_Transmit+0x210>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e02d      	b.n	800565a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1c6      	bne.n	8005596 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005608:	69fa      	ldr	r2, [r7, #28]
 800560a:	6839      	ldr	r1, [r7, #0]
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 fbd9 	bl	8005dc4 <SPI_EndRxTxTransaction>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2220      	movs	r2, #32
 800561c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10a      	bne.n	800563c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005658:	2300      	movs	r3, #0
  }
}
 800565a:	4618      	mov	r0, r3
 800565c:	3720      	adds	r7, #32
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b088      	sub	sp, #32
 8005666:	af02      	add	r7, sp, #8
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	4613      	mov	r3, r2
 8005670:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b01      	cmp	r3, #1
 800567c:	d001      	beq.n	8005682 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800567e:	2302      	movs	r3, #2
 8005680:	e104      	b.n	800588c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <HAL_SPI_Receive+0x2c>
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e0fc      	b.n	800588c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800569a:	d112      	bne.n	80056c2 <HAL_SPI_Receive+0x60>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10e      	bne.n	80056c2 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2204      	movs	r2, #4
 80056a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056ac:	88fa      	ldrh	r2, [r7, #6]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	4613      	mov	r3, r2
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f8eb 	bl	8005894 <HAL_SPI_TransmitReceive>
 80056be:	4603      	mov	r3, r0
 80056c0:	e0e4      	b.n	800588c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056c2:	f7fd fcbd 	bl	8003040 <HAL_GetTick>
 80056c6:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_SPI_Receive+0x74>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e0da      	b.n	800588c <HAL_SPI_Receive+0x22a>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2204      	movs	r2, #4
 80056e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	88fa      	ldrh	r2, [r7, #6]
 80056f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	88fa      	ldrh	r2, [r7, #6]
 80056fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005724:	d10f      	bne.n	8005746 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005734:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005744:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005750:	2b40      	cmp	r3, #64	@ 0x40
 8005752:	d007      	beq.n	8005764 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005762:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d170      	bne.n	800584e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800576c:	e035      	b.n	80057da <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b01      	cmp	r3, #1
 800577a:	d115      	bne.n	80057a8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f103 020c 	add.w	r2, r3, #12
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005788:	7812      	ldrb	r2, [r2, #0]
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800579c:	b29b      	uxth	r3, r3
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057a6:	e018      	b.n	80057da <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057a8:	f7fd fc4a 	bl	8003040 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d803      	bhi.n	80057c0 <HAL_SPI_Receive+0x15e>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057be:	d102      	bne.n	80057c6 <HAL_SPI_Receive+0x164>
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e058      	b.n	800588c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1c4      	bne.n	800576e <HAL_SPI_Receive+0x10c>
 80057e4:	e038      	b.n	8005858 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d113      	bne.n	800581c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fe:	b292      	uxth	r2, r2
 8005800:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005806:	1c9a      	adds	r2, r3, #2
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800581a:	e018      	b.n	800584e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800581c:	f7fd fc10 	bl	8003040 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d803      	bhi.n	8005834 <HAL_SPI_Receive+0x1d2>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005832:	d102      	bne.n	800583a <HAL_SPI_Receive+0x1d8>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d109      	bne.n	800584e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e01e      	b.n	800588c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1c6      	bne.n	80057e6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 fa4b 	bl	8005cf8 <SPI_EndRxTransaction>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800588a:	2300      	movs	r3, #0
  }
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08a      	sub	sp, #40	@ 0x28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058a2:	2301      	movs	r3, #1
 80058a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058a6:	f7fd fbcb 	bl	8003040 <HAL_GetTick>
 80058aa:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058b2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80058ba:	887b      	ldrh	r3, [r7, #2]
 80058bc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058be:	7ffb      	ldrb	r3, [r7, #31]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d00c      	beq.n	80058de <HAL_SPI_TransmitReceive+0x4a>
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058ca:	d106      	bne.n	80058da <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d102      	bne.n	80058da <HAL_SPI_TransmitReceive+0x46>
 80058d4:	7ffb      	ldrb	r3, [r7, #31]
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d001      	beq.n	80058de <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80058da:	2302      	movs	r3, #2
 80058dc:	e17f      	b.n	8005bde <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <HAL_SPI_TransmitReceive+0x5c>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_SPI_TransmitReceive+0x5c>
 80058ea:	887b      	ldrh	r3, [r7, #2]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e174      	b.n	8005bde <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_SPI_TransmitReceive+0x6e>
 80058fe:	2302      	movs	r3, #2
 8005900:	e16d      	b.n	8005bde <HAL_SPI_TransmitReceive+0x34a>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b04      	cmp	r3, #4
 8005914:	d003      	beq.n	800591e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2205      	movs	r2, #5
 800591a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	887a      	ldrh	r2, [r7, #2]
 800592e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	887a      	ldrh	r2, [r7, #2]
 8005934:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	887a      	ldrh	r2, [r7, #2]
 8005940:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	887a      	ldrh	r2, [r7, #2]
 8005946:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595e:	2b40      	cmp	r3, #64	@ 0x40
 8005960:	d007      	beq.n	8005972 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005970:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800597a:	d17e      	bne.n	8005a7a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_SPI_TransmitReceive+0xf6>
 8005984:	8afb      	ldrh	r3, [r7, #22]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d16c      	bne.n	8005a64 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598e:	881a      	ldrh	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599a:	1c9a      	adds	r2, r3, #2
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ae:	e059      	b.n	8005a64 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d11b      	bne.n	80059f6 <HAL_SPI_TransmitReceive+0x162>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d016      	beq.n	80059f6 <HAL_SPI_TransmitReceive+0x162>
 80059c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d113      	bne.n	80059f6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d2:	881a      	ldrh	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059de:	1c9a      	adds	r2, r3, #2
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d119      	bne.n	8005a38 <HAL_SPI_TransmitReceive+0x1a4>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d014      	beq.n	8005a38 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a18:	b292      	uxth	r2, r2
 8005a1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a20:	1c9a      	adds	r2, r3, #2
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a34:	2301      	movs	r3, #1
 8005a36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a38:	f7fd fb02 	bl	8003040 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d80d      	bhi.n	8005a64 <HAL_SPI_TransmitReceive+0x1d0>
 8005a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4e:	d009      	beq.n	8005a64 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e0bc      	b.n	8005bde <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1a0      	bne.n	80059b0 <HAL_SPI_TransmitReceive+0x11c>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d19b      	bne.n	80059b0 <HAL_SPI_TransmitReceive+0x11c>
 8005a78:	e082      	b.n	8005b80 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_SPI_TransmitReceive+0x1f4>
 8005a82:	8afb      	ldrh	r3, [r7, #22]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d171      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	330c      	adds	r3, #12
 8005a92:	7812      	ldrb	r2, [r2, #0]
 8005a94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aae:	e05d      	b.n	8005b6c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d11c      	bne.n	8005af8 <HAL_SPI_TransmitReceive+0x264>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d017      	beq.n	8005af8 <HAL_SPI_TransmitReceive+0x264>
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d114      	bne.n	8005af8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	7812      	ldrb	r2, [r2, #0]
 8005ada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	3b01      	subs	r3, #1
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d119      	bne.n	8005b3a <HAL_SPI_TransmitReceive+0x2a6>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d014      	beq.n	8005b3a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b36:	2301      	movs	r3, #1
 8005b38:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b3a:	f7fd fa81 	bl	8003040 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d803      	bhi.n	8005b52 <HAL_SPI_TransmitReceive+0x2be>
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d102      	bne.n	8005b58 <HAL_SPI_TransmitReceive+0x2c4>
 8005b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e038      	b.n	8005bde <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d19c      	bne.n	8005ab0 <HAL_SPI_TransmitReceive+0x21c>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d197      	bne.n	8005ab0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b80:	6a3a      	ldr	r2, [r7, #32]
 8005b82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 f91d 	bl	8005dc4 <SPI_EndRxTxTransaction>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2220      	movs	r2, #32
 8005b94:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e01d      	b.n	8005bde <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10a      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005baa:	2300      	movs	r3, #0
 8005bac:	613b      	str	r3, [r7, #16]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	613b      	str	r3, [r7, #16]
 8005bbe:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
  }
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3728      	adds	r7, #40	@ 0x28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	603b      	str	r3, [r7, #0]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bf8:	f7fd fa22 	bl	8003040 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c00:	1a9b      	subs	r3, r3, r2
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	4413      	add	r3, r2
 8005c06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c08:	f7fd fa1a 	bl	8003040 <HAL_GetTick>
 8005c0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c0e:	4b39      	ldr	r3, [pc, #228]	@ (8005cf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	015b      	lsls	r3, r3, #5
 8005c14:	0d1b      	lsrs	r3, r3, #20
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	fb02 f303 	mul.w	r3, r2, r3
 8005c1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c1e:	e055      	b.n	8005ccc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c26:	d051      	beq.n	8005ccc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c28:	f7fd fa0a 	bl	8003040 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d902      	bls.n	8005c3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d13d      	bne.n	8005cba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c56:	d111      	bne.n	8005c7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c60:	d004      	beq.n	8005c6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c6a:	d107      	bne.n	8005c7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c84:	d10f      	bne.n	8005ca6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ca4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e018      	b.n	8005cec <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d102      	bne.n	8005cc6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61fb      	str	r3, [r7, #28]
 8005cc4:	e002      	b.n	8005ccc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	bf0c      	ite	eq
 8005cdc:	2301      	moveq	r3, #1
 8005cde:	2300      	movne	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	79fb      	ldrb	r3, [r7, #7]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d19a      	bne.n	8005c20 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3720      	adds	r7, #32
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	2000001c 	.word	0x2000001c

08005cf8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d0c:	d111      	bne.n	8005d32 <SPI_EndRxTransaction+0x3a>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d16:	d004      	beq.n	8005d22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d20:	d107      	bne.n	8005d32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d30:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d3a:	d12a      	bne.n	8005d92 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d44:	d012      	beq.n	8005d6c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2180      	movs	r1, #128	@ 0x80
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f7ff ff49 	bl	8005be8 <SPI_WaitFlagStateUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d02d      	beq.n	8005db8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d60:	f043 0220 	orr.w	r2, r3, #32
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e026      	b.n	8005dba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2200      	movs	r2, #0
 8005d74:	2101      	movs	r1, #1
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f7ff ff36 	bl	8005be8 <SPI_WaitFlagStateUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d01a      	beq.n	8005db8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d86:	f043 0220 	orr.w	r2, r3, #32
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e013      	b.n	8005dba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f7ff ff23 	bl	8005be8 <SPI_WaitFlagStateUntilTimeout>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dac:	f043 0220 	orr.w	r2, r3, #32
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e000      	b.n	8005dba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	2102      	movs	r1, #2
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7ff ff04 	bl	8005be8 <SPI_WaitFlagStateUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e032      	b.n	8005e5c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005df6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e64 <SPI_EndRxTxTransaction+0xa0>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8005e68 <SPI_EndRxTxTransaction+0xa4>)
 8005dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005e00:	0d5b      	lsrs	r3, r3, #21
 8005e02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e14:	d112      	bne.n	8005e3c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2180      	movs	r1, #128	@ 0x80
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f7ff fee1 	bl	8005be8 <SPI_WaitFlagStateUntilTimeout>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d016      	beq.n	8005e5a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e30:	f043 0220 	orr.w	r2, r3, #32
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e00f      	b.n	8005e5c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e52:	2b80      	cmp	r3, #128	@ 0x80
 8005e54:	d0f2      	beq.n	8005e3c <SPI_EndRxTxTransaction+0x78>
 8005e56:	e000      	b.n	8005e5a <SPI_EndRxTxTransaction+0x96>
        break;
 8005e58:	bf00      	nop
  }

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	2000001c 	.word	0x2000001c
 8005e68:	165e9f81 	.word	0x165e9f81

08005e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e041      	b.n	8005f02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fc fe00 	bl	8002a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f000 fc32 	bl	8006714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d001      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e044      	b.n	8005fae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a1e      	ldr	r2, [pc, #120]	@ (8005fbc <HAL_TIM_Base_Start_IT+0xb0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d018      	beq.n	8005f78 <HAL_TIM_Base_Start_IT+0x6c>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f4e:	d013      	beq.n	8005f78 <HAL_TIM_Base_Start_IT+0x6c>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a1a      	ldr	r2, [pc, #104]	@ (8005fc0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00e      	beq.n	8005f78 <HAL_TIM_Base_Start_IT+0x6c>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a19      	ldr	r2, [pc, #100]	@ (8005fc4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d009      	beq.n	8005f78 <HAL_TIM_Base_Start_IT+0x6c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a17      	ldr	r2, [pc, #92]	@ (8005fc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d004      	beq.n	8005f78 <HAL_TIM_Base_Start_IT+0x6c>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a16      	ldr	r2, [pc, #88]	@ (8005fcc <HAL_TIM_Base_Start_IT+0xc0>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d111      	bne.n	8005f9c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b06      	cmp	r3, #6
 8005f88:	d010      	beq.n	8005fac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f042 0201 	orr.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9a:	e007      	b.n	8005fac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	40010000 	.word	0x40010000
 8005fc0:	40000400 	.word	0x40000400
 8005fc4:	40000800 	.word	0x40000800
 8005fc8:	40000c00 	.word	0x40000c00
 8005fcc:	40014000 	.word	0x40014000

08005fd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e041      	b.n	8006066 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fc fd76 	bl	8002ae8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3304      	adds	r3, #4
 800600c:	4619      	mov	r1, r3
 800600e:	4610      	mov	r0, r2
 8006010:	f000 fb80 	bl	8006714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d109      	bne.n	8006094 <HAL_TIM_PWM_Start+0x24>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b01      	cmp	r3, #1
 800608a:	bf14      	ite	ne
 800608c:	2301      	movne	r3, #1
 800608e:	2300      	moveq	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	e022      	b.n	80060da <HAL_TIM_PWM_Start+0x6a>
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b04      	cmp	r3, #4
 8006098:	d109      	bne.n	80060ae <HAL_TIM_PWM_Start+0x3e>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	bf14      	ite	ne
 80060a6:	2301      	movne	r3, #1
 80060a8:	2300      	moveq	r3, #0
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	e015      	b.n	80060da <HAL_TIM_PWM_Start+0x6a>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d109      	bne.n	80060c8 <HAL_TIM_PWM_Start+0x58>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	bf14      	ite	ne
 80060c0:	2301      	movne	r3, #1
 80060c2:	2300      	moveq	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	e008      	b.n	80060da <HAL_TIM_PWM_Start+0x6a>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	bf14      	ite	ne
 80060d4:	2301      	movne	r3, #1
 80060d6:	2300      	moveq	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e068      	b.n	80061b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d104      	bne.n	80060f2 <HAL_TIM_PWM_Start+0x82>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060f0:	e013      	b.n	800611a <HAL_TIM_PWM_Start+0xaa>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	d104      	bne.n	8006102 <HAL_TIM_PWM_Start+0x92>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006100:	e00b      	b.n	800611a <HAL_TIM_PWM_Start+0xaa>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b08      	cmp	r3, #8
 8006106:	d104      	bne.n	8006112 <HAL_TIM_PWM_Start+0xa2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006110:	e003      	b.n	800611a <HAL_TIM_PWM_Start+0xaa>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2202      	movs	r2, #2
 8006116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2201      	movs	r2, #1
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fda2 	bl	8006c6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a23      	ldr	r2, [pc, #140]	@ (80061bc <HAL_TIM_PWM_Start+0x14c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d107      	bne.n	8006142 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006140:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a1d      	ldr	r2, [pc, #116]	@ (80061bc <HAL_TIM_PWM_Start+0x14c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d018      	beq.n	800617e <HAL_TIM_PWM_Start+0x10e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006154:	d013      	beq.n	800617e <HAL_TIM_PWM_Start+0x10e>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a19      	ldr	r2, [pc, #100]	@ (80061c0 <HAL_TIM_PWM_Start+0x150>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00e      	beq.n	800617e <HAL_TIM_PWM_Start+0x10e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a17      	ldr	r2, [pc, #92]	@ (80061c4 <HAL_TIM_PWM_Start+0x154>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d009      	beq.n	800617e <HAL_TIM_PWM_Start+0x10e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a16      	ldr	r2, [pc, #88]	@ (80061c8 <HAL_TIM_PWM_Start+0x158>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d004      	beq.n	800617e <HAL_TIM_PWM_Start+0x10e>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a14      	ldr	r2, [pc, #80]	@ (80061cc <HAL_TIM_PWM_Start+0x15c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d111      	bne.n	80061a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b06      	cmp	r3, #6
 800618e:	d010      	beq.n	80061b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a0:	e007      	b.n	80061b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0201 	orr.w	r2, r2, #1
 80061b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	40010000 	.word	0x40010000
 80061c0:	40000400 	.word	0x40000400
 80061c4:	40000800 	.word	0x40000800
 80061c8:	40000c00 	.word	0x40000c00
 80061cc:	40014000 	.word	0x40014000

080061d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d020      	beq.n	8006234 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01b      	beq.n	8006234 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0202 	mvn.w	r2, #2
 8006204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa5b 	bl	80066d6 <HAL_TIM_IC_CaptureCallback>
 8006220:	e005      	b.n	800622e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fa4d 	bl	80066c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fa5e 	bl	80066ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	d020      	beq.n	8006280 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01b      	beq.n	8006280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f06f 0204 	mvn.w	r2, #4
 8006250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2202      	movs	r2, #2
 8006256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fa35 	bl	80066d6 <HAL_TIM_IC_CaptureCallback>
 800626c:	e005      	b.n	800627a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa27 	bl	80066c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fa38 	bl	80066ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d020      	beq.n	80062cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f003 0308 	and.w	r3, r3, #8
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01b      	beq.n	80062cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0208 	mvn.w	r2, #8
 800629c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2204      	movs	r2, #4
 80062a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fa0f 	bl	80066d6 <HAL_TIM_IC_CaptureCallback>
 80062b8:	e005      	b.n	80062c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa01 	bl	80066c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fa12 	bl	80066ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f003 0310 	and.w	r3, r3, #16
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d020      	beq.n	8006318 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 0310 	and.w	r3, r3, #16
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01b      	beq.n	8006318 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f06f 0210 	mvn.w	r2, #16
 80062e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2208      	movs	r2, #8
 80062ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f9e9 	bl	80066d6 <HAL_TIM_IC_CaptureCallback>
 8006304:	e005      	b.n	8006312 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f9db 	bl	80066c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f9ec 	bl	80066ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00c      	beq.n	800633c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d007      	beq.n	800633c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0201 	mvn.w	r2, #1
 8006334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fb face 	bl	80018d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00c      	beq.n	8006360 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fd24 	bl	8006da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00c      	beq.n	8006384 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d007      	beq.n	8006384 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800637c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f9bd 	bl	80066fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00c      	beq.n	80063a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b00      	cmp	r3, #0
 8006396:	d007      	beq.n	80063a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f06f 0220 	mvn.w	r2, #32
 80063a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fcf6 	bl	8006d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063a8:	bf00      	nop
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063ca:	2302      	movs	r3, #2
 80063cc:	e0ae      	b.n	800652c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b0c      	cmp	r3, #12
 80063da:	f200 809f 	bhi.w	800651c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063de:	a201      	add	r2, pc, #4	@ (adr r2, 80063e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	08006419 	.word	0x08006419
 80063e8:	0800651d 	.word	0x0800651d
 80063ec:	0800651d 	.word	0x0800651d
 80063f0:	0800651d 	.word	0x0800651d
 80063f4:	08006459 	.word	0x08006459
 80063f8:	0800651d 	.word	0x0800651d
 80063fc:	0800651d 	.word	0x0800651d
 8006400:	0800651d 	.word	0x0800651d
 8006404:	0800649b 	.word	0x0800649b
 8006408:	0800651d 	.word	0x0800651d
 800640c:	0800651d 	.word	0x0800651d
 8006410:	0800651d 	.word	0x0800651d
 8006414:	080064db 	.word	0x080064db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 f9fe 	bl	8006820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699a      	ldr	r2, [r3, #24]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0208 	orr.w	r2, r2, #8
 8006432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0204 	bic.w	r2, r2, #4
 8006442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6999      	ldr	r1, [r3, #24]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	619a      	str	r2, [r3, #24]
      break;
 8006456:	e064      	b.n	8006522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fa44 	bl	80068ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699a      	ldr	r2, [r3, #24]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6999      	ldr	r1, [r3, #24]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	021a      	lsls	r2, r3, #8
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	619a      	str	r2, [r3, #24]
      break;
 8006498:	e043      	b.n	8006522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fa8f 	bl	80069c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69da      	ldr	r2, [r3, #28]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 0208 	orr.w	r2, r2, #8
 80064b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0204 	bic.w	r2, r2, #4
 80064c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69d9      	ldr	r1, [r3, #28]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	691a      	ldr	r2, [r3, #16]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	61da      	str	r2, [r3, #28]
      break;
 80064d8:	e023      	b.n	8006522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68b9      	ldr	r1, [r7, #8]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fad9 	bl	8006a98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69da      	ldr	r2, [r3, #28]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69da      	ldr	r2, [r3, #28]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69d9      	ldr	r1, [r3, #28]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	021a      	lsls	r2, r3, #8
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	61da      	str	r2, [r3, #28]
      break;
 800651a:	e002      	b.n	8006522 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	75fb      	strb	r3, [r7, #23]
      break;
 8006520:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800652a:	7dfb      	ldrb	r3, [r7, #23]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006548:	2b01      	cmp	r3, #1
 800654a:	d101      	bne.n	8006550 <HAL_TIM_ConfigClockSource+0x1c>
 800654c:	2302      	movs	r3, #2
 800654e:	e0b4      	b.n	80066ba <HAL_TIM_ConfigClockSource+0x186>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800656e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006588:	d03e      	beq.n	8006608 <HAL_TIM_ConfigClockSource+0xd4>
 800658a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800658e:	f200 8087 	bhi.w	80066a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006596:	f000 8086 	beq.w	80066a6 <HAL_TIM_ConfigClockSource+0x172>
 800659a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800659e:	d87f      	bhi.n	80066a0 <HAL_TIM_ConfigClockSource+0x16c>
 80065a0:	2b70      	cmp	r3, #112	@ 0x70
 80065a2:	d01a      	beq.n	80065da <HAL_TIM_ConfigClockSource+0xa6>
 80065a4:	2b70      	cmp	r3, #112	@ 0x70
 80065a6:	d87b      	bhi.n	80066a0 <HAL_TIM_ConfigClockSource+0x16c>
 80065a8:	2b60      	cmp	r3, #96	@ 0x60
 80065aa:	d050      	beq.n	800664e <HAL_TIM_ConfigClockSource+0x11a>
 80065ac:	2b60      	cmp	r3, #96	@ 0x60
 80065ae:	d877      	bhi.n	80066a0 <HAL_TIM_ConfigClockSource+0x16c>
 80065b0:	2b50      	cmp	r3, #80	@ 0x50
 80065b2:	d03c      	beq.n	800662e <HAL_TIM_ConfigClockSource+0xfa>
 80065b4:	2b50      	cmp	r3, #80	@ 0x50
 80065b6:	d873      	bhi.n	80066a0 <HAL_TIM_ConfigClockSource+0x16c>
 80065b8:	2b40      	cmp	r3, #64	@ 0x40
 80065ba:	d058      	beq.n	800666e <HAL_TIM_ConfigClockSource+0x13a>
 80065bc:	2b40      	cmp	r3, #64	@ 0x40
 80065be:	d86f      	bhi.n	80066a0 <HAL_TIM_ConfigClockSource+0x16c>
 80065c0:	2b30      	cmp	r3, #48	@ 0x30
 80065c2:	d064      	beq.n	800668e <HAL_TIM_ConfigClockSource+0x15a>
 80065c4:	2b30      	cmp	r3, #48	@ 0x30
 80065c6:	d86b      	bhi.n	80066a0 <HAL_TIM_ConfigClockSource+0x16c>
 80065c8:	2b20      	cmp	r3, #32
 80065ca:	d060      	beq.n	800668e <HAL_TIM_ConfigClockSource+0x15a>
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d867      	bhi.n	80066a0 <HAL_TIM_ConfigClockSource+0x16c>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d05c      	beq.n	800668e <HAL_TIM_ConfigClockSource+0x15a>
 80065d4:	2b10      	cmp	r3, #16
 80065d6:	d05a      	beq.n	800668e <HAL_TIM_ConfigClockSource+0x15a>
 80065d8:	e062      	b.n	80066a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065ea:	f000 fb1f 	bl	8006c2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80065fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	609a      	str	r2, [r3, #8]
      break;
 8006606:	e04f      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006618:	f000 fb08 	bl	8006c2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800662a:	609a      	str	r2, [r3, #8]
      break;
 800662c:	e03c      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800663a:	461a      	mov	r2, r3
 800663c:	f000 fa7c 	bl	8006b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2150      	movs	r1, #80	@ 0x50
 8006646:	4618      	mov	r0, r3
 8006648:	f000 fad5 	bl	8006bf6 <TIM_ITRx_SetConfig>
      break;
 800664c:	e02c      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800665a:	461a      	mov	r2, r3
 800665c:	f000 fa9b 	bl	8006b96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2160      	movs	r1, #96	@ 0x60
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fac5 	bl	8006bf6 <TIM_ITRx_SetConfig>
      break;
 800666c:	e01c      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800667a:	461a      	mov	r2, r3
 800667c:	f000 fa5c 	bl	8006b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2140      	movs	r1, #64	@ 0x40
 8006686:	4618      	mov	r0, r3
 8006688:	f000 fab5 	bl	8006bf6 <TIM_ITRx_SetConfig>
      break;
 800668c:	e00c      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4619      	mov	r1, r3
 8006698:	4610      	mov	r0, r2
 800669a:	f000 faac 	bl	8006bf6 <TIM_ITRx_SetConfig>
      break;
 800669e:	e003      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]
      break;
 80066a4:	e000      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
	...

08006714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a37      	ldr	r2, [pc, #220]	@ (8006804 <TIM_Base_SetConfig+0xf0>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d00f      	beq.n	800674c <TIM_Base_SetConfig+0x38>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006732:	d00b      	beq.n	800674c <TIM_Base_SetConfig+0x38>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a34      	ldr	r2, [pc, #208]	@ (8006808 <TIM_Base_SetConfig+0xf4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d007      	beq.n	800674c <TIM_Base_SetConfig+0x38>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a33      	ldr	r2, [pc, #204]	@ (800680c <TIM_Base_SetConfig+0xf8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d003      	beq.n	800674c <TIM_Base_SetConfig+0x38>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a32      	ldr	r2, [pc, #200]	@ (8006810 <TIM_Base_SetConfig+0xfc>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d108      	bne.n	800675e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a28      	ldr	r2, [pc, #160]	@ (8006804 <TIM_Base_SetConfig+0xf0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d01b      	beq.n	800679e <TIM_Base_SetConfig+0x8a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800676c:	d017      	beq.n	800679e <TIM_Base_SetConfig+0x8a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a25      	ldr	r2, [pc, #148]	@ (8006808 <TIM_Base_SetConfig+0xf4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d013      	beq.n	800679e <TIM_Base_SetConfig+0x8a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a24      	ldr	r2, [pc, #144]	@ (800680c <TIM_Base_SetConfig+0xf8>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d00f      	beq.n	800679e <TIM_Base_SetConfig+0x8a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a23      	ldr	r2, [pc, #140]	@ (8006810 <TIM_Base_SetConfig+0xfc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00b      	beq.n	800679e <TIM_Base_SetConfig+0x8a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a22      	ldr	r2, [pc, #136]	@ (8006814 <TIM_Base_SetConfig+0x100>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d007      	beq.n	800679e <TIM_Base_SetConfig+0x8a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a21      	ldr	r2, [pc, #132]	@ (8006818 <TIM_Base_SetConfig+0x104>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d003      	beq.n	800679e <TIM_Base_SetConfig+0x8a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a20      	ldr	r2, [pc, #128]	@ (800681c <TIM_Base_SetConfig+0x108>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d108      	bne.n	80067b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006804 <TIM_Base_SetConfig+0xf0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d103      	bne.n	80067de <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f043 0204 	orr.w	r2, r3, #4
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	601a      	str	r2, [r3, #0]
}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	40010000 	.word	0x40010000
 8006808:	40000400 	.word	0x40000400
 800680c:	40000800 	.word	0x40000800
 8006810:	40000c00 	.word	0x40000c00
 8006814:	40014000 	.word	0x40014000
 8006818:	40014400 	.word	0x40014400
 800681c:	40014800 	.word	0x40014800

08006820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f023 0201 	bic.w	r2, r3, #1
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800684e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0303 	bic.w	r3, r3, #3
 8006856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f023 0302 	bic.w	r3, r3, #2
 8006868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4313      	orrs	r3, r2
 8006872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a1c      	ldr	r2, [pc, #112]	@ (80068e8 <TIM_OC1_SetConfig+0xc8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d10c      	bne.n	8006896 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f023 0308 	bic.w	r3, r3, #8
 8006882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f023 0304 	bic.w	r3, r3, #4
 8006894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a13      	ldr	r2, [pc, #76]	@ (80068e8 <TIM_OC1_SetConfig+0xc8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d111      	bne.n	80068c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	621a      	str	r2, [r3, #32]
}
 80068dc:	bf00      	nop
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	40010000 	.word	0x40010000

080068ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	f023 0210 	bic.w	r2, r3, #16
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800691a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	021b      	lsls	r3, r3, #8
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0320 	bic.w	r3, r3, #32
 8006936:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	4313      	orrs	r3, r2
 8006942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a1e      	ldr	r2, [pc, #120]	@ (80069c0 <TIM_OC2_SetConfig+0xd4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d10d      	bne.n	8006968 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006966:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a15      	ldr	r2, [pc, #84]	@ (80069c0 <TIM_OC2_SetConfig+0xd4>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d113      	bne.n	8006998 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006976:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800697e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	621a      	str	r2, [r3, #32]
}
 80069b2:	bf00      	nop
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	40010000 	.word	0x40010000

080069c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0303 	bic.w	r3, r3, #3
 80069fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	021b      	lsls	r3, r3, #8
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006a94 <TIM_OC3_SetConfig+0xd0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d10d      	bne.n	8006a3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	021b      	lsls	r3, r3, #8
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a14      	ldr	r2, [pc, #80]	@ (8006a94 <TIM_OC3_SetConfig+0xd0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d113      	bne.n	8006a6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	621a      	str	r2, [r3, #32]
}
 8006a88:	bf00      	nop
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	40010000 	.word	0x40010000

08006a98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	021b      	lsls	r3, r3, #8
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ae2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	031b      	lsls	r3, r3, #12
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a10      	ldr	r2, [pc, #64]	@ (8006b34 <TIM_OC4_SetConfig+0x9c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d109      	bne.n	8006b0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006afe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	019b      	lsls	r3, r3, #6
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	621a      	str	r2, [r3, #32]
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40010000 	.word	0x40010000

08006b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	f023 0201 	bic.w	r2, r3, #1
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f023 030a 	bic.w	r3, r3, #10
 8006b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	621a      	str	r2, [r3, #32]
}
 8006b8a:	bf00      	nop
 8006b8c:	371c      	adds	r7, #28
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b087      	sub	sp, #28
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	60f8      	str	r0, [r7, #12]
 8006b9e:	60b9      	str	r1, [r7, #8]
 8006ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	f023 0210 	bic.w	r2, r3, #16
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	031b      	lsls	r3, r3, #12
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	011b      	lsls	r3, r3, #4
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	621a      	str	r2, [r3, #32]
}
 8006bea:	bf00      	nop
 8006bec:	371c      	adds	r7, #28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b085      	sub	sp, #20
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	f043 0307 	orr.w	r3, r3, #7
 8006c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	609a      	str	r2, [r3, #8]
}
 8006c20:	bf00      	nop
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	021a      	lsls	r2, r3, #8
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	609a      	str	r2, [r3, #8]
}
 8006c60:	bf00      	nop
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f003 031f 	and.w	r3, r3, #31
 8006c7e:	2201      	movs	r2, #1
 8006c80:	fa02 f303 	lsl.w	r3, r2, r3
 8006c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a1a      	ldr	r2, [r3, #32]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	43db      	mvns	r3, r3
 8006c8e:	401a      	ands	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a1a      	ldr	r2, [r3, #32]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f003 031f 	and.w	r3, r3, #31
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
	...

08006cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e050      	b.n	8006d72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8006d80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d018      	beq.n	8006d46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d1c:	d013      	beq.n	8006d46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a18      	ldr	r2, [pc, #96]	@ (8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00e      	beq.n	8006d46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a16      	ldr	r2, [pc, #88]	@ (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d009      	beq.n	8006d46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a15      	ldr	r2, [pc, #84]	@ (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d004      	beq.n	8006d46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a13      	ldr	r2, [pc, #76]	@ (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d10c      	bne.n	8006d60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40010000 	.word	0x40010000
 8006d84:	40000400 	.word	0x40000400
 8006d88:	40000800 	.word	0x40000800
 8006d8c:	40000c00 	.word	0x40000c00
 8006d90:	40014000 	.word	0x40014000

08006d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e042      	b.n	8006e54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d106      	bne.n	8006de8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fb fee2 	bl	8002bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2224      	movs	r2, #36	@ 0x24
 8006dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006dfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fdd3 	bl	80079ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	691a      	ldr	r2, [r3, #16]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	695a      	ldr	r2, [r3, #20]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08a      	sub	sp, #40	@ 0x28
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b20      	cmp	r3, #32
 8006e7a:	d175      	bne.n	8006f68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <HAL_UART_Transmit+0x2c>
 8006e82:	88fb      	ldrh	r3, [r7, #6]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e06e      	b.n	8006f6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2221      	movs	r2, #33	@ 0x21
 8006e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e9a:	f7fc f8d1 	bl	8003040 <HAL_GetTick>
 8006e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	88fa      	ldrh	r2, [r7, #6]
 8006ea4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	88fa      	ldrh	r2, [r7, #6]
 8006eaa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb4:	d108      	bne.n	8006ec8 <HAL_UART_Transmit+0x6c>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d104      	bne.n	8006ec8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	61bb      	str	r3, [r7, #24]
 8006ec6:	e003      	b.n	8006ed0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ed0:	e02e      	b.n	8006f30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2180      	movs	r1, #128	@ 0x80
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 fb37 	bl	8007550 <UART_WaitOnFlagUntilTimeout>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2220      	movs	r2, #32
 8006eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e03a      	b.n	8006f6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10b      	bne.n	8006f12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	3302      	adds	r3, #2
 8006f0e:	61bb      	str	r3, [r7, #24]
 8006f10:	e007      	b.n	8006f22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	781a      	ldrb	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1cb      	bne.n	8006ed2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2200      	movs	r2, #0
 8006f42:	2140      	movs	r1, #64	@ 0x40
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 fb03 	bl	8007550 <UART_WaitOnFlagUntilTimeout>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d005      	beq.n	8006f5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2220      	movs	r2, #32
 8006f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e006      	b.n	8006f6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	e000      	b.n	8006f6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006f68:	2302      	movs	r3, #2
  }
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3720      	adds	r7, #32
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d112      	bne.n	8006fb2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <HAL_UART_Receive_IT+0x26>
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e00b      	b.n	8006fb4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006fa2:	88fb      	ldrh	r3, [r7, #6]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	68b9      	ldr	r1, [r7, #8]
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 fb2a 	bl	8007602 <UART_Start_Receive_IT>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	e000      	b.n	8006fb4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006fb2:	2302      	movs	r3, #2
  }
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b0ba      	sub	sp, #232	@ 0xe8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006ffa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10f      	bne.n	8007022 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b00      	cmp	r3, #0
 800700c:	d009      	beq.n	8007022 <HAL_UART_IRQHandler+0x66>
 800700e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fc07 	bl	800782e <UART_Receive_IT>
      return;
 8007020:	e273      	b.n	800750a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007022:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 80de 	beq.w	80071e8 <HAL_UART_IRQHandler+0x22c>
 800702c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d106      	bne.n	8007046 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800703c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80d1 	beq.w	80071e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00b      	beq.n	800706a <HAL_UART_IRQHandler+0xae>
 8007052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800705a:	2b00      	cmp	r3, #0
 800705c:	d005      	beq.n	800706a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007062:	f043 0201 	orr.w	r2, r3, #1
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800706a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00b      	beq.n	800708e <HAL_UART_IRQHandler+0xd2>
 8007076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007086:	f043 0202 	orr.w	r2, r3, #2
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00b      	beq.n	80070b2 <HAL_UART_IRQHandler+0xf6>
 800709a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070aa:	f043 0204 	orr.w	r2, r3, #4
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80070b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d011      	beq.n	80070e2 <HAL_UART_IRQHandler+0x126>
 80070be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070c2:	f003 0320 	and.w	r3, r3, #32
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80070ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d005      	beq.n	80070e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070da:	f043 0208 	orr.w	r2, r3, #8
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 820a 	beq.w	8007500 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d008      	beq.n	800710a <HAL_UART_IRQHandler+0x14e>
 80070f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fb92 	bl	800782e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007114:	2b40      	cmp	r3, #64	@ 0x40
 8007116:	bf0c      	ite	eq
 8007118:	2301      	moveq	r3, #1
 800711a:	2300      	movne	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007126:	f003 0308 	and.w	r3, r3, #8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d103      	bne.n	8007136 <HAL_UART_IRQHandler+0x17a>
 800712e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007132:	2b00      	cmp	r3, #0
 8007134:	d04f      	beq.n	80071d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fa9d 	bl	8007676 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007146:	2b40      	cmp	r3, #64	@ 0x40
 8007148:	d141      	bne.n	80071ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3314      	adds	r3, #20
 8007150:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007160:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3314      	adds	r3, #20
 8007172:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007176:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800717a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007182:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800718e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1d9      	bne.n	800714a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800719a:	2b00      	cmp	r3, #0
 800719c:	d013      	beq.n	80071c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a2:	4a8a      	ldr	r2, [pc, #552]	@ (80073cc <HAL_UART_IRQHandler+0x410>)
 80071a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fc fd65 	bl	8003c7a <HAL_DMA_Abort_IT>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d016      	beq.n	80071e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80071c0:	4610      	mov	r0, r2
 80071c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c4:	e00e      	b.n	80071e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f9ac 	bl	8007524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071cc:	e00a      	b.n	80071e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f9a8 	bl	8007524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d4:	e006      	b.n	80071e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f9a4 	bl	8007524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80071e2:	e18d      	b.n	8007500 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e4:	bf00      	nop
    return;
 80071e6:	e18b      	b.n	8007500 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	f040 8167 	bne.w	80074c0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80071f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071f6:	f003 0310 	and.w	r3, r3, #16
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 8160 	beq.w	80074c0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007204:	f003 0310 	and.w	r3, r3, #16
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 8159 	beq.w	80074c0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800720e:	2300      	movs	r3, #0
 8007210:	60bb      	str	r3, [r7, #8]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60bb      	str	r3, [r7, #8]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	60bb      	str	r3, [r7, #8]
 8007222:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800722e:	2b40      	cmp	r3, #64	@ 0x40
 8007230:	f040 80ce 	bne.w	80073d0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007240:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 80a9 	beq.w	800739c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800724e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007252:	429a      	cmp	r2, r3
 8007254:	f080 80a2 	bcs.w	800739c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800725e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800726a:	f000 8088 	beq.w	800737e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	330c      	adds	r3, #12
 8007274:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007284:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800728c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	330c      	adds	r3, #12
 8007296:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800729a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800729e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80072a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80072b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1d9      	bne.n	800726e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3314      	adds	r3, #20
 80072c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072c4:	e853 3f00 	ldrex	r3, [r3]
 80072c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80072ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072cc:	f023 0301 	bic.w	r3, r3, #1
 80072d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3314      	adds	r3, #20
 80072da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80072de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80072e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80072e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80072f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e1      	bne.n	80072ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3314      	adds	r3, #20
 80072fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800730c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3314      	adds	r3, #20
 8007316:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800731a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800731c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007320:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e3      	bne.n	80072f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2220      	movs	r2, #32
 8007332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	330c      	adds	r3, #12
 8007342:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007346:	e853 3f00 	ldrex	r3, [r3]
 800734a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800734c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800734e:	f023 0310 	bic.w	r3, r3, #16
 8007352:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	330c      	adds	r3, #12
 800735c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007360:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007362:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007366:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800736e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e3      	bne.n	800733c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007378:	4618      	mov	r0, r3
 800737a:	f7fc fc0e 	bl	8003b9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2202      	movs	r2, #2
 8007382:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800738c:	b29b      	uxth	r3, r3
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	b29b      	uxth	r3, r3
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f8cf 	bl	8007538 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800739a:	e0b3      	b.n	8007504 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073a4:	429a      	cmp	r2, r3
 80073a6:	f040 80ad 	bne.w	8007504 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073b4:	f040 80a6 	bne.w	8007504 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f8b7 	bl	8007538 <HAL_UARTEx_RxEventCallback>
      return;
 80073ca:	e09b      	b.n	8007504 <HAL_UART_IRQHandler+0x548>
 80073cc:	0800773d 	.word	0x0800773d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073d8:	b29b      	uxth	r3, r3
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 808e 	beq.w	8007508 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80073ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 8089 	beq.w	8007508 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	330c      	adds	r3, #12
 80073fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007408:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800740c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	330c      	adds	r3, #12
 8007416:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800741a:	647a      	str	r2, [r7, #68]	@ 0x44
 800741c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007420:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e3      	bne.n	80073f6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3314      	adds	r3, #20
 8007434:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007438:	e853 3f00 	ldrex	r3, [r3]
 800743c:	623b      	str	r3, [r7, #32]
   return(result);
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	f023 0301 	bic.w	r3, r3, #1
 8007444:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3314      	adds	r3, #20
 800744e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007452:	633a      	str	r2, [r7, #48]	@ 0x30
 8007454:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e3      	bne.n	800742e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2220      	movs	r2, #32
 800746a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	330c      	adds	r3, #12
 800747a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	60fb      	str	r3, [r7, #12]
   return(result);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f023 0310 	bic.w	r3, r3, #16
 800748a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	330c      	adds	r3, #12
 8007494:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007498:	61fa      	str	r2, [r7, #28]
 800749a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749c:	69b9      	ldr	r1, [r7, #24]
 800749e:	69fa      	ldr	r2, [r7, #28]
 80074a0:	e841 2300 	strex	r3, r2, [r1]
 80074a4:	617b      	str	r3, [r7, #20]
   return(result);
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e3      	bne.n	8007474 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f83d 	bl	8007538 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074be:	e023      	b.n	8007508 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d009      	beq.n	80074e0 <HAL_UART_IRQHandler+0x524>
 80074cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d003      	beq.n	80074e0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f940 	bl	800775e <UART_Transmit_IT>
    return;
 80074de:	e014      	b.n	800750a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00e      	beq.n	800750a <HAL_UART_IRQHandler+0x54e>
 80074ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d008      	beq.n	800750a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f980 	bl	80077fe <UART_EndTransmit_IT>
    return;
 80074fe:	e004      	b.n	800750a <HAL_UART_IRQHandler+0x54e>
    return;
 8007500:	bf00      	nop
 8007502:	e002      	b.n	800750a <HAL_UART_IRQHandler+0x54e>
      return;
 8007504:	bf00      	nop
 8007506:	e000      	b.n	800750a <HAL_UART_IRQHandler+0x54e>
      return;
 8007508:	bf00      	nop
  }
}
 800750a:	37e8      	adds	r7, #232	@ 0xe8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	603b      	str	r3, [r7, #0]
 800755c:	4613      	mov	r3, r2
 800755e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007560:	e03b      	b.n	80075da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007568:	d037      	beq.n	80075da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800756a:	f7fb fd69 	bl	8003040 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	6a3a      	ldr	r2, [r7, #32]
 8007576:	429a      	cmp	r2, r3
 8007578:	d302      	bcc.n	8007580 <UART_WaitOnFlagUntilTimeout+0x30>
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e03a      	b.n	80075fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f003 0304 	and.w	r3, r3, #4
 800758e:	2b00      	cmp	r3, #0
 8007590:	d023      	beq.n	80075da <UART_WaitOnFlagUntilTimeout+0x8a>
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b80      	cmp	r3, #128	@ 0x80
 8007596:	d020      	beq.n	80075da <UART_WaitOnFlagUntilTimeout+0x8a>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b40      	cmp	r3, #64	@ 0x40
 800759c:	d01d      	beq.n	80075da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0308 	and.w	r3, r3, #8
 80075a8:	2b08      	cmp	r3, #8
 80075aa:	d116      	bne.n	80075da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80075ac:	2300      	movs	r3, #0
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 f857 	bl	8007676 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2208      	movs	r2, #8
 80075cc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e00f      	b.n	80075fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4013      	ands	r3, r2
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	bf0c      	ite	eq
 80075ea:	2301      	moveq	r3, #1
 80075ec:	2300      	movne	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	461a      	mov	r2, r3
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d0b4      	beq.n	8007562 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007602:	b480      	push	{r7}
 8007604:	b085      	sub	sp, #20
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	4613      	mov	r3, r2
 800760e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	88fa      	ldrh	r2, [r7, #6]
 800761a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	88fa      	ldrh	r2, [r7, #6]
 8007620:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2222      	movs	r2, #34	@ 0x22
 800762c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d007      	beq.n	8007648 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007646:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695a      	ldr	r2, [r3, #20]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0201 	orr.w	r2, r2, #1
 8007656:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0220 	orr.w	r2, r2, #32
 8007666:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007676:	b480      	push	{r7}
 8007678:	b095      	sub	sp, #84	@ 0x54
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	330c      	adds	r3, #12
 8007684:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007688:	e853 3f00 	ldrex	r3, [r3]
 800768c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800768e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007690:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007694:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	330c      	adds	r3, #12
 800769c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800769e:	643a      	str	r2, [r7, #64]	@ 0x40
 80076a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e5      	bne.n	800767e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3314      	adds	r3, #20
 80076b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	f023 0301 	bic.w	r3, r3, #1
 80076c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3314      	adds	r3, #20
 80076d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e5      	bne.n	80076b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d119      	bne.n	8007722 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	330c      	adds	r3, #12
 80076f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f023 0310 	bic.w	r3, r3, #16
 8007704:	647b      	str	r3, [r7, #68]	@ 0x44
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	330c      	adds	r3, #12
 800770c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800770e:	61ba      	str	r2, [r7, #24]
 8007710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6979      	ldr	r1, [r7, #20]
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	613b      	str	r3, [r7, #16]
   return(result);
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e5      	bne.n	80076ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007730:	bf00      	nop
 8007732:	3754      	adds	r7, #84	@ 0x54
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7ff fee7 	bl	8007524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007756:	bf00      	nop
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800775e:	b480      	push	{r7}
 8007760:	b085      	sub	sp, #20
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b21      	cmp	r3, #33	@ 0x21
 8007770:	d13e      	bne.n	80077f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800777a:	d114      	bne.n	80077a6 <UART_Transmit_IT+0x48>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d110      	bne.n	80077a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007798:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	1c9a      	adds	r2, r3, #2
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	621a      	str	r2, [r3, #32]
 80077a4:	e008      	b.n	80077b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	1c59      	adds	r1, r3, #1
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	6211      	str	r1, [r2, #32]
 80077b0:	781a      	ldrb	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	4619      	mov	r1, r3
 80077c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10f      	bne.n	80077ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68da      	ldr	r2, [r3, #12]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68da      	ldr	r2, [r3, #12]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	e000      	b.n	80077f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077f0:	2302      	movs	r3, #2
  }
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b082      	sub	sp, #8
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007814:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2220      	movs	r2, #32
 800781a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7ff fe76 	bl	8007510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b08c      	sub	sp, #48	@ 0x30
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007836:	2300      	movs	r3, #0
 8007838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b22      	cmp	r3, #34	@ 0x22
 8007848:	f040 80aa 	bne.w	80079a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007854:	d115      	bne.n	8007882 <UART_Receive_IT+0x54>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d111      	bne.n	8007882 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007862:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007870:	b29a      	uxth	r2, r3
 8007872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007874:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787a:	1c9a      	adds	r2, r3, #2
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007880:	e024      	b.n	80078cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007886:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007890:	d007      	beq.n	80078a2 <UART_Receive_IT+0x74>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10a      	bne.n	80078b0 <UART_Receive_IT+0x82>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d106      	bne.n	80078b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	e008      	b.n	80078c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	4619      	mov	r1, r3
 80078da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d15d      	bne.n	800799c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68da      	ldr	r2, [r3, #12]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 0220 	bic.w	r2, r2, #32
 80078ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80078fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	695a      	ldr	r2, [r3, #20]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0201 	bic.w	r2, r2, #1
 800790e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2220      	movs	r2, #32
 8007914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007922:	2b01      	cmp	r3, #1
 8007924:	d135      	bne.n	8007992 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	330c      	adds	r3, #12
 8007932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	e853 3f00 	ldrex	r3, [r3]
 800793a:	613b      	str	r3, [r7, #16]
   return(result);
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f023 0310 	bic.w	r3, r3, #16
 8007942:	627b      	str	r3, [r7, #36]	@ 0x24
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	330c      	adds	r3, #12
 800794a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800794c:	623a      	str	r2, [r7, #32]
 800794e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007950:	69f9      	ldr	r1, [r7, #28]
 8007952:	6a3a      	ldr	r2, [r7, #32]
 8007954:	e841 2300 	strex	r3, r2, [r1]
 8007958:	61bb      	str	r3, [r7, #24]
   return(result);
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e5      	bne.n	800792c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0310 	and.w	r3, r3, #16
 800796a:	2b10      	cmp	r3, #16
 800796c:	d10a      	bne.n	8007984 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff fdd4 	bl	8007538 <HAL_UARTEx_RxEventCallback>
 8007990:	e002      	b.n	8007998 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7f9 faba 	bl	8000f0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	e002      	b.n	80079a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	e000      	b.n	80079a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80079a0:	2302      	movs	r3, #2
  }
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3730      	adds	r7, #48	@ 0x30
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079b0:	b0c0      	sub	sp, #256	@ 0x100
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80079c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c8:	68d9      	ldr	r1, [r3, #12]
 80079ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	ea40 0301 	orr.w	r3, r0, r1
 80079d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	431a      	orrs	r2, r3
 80079e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007a04:	f021 010c 	bic.w	r1, r1, #12
 8007a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a12:	430b      	orrs	r3, r1
 8007a14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a26:	6999      	ldr	r1, [r3, #24]
 8007a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	ea40 0301 	orr.w	r3, r0, r1
 8007a32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	4b8f      	ldr	r3, [pc, #572]	@ (8007c78 <UART_SetConfig+0x2cc>)
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d005      	beq.n	8007a4c <UART_SetConfig+0xa0>
 8007a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	4b8d      	ldr	r3, [pc, #564]	@ (8007c7c <UART_SetConfig+0x2d0>)
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d104      	bne.n	8007a56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a4c:	f7fd fc28 	bl	80052a0 <HAL_RCC_GetPCLK2Freq>
 8007a50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007a54:	e003      	b.n	8007a5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a56:	f7fd fc0f 	bl	8005278 <HAL_RCC_GetPCLK1Freq>
 8007a5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a68:	f040 810c 	bne.w	8007c84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a70:	2200      	movs	r2, #0
 8007a72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007a7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007a7e:	4622      	mov	r2, r4
 8007a80:	462b      	mov	r3, r5
 8007a82:	1891      	adds	r1, r2, r2
 8007a84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007a86:	415b      	adcs	r3, r3
 8007a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007a8e:	4621      	mov	r1, r4
 8007a90:	eb12 0801 	adds.w	r8, r2, r1
 8007a94:	4629      	mov	r1, r5
 8007a96:	eb43 0901 	adc.w	r9, r3, r1
 8007a9a:	f04f 0200 	mov.w	r2, #0
 8007a9e:	f04f 0300 	mov.w	r3, #0
 8007aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007aae:	4690      	mov	r8, r2
 8007ab0:	4699      	mov	r9, r3
 8007ab2:	4623      	mov	r3, r4
 8007ab4:	eb18 0303 	adds.w	r3, r8, r3
 8007ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007abc:	462b      	mov	r3, r5
 8007abe:	eb49 0303 	adc.w	r3, r9, r3
 8007ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ad2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007ad6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ada:	460b      	mov	r3, r1
 8007adc:	18db      	adds	r3, r3, r3
 8007ade:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	eb42 0303 	adc.w	r3, r2, r3
 8007ae6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ae8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007aec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007af0:	f7f8 fbde 	bl	80002b0 <__aeabi_uldivmod>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4b61      	ldr	r3, [pc, #388]	@ (8007c80 <UART_SetConfig+0x2d4>)
 8007afa:	fba3 2302 	umull	r2, r3, r3, r2
 8007afe:	095b      	lsrs	r3, r3, #5
 8007b00:	011c      	lsls	r4, r3, #4
 8007b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007b10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007b14:	4642      	mov	r2, r8
 8007b16:	464b      	mov	r3, r9
 8007b18:	1891      	adds	r1, r2, r2
 8007b1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007b1c:	415b      	adcs	r3, r3
 8007b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007b24:	4641      	mov	r1, r8
 8007b26:	eb12 0a01 	adds.w	sl, r2, r1
 8007b2a:	4649      	mov	r1, r9
 8007b2c:	eb43 0b01 	adc.w	fp, r3, r1
 8007b30:	f04f 0200 	mov.w	r2, #0
 8007b34:	f04f 0300 	mov.w	r3, #0
 8007b38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b44:	4692      	mov	sl, r2
 8007b46:	469b      	mov	fp, r3
 8007b48:	4643      	mov	r3, r8
 8007b4a:	eb1a 0303 	adds.w	r3, sl, r3
 8007b4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b52:	464b      	mov	r3, r9
 8007b54:	eb4b 0303 	adc.w	r3, fp, r3
 8007b58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007b6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b70:	460b      	mov	r3, r1
 8007b72:	18db      	adds	r3, r3, r3
 8007b74:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b76:	4613      	mov	r3, r2
 8007b78:	eb42 0303 	adc.w	r3, r2, r3
 8007b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007b82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007b86:	f7f8 fb93 	bl	80002b0 <__aeabi_uldivmod>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4611      	mov	r1, r2
 8007b90:	4b3b      	ldr	r3, [pc, #236]	@ (8007c80 <UART_SetConfig+0x2d4>)
 8007b92:	fba3 2301 	umull	r2, r3, r3, r1
 8007b96:	095b      	lsrs	r3, r3, #5
 8007b98:	2264      	movs	r2, #100	@ 0x64
 8007b9a:	fb02 f303 	mul.w	r3, r2, r3
 8007b9e:	1acb      	subs	r3, r1, r3
 8007ba0:	00db      	lsls	r3, r3, #3
 8007ba2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007ba6:	4b36      	ldr	r3, [pc, #216]	@ (8007c80 <UART_SetConfig+0x2d4>)
 8007ba8:	fba3 2302 	umull	r2, r3, r3, r2
 8007bac:	095b      	lsrs	r3, r3, #5
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007bb4:	441c      	add	r4, r3
 8007bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007bc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007bc8:	4642      	mov	r2, r8
 8007bca:	464b      	mov	r3, r9
 8007bcc:	1891      	adds	r1, r2, r2
 8007bce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007bd0:	415b      	adcs	r3, r3
 8007bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007bd8:	4641      	mov	r1, r8
 8007bda:	1851      	adds	r1, r2, r1
 8007bdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8007bde:	4649      	mov	r1, r9
 8007be0:	414b      	adcs	r3, r1
 8007be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007be4:	f04f 0200 	mov.w	r2, #0
 8007be8:	f04f 0300 	mov.w	r3, #0
 8007bec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007bf0:	4659      	mov	r1, fp
 8007bf2:	00cb      	lsls	r3, r1, #3
 8007bf4:	4651      	mov	r1, sl
 8007bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bfa:	4651      	mov	r1, sl
 8007bfc:	00ca      	lsls	r2, r1, #3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	4619      	mov	r1, r3
 8007c02:	4603      	mov	r3, r0
 8007c04:	4642      	mov	r2, r8
 8007c06:	189b      	adds	r3, r3, r2
 8007c08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c0c:	464b      	mov	r3, r9
 8007c0e:	460a      	mov	r2, r1
 8007c10:	eb42 0303 	adc.w	r3, r2, r3
 8007c14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007c28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	18db      	adds	r3, r3, r3
 8007c30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c32:	4613      	mov	r3, r2
 8007c34:	eb42 0303 	adc.w	r3, r2, r3
 8007c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007c42:	f7f8 fb35 	bl	80002b0 <__aeabi_uldivmod>
 8007c46:	4602      	mov	r2, r0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c80 <UART_SetConfig+0x2d4>)
 8007c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c50:	095b      	lsrs	r3, r3, #5
 8007c52:	2164      	movs	r1, #100	@ 0x64
 8007c54:	fb01 f303 	mul.w	r3, r1, r3
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	3332      	adds	r3, #50	@ 0x32
 8007c5e:	4a08      	ldr	r2, [pc, #32]	@ (8007c80 <UART_SetConfig+0x2d4>)
 8007c60:	fba2 2303 	umull	r2, r3, r2, r3
 8007c64:	095b      	lsrs	r3, r3, #5
 8007c66:	f003 0207 	and.w	r2, r3, #7
 8007c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4422      	add	r2, r4
 8007c72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c74:	e106      	b.n	8007e84 <UART_SetConfig+0x4d8>
 8007c76:	bf00      	nop
 8007c78:	40011000 	.word	0x40011000
 8007c7c:	40011400 	.word	0x40011400
 8007c80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007c92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007c96:	4642      	mov	r2, r8
 8007c98:	464b      	mov	r3, r9
 8007c9a:	1891      	adds	r1, r2, r2
 8007c9c:	6239      	str	r1, [r7, #32]
 8007c9e:	415b      	adcs	r3, r3
 8007ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ca2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ca6:	4641      	mov	r1, r8
 8007ca8:	1854      	adds	r4, r2, r1
 8007caa:	4649      	mov	r1, r9
 8007cac:	eb43 0501 	adc.w	r5, r3, r1
 8007cb0:	f04f 0200 	mov.w	r2, #0
 8007cb4:	f04f 0300 	mov.w	r3, #0
 8007cb8:	00eb      	lsls	r3, r5, #3
 8007cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007cbe:	00e2      	lsls	r2, r4, #3
 8007cc0:	4614      	mov	r4, r2
 8007cc2:	461d      	mov	r5, r3
 8007cc4:	4643      	mov	r3, r8
 8007cc6:	18e3      	adds	r3, r4, r3
 8007cc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ccc:	464b      	mov	r3, r9
 8007cce:	eb45 0303 	adc.w	r3, r5, r3
 8007cd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ce2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007ce6:	f04f 0200 	mov.w	r2, #0
 8007cea:	f04f 0300 	mov.w	r3, #0
 8007cee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	008b      	lsls	r3, r1, #2
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	008a      	lsls	r2, r1, #2
 8007d00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007d04:	f7f8 fad4 	bl	80002b0 <__aeabi_uldivmod>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4b60      	ldr	r3, [pc, #384]	@ (8007e90 <UART_SetConfig+0x4e4>)
 8007d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d12:	095b      	lsrs	r3, r3, #5
 8007d14:	011c      	lsls	r4, r3, #4
 8007d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007d24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007d28:	4642      	mov	r2, r8
 8007d2a:	464b      	mov	r3, r9
 8007d2c:	1891      	adds	r1, r2, r2
 8007d2e:	61b9      	str	r1, [r7, #24]
 8007d30:	415b      	adcs	r3, r3
 8007d32:	61fb      	str	r3, [r7, #28]
 8007d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d38:	4641      	mov	r1, r8
 8007d3a:	1851      	adds	r1, r2, r1
 8007d3c:	6139      	str	r1, [r7, #16]
 8007d3e:	4649      	mov	r1, r9
 8007d40:	414b      	adcs	r3, r1
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	f04f 0200 	mov.w	r2, #0
 8007d48:	f04f 0300 	mov.w	r3, #0
 8007d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d50:	4659      	mov	r1, fp
 8007d52:	00cb      	lsls	r3, r1, #3
 8007d54:	4651      	mov	r1, sl
 8007d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d5a:	4651      	mov	r1, sl
 8007d5c:	00ca      	lsls	r2, r1, #3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	4619      	mov	r1, r3
 8007d62:	4603      	mov	r3, r0
 8007d64:	4642      	mov	r2, r8
 8007d66:	189b      	adds	r3, r3, r2
 8007d68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d6c:	464b      	mov	r3, r9
 8007d6e:	460a      	mov	r2, r1
 8007d70:	eb42 0303 	adc.w	r3, r2, r3
 8007d74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	f04f 0300 	mov.w	r3, #0
 8007d8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007d90:	4649      	mov	r1, r9
 8007d92:	008b      	lsls	r3, r1, #2
 8007d94:	4641      	mov	r1, r8
 8007d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d9a:	4641      	mov	r1, r8
 8007d9c:	008a      	lsls	r2, r1, #2
 8007d9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007da2:	f7f8 fa85 	bl	80002b0 <__aeabi_uldivmod>
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	4611      	mov	r1, r2
 8007dac:	4b38      	ldr	r3, [pc, #224]	@ (8007e90 <UART_SetConfig+0x4e4>)
 8007dae:	fba3 2301 	umull	r2, r3, r3, r1
 8007db2:	095b      	lsrs	r3, r3, #5
 8007db4:	2264      	movs	r2, #100	@ 0x64
 8007db6:	fb02 f303 	mul.w	r3, r2, r3
 8007dba:	1acb      	subs	r3, r1, r3
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	3332      	adds	r3, #50	@ 0x32
 8007dc0:	4a33      	ldr	r2, [pc, #204]	@ (8007e90 <UART_SetConfig+0x4e4>)
 8007dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc6:	095b      	lsrs	r3, r3, #5
 8007dc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007dcc:	441c      	add	r4, r3
 8007dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8007dd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8007dd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007ddc:	4642      	mov	r2, r8
 8007dde:	464b      	mov	r3, r9
 8007de0:	1891      	adds	r1, r2, r2
 8007de2:	60b9      	str	r1, [r7, #8]
 8007de4:	415b      	adcs	r3, r3
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dec:	4641      	mov	r1, r8
 8007dee:	1851      	adds	r1, r2, r1
 8007df0:	6039      	str	r1, [r7, #0]
 8007df2:	4649      	mov	r1, r9
 8007df4:	414b      	adcs	r3, r1
 8007df6:	607b      	str	r3, [r7, #4]
 8007df8:	f04f 0200 	mov.w	r2, #0
 8007dfc:	f04f 0300 	mov.w	r3, #0
 8007e00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e04:	4659      	mov	r1, fp
 8007e06:	00cb      	lsls	r3, r1, #3
 8007e08:	4651      	mov	r1, sl
 8007e0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e0e:	4651      	mov	r1, sl
 8007e10:	00ca      	lsls	r2, r1, #3
 8007e12:	4610      	mov	r0, r2
 8007e14:	4619      	mov	r1, r3
 8007e16:	4603      	mov	r3, r0
 8007e18:	4642      	mov	r2, r8
 8007e1a:	189b      	adds	r3, r3, r2
 8007e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e1e:	464b      	mov	r3, r9
 8007e20:	460a      	mov	r2, r1
 8007e22:	eb42 0303 	adc.w	r3, r2, r3
 8007e26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e32:	667a      	str	r2, [r7, #100]	@ 0x64
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	f04f 0300 	mov.w	r3, #0
 8007e3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007e40:	4649      	mov	r1, r9
 8007e42:	008b      	lsls	r3, r1, #2
 8007e44:	4641      	mov	r1, r8
 8007e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e4a:	4641      	mov	r1, r8
 8007e4c:	008a      	lsls	r2, r1, #2
 8007e4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007e52:	f7f8 fa2d 	bl	80002b0 <__aeabi_uldivmod>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e90 <UART_SetConfig+0x4e4>)
 8007e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e60:	095b      	lsrs	r3, r3, #5
 8007e62:	2164      	movs	r1, #100	@ 0x64
 8007e64:	fb01 f303 	mul.w	r3, r1, r3
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	3332      	adds	r3, #50	@ 0x32
 8007e6e:	4a08      	ldr	r2, [pc, #32]	@ (8007e90 <UART_SetConfig+0x4e4>)
 8007e70:	fba2 2303 	umull	r2, r3, r2, r3
 8007e74:	095b      	lsrs	r3, r3, #5
 8007e76:	f003 020f 	and.w	r2, r3, #15
 8007e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4422      	add	r2, r4
 8007e82:	609a      	str	r2, [r3, #8]
}
 8007e84:	bf00      	nop
 8007e86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e90:	51eb851f 	.word	0x51eb851f

08007e94 <std>:
 8007e94:	2300      	movs	r3, #0
 8007e96:	b510      	push	{r4, lr}
 8007e98:	4604      	mov	r4, r0
 8007e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ea2:	6083      	str	r3, [r0, #8]
 8007ea4:	8181      	strh	r1, [r0, #12]
 8007ea6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ea8:	81c2      	strh	r2, [r0, #14]
 8007eaa:	6183      	str	r3, [r0, #24]
 8007eac:	4619      	mov	r1, r3
 8007eae:	2208      	movs	r2, #8
 8007eb0:	305c      	adds	r0, #92	@ 0x5c
 8007eb2:	f000 fa23 	bl	80082fc <memset>
 8007eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007eec <std+0x58>)
 8007eb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007eba:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef0 <std+0x5c>)
 8007ebc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef4 <std+0x60>)
 8007ec0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef8 <std+0x64>)
 8007ec4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8007efc <std+0x68>)
 8007ec8:	6224      	str	r4, [r4, #32]
 8007eca:	429c      	cmp	r4, r3
 8007ecc:	d006      	beq.n	8007edc <std+0x48>
 8007ece:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ed2:	4294      	cmp	r4, r2
 8007ed4:	d002      	beq.n	8007edc <std+0x48>
 8007ed6:	33d0      	adds	r3, #208	@ 0xd0
 8007ed8:	429c      	cmp	r4, r3
 8007eda:	d105      	bne.n	8007ee8 <std+0x54>
 8007edc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee4:	f000 bb14 	b.w	8008510 <__retarget_lock_init_recursive>
 8007ee8:	bd10      	pop	{r4, pc}
 8007eea:	bf00      	nop
 8007eec:	0800814d 	.word	0x0800814d
 8007ef0:	0800816f 	.word	0x0800816f
 8007ef4:	080081a7 	.word	0x080081a7
 8007ef8:	080081cb 	.word	0x080081cb
 8007efc:	20000c84 	.word	0x20000c84

08007f00 <stdio_exit_handler>:
 8007f00:	4a02      	ldr	r2, [pc, #8]	@ (8007f0c <stdio_exit_handler+0xc>)
 8007f02:	4903      	ldr	r1, [pc, #12]	@ (8007f10 <stdio_exit_handler+0x10>)
 8007f04:	4803      	ldr	r0, [pc, #12]	@ (8007f14 <stdio_exit_handler+0x14>)
 8007f06:	f000 b869 	b.w	8007fdc <_fwalk_sglue>
 8007f0a:	bf00      	nop
 8007f0c:	20000028 	.word	0x20000028
 8007f10:	080090d5 	.word	0x080090d5
 8007f14:	20000038 	.word	0x20000038

08007f18 <cleanup_stdio>:
 8007f18:	6841      	ldr	r1, [r0, #4]
 8007f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8007f4c <cleanup_stdio+0x34>)
 8007f1c:	4299      	cmp	r1, r3
 8007f1e:	b510      	push	{r4, lr}
 8007f20:	4604      	mov	r4, r0
 8007f22:	d001      	beq.n	8007f28 <cleanup_stdio+0x10>
 8007f24:	f001 f8d6 	bl	80090d4 <_fflush_r>
 8007f28:	68a1      	ldr	r1, [r4, #8]
 8007f2a:	4b09      	ldr	r3, [pc, #36]	@ (8007f50 <cleanup_stdio+0x38>)
 8007f2c:	4299      	cmp	r1, r3
 8007f2e:	d002      	beq.n	8007f36 <cleanup_stdio+0x1e>
 8007f30:	4620      	mov	r0, r4
 8007f32:	f001 f8cf 	bl	80090d4 <_fflush_r>
 8007f36:	68e1      	ldr	r1, [r4, #12]
 8007f38:	4b06      	ldr	r3, [pc, #24]	@ (8007f54 <cleanup_stdio+0x3c>)
 8007f3a:	4299      	cmp	r1, r3
 8007f3c:	d004      	beq.n	8007f48 <cleanup_stdio+0x30>
 8007f3e:	4620      	mov	r0, r4
 8007f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f44:	f001 b8c6 	b.w	80090d4 <_fflush_r>
 8007f48:	bd10      	pop	{r4, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000c84 	.word	0x20000c84
 8007f50:	20000cec 	.word	0x20000cec
 8007f54:	20000d54 	.word	0x20000d54

08007f58 <global_stdio_init.part.0>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f88 <global_stdio_init.part.0+0x30>)
 8007f5c:	4c0b      	ldr	r4, [pc, #44]	@ (8007f8c <global_stdio_init.part.0+0x34>)
 8007f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8007f90 <global_stdio_init.part.0+0x38>)
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	4620      	mov	r0, r4
 8007f64:	2200      	movs	r2, #0
 8007f66:	2104      	movs	r1, #4
 8007f68:	f7ff ff94 	bl	8007e94 <std>
 8007f6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f70:	2201      	movs	r2, #1
 8007f72:	2109      	movs	r1, #9
 8007f74:	f7ff ff8e 	bl	8007e94 <std>
 8007f78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f82:	2112      	movs	r1, #18
 8007f84:	f7ff bf86 	b.w	8007e94 <std>
 8007f88:	20000dbc 	.word	0x20000dbc
 8007f8c:	20000c84 	.word	0x20000c84
 8007f90:	08007f01 	.word	0x08007f01

08007f94 <__sfp_lock_acquire>:
 8007f94:	4801      	ldr	r0, [pc, #4]	@ (8007f9c <__sfp_lock_acquire+0x8>)
 8007f96:	f000 babc 	b.w	8008512 <__retarget_lock_acquire_recursive>
 8007f9a:	bf00      	nop
 8007f9c:	20000dc5 	.word	0x20000dc5

08007fa0 <__sfp_lock_release>:
 8007fa0:	4801      	ldr	r0, [pc, #4]	@ (8007fa8 <__sfp_lock_release+0x8>)
 8007fa2:	f000 bab7 	b.w	8008514 <__retarget_lock_release_recursive>
 8007fa6:	bf00      	nop
 8007fa8:	20000dc5 	.word	0x20000dc5

08007fac <__sinit>:
 8007fac:	b510      	push	{r4, lr}
 8007fae:	4604      	mov	r4, r0
 8007fb0:	f7ff fff0 	bl	8007f94 <__sfp_lock_acquire>
 8007fb4:	6a23      	ldr	r3, [r4, #32]
 8007fb6:	b11b      	cbz	r3, 8007fc0 <__sinit+0x14>
 8007fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fbc:	f7ff bff0 	b.w	8007fa0 <__sfp_lock_release>
 8007fc0:	4b04      	ldr	r3, [pc, #16]	@ (8007fd4 <__sinit+0x28>)
 8007fc2:	6223      	str	r3, [r4, #32]
 8007fc4:	4b04      	ldr	r3, [pc, #16]	@ (8007fd8 <__sinit+0x2c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1f5      	bne.n	8007fb8 <__sinit+0xc>
 8007fcc:	f7ff ffc4 	bl	8007f58 <global_stdio_init.part.0>
 8007fd0:	e7f2      	b.n	8007fb8 <__sinit+0xc>
 8007fd2:	bf00      	nop
 8007fd4:	08007f19 	.word	0x08007f19
 8007fd8:	20000dbc 	.word	0x20000dbc

08007fdc <_fwalk_sglue>:
 8007fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	4688      	mov	r8, r1
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	2600      	movs	r6, #0
 8007fe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fec:	f1b9 0901 	subs.w	r9, r9, #1
 8007ff0:	d505      	bpl.n	8007ffe <_fwalk_sglue+0x22>
 8007ff2:	6824      	ldr	r4, [r4, #0]
 8007ff4:	2c00      	cmp	r4, #0
 8007ff6:	d1f7      	bne.n	8007fe8 <_fwalk_sglue+0xc>
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffe:	89ab      	ldrh	r3, [r5, #12]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d907      	bls.n	8008014 <_fwalk_sglue+0x38>
 8008004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008008:	3301      	adds	r3, #1
 800800a:	d003      	beq.n	8008014 <_fwalk_sglue+0x38>
 800800c:	4629      	mov	r1, r5
 800800e:	4638      	mov	r0, r7
 8008010:	47c0      	blx	r8
 8008012:	4306      	orrs	r6, r0
 8008014:	3568      	adds	r5, #104	@ 0x68
 8008016:	e7e9      	b.n	8007fec <_fwalk_sglue+0x10>

08008018 <iprintf>:
 8008018:	b40f      	push	{r0, r1, r2, r3}
 800801a:	b507      	push	{r0, r1, r2, lr}
 800801c:	4906      	ldr	r1, [pc, #24]	@ (8008038 <iprintf+0x20>)
 800801e:	ab04      	add	r3, sp, #16
 8008020:	6808      	ldr	r0, [r1, #0]
 8008022:	f853 2b04 	ldr.w	r2, [r3], #4
 8008026:	6881      	ldr	r1, [r0, #8]
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	f000 fd2b 	bl	8008a84 <_vfiprintf_r>
 800802e:	b003      	add	sp, #12
 8008030:	f85d eb04 	ldr.w	lr, [sp], #4
 8008034:	b004      	add	sp, #16
 8008036:	4770      	bx	lr
 8008038:	20000034 	.word	0x20000034

0800803c <putchar>:
 800803c:	4b02      	ldr	r3, [pc, #8]	@ (8008048 <putchar+0xc>)
 800803e:	4601      	mov	r1, r0
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	6882      	ldr	r2, [r0, #8]
 8008044:	f001 b8e2 	b.w	800920c <_putc_r>
 8008048:	20000034 	.word	0x20000034

0800804c <_puts_r>:
 800804c:	6a03      	ldr	r3, [r0, #32]
 800804e:	b570      	push	{r4, r5, r6, lr}
 8008050:	6884      	ldr	r4, [r0, #8]
 8008052:	4605      	mov	r5, r0
 8008054:	460e      	mov	r6, r1
 8008056:	b90b      	cbnz	r3, 800805c <_puts_r+0x10>
 8008058:	f7ff ffa8 	bl	8007fac <__sinit>
 800805c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800805e:	07db      	lsls	r3, r3, #31
 8008060:	d405      	bmi.n	800806e <_puts_r+0x22>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	0598      	lsls	r0, r3, #22
 8008066:	d402      	bmi.n	800806e <_puts_r+0x22>
 8008068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800806a:	f000 fa52 	bl	8008512 <__retarget_lock_acquire_recursive>
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	0719      	lsls	r1, r3, #28
 8008072:	d502      	bpl.n	800807a <_puts_r+0x2e>
 8008074:	6923      	ldr	r3, [r4, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d135      	bne.n	80080e6 <_puts_r+0x9a>
 800807a:	4621      	mov	r1, r4
 800807c:	4628      	mov	r0, r5
 800807e:	f000 f8e7 	bl	8008250 <__swsetup_r>
 8008082:	b380      	cbz	r0, 80080e6 <_puts_r+0x9a>
 8008084:	f04f 35ff 	mov.w	r5, #4294967295
 8008088:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800808a:	07da      	lsls	r2, r3, #31
 800808c:	d405      	bmi.n	800809a <_puts_r+0x4e>
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	059b      	lsls	r3, r3, #22
 8008092:	d402      	bmi.n	800809a <_puts_r+0x4e>
 8008094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008096:	f000 fa3d 	bl	8008514 <__retarget_lock_release_recursive>
 800809a:	4628      	mov	r0, r5
 800809c:	bd70      	pop	{r4, r5, r6, pc}
 800809e:	2b00      	cmp	r3, #0
 80080a0:	da04      	bge.n	80080ac <_puts_r+0x60>
 80080a2:	69a2      	ldr	r2, [r4, #24]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	dc17      	bgt.n	80080d8 <_puts_r+0x8c>
 80080a8:	290a      	cmp	r1, #10
 80080aa:	d015      	beq.n	80080d8 <_puts_r+0x8c>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	6022      	str	r2, [r4, #0]
 80080b2:	7019      	strb	r1, [r3, #0]
 80080b4:	68a3      	ldr	r3, [r4, #8]
 80080b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080ba:	3b01      	subs	r3, #1
 80080bc:	60a3      	str	r3, [r4, #8]
 80080be:	2900      	cmp	r1, #0
 80080c0:	d1ed      	bne.n	800809e <_puts_r+0x52>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	da11      	bge.n	80080ea <_puts_r+0x9e>
 80080c6:	4622      	mov	r2, r4
 80080c8:	210a      	movs	r1, #10
 80080ca:	4628      	mov	r0, r5
 80080cc:	f000 f881 	bl	80081d2 <__swbuf_r>
 80080d0:	3001      	adds	r0, #1
 80080d2:	d0d7      	beq.n	8008084 <_puts_r+0x38>
 80080d4:	250a      	movs	r5, #10
 80080d6:	e7d7      	b.n	8008088 <_puts_r+0x3c>
 80080d8:	4622      	mov	r2, r4
 80080da:	4628      	mov	r0, r5
 80080dc:	f000 f879 	bl	80081d2 <__swbuf_r>
 80080e0:	3001      	adds	r0, #1
 80080e2:	d1e7      	bne.n	80080b4 <_puts_r+0x68>
 80080e4:	e7ce      	b.n	8008084 <_puts_r+0x38>
 80080e6:	3e01      	subs	r6, #1
 80080e8:	e7e4      	b.n	80080b4 <_puts_r+0x68>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	6022      	str	r2, [r4, #0]
 80080f0:	220a      	movs	r2, #10
 80080f2:	701a      	strb	r2, [r3, #0]
 80080f4:	e7ee      	b.n	80080d4 <_puts_r+0x88>
	...

080080f8 <puts>:
 80080f8:	4b02      	ldr	r3, [pc, #8]	@ (8008104 <puts+0xc>)
 80080fa:	4601      	mov	r1, r0
 80080fc:	6818      	ldr	r0, [r3, #0]
 80080fe:	f7ff bfa5 	b.w	800804c <_puts_r>
 8008102:	bf00      	nop
 8008104:	20000034 	.word	0x20000034

08008108 <siprintf>:
 8008108:	b40e      	push	{r1, r2, r3}
 800810a:	b510      	push	{r4, lr}
 800810c:	b09d      	sub	sp, #116	@ 0x74
 800810e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008110:	9002      	str	r0, [sp, #8]
 8008112:	9006      	str	r0, [sp, #24]
 8008114:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008118:	480a      	ldr	r0, [pc, #40]	@ (8008144 <siprintf+0x3c>)
 800811a:	9107      	str	r1, [sp, #28]
 800811c:	9104      	str	r1, [sp, #16]
 800811e:	490a      	ldr	r1, [pc, #40]	@ (8008148 <siprintf+0x40>)
 8008120:	f853 2b04 	ldr.w	r2, [r3], #4
 8008124:	9105      	str	r1, [sp, #20]
 8008126:	2400      	movs	r4, #0
 8008128:	a902      	add	r1, sp, #8
 800812a:	6800      	ldr	r0, [r0, #0]
 800812c:	9301      	str	r3, [sp, #4]
 800812e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008130:	f000 fb82 	bl	8008838 <_svfiprintf_r>
 8008134:	9b02      	ldr	r3, [sp, #8]
 8008136:	701c      	strb	r4, [r3, #0]
 8008138:	b01d      	add	sp, #116	@ 0x74
 800813a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800813e:	b003      	add	sp, #12
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	20000034 	.word	0x20000034
 8008148:	ffff0208 	.word	0xffff0208

0800814c <__sread>:
 800814c:	b510      	push	{r4, lr}
 800814e:	460c      	mov	r4, r1
 8008150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008154:	f000 f98e 	bl	8008474 <_read_r>
 8008158:	2800      	cmp	r0, #0
 800815a:	bfab      	itete	ge
 800815c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800815e:	89a3      	ldrhlt	r3, [r4, #12]
 8008160:	181b      	addge	r3, r3, r0
 8008162:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008166:	bfac      	ite	ge
 8008168:	6563      	strge	r3, [r4, #84]	@ 0x54
 800816a:	81a3      	strhlt	r3, [r4, #12]
 800816c:	bd10      	pop	{r4, pc}

0800816e <__swrite>:
 800816e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008172:	461f      	mov	r7, r3
 8008174:	898b      	ldrh	r3, [r1, #12]
 8008176:	05db      	lsls	r3, r3, #23
 8008178:	4605      	mov	r5, r0
 800817a:	460c      	mov	r4, r1
 800817c:	4616      	mov	r6, r2
 800817e:	d505      	bpl.n	800818c <__swrite+0x1e>
 8008180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008184:	2302      	movs	r3, #2
 8008186:	2200      	movs	r2, #0
 8008188:	f000 f962 	bl	8008450 <_lseek_r>
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008192:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008196:	81a3      	strh	r3, [r4, #12]
 8008198:	4632      	mov	r2, r6
 800819a:	463b      	mov	r3, r7
 800819c:	4628      	mov	r0, r5
 800819e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081a2:	f000 b979 	b.w	8008498 <_write_r>

080081a6 <__sseek>:
 80081a6:	b510      	push	{r4, lr}
 80081a8:	460c      	mov	r4, r1
 80081aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ae:	f000 f94f 	bl	8008450 <_lseek_r>
 80081b2:	1c43      	adds	r3, r0, #1
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	bf15      	itete	ne
 80081b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081c2:	81a3      	strheq	r3, [r4, #12]
 80081c4:	bf18      	it	ne
 80081c6:	81a3      	strhne	r3, [r4, #12]
 80081c8:	bd10      	pop	{r4, pc}

080081ca <__sclose>:
 80081ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ce:	f000 b92f 	b.w	8008430 <_close_r>

080081d2 <__swbuf_r>:
 80081d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d4:	460e      	mov	r6, r1
 80081d6:	4614      	mov	r4, r2
 80081d8:	4605      	mov	r5, r0
 80081da:	b118      	cbz	r0, 80081e4 <__swbuf_r+0x12>
 80081dc:	6a03      	ldr	r3, [r0, #32]
 80081de:	b90b      	cbnz	r3, 80081e4 <__swbuf_r+0x12>
 80081e0:	f7ff fee4 	bl	8007fac <__sinit>
 80081e4:	69a3      	ldr	r3, [r4, #24]
 80081e6:	60a3      	str	r3, [r4, #8]
 80081e8:	89a3      	ldrh	r3, [r4, #12]
 80081ea:	071a      	lsls	r2, r3, #28
 80081ec:	d501      	bpl.n	80081f2 <__swbuf_r+0x20>
 80081ee:	6923      	ldr	r3, [r4, #16]
 80081f0:	b943      	cbnz	r3, 8008204 <__swbuf_r+0x32>
 80081f2:	4621      	mov	r1, r4
 80081f4:	4628      	mov	r0, r5
 80081f6:	f000 f82b 	bl	8008250 <__swsetup_r>
 80081fa:	b118      	cbz	r0, 8008204 <__swbuf_r+0x32>
 80081fc:	f04f 37ff 	mov.w	r7, #4294967295
 8008200:	4638      	mov	r0, r7
 8008202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	6922      	ldr	r2, [r4, #16]
 8008208:	1a98      	subs	r0, r3, r2
 800820a:	6963      	ldr	r3, [r4, #20]
 800820c:	b2f6      	uxtb	r6, r6
 800820e:	4283      	cmp	r3, r0
 8008210:	4637      	mov	r7, r6
 8008212:	dc05      	bgt.n	8008220 <__swbuf_r+0x4e>
 8008214:	4621      	mov	r1, r4
 8008216:	4628      	mov	r0, r5
 8008218:	f000 ff5c 	bl	80090d4 <_fflush_r>
 800821c:	2800      	cmp	r0, #0
 800821e:	d1ed      	bne.n	80081fc <__swbuf_r+0x2a>
 8008220:	68a3      	ldr	r3, [r4, #8]
 8008222:	3b01      	subs	r3, #1
 8008224:	60a3      	str	r3, [r4, #8]
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	6022      	str	r2, [r4, #0]
 800822c:	701e      	strb	r6, [r3, #0]
 800822e:	6962      	ldr	r2, [r4, #20]
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	429a      	cmp	r2, r3
 8008234:	d004      	beq.n	8008240 <__swbuf_r+0x6e>
 8008236:	89a3      	ldrh	r3, [r4, #12]
 8008238:	07db      	lsls	r3, r3, #31
 800823a:	d5e1      	bpl.n	8008200 <__swbuf_r+0x2e>
 800823c:	2e0a      	cmp	r6, #10
 800823e:	d1df      	bne.n	8008200 <__swbuf_r+0x2e>
 8008240:	4621      	mov	r1, r4
 8008242:	4628      	mov	r0, r5
 8008244:	f000 ff46 	bl	80090d4 <_fflush_r>
 8008248:	2800      	cmp	r0, #0
 800824a:	d0d9      	beq.n	8008200 <__swbuf_r+0x2e>
 800824c:	e7d6      	b.n	80081fc <__swbuf_r+0x2a>
	...

08008250 <__swsetup_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4b29      	ldr	r3, [pc, #164]	@ (80082f8 <__swsetup_r+0xa8>)
 8008254:	4605      	mov	r5, r0
 8008256:	6818      	ldr	r0, [r3, #0]
 8008258:	460c      	mov	r4, r1
 800825a:	b118      	cbz	r0, 8008264 <__swsetup_r+0x14>
 800825c:	6a03      	ldr	r3, [r0, #32]
 800825e:	b90b      	cbnz	r3, 8008264 <__swsetup_r+0x14>
 8008260:	f7ff fea4 	bl	8007fac <__sinit>
 8008264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008268:	0719      	lsls	r1, r3, #28
 800826a:	d422      	bmi.n	80082b2 <__swsetup_r+0x62>
 800826c:	06da      	lsls	r2, r3, #27
 800826e:	d407      	bmi.n	8008280 <__swsetup_r+0x30>
 8008270:	2209      	movs	r2, #9
 8008272:	602a      	str	r2, [r5, #0]
 8008274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008278:	81a3      	strh	r3, [r4, #12]
 800827a:	f04f 30ff 	mov.w	r0, #4294967295
 800827e:	e033      	b.n	80082e8 <__swsetup_r+0x98>
 8008280:	0758      	lsls	r0, r3, #29
 8008282:	d512      	bpl.n	80082aa <__swsetup_r+0x5a>
 8008284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008286:	b141      	cbz	r1, 800829a <__swsetup_r+0x4a>
 8008288:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800828c:	4299      	cmp	r1, r3
 800828e:	d002      	beq.n	8008296 <__swsetup_r+0x46>
 8008290:	4628      	mov	r0, r5
 8008292:	f000 f975 	bl	8008580 <_free_r>
 8008296:	2300      	movs	r3, #0
 8008298:	6363      	str	r3, [r4, #52]	@ 0x34
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082a0:	81a3      	strh	r3, [r4, #12]
 80082a2:	2300      	movs	r3, #0
 80082a4:	6063      	str	r3, [r4, #4]
 80082a6:	6923      	ldr	r3, [r4, #16]
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	f043 0308 	orr.w	r3, r3, #8
 80082b0:	81a3      	strh	r3, [r4, #12]
 80082b2:	6923      	ldr	r3, [r4, #16]
 80082b4:	b94b      	cbnz	r3, 80082ca <__swsetup_r+0x7a>
 80082b6:	89a3      	ldrh	r3, [r4, #12]
 80082b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082c0:	d003      	beq.n	80082ca <__swsetup_r+0x7a>
 80082c2:	4621      	mov	r1, r4
 80082c4:	4628      	mov	r0, r5
 80082c6:	f000 ff65 	bl	8009194 <__smakebuf_r>
 80082ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ce:	f013 0201 	ands.w	r2, r3, #1
 80082d2:	d00a      	beq.n	80082ea <__swsetup_r+0x9a>
 80082d4:	2200      	movs	r2, #0
 80082d6:	60a2      	str	r2, [r4, #8]
 80082d8:	6962      	ldr	r2, [r4, #20]
 80082da:	4252      	negs	r2, r2
 80082dc:	61a2      	str	r2, [r4, #24]
 80082de:	6922      	ldr	r2, [r4, #16]
 80082e0:	b942      	cbnz	r2, 80082f4 <__swsetup_r+0xa4>
 80082e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082e6:	d1c5      	bne.n	8008274 <__swsetup_r+0x24>
 80082e8:	bd38      	pop	{r3, r4, r5, pc}
 80082ea:	0799      	lsls	r1, r3, #30
 80082ec:	bf58      	it	pl
 80082ee:	6962      	ldrpl	r2, [r4, #20]
 80082f0:	60a2      	str	r2, [r4, #8]
 80082f2:	e7f4      	b.n	80082de <__swsetup_r+0x8e>
 80082f4:	2000      	movs	r0, #0
 80082f6:	e7f7      	b.n	80082e8 <__swsetup_r+0x98>
 80082f8:	20000034 	.word	0x20000034

080082fc <memset>:
 80082fc:	4402      	add	r2, r0
 80082fe:	4603      	mov	r3, r0
 8008300:	4293      	cmp	r3, r2
 8008302:	d100      	bne.n	8008306 <memset+0xa>
 8008304:	4770      	bx	lr
 8008306:	f803 1b01 	strb.w	r1, [r3], #1
 800830a:	e7f9      	b.n	8008300 <memset+0x4>

0800830c <strchr>:
 800830c:	b2c9      	uxtb	r1, r1
 800830e:	4603      	mov	r3, r0
 8008310:	4618      	mov	r0, r3
 8008312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008316:	b112      	cbz	r2, 800831e <strchr+0x12>
 8008318:	428a      	cmp	r2, r1
 800831a:	d1f9      	bne.n	8008310 <strchr+0x4>
 800831c:	4770      	bx	lr
 800831e:	2900      	cmp	r1, #0
 8008320:	bf18      	it	ne
 8008322:	2000      	movne	r0, #0
 8008324:	4770      	bx	lr

08008326 <strncmp>:
 8008326:	b510      	push	{r4, lr}
 8008328:	b16a      	cbz	r2, 8008346 <strncmp+0x20>
 800832a:	3901      	subs	r1, #1
 800832c:	1884      	adds	r4, r0, r2
 800832e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008332:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008336:	429a      	cmp	r2, r3
 8008338:	d103      	bne.n	8008342 <strncmp+0x1c>
 800833a:	42a0      	cmp	r0, r4
 800833c:	d001      	beq.n	8008342 <strncmp+0x1c>
 800833e:	2a00      	cmp	r2, #0
 8008340:	d1f5      	bne.n	800832e <strncmp+0x8>
 8008342:	1ad0      	subs	r0, r2, r3
 8008344:	bd10      	pop	{r4, pc}
 8008346:	4610      	mov	r0, r2
 8008348:	e7fc      	b.n	8008344 <strncmp+0x1e>
	...

0800834c <strtok>:
 800834c:	4b16      	ldr	r3, [pc, #88]	@ (80083a8 <strtok+0x5c>)
 800834e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008352:	681f      	ldr	r7, [r3, #0]
 8008354:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008356:	4605      	mov	r5, r0
 8008358:	460e      	mov	r6, r1
 800835a:	b9ec      	cbnz	r4, 8008398 <strtok+0x4c>
 800835c:	2050      	movs	r0, #80	@ 0x50
 800835e:	f000 f959 	bl	8008614 <malloc>
 8008362:	4602      	mov	r2, r0
 8008364:	6478      	str	r0, [r7, #68]	@ 0x44
 8008366:	b920      	cbnz	r0, 8008372 <strtok+0x26>
 8008368:	4b10      	ldr	r3, [pc, #64]	@ (80083ac <strtok+0x60>)
 800836a:	4811      	ldr	r0, [pc, #68]	@ (80083b0 <strtok+0x64>)
 800836c:	215b      	movs	r1, #91	@ 0x5b
 800836e:	f000 f8e9 	bl	8008544 <__assert_func>
 8008372:	e9c0 4400 	strd	r4, r4, [r0]
 8008376:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800837a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800837e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008382:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008386:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800838a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800838e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008392:	6184      	str	r4, [r0, #24]
 8008394:	7704      	strb	r4, [r0, #28]
 8008396:	6244      	str	r4, [r0, #36]	@ 0x24
 8008398:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800839a:	4631      	mov	r1, r6
 800839c:	4628      	mov	r0, r5
 800839e:	2301      	movs	r3, #1
 80083a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083a4:	f000 b806 	b.w	80083b4 <__strtok_r>
 80083a8:	20000034 	.word	0x20000034
 80083ac:	08009b04 	.word	0x08009b04
 80083b0:	08009b1b 	.word	0x08009b1b

080083b4 <__strtok_r>:
 80083b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083b6:	4604      	mov	r4, r0
 80083b8:	b908      	cbnz	r0, 80083be <__strtok_r+0xa>
 80083ba:	6814      	ldr	r4, [r2, #0]
 80083bc:	b144      	cbz	r4, 80083d0 <__strtok_r+0x1c>
 80083be:	4620      	mov	r0, r4
 80083c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80083c4:	460f      	mov	r7, r1
 80083c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80083ca:	b91e      	cbnz	r6, 80083d4 <__strtok_r+0x20>
 80083cc:	b965      	cbnz	r5, 80083e8 <__strtok_r+0x34>
 80083ce:	6015      	str	r5, [r2, #0]
 80083d0:	2000      	movs	r0, #0
 80083d2:	e005      	b.n	80083e0 <__strtok_r+0x2c>
 80083d4:	42b5      	cmp	r5, r6
 80083d6:	d1f6      	bne.n	80083c6 <__strtok_r+0x12>
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1f0      	bne.n	80083be <__strtok_r+0xa>
 80083dc:	6014      	str	r4, [r2, #0]
 80083de:	7003      	strb	r3, [r0, #0]
 80083e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083e2:	461c      	mov	r4, r3
 80083e4:	e00c      	b.n	8008400 <__strtok_r+0x4c>
 80083e6:	b91d      	cbnz	r5, 80083f0 <__strtok_r+0x3c>
 80083e8:	4627      	mov	r7, r4
 80083ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 80083ee:	460e      	mov	r6, r1
 80083f0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80083f4:	42ab      	cmp	r3, r5
 80083f6:	d1f6      	bne.n	80083e6 <__strtok_r+0x32>
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0f2      	beq.n	80083e2 <__strtok_r+0x2e>
 80083fc:	2300      	movs	r3, #0
 80083fe:	703b      	strb	r3, [r7, #0]
 8008400:	6014      	str	r4, [r2, #0]
 8008402:	e7ed      	b.n	80083e0 <__strtok_r+0x2c>

08008404 <strstr>:
 8008404:	780a      	ldrb	r2, [r1, #0]
 8008406:	b570      	push	{r4, r5, r6, lr}
 8008408:	b96a      	cbnz	r2, 8008426 <strstr+0x22>
 800840a:	bd70      	pop	{r4, r5, r6, pc}
 800840c:	429a      	cmp	r2, r3
 800840e:	d109      	bne.n	8008424 <strstr+0x20>
 8008410:	460c      	mov	r4, r1
 8008412:	4605      	mov	r5, r0
 8008414:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008418:	2b00      	cmp	r3, #0
 800841a:	d0f6      	beq.n	800840a <strstr+0x6>
 800841c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008420:	429e      	cmp	r6, r3
 8008422:	d0f7      	beq.n	8008414 <strstr+0x10>
 8008424:	3001      	adds	r0, #1
 8008426:	7803      	ldrb	r3, [r0, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1ef      	bne.n	800840c <strstr+0x8>
 800842c:	4618      	mov	r0, r3
 800842e:	e7ec      	b.n	800840a <strstr+0x6>

08008430 <_close_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	4d06      	ldr	r5, [pc, #24]	@ (800844c <_close_r+0x1c>)
 8008434:	2300      	movs	r3, #0
 8008436:	4604      	mov	r4, r0
 8008438:	4608      	mov	r0, r1
 800843a:	602b      	str	r3, [r5, #0]
 800843c:	f7fa fcf4 	bl	8002e28 <_close>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_close_r+0x1a>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_close_r+0x1a>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	20000dc0 	.word	0x20000dc0

08008450 <_lseek_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4d07      	ldr	r5, [pc, #28]	@ (8008470 <_lseek_r+0x20>)
 8008454:	4604      	mov	r4, r0
 8008456:	4608      	mov	r0, r1
 8008458:	4611      	mov	r1, r2
 800845a:	2200      	movs	r2, #0
 800845c:	602a      	str	r2, [r5, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	f7fa fd09 	bl	8002e76 <_lseek>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_lseek_r+0x1e>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_lseek_r+0x1e>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	20000dc0 	.word	0x20000dc0

08008474 <_read_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4d07      	ldr	r5, [pc, #28]	@ (8008494 <_read_r+0x20>)
 8008478:	4604      	mov	r4, r0
 800847a:	4608      	mov	r0, r1
 800847c:	4611      	mov	r1, r2
 800847e:	2200      	movs	r2, #0
 8008480:	602a      	str	r2, [r5, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	f7fa fc97 	bl	8002db6 <_read>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_read_r+0x1e>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	b103      	cbz	r3, 8008492 <_read_r+0x1e>
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	20000dc0 	.word	0x20000dc0

08008498 <_write_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	4d07      	ldr	r5, [pc, #28]	@ (80084b8 <_write_r+0x20>)
 800849c:	4604      	mov	r4, r0
 800849e:	4608      	mov	r0, r1
 80084a0:	4611      	mov	r1, r2
 80084a2:	2200      	movs	r2, #0
 80084a4:	602a      	str	r2, [r5, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	f7fa fca2 	bl	8002df0 <_write>
 80084ac:	1c43      	adds	r3, r0, #1
 80084ae:	d102      	bne.n	80084b6 <_write_r+0x1e>
 80084b0:	682b      	ldr	r3, [r5, #0]
 80084b2:	b103      	cbz	r3, 80084b6 <_write_r+0x1e>
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	bd38      	pop	{r3, r4, r5, pc}
 80084b8:	20000dc0 	.word	0x20000dc0

080084bc <__errno>:
 80084bc:	4b01      	ldr	r3, [pc, #4]	@ (80084c4 <__errno+0x8>)
 80084be:	6818      	ldr	r0, [r3, #0]
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	20000034 	.word	0x20000034

080084c8 <__libc_init_array>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	4d0d      	ldr	r5, [pc, #52]	@ (8008500 <__libc_init_array+0x38>)
 80084cc:	4c0d      	ldr	r4, [pc, #52]	@ (8008504 <__libc_init_array+0x3c>)
 80084ce:	1b64      	subs	r4, r4, r5
 80084d0:	10a4      	asrs	r4, r4, #2
 80084d2:	2600      	movs	r6, #0
 80084d4:	42a6      	cmp	r6, r4
 80084d6:	d109      	bne.n	80084ec <__libc_init_array+0x24>
 80084d8:	4d0b      	ldr	r5, [pc, #44]	@ (8008508 <__libc_init_array+0x40>)
 80084da:	4c0c      	ldr	r4, [pc, #48]	@ (800850c <__libc_init_array+0x44>)
 80084dc:	f000 ff98 	bl	8009410 <_init>
 80084e0:	1b64      	subs	r4, r4, r5
 80084e2:	10a4      	asrs	r4, r4, #2
 80084e4:	2600      	movs	r6, #0
 80084e6:	42a6      	cmp	r6, r4
 80084e8:	d105      	bne.n	80084f6 <__libc_init_array+0x2e>
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
 80084ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f0:	4798      	blx	r3
 80084f2:	3601      	adds	r6, #1
 80084f4:	e7ee      	b.n	80084d4 <__libc_init_array+0xc>
 80084f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084fa:	4798      	blx	r3
 80084fc:	3601      	adds	r6, #1
 80084fe:	e7f2      	b.n	80084e6 <__libc_init_array+0x1e>
 8008500:	08009bec 	.word	0x08009bec
 8008504:	08009bec 	.word	0x08009bec
 8008508:	08009bec 	.word	0x08009bec
 800850c:	08009bf0 	.word	0x08009bf0

08008510 <__retarget_lock_init_recursive>:
 8008510:	4770      	bx	lr

08008512 <__retarget_lock_acquire_recursive>:
 8008512:	4770      	bx	lr

08008514 <__retarget_lock_release_recursive>:
 8008514:	4770      	bx	lr

08008516 <strcpy>:
 8008516:	4603      	mov	r3, r0
 8008518:	f811 2b01 	ldrb.w	r2, [r1], #1
 800851c:	f803 2b01 	strb.w	r2, [r3], #1
 8008520:	2a00      	cmp	r2, #0
 8008522:	d1f9      	bne.n	8008518 <strcpy+0x2>
 8008524:	4770      	bx	lr

08008526 <memcpy>:
 8008526:	440a      	add	r2, r1
 8008528:	4291      	cmp	r1, r2
 800852a:	f100 33ff 	add.w	r3, r0, #4294967295
 800852e:	d100      	bne.n	8008532 <memcpy+0xc>
 8008530:	4770      	bx	lr
 8008532:	b510      	push	{r4, lr}
 8008534:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800853c:	4291      	cmp	r1, r2
 800853e:	d1f9      	bne.n	8008534 <memcpy+0xe>
 8008540:	bd10      	pop	{r4, pc}
	...

08008544 <__assert_func>:
 8008544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008546:	4614      	mov	r4, r2
 8008548:	461a      	mov	r2, r3
 800854a:	4b09      	ldr	r3, [pc, #36]	@ (8008570 <__assert_func+0x2c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4605      	mov	r5, r0
 8008550:	68d8      	ldr	r0, [r3, #12]
 8008552:	b14c      	cbz	r4, 8008568 <__assert_func+0x24>
 8008554:	4b07      	ldr	r3, [pc, #28]	@ (8008574 <__assert_func+0x30>)
 8008556:	9100      	str	r1, [sp, #0]
 8008558:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800855c:	4906      	ldr	r1, [pc, #24]	@ (8008578 <__assert_func+0x34>)
 800855e:	462b      	mov	r3, r5
 8008560:	f000 fde0 	bl	8009124 <fiprintf>
 8008564:	f000 fed2 	bl	800930c <abort>
 8008568:	4b04      	ldr	r3, [pc, #16]	@ (800857c <__assert_func+0x38>)
 800856a:	461c      	mov	r4, r3
 800856c:	e7f3      	b.n	8008556 <__assert_func+0x12>
 800856e:	bf00      	nop
 8008570:	20000034 	.word	0x20000034
 8008574:	08009b75 	.word	0x08009b75
 8008578:	08009b82 	.word	0x08009b82
 800857c:	08009bb0 	.word	0x08009bb0

08008580 <_free_r>:
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	4605      	mov	r5, r0
 8008584:	2900      	cmp	r1, #0
 8008586:	d041      	beq.n	800860c <_free_r+0x8c>
 8008588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800858c:	1f0c      	subs	r4, r1, #4
 800858e:	2b00      	cmp	r3, #0
 8008590:	bfb8      	it	lt
 8008592:	18e4      	addlt	r4, r4, r3
 8008594:	f000 f8e8 	bl	8008768 <__malloc_lock>
 8008598:	4a1d      	ldr	r2, [pc, #116]	@ (8008610 <_free_r+0x90>)
 800859a:	6813      	ldr	r3, [r2, #0]
 800859c:	b933      	cbnz	r3, 80085ac <_free_r+0x2c>
 800859e:	6063      	str	r3, [r4, #4]
 80085a0:	6014      	str	r4, [r2, #0]
 80085a2:	4628      	mov	r0, r5
 80085a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085a8:	f000 b8e4 	b.w	8008774 <__malloc_unlock>
 80085ac:	42a3      	cmp	r3, r4
 80085ae:	d908      	bls.n	80085c2 <_free_r+0x42>
 80085b0:	6820      	ldr	r0, [r4, #0]
 80085b2:	1821      	adds	r1, r4, r0
 80085b4:	428b      	cmp	r3, r1
 80085b6:	bf01      	itttt	eq
 80085b8:	6819      	ldreq	r1, [r3, #0]
 80085ba:	685b      	ldreq	r3, [r3, #4]
 80085bc:	1809      	addeq	r1, r1, r0
 80085be:	6021      	streq	r1, [r4, #0]
 80085c0:	e7ed      	b.n	800859e <_free_r+0x1e>
 80085c2:	461a      	mov	r2, r3
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	b10b      	cbz	r3, 80085cc <_free_r+0x4c>
 80085c8:	42a3      	cmp	r3, r4
 80085ca:	d9fa      	bls.n	80085c2 <_free_r+0x42>
 80085cc:	6811      	ldr	r1, [r2, #0]
 80085ce:	1850      	adds	r0, r2, r1
 80085d0:	42a0      	cmp	r0, r4
 80085d2:	d10b      	bne.n	80085ec <_free_r+0x6c>
 80085d4:	6820      	ldr	r0, [r4, #0]
 80085d6:	4401      	add	r1, r0
 80085d8:	1850      	adds	r0, r2, r1
 80085da:	4283      	cmp	r3, r0
 80085dc:	6011      	str	r1, [r2, #0]
 80085de:	d1e0      	bne.n	80085a2 <_free_r+0x22>
 80085e0:	6818      	ldr	r0, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	6053      	str	r3, [r2, #4]
 80085e6:	4408      	add	r0, r1
 80085e8:	6010      	str	r0, [r2, #0]
 80085ea:	e7da      	b.n	80085a2 <_free_r+0x22>
 80085ec:	d902      	bls.n	80085f4 <_free_r+0x74>
 80085ee:	230c      	movs	r3, #12
 80085f0:	602b      	str	r3, [r5, #0]
 80085f2:	e7d6      	b.n	80085a2 <_free_r+0x22>
 80085f4:	6820      	ldr	r0, [r4, #0]
 80085f6:	1821      	adds	r1, r4, r0
 80085f8:	428b      	cmp	r3, r1
 80085fa:	bf04      	itt	eq
 80085fc:	6819      	ldreq	r1, [r3, #0]
 80085fe:	685b      	ldreq	r3, [r3, #4]
 8008600:	6063      	str	r3, [r4, #4]
 8008602:	bf04      	itt	eq
 8008604:	1809      	addeq	r1, r1, r0
 8008606:	6021      	streq	r1, [r4, #0]
 8008608:	6054      	str	r4, [r2, #4]
 800860a:	e7ca      	b.n	80085a2 <_free_r+0x22>
 800860c:	bd38      	pop	{r3, r4, r5, pc}
 800860e:	bf00      	nop
 8008610:	20000dcc 	.word	0x20000dcc

08008614 <malloc>:
 8008614:	4b02      	ldr	r3, [pc, #8]	@ (8008620 <malloc+0xc>)
 8008616:	4601      	mov	r1, r0
 8008618:	6818      	ldr	r0, [r3, #0]
 800861a:	f000 b825 	b.w	8008668 <_malloc_r>
 800861e:	bf00      	nop
 8008620:	20000034 	.word	0x20000034

08008624 <sbrk_aligned>:
 8008624:	b570      	push	{r4, r5, r6, lr}
 8008626:	4e0f      	ldr	r6, [pc, #60]	@ (8008664 <sbrk_aligned+0x40>)
 8008628:	460c      	mov	r4, r1
 800862a:	6831      	ldr	r1, [r6, #0]
 800862c:	4605      	mov	r5, r0
 800862e:	b911      	cbnz	r1, 8008636 <sbrk_aligned+0x12>
 8008630:	f000 fe5c 	bl	80092ec <_sbrk_r>
 8008634:	6030      	str	r0, [r6, #0]
 8008636:	4621      	mov	r1, r4
 8008638:	4628      	mov	r0, r5
 800863a:	f000 fe57 	bl	80092ec <_sbrk_r>
 800863e:	1c43      	adds	r3, r0, #1
 8008640:	d103      	bne.n	800864a <sbrk_aligned+0x26>
 8008642:	f04f 34ff 	mov.w	r4, #4294967295
 8008646:	4620      	mov	r0, r4
 8008648:	bd70      	pop	{r4, r5, r6, pc}
 800864a:	1cc4      	adds	r4, r0, #3
 800864c:	f024 0403 	bic.w	r4, r4, #3
 8008650:	42a0      	cmp	r0, r4
 8008652:	d0f8      	beq.n	8008646 <sbrk_aligned+0x22>
 8008654:	1a21      	subs	r1, r4, r0
 8008656:	4628      	mov	r0, r5
 8008658:	f000 fe48 	bl	80092ec <_sbrk_r>
 800865c:	3001      	adds	r0, #1
 800865e:	d1f2      	bne.n	8008646 <sbrk_aligned+0x22>
 8008660:	e7ef      	b.n	8008642 <sbrk_aligned+0x1e>
 8008662:	bf00      	nop
 8008664:	20000dc8 	.word	0x20000dc8

08008668 <_malloc_r>:
 8008668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800866c:	1ccd      	adds	r5, r1, #3
 800866e:	f025 0503 	bic.w	r5, r5, #3
 8008672:	3508      	adds	r5, #8
 8008674:	2d0c      	cmp	r5, #12
 8008676:	bf38      	it	cc
 8008678:	250c      	movcc	r5, #12
 800867a:	2d00      	cmp	r5, #0
 800867c:	4606      	mov	r6, r0
 800867e:	db01      	blt.n	8008684 <_malloc_r+0x1c>
 8008680:	42a9      	cmp	r1, r5
 8008682:	d904      	bls.n	800868e <_malloc_r+0x26>
 8008684:	230c      	movs	r3, #12
 8008686:	6033      	str	r3, [r6, #0]
 8008688:	2000      	movs	r0, #0
 800868a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800868e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008764 <_malloc_r+0xfc>
 8008692:	f000 f869 	bl	8008768 <__malloc_lock>
 8008696:	f8d8 3000 	ldr.w	r3, [r8]
 800869a:	461c      	mov	r4, r3
 800869c:	bb44      	cbnz	r4, 80086f0 <_malloc_r+0x88>
 800869e:	4629      	mov	r1, r5
 80086a0:	4630      	mov	r0, r6
 80086a2:	f7ff ffbf 	bl	8008624 <sbrk_aligned>
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	4604      	mov	r4, r0
 80086aa:	d158      	bne.n	800875e <_malloc_r+0xf6>
 80086ac:	f8d8 4000 	ldr.w	r4, [r8]
 80086b0:	4627      	mov	r7, r4
 80086b2:	2f00      	cmp	r7, #0
 80086b4:	d143      	bne.n	800873e <_malloc_r+0xd6>
 80086b6:	2c00      	cmp	r4, #0
 80086b8:	d04b      	beq.n	8008752 <_malloc_r+0xea>
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	4639      	mov	r1, r7
 80086be:	4630      	mov	r0, r6
 80086c0:	eb04 0903 	add.w	r9, r4, r3
 80086c4:	f000 fe12 	bl	80092ec <_sbrk_r>
 80086c8:	4581      	cmp	r9, r0
 80086ca:	d142      	bne.n	8008752 <_malloc_r+0xea>
 80086cc:	6821      	ldr	r1, [r4, #0]
 80086ce:	1a6d      	subs	r5, r5, r1
 80086d0:	4629      	mov	r1, r5
 80086d2:	4630      	mov	r0, r6
 80086d4:	f7ff ffa6 	bl	8008624 <sbrk_aligned>
 80086d8:	3001      	adds	r0, #1
 80086da:	d03a      	beq.n	8008752 <_malloc_r+0xea>
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	442b      	add	r3, r5
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	f8d8 3000 	ldr.w	r3, [r8]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	bb62      	cbnz	r2, 8008744 <_malloc_r+0xdc>
 80086ea:	f8c8 7000 	str.w	r7, [r8]
 80086ee:	e00f      	b.n	8008710 <_malloc_r+0xa8>
 80086f0:	6822      	ldr	r2, [r4, #0]
 80086f2:	1b52      	subs	r2, r2, r5
 80086f4:	d420      	bmi.n	8008738 <_malloc_r+0xd0>
 80086f6:	2a0b      	cmp	r2, #11
 80086f8:	d917      	bls.n	800872a <_malloc_r+0xc2>
 80086fa:	1961      	adds	r1, r4, r5
 80086fc:	42a3      	cmp	r3, r4
 80086fe:	6025      	str	r5, [r4, #0]
 8008700:	bf18      	it	ne
 8008702:	6059      	strne	r1, [r3, #4]
 8008704:	6863      	ldr	r3, [r4, #4]
 8008706:	bf08      	it	eq
 8008708:	f8c8 1000 	streq.w	r1, [r8]
 800870c:	5162      	str	r2, [r4, r5]
 800870e:	604b      	str	r3, [r1, #4]
 8008710:	4630      	mov	r0, r6
 8008712:	f000 f82f 	bl	8008774 <__malloc_unlock>
 8008716:	f104 000b 	add.w	r0, r4, #11
 800871a:	1d23      	adds	r3, r4, #4
 800871c:	f020 0007 	bic.w	r0, r0, #7
 8008720:	1ac2      	subs	r2, r0, r3
 8008722:	bf1c      	itt	ne
 8008724:	1a1b      	subne	r3, r3, r0
 8008726:	50a3      	strne	r3, [r4, r2]
 8008728:	e7af      	b.n	800868a <_malloc_r+0x22>
 800872a:	6862      	ldr	r2, [r4, #4]
 800872c:	42a3      	cmp	r3, r4
 800872e:	bf0c      	ite	eq
 8008730:	f8c8 2000 	streq.w	r2, [r8]
 8008734:	605a      	strne	r2, [r3, #4]
 8008736:	e7eb      	b.n	8008710 <_malloc_r+0xa8>
 8008738:	4623      	mov	r3, r4
 800873a:	6864      	ldr	r4, [r4, #4]
 800873c:	e7ae      	b.n	800869c <_malloc_r+0x34>
 800873e:	463c      	mov	r4, r7
 8008740:	687f      	ldr	r7, [r7, #4]
 8008742:	e7b6      	b.n	80086b2 <_malloc_r+0x4a>
 8008744:	461a      	mov	r2, r3
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	42a3      	cmp	r3, r4
 800874a:	d1fb      	bne.n	8008744 <_malloc_r+0xdc>
 800874c:	2300      	movs	r3, #0
 800874e:	6053      	str	r3, [r2, #4]
 8008750:	e7de      	b.n	8008710 <_malloc_r+0xa8>
 8008752:	230c      	movs	r3, #12
 8008754:	6033      	str	r3, [r6, #0]
 8008756:	4630      	mov	r0, r6
 8008758:	f000 f80c 	bl	8008774 <__malloc_unlock>
 800875c:	e794      	b.n	8008688 <_malloc_r+0x20>
 800875e:	6005      	str	r5, [r0, #0]
 8008760:	e7d6      	b.n	8008710 <_malloc_r+0xa8>
 8008762:	bf00      	nop
 8008764:	20000dcc 	.word	0x20000dcc

08008768 <__malloc_lock>:
 8008768:	4801      	ldr	r0, [pc, #4]	@ (8008770 <__malloc_lock+0x8>)
 800876a:	f7ff bed2 	b.w	8008512 <__retarget_lock_acquire_recursive>
 800876e:	bf00      	nop
 8008770:	20000dc4 	.word	0x20000dc4

08008774 <__malloc_unlock>:
 8008774:	4801      	ldr	r0, [pc, #4]	@ (800877c <__malloc_unlock+0x8>)
 8008776:	f7ff becd 	b.w	8008514 <__retarget_lock_release_recursive>
 800877a:	bf00      	nop
 800877c:	20000dc4 	.word	0x20000dc4

08008780 <__ssputs_r>:
 8008780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008784:	688e      	ldr	r6, [r1, #8]
 8008786:	461f      	mov	r7, r3
 8008788:	42be      	cmp	r6, r7
 800878a:	680b      	ldr	r3, [r1, #0]
 800878c:	4682      	mov	sl, r0
 800878e:	460c      	mov	r4, r1
 8008790:	4690      	mov	r8, r2
 8008792:	d82d      	bhi.n	80087f0 <__ssputs_r+0x70>
 8008794:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008798:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800879c:	d026      	beq.n	80087ec <__ssputs_r+0x6c>
 800879e:	6965      	ldr	r5, [r4, #20]
 80087a0:	6909      	ldr	r1, [r1, #16]
 80087a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087a6:	eba3 0901 	sub.w	r9, r3, r1
 80087aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087ae:	1c7b      	adds	r3, r7, #1
 80087b0:	444b      	add	r3, r9
 80087b2:	106d      	asrs	r5, r5, #1
 80087b4:	429d      	cmp	r5, r3
 80087b6:	bf38      	it	cc
 80087b8:	461d      	movcc	r5, r3
 80087ba:	0553      	lsls	r3, r2, #21
 80087bc:	d527      	bpl.n	800880e <__ssputs_r+0x8e>
 80087be:	4629      	mov	r1, r5
 80087c0:	f7ff ff52 	bl	8008668 <_malloc_r>
 80087c4:	4606      	mov	r6, r0
 80087c6:	b360      	cbz	r0, 8008822 <__ssputs_r+0xa2>
 80087c8:	6921      	ldr	r1, [r4, #16]
 80087ca:	464a      	mov	r2, r9
 80087cc:	f7ff feab 	bl	8008526 <memcpy>
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	6126      	str	r6, [r4, #16]
 80087de:	6165      	str	r5, [r4, #20]
 80087e0:	444e      	add	r6, r9
 80087e2:	eba5 0509 	sub.w	r5, r5, r9
 80087e6:	6026      	str	r6, [r4, #0]
 80087e8:	60a5      	str	r5, [r4, #8]
 80087ea:	463e      	mov	r6, r7
 80087ec:	42be      	cmp	r6, r7
 80087ee:	d900      	bls.n	80087f2 <__ssputs_r+0x72>
 80087f0:	463e      	mov	r6, r7
 80087f2:	6820      	ldr	r0, [r4, #0]
 80087f4:	4632      	mov	r2, r6
 80087f6:	4641      	mov	r1, r8
 80087f8:	f000 fd3c 	bl	8009274 <memmove>
 80087fc:	68a3      	ldr	r3, [r4, #8]
 80087fe:	1b9b      	subs	r3, r3, r6
 8008800:	60a3      	str	r3, [r4, #8]
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	4433      	add	r3, r6
 8008806:	6023      	str	r3, [r4, #0]
 8008808:	2000      	movs	r0, #0
 800880a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880e:	462a      	mov	r2, r5
 8008810:	f000 fd83 	bl	800931a <_realloc_r>
 8008814:	4606      	mov	r6, r0
 8008816:	2800      	cmp	r0, #0
 8008818:	d1e0      	bne.n	80087dc <__ssputs_r+0x5c>
 800881a:	6921      	ldr	r1, [r4, #16]
 800881c:	4650      	mov	r0, sl
 800881e:	f7ff feaf 	bl	8008580 <_free_r>
 8008822:	230c      	movs	r3, #12
 8008824:	f8ca 3000 	str.w	r3, [sl]
 8008828:	89a3      	ldrh	r3, [r4, #12]
 800882a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800882e:	81a3      	strh	r3, [r4, #12]
 8008830:	f04f 30ff 	mov.w	r0, #4294967295
 8008834:	e7e9      	b.n	800880a <__ssputs_r+0x8a>
	...

08008838 <_svfiprintf_r>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	4698      	mov	r8, r3
 800883e:	898b      	ldrh	r3, [r1, #12]
 8008840:	061b      	lsls	r3, r3, #24
 8008842:	b09d      	sub	sp, #116	@ 0x74
 8008844:	4607      	mov	r7, r0
 8008846:	460d      	mov	r5, r1
 8008848:	4614      	mov	r4, r2
 800884a:	d510      	bpl.n	800886e <_svfiprintf_r+0x36>
 800884c:	690b      	ldr	r3, [r1, #16]
 800884e:	b973      	cbnz	r3, 800886e <_svfiprintf_r+0x36>
 8008850:	2140      	movs	r1, #64	@ 0x40
 8008852:	f7ff ff09 	bl	8008668 <_malloc_r>
 8008856:	6028      	str	r0, [r5, #0]
 8008858:	6128      	str	r0, [r5, #16]
 800885a:	b930      	cbnz	r0, 800886a <_svfiprintf_r+0x32>
 800885c:	230c      	movs	r3, #12
 800885e:	603b      	str	r3, [r7, #0]
 8008860:	f04f 30ff 	mov.w	r0, #4294967295
 8008864:	b01d      	add	sp, #116	@ 0x74
 8008866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886a:	2340      	movs	r3, #64	@ 0x40
 800886c:	616b      	str	r3, [r5, #20]
 800886e:	2300      	movs	r3, #0
 8008870:	9309      	str	r3, [sp, #36]	@ 0x24
 8008872:	2320      	movs	r3, #32
 8008874:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008878:	f8cd 800c 	str.w	r8, [sp, #12]
 800887c:	2330      	movs	r3, #48	@ 0x30
 800887e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a1c <_svfiprintf_r+0x1e4>
 8008882:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008886:	f04f 0901 	mov.w	r9, #1
 800888a:	4623      	mov	r3, r4
 800888c:	469a      	mov	sl, r3
 800888e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008892:	b10a      	cbz	r2, 8008898 <_svfiprintf_r+0x60>
 8008894:	2a25      	cmp	r2, #37	@ 0x25
 8008896:	d1f9      	bne.n	800888c <_svfiprintf_r+0x54>
 8008898:	ebba 0b04 	subs.w	fp, sl, r4
 800889c:	d00b      	beq.n	80088b6 <_svfiprintf_r+0x7e>
 800889e:	465b      	mov	r3, fp
 80088a0:	4622      	mov	r2, r4
 80088a2:	4629      	mov	r1, r5
 80088a4:	4638      	mov	r0, r7
 80088a6:	f7ff ff6b 	bl	8008780 <__ssputs_r>
 80088aa:	3001      	adds	r0, #1
 80088ac:	f000 80a7 	beq.w	80089fe <_svfiprintf_r+0x1c6>
 80088b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088b2:	445a      	add	r2, fp
 80088b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80088b6:	f89a 3000 	ldrb.w	r3, [sl]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 809f 	beq.w	80089fe <_svfiprintf_r+0x1c6>
 80088c0:	2300      	movs	r3, #0
 80088c2:	f04f 32ff 	mov.w	r2, #4294967295
 80088c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088ca:	f10a 0a01 	add.w	sl, sl, #1
 80088ce:	9304      	str	r3, [sp, #16]
 80088d0:	9307      	str	r3, [sp, #28]
 80088d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80088d8:	4654      	mov	r4, sl
 80088da:	2205      	movs	r2, #5
 80088dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e0:	484e      	ldr	r0, [pc, #312]	@ (8008a1c <_svfiprintf_r+0x1e4>)
 80088e2:	f7f7 fc95 	bl	8000210 <memchr>
 80088e6:	9a04      	ldr	r2, [sp, #16]
 80088e8:	b9d8      	cbnz	r0, 8008922 <_svfiprintf_r+0xea>
 80088ea:	06d0      	lsls	r0, r2, #27
 80088ec:	bf44      	itt	mi
 80088ee:	2320      	movmi	r3, #32
 80088f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088f4:	0711      	lsls	r1, r2, #28
 80088f6:	bf44      	itt	mi
 80088f8:	232b      	movmi	r3, #43	@ 0x2b
 80088fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008902:	2b2a      	cmp	r3, #42	@ 0x2a
 8008904:	d015      	beq.n	8008932 <_svfiprintf_r+0xfa>
 8008906:	9a07      	ldr	r2, [sp, #28]
 8008908:	4654      	mov	r4, sl
 800890a:	2000      	movs	r0, #0
 800890c:	f04f 0c0a 	mov.w	ip, #10
 8008910:	4621      	mov	r1, r4
 8008912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008916:	3b30      	subs	r3, #48	@ 0x30
 8008918:	2b09      	cmp	r3, #9
 800891a:	d94b      	bls.n	80089b4 <_svfiprintf_r+0x17c>
 800891c:	b1b0      	cbz	r0, 800894c <_svfiprintf_r+0x114>
 800891e:	9207      	str	r2, [sp, #28]
 8008920:	e014      	b.n	800894c <_svfiprintf_r+0x114>
 8008922:	eba0 0308 	sub.w	r3, r0, r8
 8008926:	fa09 f303 	lsl.w	r3, r9, r3
 800892a:	4313      	orrs	r3, r2
 800892c:	9304      	str	r3, [sp, #16]
 800892e:	46a2      	mov	sl, r4
 8008930:	e7d2      	b.n	80088d8 <_svfiprintf_r+0xa0>
 8008932:	9b03      	ldr	r3, [sp, #12]
 8008934:	1d19      	adds	r1, r3, #4
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	9103      	str	r1, [sp, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	bfbb      	ittet	lt
 800893e:	425b      	neglt	r3, r3
 8008940:	f042 0202 	orrlt.w	r2, r2, #2
 8008944:	9307      	strge	r3, [sp, #28]
 8008946:	9307      	strlt	r3, [sp, #28]
 8008948:	bfb8      	it	lt
 800894a:	9204      	strlt	r2, [sp, #16]
 800894c:	7823      	ldrb	r3, [r4, #0]
 800894e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008950:	d10a      	bne.n	8008968 <_svfiprintf_r+0x130>
 8008952:	7863      	ldrb	r3, [r4, #1]
 8008954:	2b2a      	cmp	r3, #42	@ 0x2a
 8008956:	d132      	bne.n	80089be <_svfiprintf_r+0x186>
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	1d1a      	adds	r2, r3, #4
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	9203      	str	r2, [sp, #12]
 8008960:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008964:	3402      	adds	r4, #2
 8008966:	9305      	str	r3, [sp, #20]
 8008968:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a2c <_svfiprintf_r+0x1f4>
 800896c:	7821      	ldrb	r1, [r4, #0]
 800896e:	2203      	movs	r2, #3
 8008970:	4650      	mov	r0, sl
 8008972:	f7f7 fc4d 	bl	8000210 <memchr>
 8008976:	b138      	cbz	r0, 8008988 <_svfiprintf_r+0x150>
 8008978:	9b04      	ldr	r3, [sp, #16]
 800897a:	eba0 000a 	sub.w	r0, r0, sl
 800897e:	2240      	movs	r2, #64	@ 0x40
 8008980:	4082      	lsls	r2, r0
 8008982:	4313      	orrs	r3, r2
 8008984:	3401      	adds	r4, #1
 8008986:	9304      	str	r3, [sp, #16]
 8008988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800898c:	4824      	ldr	r0, [pc, #144]	@ (8008a20 <_svfiprintf_r+0x1e8>)
 800898e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008992:	2206      	movs	r2, #6
 8008994:	f7f7 fc3c 	bl	8000210 <memchr>
 8008998:	2800      	cmp	r0, #0
 800899a:	d036      	beq.n	8008a0a <_svfiprintf_r+0x1d2>
 800899c:	4b21      	ldr	r3, [pc, #132]	@ (8008a24 <_svfiprintf_r+0x1ec>)
 800899e:	bb1b      	cbnz	r3, 80089e8 <_svfiprintf_r+0x1b0>
 80089a0:	9b03      	ldr	r3, [sp, #12]
 80089a2:	3307      	adds	r3, #7
 80089a4:	f023 0307 	bic.w	r3, r3, #7
 80089a8:	3308      	adds	r3, #8
 80089aa:	9303      	str	r3, [sp, #12]
 80089ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ae:	4433      	add	r3, r6
 80089b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80089b2:	e76a      	b.n	800888a <_svfiprintf_r+0x52>
 80089b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80089b8:	460c      	mov	r4, r1
 80089ba:	2001      	movs	r0, #1
 80089bc:	e7a8      	b.n	8008910 <_svfiprintf_r+0xd8>
 80089be:	2300      	movs	r3, #0
 80089c0:	3401      	adds	r4, #1
 80089c2:	9305      	str	r3, [sp, #20]
 80089c4:	4619      	mov	r1, r3
 80089c6:	f04f 0c0a 	mov.w	ip, #10
 80089ca:	4620      	mov	r0, r4
 80089cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089d0:	3a30      	subs	r2, #48	@ 0x30
 80089d2:	2a09      	cmp	r2, #9
 80089d4:	d903      	bls.n	80089de <_svfiprintf_r+0x1a6>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0c6      	beq.n	8008968 <_svfiprintf_r+0x130>
 80089da:	9105      	str	r1, [sp, #20]
 80089dc:	e7c4      	b.n	8008968 <_svfiprintf_r+0x130>
 80089de:	fb0c 2101 	mla	r1, ip, r1, r2
 80089e2:	4604      	mov	r4, r0
 80089e4:	2301      	movs	r3, #1
 80089e6:	e7f0      	b.n	80089ca <_svfiprintf_r+0x192>
 80089e8:	ab03      	add	r3, sp, #12
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	462a      	mov	r2, r5
 80089ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008a28 <_svfiprintf_r+0x1f0>)
 80089f0:	a904      	add	r1, sp, #16
 80089f2:	4638      	mov	r0, r7
 80089f4:	f3af 8000 	nop.w
 80089f8:	1c42      	adds	r2, r0, #1
 80089fa:	4606      	mov	r6, r0
 80089fc:	d1d6      	bne.n	80089ac <_svfiprintf_r+0x174>
 80089fe:	89ab      	ldrh	r3, [r5, #12]
 8008a00:	065b      	lsls	r3, r3, #25
 8008a02:	f53f af2d 	bmi.w	8008860 <_svfiprintf_r+0x28>
 8008a06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a08:	e72c      	b.n	8008864 <_svfiprintf_r+0x2c>
 8008a0a:	ab03      	add	r3, sp, #12
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	462a      	mov	r2, r5
 8008a10:	4b05      	ldr	r3, [pc, #20]	@ (8008a28 <_svfiprintf_r+0x1f0>)
 8008a12:	a904      	add	r1, sp, #16
 8008a14:	4638      	mov	r0, r7
 8008a16:	f000 f9bb 	bl	8008d90 <_printf_i>
 8008a1a:	e7ed      	b.n	80089f8 <_svfiprintf_r+0x1c0>
 8008a1c:	08009bb1 	.word	0x08009bb1
 8008a20:	08009bbb 	.word	0x08009bbb
 8008a24:	00000000 	.word	0x00000000
 8008a28:	08008781 	.word	0x08008781
 8008a2c:	08009bb7 	.word	0x08009bb7

08008a30 <__sfputc_r>:
 8008a30:	6893      	ldr	r3, [r2, #8]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	b410      	push	{r4}
 8008a38:	6093      	str	r3, [r2, #8]
 8008a3a:	da08      	bge.n	8008a4e <__sfputc_r+0x1e>
 8008a3c:	6994      	ldr	r4, [r2, #24]
 8008a3e:	42a3      	cmp	r3, r4
 8008a40:	db01      	blt.n	8008a46 <__sfputc_r+0x16>
 8008a42:	290a      	cmp	r1, #10
 8008a44:	d103      	bne.n	8008a4e <__sfputc_r+0x1e>
 8008a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a4a:	f7ff bbc2 	b.w	80081d2 <__swbuf_r>
 8008a4e:	6813      	ldr	r3, [r2, #0]
 8008a50:	1c58      	adds	r0, r3, #1
 8008a52:	6010      	str	r0, [r2, #0]
 8008a54:	7019      	strb	r1, [r3, #0]
 8008a56:	4608      	mov	r0, r1
 8008a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <__sfputs_r>:
 8008a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a60:	4606      	mov	r6, r0
 8008a62:	460f      	mov	r7, r1
 8008a64:	4614      	mov	r4, r2
 8008a66:	18d5      	adds	r5, r2, r3
 8008a68:	42ac      	cmp	r4, r5
 8008a6a:	d101      	bne.n	8008a70 <__sfputs_r+0x12>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	e007      	b.n	8008a80 <__sfputs_r+0x22>
 8008a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a74:	463a      	mov	r2, r7
 8008a76:	4630      	mov	r0, r6
 8008a78:	f7ff ffda 	bl	8008a30 <__sfputc_r>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d1f3      	bne.n	8008a68 <__sfputs_r+0xa>
 8008a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a84 <_vfiprintf_r>:
 8008a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a88:	460d      	mov	r5, r1
 8008a8a:	b09d      	sub	sp, #116	@ 0x74
 8008a8c:	4614      	mov	r4, r2
 8008a8e:	4698      	mov	r8, r3
 8008a90:	4606      	mov	r6, r0
 8008a92:	b118      	cbz	r0, 8008a9c <_vfiprintf_r+0x18>
 8008a94:	6a03      	ldr	r3, [r0, #32]
 8008a96:	b90b      	cbnz	r3, 8008a9c <_vfiprintf_r+0x18>
 8008a98:	f7ff fa88 	bl	8007fac <__sinit>
 8008a9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a9e:	07d9      	lsls	r1, r3, #31
 8008aa0:	d405      	bmi.n	8008aae <_vfiprintf_r+0x2a>
 8008aa2:	89ab      	ldrh	r3, [r5, #12]
 8008aa4:	059a      	lsls	r2, r3, #22
 8008aa6:	d402      	bmi.n	8008aae <_vfiprintf_r+0x2a>
 8008aa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aaa:	f7ff fd32 	bl	8008512 <__retarget_lock_acquire_recursive>
 8008aae:	89ab      	ldrh	r3, [r5, #12]
 8008ab0:	071b      	lsls	r3, r3, #28
 8008ab2:	d501      	bpl.n	8008ab8 <_vfiprintf_r+0x34>
 8008ab4:	692b      	ldr	r3, [r5, #16]
 8008ab6:	b99b      	cbnz	r3, 8008ae0 <_vfiprintf_r+0x5c>
 8008ab8:	4629      	mov	r1, r5
 8008aba:	4630      	mov	r0, r6
 8008abc:	f7ff fbc8 	bl	8008250 <__swsetup_r>
 8008ac0:	b170      	cbz	r0, 8008ae0 <_vfiprintf_r+0x5c>
 8008ac2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ac4:	07dc      	lsls	r4, r3, #31
 8008ac6:	d504      	bpl.n	8008ad2 <_vfiprintf_r+0x4e>
 8008ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8008acc:	b01d      	add	sp, #116	@ 0x74
 8008ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad2:	89ab      	ldrh	r3, [r5, #12]
 8008ad4:	0598      	lsls	r0, r3, #22
 8008ad6:	d4f7      	bmi.n	8008ac8 <_vfiprintf_r+0x44>
 8008ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ada:	f7ff fd1b 	bl	8008514 <__retarget_lock_release_recursive>
 8008ade:	e7f3      	b.n	8008ac8 <_vfiprintf_r+0x44>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ae4:	2320      	movs	r3, #32
 8008ae6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aee:	2330      	movs	r3, #48	@ 0x30
 8008af0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ca0 <_vfiprintf_r+0x21c>
 8008af4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008af8:	f04f 0901 	mov.w	r9, #1
 8008afc:	4623      	mov	r3, r4
 8008afe:	469a      	mov	sl, r3
 8008b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b04:	b10a      	cbz	r2, 8008b0a <_vfiprintf_r+0x86>
 8008b06:	2a25      	cmp	r2, #37	@ 0x25
 8008b08:	d1f9      	bne.n	8008afe <_vfiprintf_r+0x7a>
 8008b0a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b0e:	d00b      	beq.n	8008b28 <_vfiprintf_r+0xa4>
 8008b10:	465b      	mov	r3, fp
 8008b12:	4622      	mov	r2, r4
 8008b14:	4629      	mov	r1, r5
 8008b16:	4630      	mov	r0, r6
 8008b18:	f7ff ffa1 	bl	8008a5e <__sfputs_r>
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	f000 80a7 	beq.w	8008c70 <_vfiprintf_r+0x1ec>
 8008b22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b24:	445a      	add	r2, fp
 8008b26:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b28:	f89a 3000 	ldrb.w	r3, [sl]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 809f 	beq.w	8008c70 <_vfiprintf_r+0x1ec>
 8008b32:	2300      	movs	r3, #0
 8008b34:	f04f 32ff 	mov.w	r2, #4294967295
 8008b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b3c:	f10a 0a01 	add.w	sl, sl, #1
 8008b40:	9304      	str	r3, [sp, #16]
 8008b42:	9307      	str	r3, [sp, #28]
 8008b44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b48:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b4a:	4654      	mov	r4, sl
 8008b4c:	2205      	movs	r2, #5
 8008b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b52:	4853      	ldr	r0, [pc, #332]	@ (8008ca0 <_vfiprintf_r+0x21c>)
 8008b54:	f7f7 fb5c 	bl	8000210 <memchr>
 8008b58:	9a04      	ldr	r2, [sp, #16]
 8008b5a:	b9d8      	cbnz	r0, 8008b94 <_vfiprintf_r+0x110>
 8008b5c:	06d1      	lsls	r1, r2, #27
 8008b5e:	bf44      	itt	mi
 8008b60:	2320      	movmi	r3, #32
 8008b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b66:	0713      	lsls	r3, r2, #28
 8008b68:	bf44      	itt	mi
 8008b6a:	232b      	movmi	r3, #43	@ 0x2b
 8008b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b70:	f89a 3000 	ldrb.w	r3, [sl]
 8008b74:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b76:	d015      	beq.n	8008ba4 <_vfiprintf_r+0x120>
 8008b78:	9a07      	ldr	r2, [sp, #28]
 8008b7a:	4654      	mov	r4, sl
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	f04f 0c0a 	mov.w	ip, #10
 8008b82:	4621      	mov	r1, r4
 8008b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b88:	3b30      	subs	r3, #48	@ 0x30
 8008b8a:	2b09      	cmp	r3, #9
 8008b8c:	d94b      	bls.n	8008c26 <_vfiprintf_r+0x1a2>
 8008b8e:	b1b0      	cbz	r0, 8008bbe <_vfiprintf_r+0x13a>
 8008b90:	9207      	str	r2, [sp, #28]
 8008b92:	e014      	b.n	8008bbe <_vfiprintf_r+0x13a>
 8008b94:	eba0 0308 	sub.w	r3, r0, r8
 8008b98:	fa09 f303 	lsl.w	r3, r9, r3
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	9304      	str	r3, [sp, #16]
 8008ba0:	46a2      	mov	sl, r4
 8008ba2:	e7d2      	b.n	8008b4a <_vfiprintf_r+0xc6>
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	1d19      	adds	r1, r3, #4
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	9103      	str	r1, [sp, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bfbb      	ittet	lt
 8008bb0:	425b      	neglt	r3, r3
 8008bb2:	f042 0202 	orrlt.w	r2, r2, #2
 8008bb6:	9307      	strge	r3, [sp, #28]
 8008bb8:	9307      	strlt	r3, [sp, #28]
 8008bba:	bfb8      	it	lt
 8008bbc:	9204      	strlt	r2, [sp, #16]
 8008bbe:	7823      	ldrb	r3, [r4, #0]
 8008bc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bc2:	d10a      	bne.n	8008bda <_vfiprintf_r+0x156>
 8008bc4:	7863      	ldrb	r3, [r4, #1]
 8008bc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bc8:	d132      	bne.n	8008c30 <_vfiprintf_r+0x1ac>
 8008bca:	9b03      	ldr	r3, [sp, #12]
 8008bcc:	1d1a      	adds	r2, r3, #4
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	9203      	str	r2, [sp, #12]
 8008bd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bd6:	3402      	adds	r4, #2
 8008bd8:	9305      	str	r3, [sp, #20]
 8008bda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008cb0 <_vfiprintf_r+0x22c>
 8008bde:	7821      	ldrb	r1, [r4, #0]
 8008be0:	2203      	movs	r2, #3
 8008be2:	4650      	mov	r0, sl
 8008be4:	f7f7 fb14 	bl	8000210 <memchr>
 8008be8:	b138      	cbz	r0, 8008bfa <_vfiprintf_r+0x176>
 8008bea:	9b04      	ldr	r3, [sp, #16]
 8008bec:	eba0 000a 	sub.w	r0, r0, sl
 8008bf0:	2240      	movs	r2, #64	@ 0x40
 8008bf2:	4082      	lsls	r2, r0
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	3401      	adds	r4, #1
 8008bf8:	9304      	str	r3, [sp, #16]
 8008bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bfe:	4829      	ldr	r0, [pc, #164]	@ (8008ca4 <_vfiprintf_r+0x220>)
 8008c00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c04:	2206      	movs	r2, #6
 8008c06:	f7f7 fb03 	bl	8000210 <memchr>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	d03f      	beq.n	8008c8e <_vfiprintf_r+0x20a>
 8008c0e:	4b26      	ldr	r3, [pc, #152]	@ (8008ca8 <_vfiprintf_r+0x224>)
 8008c10:	bb1b      	cbnz	r3, 8008c5a <_vfiprintf_r+0x1d6>
 8008c12:	9b03      	ldr	r3, [sp, #12]
 8008c14:	3307      	adds	r3, #7
 8008c16:	f023 0307 	bic.w	r3, r3, #7
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	9303      	str	r3, [sp, #12]
 8008c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c20:	443b      	add	r3, r7
 8008c22:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c24:	e76a      	b.n	8008afc <_vfiprintf_r+0x78>
 8008c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	2001      	movs	r0, #1
 8008c2e:	e7a8      	b.n	8008b82 <_vfiprintf_r+0xfe>
 8008c30:	2300      	movs	r3, #0
 8008c32:	3401      	adds	r4, #1
 8008c34:	9305      	str	r3, [sp, #20]
 8008c36:	4619      	mov	r1, r3
 8008c38:	f04f 0c0a 	mov.w	ip, #10
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c42:	3a30      	subs	r2, #48	@ 0x30
 8008c44:	2a09      	cmp	r2, #9
 8008c46:	d903      	bls.n	8008c50 <_vfiprintf_r+0x1cc>
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d0c6      	beq.n	8008bda <_vfiprintf_r+0x156>
 8008c4c:	9105      	str	r1, [sp, #20]
 8008c4e:	e7c4      	b.n	8008bda <_vfiprintf_r+0x156>
 8008c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c54:	4604      	mov	r4, r0
 8008c56:	2301      	movs	r3, #1
 8008c58:	e7f0      	b.n	8008c3c <_vfiprintf_r+0x1b8>
 8008c5a:	ab03      	add	r3, sp, #12
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	462a      	mov	r2, r5
 8008c60:	4b12      	ldr	r3, [pc, #72]	@ (8008cac <_vfiprintf_r+0x228>)
 8008c62:	a904      	add	r1, sp, #16
 8008c64:	4630      	mov	r0, r6
 8008c66:	f3af 8000 	nop.w
 8008c6a:	4607      	mov	r7, r0
 8008c6c:	1c78      	adds	r0, r7, #1
 8008c6e:	d1d6      	bne.n	8008c1e <_vfiprintf_r+0x19a>
 8008c70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c72:	07d9      	lsls	r1, r3, #31
 8008c74:	d405      	bmi.n	8008c82 <_vfiprintf_r+0x1fe>
 8008c76:	89ab      	ldrh	r3, [r5, #12]
 8008c78:	059a      	lsls	r2, r3, #22
 8008c7a:	d402      	bmi.n	8008c82 <_vfiprintf_r+0x1fe>
 8008c7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c7e:	f7ff fc49 	bl	8008514 <__retarget_lock_release_recursive>
 8008c82:	89ab      	ldrh	r3, [r5, #12]
 8008c84:	065b      	lsls	r3, r3, #25
 8008c86:	f53f af1f 	bmi.w	8008ac8 <_vfiprintf_r+0x44>
 8008c8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c8c:	e71e      	b.n	8008acc <_vfiprintf_r+0x48>
 8008c8e:	ab03      	add	r3, sp, #12
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	462a      	mov	r2, r5
 8008c94:	4b05      	ldr	r3, [pc, #20]	@ (8008cac <_vfiprintf_r+0x228>)
 8008c96:	a904      	add	r1, sp, #16
 8008c98:	4630      	mov	r0, r6
 8008c9a:	f000 f879 	bl	8008d90 <_printf_i>
 8008c9e:	e7e4      	b.n	8008c6a <_vfiprintf_r+0x1e6>
 8008ca0:	08009bb1 	.word	0x08009bb1
 8008ca4:	08009bbb 	.word	0x08009bbb
 8008ca8:	00000000 	.word	0x00000000
 8008cac:	08008a5f 	.word	0x08008a5f
 8008cb0:	08009bb7 	.word	0x08009bb7

08008cb4 <_printf_common>:
 8008cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb8:	4616      	mov	r6, r2
 8008cba:	4698      	mov	r8, r3
 8008cbc:	688a      	ldr	r2, [r1, #8]
 8008cbe:	690b      	ldr	r3, [r1, #16]
 8008cc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	bfb8      	it	lt
 8008cc8:	4613      	movlt	r3, r2
 8008cca:	6033      	str	r3, [r6, #0]
 8008ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008cd0:	4607      	mov	r7, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	b10a      	cbz	r2, 8008cda <_printf_common+0x26>
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	6033      	str	r3, [r6, #0]
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	0699      	lsls	r1, r3, #26
 8008cde:	bf42      	ittt	mi
 8008ce0:	6833      	ldrmi	r3, [r6, #0]
 8008ce2:	3302      	addmi	r3, #2
 8008ce4:	6033      	strmi	r3, [r6, #0]
 8008ce6:	6825      	ldr	r5, [r4, #0]
 8008ce8:	f015 0506 	ands.w	r5, r5, #6
 8008cec:	d106      	bne.n	8008cfc <_printf_common+0x48>
 8008cee:	f104 0a19 	add.w	sl, r4, #25
 8008cf2:	68e3      	ldr	r3, [r4, #12]
 8008cf4:	6832      	ldr	r2, [r6, #0]
 8008cf6:	1a9b      	subs	r3, r3, r2
 8008cf8:	42ab      	cmp	r3, r5
 8008cfa:	dc26      	bgt.n	8008d4a <_printf_common+0x96>
 8008cfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d00:	6822      	ldr	r2, [r4, #0]
 8008d02:	3b00      	subs	r3, #0
 8008d04:	bf18      	it	ne
 8008d06:	2301      	movne	r3, #1
 8008d08:	0692      	lsls	r2, r2, #26
 8008d0a:	d42b      	bmi.n	8008d64 <_printf_common+0xb0>
 8008d0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d10:	4641      	mov	r1, r8
 8008d12:	4638      	mov	r0, r7
 8008d14:	47c8      	blx	r9
 8008d16:	3001      	adds	r0, #1
 8008d18:	d01e      	beq.n	8008d58 <_printf_common+0xa4>
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	6922      	ldr	r2, [r4, #16]
 8008d1e:	f003 0306 	and.w	r3, r3, #6
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	bf02      	ittt	eq
 8008d26:	68e5      	ldreq	r5, [r4, #12]
 8008d28:	6833      	ldreq	r3, [r6, #0]
 8008d2a:	1aed      	subeq	r5, r5, r3
 8008d2c:	68a3      	ldr	r3, [r4, #8]
 8008d2e:	bf0c      	ite	eq
 8008d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d34:	2500      	movne	r5, #0
 8008d36:	4293      	cmp	r3, r2
 8008d38:	bfc4      	itt	gt
 8008d3a:	1a9b      	subgt	r3, r3, r2
 8008d3c:	18ed      	addgt	r5, r5, r3
 8008d3e:	2600      	movs	r6, #0
 8008d40:	341a      	adds	r4, #26
 8008d42:	42b5      	cmp	r5, r6
 8008d44:	d11a      	bne.n	8008d7c <_printf_common+0xc8>
 8008d46:	2000      	movs	r0, #0
 8008d48:	e008      	b.n	8008d5c <_printf_common+0xa8>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	4652      	mov	r2, sl
 8008d4e:	4641      	mov	r1, r8
 8008d50:	4638      	mov	r0, r7
 8008d52:	47c8      	blx	r9
 8008d54:	3001      	adds	r0, #1
 8008d56:	d103      	bne.n	8008d60 <_printf_common+0xac>
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d60:	3501      	adds	r5, #1
 8008d62:	e7c6      	b.n	8008cf2 <_printf_common+0x3e>
 8008d64:	18e1      	adds	r1, r4, r3
 8008d66:	1c5a      	adds	r2, r3, #1
 8008d68:	2030      	movs	r0, #48	@ 0x30
 8008d6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d6e:	4422      	add	r2, r4
 8008d70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d78:	3302      	adds	r3, #2
 8008d7a:	e7c7      	b.n	8008d0c <_printf_common+0x58>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	4622      	mov	r2, r4
 8008d80:	4641      	mov	r1, r8
 8008d82:	4638      	mov	r0, r7
 8008d84:	47c8      	blx	r9
 8008d86:	3001      	adds	r0, #1
 8008d88:	d0e6      	beq.n	8008d58 <_printf_common+0xa4>
 8008d8a:	3601      	adds	r6, #1
 8008d8c:	e7d9      	b.n	8008d42 <_printf_common+0x8e>
	...

08008d90 <_printf_i>:
 8008d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d94:	7e0f      	ldrb	r7, [r1, #24]
 8008d96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d98:	2f78      	cmp	r7, #120	@ 0x78
 8008d9a:	4691      	mov	r9, r2
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	460c      	mov	r4, r1
 8008da0:	469a      	mov	sl, r3
 8008da2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008da6:	d807      	bhi.n	8008db8 <_printf_i+0x28>
 8008da8:	2f62      	cmp	r7, #98	@ 0x62
 8008daa:	d80a      	bhi.n	8008dc2 <_printf_i+0x32>
 8008dac:	2f00      	cmp	r7, #0
 8008dae:	f000 80d1 	beq.w	8008f54 <_printf_i+0x1c4>
 8008db2:	2f58      	cmp	r7, #88	@ 0x58
 8008db4:	f000 80b8 	beq.w	8008f28 <_printf_i+0x198>
 8008db8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008dc0:	e03a      	b.n	8008e38 <_printf_i+0xa8>
 8008dc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008dc6:	2b15      	cmp	r3, #21
 8008dc8:	d8f6      	bhi.n	8008db8 <_printf_i+0x28>
 8008dca:	a101      	add	r1, pc, #4	@ (adr r1, 8008dd0 <_printf_i+0x40>)
 8008dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dd0:	08008e29 	.word	0x08008e29
 8008dd4:	08008e3d 	.word	0x08008e3d
 8008dd8:	08008db9 	.word	0x08008db9
 8008ddc:	08008db9 	.word	0x08008db9
 8008de0:	08008db9 	.word	0x08008db9
 8008de4:	08008db9 	.word	0x08008db9
 8008de8:	08008e3d 	.word	0x08008e3d
 8008dec:	08008db9 	.word	0x08008db9
 8008df0:	08008db9 	.word	0x08008db9
 8008df4:	08008db9 	.word	0x08008db9
 8008df8:	08008db9 	.word	0x08008db9
 8008dfc:	08008f3b 	.word	0x08008f3b
 8008e00:	08008e67 	.word	0x08008e67
 8008e04:	08008ef5 	.word	0x08008ef5
 8008e08:	08008db9 	.word	0x08008db9
 8008e0c:	08008db9 	.word	0x08008db9
 8008e10:	08008f5d 	.word	0x08008f5d
 8008e14:	08008db9 	.word	0x08008db9
 8008e18:	08008e67 	.word	0x08008e67
 8008e1c:	08008db9 	.word	0x08008db9
 8008e20:	08008db9 	.word	0x08008db9
 8008e24:	08008efd 	.word	0x08008efd
 8008e28:	6833      	ldr	r3, [r6, #0]
 8008e2a:	1d1a      	adds	r2, r3, #4
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6032      	str	r2, [r6, #0]
 8008e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e09c      	b.n	8008f76 <_printf_i+0x1e6>
 8008e3c:	6833      	ldr	r3, [r6, #0]
 8008e3e:	6820      	ldr	r0, [r4, #0]
 8008e40:	1d19      	adds	r1, r3, #4
 8008e42:	6031      	str	r1, [r6, #0]
 8008e44:	0606      	lsls	r6, r0, #24
 8008e46:	d501      	bpl.n	8008e4c <_printf_i+0xbc>
 8008e48:	681d      	ldr	r5, [r3, #0]
 8008e4a:	e003      	b.n	8008e54 <_printf_i+0xc4>
 8008e4c:	0645      	lsls	r5, r0, #25
 8008e4e:	d5fb      	bpl.n	8008e48 <_printf_i+0xb8>
 8008e50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e54:	2d00      	cmp	r5, #0
 8008e56:	da03      	bge.n	8008e60 <_printf_i+0xd0>
 8008e58:	232d      	movs	r3, #45	@ 0x2d
 8008e5a:	426d      	negs	r5, r5
 8008e5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e60:	4858      	ldr	r0, [pc, #352]	@ (8008fc4 <_printf_i+0x234>)
 8008e62:	230a      	movs	r3, #10
 8008e64:	e011      	b.n	8008e8a <_printf_i+0xfa>
 8008e66:	6821      	ldr	r1, [r4, #0]
 8008e68:	6833      	ldr	r3, [r6, #0]
 8008e6a:	0608      	lsls	r0, r1, #24
 8008e6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e70:	d402      	bmi.n	8008e78 <_printf_i+0xe8>
 8008e72:	0649      	lsls	r1, r1, #25
 8008e74:	bf48      	it	mi
 8008e76:	b2ad      	uxthmi	r5, r5
 8008e78:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e7a:	4852      	ldr	r0, [pc, #328]	@ (8008fc4 <_printf_i+0x234>)
 8008e7c:	6033      	str	r3, [r6, #0]
 8008e7e:	bf14      	ite	ne
 8008e80:	230a      	movne	r3, #10
 8008e82:	2308      	moveq	r3, #8
 8008e84:	2100      	movs	r1, #0
 8008e86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e8a:	6866      	ldr	r6, [r4, #4]
 8008e8c:	60a6      	str	r6, [r4, #8]
 8008e8e:	2e00      	cmp	r6, #0
 8008e90:	db05      	blt.n	8008e9e <_printf_i+0x10e>
 8008e92:	6821      	ldr	r1, [r4, #0]
 8008e94:	432e      	orrs	r6, r5
 8008e96:	f021 0104 	bic.w	r1, r1, #4
 8008e9a:	6021      	str	r1, [r4, #0]
 8008e9c:	d04b      	beq.n	8008f36 <_printf_i+0x1a6>
 8008e9e:	4616      	mov	r6, r2
 8008ea0:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ea4:	fb03 5711 	mls	r7, r3, r1, r5
 8008ea8:	5dc7      	ldrb	r7, [r0, r7]
 8008eaa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008eae:	462f      	mov	r7, r5
 8008eb0:	42bb      	cmp	r3, r7
 8008eb2:	460d      	mov	r5, r1
 8008eb4:	d9f4      	bls.n	8008ea0 <_printf_i+0x110>
 8008eb6:	2b08      	cmp	r3, #8
 8008eb8:	d10b      	bne.n	8008ed2 <_printf_i+0x142>
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	07df      	lsls	r7, r3, #31
 8008ebe:	d508      	bpl.n	8008ed2 <_printf_i+0x142>
 8008ec0:	6923      	ldr	r3, [r4, #16]
 8008ec2:	6861      	ldr	r1, [r4, #4]
 8008ec4:	4299      	cmp	r1, r3
 8008ec6:	bfde      	ittt	le
 8008ec8:	2330      	movle	r3, #48	@ 0x30
 8008eca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ece:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ed2:	1b92      	subs	r2, r2, r6
 8008ed4:	6122      	str	r2, [r4, #16]
 8008ed6:	f8cd a000 	str.w	sl, [sp]
 8008eda:	464b      	mov	r3, r9
 8008edc:	aa03      	add	r2, sp, #12
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	f7ff fee7 	bl	8008cb4 <_printf_common>
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	d14a      	bne.n	8008f80 <_printf_i+0x1f0>
 8008eea:	f04f 30ff 	mov.w	r0, #4294967295
 8008eee:	b004      	add	sp, #16
 8008ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	f043 0320 	orr.w	r3, r3, #32
 8008efa:	6023      	str	r3, [r4, #0]
 8008efc:	4832      	ldr	r0, [pc, #200]	@ (8008fc8 <_printf_i+0x238>)
 8008efe:	2778      	movs	r7, #120	@ 0x78
 8008f00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	6831      	ldr	r1, [r6, #0]
 8008f08:	061f      	lsls	r7, r3, #24
 8008f0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f0e:	d402      	bmi.n	8008f16 <_printf_i+0x186>
 8008f10:	065f      	lsls	r7, r3, #25
 8008f12:	bf48      	it	mi
 8008f14:	b2ad      	uxthmi	r5, r5
 8008f16:	6031      	str	r1, [r6, #0]
 8008f18:	07d9      	lsls	r1, r3, #31
 8008f1a:	bf44      	itt	mi
 8008f1c:	f043 0320 	orrmi.w	r3, r3, #32
 8008f20:	6023      	strmi	r3, [r4, #0]
 8008f22:	b11d      	cbz	r5, 8008f2c <_printf_i+0x19c>
 8008f24:	2310      	movs	r3, #16
 8008f26:	e7ad      	b.n	8008e84 <_printf_i+0xf4>
 8008f28:	4826      	ldr	r0, [pc, #152]	@ (8008fc4 <_printf_i+0x234>)
 8008f2a:	e7e9      	b.n	8008f00 <_printf_i+0x170>
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	f023 0320 	bic.w	r3, r3, #32
 8008f32:	6023      	str	r3, [r4, #0]
 8008f34:	e7f6      	b.n	8008f24 <_printf_i+0x194>
 8008f36:	4616      	mov	r6, r2
 8008f38:	e7bd      	b.n	8008eb6 <_printf_i+0x126>
 8008f3a:	6833      	ldr	r3, [r6, #0]
 8008f3c:	6825      	ldr	r5, [r4, #0]
 8008f3e:	6961      	ldr	r1, [r4, #20]
 8008f40:	1d18      	adds	r0, r3, #4
 8008f42:	6030      	str	r0, [r6, #0]
 8008f44:	062e      	lsls	r6, r5, #24
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	d501      	bpl.n	8008f4e <_printf_i+0x1be>
 8008f4a:	6019      	str	r1, [r3, #0]
 8008f4c:	e002      	b.n	8008f54 <_printf_i+0x1c4>
 8008f4e:	0668      	lsls	r0, r5, #25
 8008f50:	d5fb      	bpl.n	8008f4a <_printf_i+0x1ba>
 8008f52:	8019      	strh	r1, [r3, #0]
 8008f54:	2300      	movs	r3, #0
 8008f56:	6123      	str	r3, [r4, #16]
 8008f58:	4616      	mov	r6, r2
 8008f5a:	e7bc      	b.n	8008ed6 <_printf_i+0x146>
 8008f5c:	6833      	ldr	r3, [r6, #0]
 8008f5e:	1d1a      	adds	r2, r3, #4
 8008f60:	6032      	str	r2, [r6, #0]
 8008f62:	681e      	ldr	r6, [r3, #0]
 8008f64:	6862      	ldr	r2, [r4, #4]
 8008f66:	2100      	movs	r1, #0
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f7f7 f951 	bl	8000210 <memchr>
 8008f6e:	b108      	cbz	r0, 8008f74 <_printf_i+0x1e4>
 8008f70:	1b80      	subs	r0, r0, r6
 8008f72:	6060      	str	r0, [r4, #4]
 8008f74:	6863      	ldr	r3, [r4, #4]
 8008f76:	6123      	str	r3, [r4, #16]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f7e:	e7aa      	b.n	8008ed6 <_printf_i+0x146>
 8008f80:	6923      	ldr	r3, [r4, #16]
 8008f82:	4632      	mov	r2, r6
 8008f84:	4649      	mov	r1, r9
 8008f86:	4640      	mov	r0, r8
 8008f88:	47d0      	blx	sl
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d0ad      	beq.n	8008eea <_printf_i+0x15a>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	079b      	lsls	r3, r3, #30
 8008f92:	d413      	bmi.n	8008fbc <_printf_i+0x22c>
 8008f94:	68e0      	ldr	r0, [r4, #12]
 8008f96:	9b03      	ldr	r3, [sp, #12]
 8008f98:	4298      	cmp	r0, r3
 8008f9a:	bfb8      	it	lt
 8008f9c:	4618      	movlt	r0, r3
 8008f9e:	e7a6      	b.n	8008eee <_printf_i+0x15e>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	4632      	mov	r2, r6
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	47d0      	blx	sl
 8008faa:	3001      	adds	r0, #1
 8008fac:	d09d      	beq.n	8008eea <_printf_i+0x15a>
 8008fae:	3501      	adds	r5, #1
 8008fb0:	68e3      	ldr	r3, [r4, #12]
 8008fb2:	9903      	ldr	r1, [sp, #12]
 8008fb4:	1a5b      	subs	r3, r3, r1
 8008fb6:	42ab      	cmp	r3, r5
 8008fb8:	dcf2      	bgt.n	8008fa0 <_printf_i+0x210>
 8008fba:	e7eb      	b.n	8008f94 <_printf_i+0x204>
 8008fbc:	2500      	movs	r5, #0
 8008fbe:	f104 0619 	add.w	r6, r4, #25
 8008fc2:	e7f5      	b.n	8008fb0 <_printf_i+0x220>
 8008fc4:	08009bc2 	.word	0x08009bc2
 8008fc8:	08009bd3 	.word	0x08009bd3

08008fcc <__sflush_r>:
 8008fcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd4:	0716      	lsls	r6, r2, #28
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	460c      	mov	r4, r1
 8008fda:	d454      	bmi.n	8009086 <__sflush_r+0xba>
 8008fdc:	684b      	ldr	r3, [r1, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	dc02      	bgt.n	8008fe8 <__sflush_r+0x1c>
 8008fe2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	dd48      	ble.n	800907a <__sflush_r+0xae>
 8008fe8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fea:	2e00      	cmp	r6, #0
 8008fec:	d045      	beq.n	800907a <__sflush_r+0xae>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ff4:	682f      	ldr	r7, [r5, #0]
 8008ff6:	6a21      	ldr	r1, [r4, #32]
 8008ff8:	602b      	str	r3, [r5, #0]
 8008ffa:	d030      	beq.n	800905e <__sflush_r+0x92>
 8008ffc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ffe:	89a3      	ldrh	r3, [r4, #12]
 8009000:	0759      	lsls	r1, r3, #29
 8009002:	d505      	bpl.n	8009010 <__sflush_r+0x44>
 8009004:	6863      	ldr	r3, [r4, #4]
 8009006:	1ad2      	subs	r2, r2, r3
 8009008:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800900a:	b10b      	cbz	r3, 8009010 <__sflush_r+0x44>
 800900c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800900e:	1ad2      	subs	r2, r2, r3
 8009010:	2300      	movs	r3, #0
 8009012:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009014:	6a21      	ldr	r1, [r4, #32]
 8009016:	4628      	mov	r0, r5
 8009018:	47b0      	blx	r6
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	89a3      	ldrh	r3, [r4, #12]
 800901e:	d106      	bne.n	800902e <__sflush_r+0x62>
 8009020:	6829      	ldr	r1, [r5, #0]
 8009022:	291d      	cmp	r1, #29
 8009024:	d82b      	bhi.n	800907e <__sflush_r+0xb2>
 8009026:	4a2a      	ldr	r2, [pc, #168]	@ (80090d0 <__sflush_r+0x104>)
 8009028:	40ca      	lsrs	r2, r1
 800902a:	07d6      	lsls	r6, r2, #31
 800902c:	d527      	bpl.n	800907e <__sflush_r+0xb2>
 800902e:	2200      	movs	r2, #0
 8009030:	6062      	str	r2, [r4, #4]
 8009032:	04d9      	lsls	r1, r3, #19
 8009034:	6922      	ldr	r2, [r4, #16]
 8009036:	6022      	str	r2, [r4, #0]
 8009038:	d504      	bpl.n	8009044 <__sflush_r+0x78>
 800903a:	1c42      	adds	r2, r0, #1
 800903c:	d101      	bne.n	8009042 <__sflush_r+0x76>
 800903e:	682b      	ldr	r3, [r5, #0]
 8009040:	b903      	cbnz	r3, 8009044 <__sflush_r+0x78>
 8009042:	6560      	str	r0, [r4, #84]	@ 0x54
 8009044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009046:	602f      	str	r7, [r5, #0]
 8009048:	b1b9      	cbz	r1, 800907a <__sflush_r+0xae>
 800904a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800904e:	4299      	cmp	r1, r3
 8009050:	d002      	beq.n	8009058 <__sflush_r+0x8c>
 8009052:	4628      	mov	r0, r5
 8009054:	f7ff fa94 	bl	8008580 <_free_r>
 8009058:	2300      	movs	r3, #0
 800905a:	6363      	str	r3, [r4, #52]	@ 0x34
 800905c:	e00d      	b.n	800907a <__sflush_r+0xae>
 800905e:	2301      	movs	r3, #1
 8009060:	4628      	mov	r0, r5
 8009062:	47b0      	blx	r6
 8009064:	4602      	mov	r2, r0
 8009066:	1c50      	adds	r0, r2, #1
 8009068:	d1c9      	bne.n	8008ffe <__sflush_r+0x32>
 800906a:	682b      	ldr	r3, [r5, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d0c6      	beq.n	8008ffe <__sflush_r+0x32>
 8009070:	2b1d      	cmp	r3, #29
 8009072:	d001      	beq.n	8009078 <__sflush_r+0xac>
 8009074:	2b16      	cmp	r3, #22
 8009076:	d11e      	bne.n	80090b6 <__sflush_r+0xea>
 8009078:	602f      	str	r7, [r5, #0]
 800907a:	2000      	movs	r0, #0
 800907c:	e022      	b.n	80090c4 <__sflush_r+0xf8>
 800907e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009082:	b21b      	sxth	r3, r3
 8009084:	e01b      	b.n	80090be <__sflush_r+0xf2>
 8009086:	690f      	ldr	r7, [r1, #16]
 8009088:	2f00      	cmp	r7, #0
 800908a:	d0f6      	beq.n	800907a <__sflush_r+0xae>
 800908c:	0793      	lsls	r3, r2, #30
 800908e:	680e      	ldr	r6, [r1, #0]
 8009090:	bf08      	it	eq
 8009092:	694b      	ldreq	r3, [r1, #20]
 8009094:	600f      	str	r7, [r1, #0]
 8009096:	bf18      	it	ne
 8009098:	2300      	movne	r3, #0
 800909a:	eba6 0807 	sub.w	r8, r6, r7
 800909e:	608b      	str	r3, [r1, #8]
 80090a0:	f1b8 0f00 	cmp.w	r8, #0
 80090a4:	dde9      	ble.n	800907a <__sflush_r+0xae>
 80090a6:	6a21      	ldr	r1, [r4, #32]
 80090a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090aa:	4643      	mov	r3, r8
 80090ac:	463a      	mov	r2, r7
 80090ae:	4628      	mov	r0, r5
 80090b0:	47b0      	blx	r6
 80090b2:	2800      	cmp	r0, #0
 80090b4:	dc08      	bgt.n	80090c8 <__sflush_r+0xfc>
 80090b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090be:	81a3      	strh	r3, [r4, #12]
 80090c0:	f04f 30ff 	mov.w	r0, #4294967295
 80090c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090c8:	4407      	add	r7, r0
 80090ca:	eba8 0800 	sub.w	r8, r8, r0
 80090ce:	e7e7      	b.n	80090a0 <__sflush_r+0xd4>
 80090d0:	20400001 	.word	0x20400001

080090d4 <_fflush_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	690b      	ldr	r3, [r1, #16]
 80090d8:	4605      	mov	r5, r0
 80090da:	460c      	mov	r4, r1
 80090dc:	b913      	cbnz	r3, 80090e4 <_fflush_r+0x10>
 80090de:	2500      	movs	r5, #0
 80090e0:	4628      	mov	r0, r5
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	b118      	cbz	r0, 80090ee <_fflush_r+0x1a>
 80090e6:	6a03      	ldr	r3, [r0, #32]
 80090e8:	b90b      	cbnz	r3, 80090ee <_fflush_r+0x1a>
 80090ea:	f7fe ff5f 	bl	8007fac <__sinit>
 80090ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0f3      	beq.n	80090de <_fflush_r+0xa>
 80090f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090f8:	07d0      	lsls	r0, r2, #31
 80090fa:	d404      	bmi.n	8009106 <_fflush_r+0x32>
 80090fc:	0599      	lsls	r1, r3, #22
 80090fe:	d402      	bmi.n	8009106 <_fflush_r+0x32>
 8009100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009102:	f7ff fa06 	bl	8008512 <__retarget_lock_acquire_recursive>
 8009106:	4628      	mov	r0, r5
 8009108:	4621      	mov	r1, r4
 800910a:	f7ff ff5f 	bl	8008fcc <__sflush_r>
 800910e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009110:	07da      	lsls	r2, r3, #31
 8009112:	4605      	mov	r5, r0
 8009114:	d4e4      	bmi.n	80090e0 <_fflush_r+0xc>
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	059b      	lsls	r3, r3, #22
 800911a:	d4e1      	bmi.n	80090e0 <_fflush_r+0xc>
 800911c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800911e:	f7ff f9f9 	bl	8008514 <__retarget_lock_release_recursive>
 8009122:	e7dd      	b.n	80090e0 <_fflush_r+0xc>

08009124 <fiprintf>:
 8009124:	b40e      	push	{r1, r2, r3}
 8009126:	b503      	push	{r0, r1, lr}
 8009128:	4601      	mov	r1, r0
 800912a:	ab03      	add	r3, sp, #12
 800912c:	4805      	ldr	r0, [pc, #20]	@ (8009144 <fiprintf+0x20>)
 800912e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009132:	6800      	ldr	r0, [r0, #0]
 8009134:	9301      	str	r3, [sp, #4]
 8009136:	f7ff fca5 	bl	8008a84 <_vfiprintf_r>
 800913a:	b002      	add	sp, #8
 800913c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009140:	b003      	add	sp, #12
 8009142:	4770      	bx	lr
 8009144:	20000034 	.word	0x20000034

08009148 <__swhatbuf_r>:
 8009148:	b570      	push	{r4, r5, r6, lr}
 800914a:	460c      	mov	r4, r1
 800914c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009150:	2900      	cmp	r1, #0
 8009152:	b096      	sub	sp, #88	@ 0x58
 8009154:	4615      	mov	r5, r2
 8009156:	461e      	mov	r6, r3
 8009158:	da0d      	bge.n	8009176 <__swhatbuf_r+0x2e>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009160:	f04f 0100 	mov.w	r1, #0
 8009164:	bf14      	ite	ne
 8009166:	2340      	movne	r3, #64	@ 0x40
 8009168:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800916c:	2000      	movs	r0, #0
 800916e:	6031      	str	r1, [r6, #0]
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	b016      	add	sp, #88	@ 0x58
 8009174:	bd70      	pop	{r4, r5, r6, pc}
 8009176:	466a      	mov	r2, sp
 8009178:	f000 f896 	bl	80092a8 <_fstat_r>
 800917c:	2800      	cmp	r0, #0
 800917e:	dbec      	blt.n	800915a <__swhatbuf_r+0x12>
 8009180:	9901      	ldr	r1, [sp, #4]
 8009182:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009186:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800918a:	4259      	negs	r1, r3
 800918c:	4159      	adcs	r1, r3
 800918e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009192:	e7eb      	b.n	800916c <__swhatbuf_r+0x24>

08009194 <__smakebuf_r>:
 8009194:	898b      	ldrh	r3, [r1, #12]
 8009196:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009198:	079d      	lsls	r5, r3, #30
 800919a:	4606      	mov	r6, r0
 800919c:	460c      	mov	r4, r1
 800919e:	d507      	bpl.n	80091b0 <__smakebuf_r+0x1c>
 80091a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	6123      	str	r3, [r4, #16]
 80091a8:	2301      	movs	r3, #1
 80091aa:	6163      	str	r3, [r4, #20]
 80091ac:	b003      	add	sp, #12
 80091ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091b0:	ab01      	add	r3, sp, #4
 80091b2:	466a      	mov	r2, sp
 80091b4:	f7ff ffc8 	bl	8009148 <__swhatbuf_r>
 80091b8:	9f00      	ldr	r7, [sp, #0]
 80091ba:	4605      	mov	r5, r0
 80091bc:	4639      	mov	r1, r7
 80091be:	4630      	mov	r0, r6
 80091c0:	f7ff fa52 	bl	8008668 <_malloc_r>
 80091c4:	b948      	cbnz	r0, 80091da <__smakebuf_r+0x46>
 80091c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ca:	059a      	lsls	r2, r3, #22
 80091cc:	d4ee      	bmi.n	80091ac <__smakebuf_r+0x18>
 80091ce:	f023 0303 	bic.w	r3, r3, #3
 80091d2:	f043 0302 	orr.w	r3, r3, #2
 80091d6:	81a3      	strh	r3, [r4, #12]
 80091d8:	e7e2      	b.n	80091a0 <__smakebuf_r+0xc>
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	6020      	str	r0, [r4, #0]
 80091de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091e2:	81a3      	strh	r3, [r4, #12]
 80091e4:	9b01      	ldr	r3, [sp, #4]
 80091e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091ea:	b15b      	cbz	r3, 8009204 <__smakebuf_r+0x70>
 80091ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091f0:	4630      	mov	r0, r6
 80091f2:	f000 f86b 	bl	80092cc <_isatty_r>
 80091f6:	b128      	cbz	r0, 8009204 <__smakebuf_r+0x70>
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	f023 0303 	bic.w	r3, r3, #3
 80091fe:	f043 0301 	orr.w	r3, r3, #1
 8009202:	81a3      	strh	r3, [r4, #12]
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	431d      	orrs	r5, r3
 8009208:	81a5      	strh	r5, [r4, #12]
 800920a:	e7cf      	b.n	80091ac <__smakebuf_r+0x18>

0800920c <_putc_r>:
 800920c:	b570      	push	{r4, r5, r6, lr}
 800920e:	460d      	mov	r5, r1
 8009210:	4614      	mov	r4, r2
 8009212:	4606      	mov	r6, r0
 8009214:	b118      	cbz	r0, 800921e <_putc_r+0x12>
 8009216:	6a03      	ldr	r3, [r0, #32]
 8009218:	b90b      	cbnz	r3, 800921e <_putc_r+0x12>
 800921a:	f7fe fec7 	bl	8007fac <__sinit>
 800921e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009220:	07d8      	lsls	r0, r3, #31
 8009222:	d405      	bmi.n	8009230 <_putc_r+0x24>
 8009224:	89a3      	ldrh	r3, [r4, #12]
 8009226:	0599      	lsls	r1, r3, #22
 8009228:	d402      	bmi.n	8009230 <_putc_r+0x24>
 800922a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800922c:	f7ff f971 	bl	8008512 <__retarget_lock_acquire_recursive>
 8009230:	68a3      	ldr	r3, [r4, #8]
 8009232:	3b01      	subs	r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	60a3      	str	r3, [r4, #8]
 8009238:	da05      	bge.n	8009246 <_putc_r+0x3a>
 800923a:	69a2      	ldr	r2, [r4, #24]
 800923c:	4293      	cmp	r3, r2
 800923e:	db12      	blt.n	8009266 <_putc_r+0x5a>
 8009240:	b2eb      	uxtb	r3, r5
 8009242:	2b0a      	cmp	r3, #10
 8009244:	d00f      	beq.n	8009266 <_putc_r+0x5a>
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	1c5a      	adds	r2, r3, #1
 800924a:	6022      	str	r2, [r4, #0]
 800924c:	701d      	strb	r5, [r3, #0]
 800924e:	b2ed      	uxtb	r5, r5
 8009250:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009252:	07da      	lsls	r2, r3, #31
 8009254:	d405      	bmi.n	8009262 <_putc_r+0x56>
 8009256:	89a3      	ldrh	r3, [r4, #12]
 8009258:	059b      	lsls	r3, r3, #22
 800925a:	d402      	bmi.n	8009262 <_putc_r+0x56>
 800925c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800925e:	f7ff f959 	bl	8008514 <__retarget_lock_release_recursive>
 8009262:	4628      	mov	r0, r5
 8009264:	bd70      	pop	{r4, r5, r6, pc}
 8009266:	4629      	mov	r1, r5
 8009268:	4622      	mov	r2, r4
 800926a:	4630      	mov	r0, r6
 800926c:	f7fe ffb1 	bl	80081d2 <__swbuf_r>
 8009270:	4605      	mov	r5, r0
 8009272:	e7ed      	b.n	8009250 <_putc_r+0x44>

08009274 <memmove>:
 8009274:	4288      	cmp	r0, r1
 8009276:	b510      	push	{r4, lr}
 8009278:	eb01 0402 	add.w	r4, r1, r2
 800927c:	d902      	bls.n	8009284 <memmove+0x10>
 800927e:	4284      	cmp	r4, r0
 8009280:	4623      	mov	r3, r4
 8009282:	d807      	bhi.n	8009294 <memmove+0x20>
 8009284:	1e43      	subs	r3, r0, #1
 8009286:	42a1      	cmp	r1, r4
 8009288:	d008      	beq.n	800929c <memmove+0x28>
 800928a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800928e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009292:	e7f8      	b.n	8009286 <memmove+0x12>
 8009294:	4402      	add	r2, r0
 8009296:	4601      	mov	r1, r0
 8009298:	428a      	cmp	r2, r1
 800929a:	d100      	bne.n	800929e <memmove+0x2a>
 800929c:	bd10      	pop	{r4, pc}
 800929e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092a6:	e7f7      	b.n	8009298 <memmove+0x24>

080092a8 <_fstat_r>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	4d07      	ldr	r5, [pc, #28]	@ (80092c8 <_fstat_r+0x20>)
 80092ac:	2300      	movs	r3, #0
 80092ae:	4604      	mov	r4, r0
 80092b0:	4608      	mov	r0, r1
 80092b2:	4611      	mov	r1, r2
 80092b4:	602b      	str	r3, [r5, #0]
 80092b6:	f7f9 fdc3 	bl	8002e40 <_fstat>
 80092ba:	1c43      	adds	r3, r0, #1
 80092bc:	d102      	bne.n	80092c4 <_fstat_r+0x1c>
 80092be:	682b      	ldr	r3, [r5, #0]
 80092c0:	b103      	cbz	r3, 80092c4 <_fstat_r+0x1c>
 80092c2:	6023      	str	r3, [r4, #0]
 80092c4:	bd38      	pop	{r3, r4, r5, pc}
 80092c6:	bf00      	nop
 80092c8:	20000dc0 	.word	0x20000dc0

080092cc <_isatty_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	4d06      	ldr	r5, [pc, #24]	@ (80092e8 <_isatty_r+0x1c>)
 80092d0:	2300      	movs	r3, #0
 80092d2:	4604      	mov	r4, r0
 80092d4:	4608      	mov	r0, r1
 80092d6:	602b      	str	r3, [r5, #0]
 80092d8:	f7f9 fdc2 	bl	8002e60 <_isatty>
 80092dc:	1c43      	adds	r3, r0, #1
 80092de:	d102      	bne.n	80092e6 <_isatty_r+0x1a>
 80092e0:	682b      	ldr	r3, [r5, #0]
 80092e2:	b103      	cbz	r3, 80092e6 <_isatty_r+0x1a>
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	bd38      	pop	{r3, r4, r5, pc}
 80092e8:	20000dc0 	.word	0x20000dc0

080092ec <_sbrk_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4d06      	ldr	r5, [pc, #24]	@ (8009308 <_sbrk_r+0x1c>)
 80092f0:	2300      	movs	r3, #0
 80092f2:	4604      	mov	r4, r0
 80092f4:	4608      	mov	r0, r1
 80092f6:	602b      	str	r3, [r5, #0]
 80092f8:	f7f9 fdca 	bl	8002e90 <_sbrk>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	d102      	bne.n	8009306 <_sbrk_r+0x1a>
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	b103      	cbz	r3, 8009306 <_sbrk_r+0x1a>
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	20000dc0 	.word	0x20000dc0

0800930c <abort>:
 800930c:	b508      	push	{r3, lr}
 800930e:	2006      	movs	r0, #6
 8009310:	f000 f85a 	bl	80093c8 <raise>
 8009314:	2001      	movs	r0, #1
 8009316:	f7f9 fd43 	bl	8002da0 <_exit>

0800931a <_realloc_r>:
 800931a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800931e:	4607      	mov	r7, r0
 8009320:	4614      	mov	r4, r2
 8009322:	460d      	mov	r5, r1
 8009324:	b921      	cbnz	r1, 8009330 <_realloc_r+0x16>
 8009326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800932a:	4611      	mov	r1, r2
 800932c:	f7ff b99c 	b.w	8008668 <_malloc_r>
 8009330:	b92a      	cbnz	r2, 800933e <_realloc_r+0x24>
 8009332:	f7ff f925 	bl	8008580 <_free_r>
 8009336:	4625      	mov	r5, r4
 8009338:	4628      	mov	r0, r5
 800933a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800933e:	f000 f85f 	bl	8009400 <_malloc_usable_size_r>
 8009342:	4284      	cmp	r4, r0
 8009344:	4606      	mov	r6, r0
 8009346:	d802      	bhi.n	800934e <_realloc_r+0x34>
 8009348:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800934c:	d8f4      	bhi.n	8009338 <_realloc_r+0x1e>
 800934e:	4621      	mov	r1, r4
 8009350:	4638      	mov	r0, r7
 8009352:	f7ff f989 	bl	8008668 <_malloc_r>
 8009356:	4680      	mov	r8, r0
 8009358:	b908      	cbnz	r0, 800935e <_realloc_r+0x44>
 800935a:	4645      	mov	r5, r8
 800935c:	e7ec      	b.n	8009338 <_realloc_r+0x1e>
 800935e:	42b4      	cmp	r4, r6
 8009360:	4622      	mov	r2, r4
 8009362:	4629      	mov	r1, r5
 8009364:	bf28      	it	cs
 8009366:	4632      	movcs	r2, r6
 8009368:	f7ff f8dd 	bl	8008526 <memcpy>
 800936c:	4629      	mov	r1, r5
 800936e:	4638      	mov	r0, r7
 8009370:	f7ff f906 	bl	8008580 <_free_r>
 8009374:	e7f1      	b.n	800935a <_realloc_r+0x40>

08009376 <_raise_r>:
 8009376:	291f      	cmp	r1, #31
 8009378:	b538      	push	{r3, r4, r5, lr}
 800937a:	4605      	mov	r5, r0
 800937c:	460c      	mov	r4, r1
 800937e:	d904      	bls.n	800938a <_raise_r+0x14>
 8009380:	2316      	movs	r3, #22
 8009382:	6003      	str	r3, [r0, #0]
 8009384:	f04f 30ff 	mov.w	r0, #4294967295
 8009388:	bd38      	pop	{r3, r4, r5, pc}
 800938a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800938c:	b112      	cbz	r2, 8009394 <_raise_r+0x1e>
 800938e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009392:	b94b      	cbnz	r3, 80093a8 <_raise_r+0x32>
 8009394:	4628      	mov	r0, r5
 8009396:	f000 f831 	bl	80093fc <_getpid_r>
 800939a:	4622      	mov	r2, r4
 800939c:	4601      	mov	r1, r0
 800939e:	4628      	mov	r0, r5
 80093a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093a4:	f000 b818 	b.w	80093d8 <_kill_r>
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d00a      	beq.n	80093c2 <_raise_r+0x4c>
 80093ac:	1c59      	adds	r1, r3, #1
 80093ae:	d103      	bne.n	80093b8 <_raise_r+0x42>
 80093b0:	2316      	movs	r3, #22
 80093b2:	6003      	str	r3, [r0, #0]
 80093b4:	2001      	movs	r0, #1
 80093b6:	e7e7      	b.n	8009388 <_raise_r+0x12>
 80093b8:	2100      	movs	r1, #0
 80093ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80093be:	4620      	mov	r0, r4
 80093c0:	4798      	blx	r3
 80093c2:	2000      	movs	r0, #0
 80093c4:	e7e0      	b.n	8009388 <_raise_r+0x12>
	...

080093c8 <raise>:
 80093c8:	4b02      	ldr	r3, [pc, #8]	@ (80093d4 <raise+0xc>)
 80093ca:	4601      	mov	r1, r0
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	f7ff bfd2 	b.w	8009376 <_raise_r>
 80093d2:	bf00      	nop
 80093d4:	20000034 	.word	0x20000034

080093d8 <_kill_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4d07      	ldr	r5, [pc, #28]	@ (80093f8 <_kill_r+0x20>)
 80093dc:	2300      	movs	r3, #0
 80093de:	4604      	mov	r4, r0
 80093e0:	4608      	mov	r0, r1
 80093e2:	4611      	mov	r1, r2
 80093e4:	602b      	str	r3, [r5, #0]
 80093e6:	f7f9 fccb 	bl	8002d80 <_kill>
 80093ea:	1c43      	adds	r3, r0, #1
 80093ec:	d102      	bne.n	80093f4 <_kill_r+0x1c>
 80093ee:	682b      	ldr	r3, [r5, #0]
 80093f0:	b103      	cbz	r3, 80093f4 <_kill_r+0x1c>
 80093f2:	6023      	str	r3, [r4, #0]
 80093f4:	bd38      	pop	{r3, r4, r5, pc}
 80093f6:	bf00      	nop
 80093f8:	20000dc0 	.word	0x20000dc0

080093fc <_getpid_r>:
 80093fc:	f7f9 bcb8 	b.w	8002d70 <_getpid>

08009400 <_malloc_usable_size_r>:
 8009400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009404:	1f18      	subs	r0, r3, #4
 8009406:	2b00      	cmp	r3, #0
 8009408:	bfbc      	itt	lt
 800940a:	580b      	ldrlt	r3, [r1, r0]
 800940c:	18c0      	addlt	r0, r0, r3
 800940e:	4770      	bx	lr

08009410 <_init>:
 8009410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009412:	bf00      	nop
 8009414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009416:	bc08      	pop	{r3}
 8009418:	469e      	mov	lr, r3
 800941a:	4770      	bx	lr

0800941c <_fini>:
 800941c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941e:	bf00      	nop
 8009420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009422:	bc08      	pop	{r3}
 8009424:	469e      	mov	lr, r3
 8009426:	4770      	bx	lr
