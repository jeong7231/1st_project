
1st_project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009260  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08009400  08009400  0000a400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bbc  08009bbc  0000b084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009bbc  08009bbc  0000abbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bc4  08009bc4  0000b084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bc4  08009bc4  0000abc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bc8  08009bc8  0000abc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08009bcc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d4c  20000084  08009c50  0000b084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dd0  08009c50  0000bdd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a6f  00000000  00000000  0000b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003274  00000000  00000000  00021b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  00024d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000110b  00000000  00000000  00026350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5e4  00000000  00000000  0002745b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b32  00000000  00000000  00041a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a14bd  00000000  00000000  0005b571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fca2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006910  00000000  00000000  000fca74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00103384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080093e8 	.word	0x080093e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080093e8 	.word	0x080093e8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <LCD_init>:
#include "clcd.h"

uint8_t lcdData = 0;
I2C_HandleTypeDef *phLcdI2C;

void LCD_init(I2C_HandleTypeDef *phI2C) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	phLcdI2C = phI2C;
 80005e4:	4a18      	ldr	r2, [pc, #96]	@ (8000648 <LCD_init+0x6c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6013      	str	r3, [r2, #0]

	HAL_Delay(50);
 80005ea:	2032      	movs	r0, #50	@ 0x32
 80005ec:	f002 fd20 	bl	8003030 <HAL_Delay>
	LCD_cmdMode();
 80005f0:	f000 f89a 	bl	8000728 <LCD_cmdMode>
	LCD_writeMode();
 80005f4:	f000 f8b8 	bl	8000768 <LCD_writeMode>
	LCD_sendData(0x30);
 80005f8:	2030      	movs	r0, #48	@ 0x30
 80005fa:	f000 f849 	bl	8000690 <LCD_sendData>
	HAL_Delay(5);
 80005fe:	2005      	movs	r0, #5
 8000600:	f002 fd16 	bl	8003030 <HAL_Delay>
	LCD_sendData(0x30);
 8000604:	2030      	movs	r0, #48	@ 0x30
 8000606:	f000 f843 	bl	8000690 <LCD_sendData>
	HAL_Delay(1);
 800060a:	2001      	movs	r0, #1
 800060c:	f002 fd10 	bl	8003030 <HAL_Delay>
	LCD_sendData(0x30);
 8000610:	2030      	movs	r0, #48	@ 0x30
 8000612:	f000 f83d 	bl	8000690 <LCD_sendData>
	LCD_sendData(0x20);
 8000616:	2020      	movs	r0, #32
 8000618:	f000 f83a 	bl	8000690 <LCD_sendData>
	LCD_sendByte(LCD_4BIT_FUNC_SET);
 800061c:	2028      	movs	r0, #40	@ 0x28
 800061e:	f000 f85f 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF);
 8000622:	2008      	movs	r0, #8
 8000624:	f000 f85c 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);
 8000628:	2001      	movs	r0, #1
 800062a:	f000 f859 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);
 800062e:	2006      	movs	r0, #6
 8000630:	f000 f856 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);
 8000634:	200c      	movs	r0, #12
 8000636:	f000 f853 	bl	80006e0 <LCD_sendByte>
	LCD_backLightOn();
 800063a:	f000 f865 	bl	8000708 <LCD_backLightOn>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000a4 	.word	0x200000a4

0800064c <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();			// RS pin Low
 8000656:	f000 f867 	bl	8000728 <LCD_cmdMode>
	LCD_writeMode();		// R/W pin Low
 800065a:	f000 f885 	bl	8000768 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f83d 	bl	80006e0 <LCD_sendByte>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	4603      	mov	r3, r0
 8000676:	71fb      	strb	r3, [r7, #7]
	LCD_charMode(); 		// RS pin High
 8000678:	f000 f866 	bl	8000748 <LCD_charMode>
	LCD_writeMode(); 		// R/W pin Low
 800067c:	f000 f874 	bl	8000768 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f82c 	bl	80006e0 <LCD_sendByte>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <LCD_sendData>:
void LCD_sendData(uint8_t data) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	LCD_enableHigh();		// E pin High
 800069a:	f000 f875 	bl	8000788 <LCD_enableHigh>
	HAL_Delay(2);			// LCD need delay
 800069e:	2002      	movs	r0, #2
 80006a0:	f002 fcc6 	bl	8003030 <HAL_Delay>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);
 80006a4:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <LCD_sendData+0x4c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	b25a      	sxtb	r2, r3
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <LCD_sendData+0x4c>)
 80006c2:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80006c4:	f000 f880 	bl	80007c8 <LCD_sendDataToInterface>
	LCD_enableLow();		// E pin Low
 80006c8:	f000 f86e 	bl	80007a8 <LCD_enableLow>
	HAL_Delay(2);			// LCD delay
 80006cc:	2002      	movs	r0, #2
 80006ce:	f002 fcaf 	bl	8003030 <HAL_Delay>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000a0 	.word	0x200000a0

080006e0 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send upper data
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffcf 	bl	8000690 <LCD_sendData>
	data = data << 4;		// 4bit data shift (move to upper bit)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send lower data
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffc8 	bl	8000690 <LCD_sendData>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <LCD_backLightOn>:
void LCD_backLightOn() {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_BL);
 800070c:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <LCD_backLightOn+0x1c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f043 0308 	orr.w	r3, r3, #8
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b03      	ldr	r3, [pc, #12]	@ (8000724 <LCD_backLightOn+0x1c>)
 8000718:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800071a:	f000 f855 	bl	80007c8 <LCD_sendDataToInterface>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200000a0 	.word	0x200000a0

08000728 <LCD_cmdMode>:
void LCD_backLightOff() {
	lcdData &= ~(1 << LCD_BL);
	LCD_sendDataToInterface();
}

void LCD_cmdMode() {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS); // 0 bit low
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <LCD_cmdMode+0x1c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b03      	ldr	r3, [pc, #12]	@ (8000744 <LCD_cmdMode+0x1c>)
 8000738:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800073a:	f000 f845 	bl	80007c8 <LCD_sendDataToInterface>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000a0 	.word	0x200000a0

08000748 <LCD_charMode>:

void LCD_charMode() {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS); // 0 bit high
 800074c:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <LCD_charMode+0x1c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <LCD_charMode+0x1c>)
 8000758:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800075a:	f000 f835 	bl	80007c8 <LCD_sendDataToInterface>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000a0 	.word	0x200000a0

08000768 <LCD_writeMode>:

void LCD_writeMode() {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW); // 1 bit low
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <LCD_writeMode+0x1c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	f023 0302 	bic.w	r3, r3, #2
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b03      	ldr	r3, [pc, #12]	@ (8000784 <LCD_writeMode+0x1c>)
 8000778:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800077a:	f000 f825 	bl	80007c8 <LCD_sendDataToInterface>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000a0 	.word	0x200000a0

08000788 <LCD_enableHigh>:

void LCD_enableHigh() {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E); // 2 bit high
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <LCD_enableHigh+0x1c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <LCD_enableHigh+0x1c>)
 8000798:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800079a:	f000 f815 	bl	80007c8 <LCD_sendDataToInterface>
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000a0 	.word	0x200000a0

080007a8 <LCD_enableLow>:

void LCD_enableLow() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E); // 2 bit low
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <LCD_enableLow+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	f023 0304 	bic.w	r3, r3, #4
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <LCD_enableLow+0x1c>)
 80007b8:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80007ba:	f000 f805 	bl	80007c8 <LCD_sendDataToInterface>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000a0 	.word	0x200000a0

080007c8 <LCD_sendDataToInterface>:


void LCD_sendDataToInterface() {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(phLcdI2C, LCD_DEV_ADDR << 1, &lcdData, 1, 100);
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <LCD_sendDataToInterface+0x20>)
 80007d0:	6818      	ldr	r0, [r3, #0]
 80007d2:	2364      	movs	r3, #100	@ 0x64
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2301      	movs	r3, #1
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <LCD_sendDataToInterface+0x24>)
 80007da:	214e      	movs	r1, #78	@ 0x4e
 80007dc:	f003 fd6e 	bl	80042bc <HAL_I2C_Master_Transmit>
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000a4 	.word	0x200000a4
 80007ec:	200000a0 	.word	0x200000a0

080007f0 <LCD_writeString>:

void LCD_writeString(char *str) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e009      	b.n	8000812 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff31 	bl	800066e <LCD_writeCharData>
	for (int i = 0; str[i]; i++) {
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3301      	adds	r3, #1
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1ef      	bne.n	80007fe <LCD_writeString+0xe>
	}
}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	460a      	mov	r2, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = ((0x40 * row) + col);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	019b      	lsls	r3, r3, #6
 800084c:	b2da      	uxtb	r2, r3
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	4413      	add	r3, r2
 8000852:	73fb      	strb	r3, [r7, #15]
	uint8_t command = (0x80 + lcdRegAddr);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	3b80      	subs	r3, #128	@ 0x80
 8000858:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fef5 	bl	800064c <LCD_writeCmdData>
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str) {
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	603a      	str	r2, [r7, #0]
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	460b      	mov	r3, r1
 8000878:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 800087a:	79ba      	ldrb	r2, [r7, #6]
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffd1 	bl	8000828 <LCD_gotoXY>
	LCD_writeString(str);
 8000886:	6838      	ldr	r0, [r7, #0]
 8000888:	f7ff ffb2 	bl	80007f0 <LCD_writeString>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <DWT_Delay_Init+0x58>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <DWT_Delay_Init+0x58>)
 800089e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80008a2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <DWT_Delay_Init+0x58>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <DWT_Delay_Init+0x58>)
 80008aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008ae:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008b6:	f023 0301 	bic.w	r3, r3, #1
 80008ba:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0b      	ldr	r2, [pc, #44]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80008ce:	bf00      	nop
  __ASM volatile ("NOP");
 80008d0:	bf00      	nop
  __ASM volatile ("NOP");
 80008d2:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 80008dc:	2300      	movs	r3, #0
 80008de:	e000      	b.n	80008e2 <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 80008e0:	2301      	movs	r3, #1
  }

}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000edf0 	.word	0xe000edf0
 80008f0:	e0001000 	.word	0xe0001000

080008f4 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <DWT_Delay_us+0x40>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000902:	f004 fc99 	bl	8005238 <HAL_RCC_GetHCLKFreq>
 8000906:	4603      	mov	r3, r0
 8000908:	4a0b      	ldr	r2, [pc, #44]	@ (8000938 <DWT_Delay_us+0x44>)
 800090a:	fba2 2303 	umull	r2, r3, r2, r3
 800090e:	0c9b      	lsrs	r3, r3, #18
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	fb02 f303 	mul.w	r3, r2, r3
 8000916:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000918:	bf00      	nop
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <DWT_Delay_us+0x40>)
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	1ad2      	subs	r2, r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	429a      	cmp	r2, r3
 8000926:	d3f8      	bcc.n	800091a <DWT_Delay_us+0x26>
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e0001000 	.word	0xe0001000
 8000938:	431bde83 	.word	0x431bde83

0800093c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000958:	887b      	ldrh	r3, [r7, #2]
 800095a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4619      	mov	r1, r3
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f003 f994 	bl	8003c98 <HAL_GPIO_Init>
}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	460b      	mov	r3, r1
 8000982:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f003 f978 	bl	8003c98 <HAL_GPIO_Init>
}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80009b4:	f7ff ff6e 	bl	8000894 <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80009b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009bc:	4807      	ldr	r0, [pc, #28]	@ (80009dc <DHT11_Init+0x2c>)
 80009be:	f7ff ffbd 	bl	800093c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009c8:	4804      	ldr	r0, [pc, #16]	@ (80009dc <DHT11_Init+0x2c>)
 80009ca:	f003 fb01 	bl	8003fd0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80009ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d2:	f002 fb2d 	bl	8003030 <HAL_Delay>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40020800 	.word	0x40020800

080009e0 <DHT11_Start>:

void DHT11_Start (void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80009e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009e8:	4811      	ldr	r0, [pc, #68]	@ (8000a30 <DHT11_Start+0x50>)
 80009ea:	f7ff ffa7 	bl	800093c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009f4:	480e      	ldr	r0, [pc, #56]	@ (8000a30 <DHT11_Start+0x50>)
 80009f6:	f003 faeb 	bl	8003fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a00:	480b      	ldr	r0, [pc, #44]	@ (8000a30 <DHT11_Start+0x50>)
 8000a02:	f003 fae5 	bl	8003fd0 <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 8000a06:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000a0a:	f7ff ff73 	bl	80008f4 <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a14:	4806      	ldr	r0, [pc, #24]	@ (8000a30 <DHT11_Start+0x50>)
 8000a16:	f003 fadb 	bl	8003fd0 <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 8000a1a:	2014      	movs	r0, #20
 8000a1c:	f7ff ff6a 	bl	80008f4 <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000a20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <DHT11_Start+0x50>)
 8000a26:	f7ff ffa7 	bl	8000978 <Set_Pin_Input>
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40020800 	.word	0x40020800

08000a34 <DHT11_Stop>:

void DHT11_Stop (void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000a38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a3c:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <DHT11_Stop+0x20>)
 8000a3e:	f7ff ff7d 	bl	800093c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a48:	4802      	ldr	r0, [pc, #8]	@ (8000a54 <DHT11_Stop+0x20>)
 8000a4a:	f003 fac1 	bl	8003fd0 <HAL_GPIO_WritePin>
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40020800 	.word	0x40020800

08000a58 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000a62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a66:	4812      	ldr	r0, [pc, #72]	@ (8000ab0 <DHT11_Check_Response+0x58>)
 8000a68:	f003 fa9a 	bl	8003fa0 <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d10f      	bne.n	8000a92 <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 8000a72:	2050      	movs	r0, #80	@ 0x50
 8000a74:	f7ff ff3e 	bl	80008f4 <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000a78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <DHT11_Check_Response+0x58>)
 8000a7e:	f003 fa8f 	bl	8003fa0 <HAL_GPIO_ReadPin>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <DHT11_Check_Response+0x36>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	e001      	b.n	8000a92 <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 8000a8e:	23ff      	movs	r3, #255	@ 0xff
 8000a90:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8000a92:	bf00      	nop
 8000a94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a98:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <DHT11_Check_Response+0x58>)
 8000a9a:	f003 fa81 	bl	8003fa0 <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1f7      	bne.n	8000a94 <DHT11_Check_Response+0x3c>

	return Response;
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	71bb      	strb	r3, [r7, #6]
 8000abe:	e03a      	b.n	8000b36 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000ac0:	bf00      	nop
 8000ac2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ac6:	4820      	ldr	r0, [pc, #128]	@ (8000b48 <DHT11_Read+0x94>)
 8000ac8:	f003 fa6a 	bl	8003fa0 <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0f7      	beq.n	8000ac2 <DHT11_Read+0xe>
		DWT_Delay_us(40);
 8000ad2:	2028      	movs	r0, #40	@ 0x28
 8000ad4:	f7ff ff0e 	bl	80008f4 <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000ad8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000adc:	481a      	ldr	r0, [pc, #104]	@ (8000b48 <DHT11_Read+0x94>)
 8000ade:	f003 fa5f 	bl	8003fa0 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10e      	bne.n	8000b06 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2201      	movs	r2, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	b25b      	sxtb	r3, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	b25a      	sxtb	r2, r3
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	4013      	ands	r3, r2
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	e00b      	b.n	8000b1e <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000b06:	79bb      	ldrb	r3, [r7, #6]
 8000b08:	f1c3 0307 	rsb	r3, r3, #7
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	b25a      	sxtb	r2, r3
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000b1e:	bf00      	nop
 8000b20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b24:	4808      	ldr	r0, [pc, #32]	@ (8000b48 <DHT11_Read+0x94>)
 8000b26:	f003 fa3b 	bl	8003fa0 <HAL_GPIO_ReadPin>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f7      	bne.n	8000b20 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	3301      	adds	r3, #1
 8000b34:	71bb      	strb	r3, [r7, #6]
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	2b07      	cmp	r3, #7
 8000b3a:	d9c1      	bls.n	8000ac0 <DHT11_Read+0xc>
	}
	return i;
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40020800 	.word	0x40020800

08000b4c <DHT11_readData>:

DHT11_TypeDef DHT11_readData()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 8000b54:	f7ff ff44 	bl	80009e0 <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 8000b58:	f7ff ff7e 	bl	8000a58 <DHT11_Check_Response>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 8000b60:	f7ff ffa8 	bl	8000ab4 <DHT11_Read>
 8000b64:	4603      	mov	r3, r0
 8000b66:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 8000b68:	f7ff ffa4 	bl	8000ab4 <DHT11_Read>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 8000b70:	f7ff ffa0 	bl	8000ab4 <DHT11_Read>
 8000b74:	4603      	mov	r3, r0
 8000b76:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 8000b78:	f7ff ff9c 	bl	8000ab4 <DHT11_Read>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 8000b80:	f7ff ff98 	bl	8000ab4 <DHT11_Read>
 8000b84:	4603      	mov	r3, r0
 8000b86:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 8000b88:	f7ff ff54 	bl	8000a34 <DHT11_Stop>
	return dht11;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	6010      	str	r0, [r2, #0]
 8000b98:	889b      	ldrh	r3, [r3, #4]
 8000b9a:	8093      	strh	r3, [r2, #4]
}
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	807b      	strh	r3, [r7, #2]
    *length = 0;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8000bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	68b8      	ldr	r0, [r7, #8]
 8000bc0:	f007 fb88 	bl	80082d4 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 8000bc4:	f240 4202 	movw	r2, #1026	@ 0x402
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4826      	ldr	r0, [pc, #152]	@ (8000c64 <esp_at_command+0xc0>)
 8000bcc:	f007 fb82 	bl	80082d4 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f7ff fb0f 	bl	80001f4 <strlen>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	2364      	movs	r3, #100	@ 0x64
 8000bdc:	68f9      	ldr	r1, [r7, #12]
 8000bde:	4822      	ldr	r0, [pc, #136]	@ (8000c68 <esp_at_command+0xc4>)
 8000be0:	f006 f928 	bl	8006e34 <HAL_UART_Transmit>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d032      	beq.n	8000c50 <esp_at_command+0xac>
        return -1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e035      	b.n	8000c5c <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <esp_at_command+0xc0>)
 8000bf2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bfa:	d302      	bcc.n	8000c02 <esp_at_command+0x5e>
            return -2;
 8000bfc:	f06f 0301 	mvn.w	r3, #1
 8000c00:	e02c      	b.n	8000c5c <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 8000c02:	491a      	ldr	r1, [pc, #104]	@ (8000c6c <esp_at_command+0xc8>)
 8000c04:	4817      	ldr	r0, [pc, #92]	@ (8000c64 <esp_at_command+0xc0>)
 8000c06:	f007 fbe9 	bl	80083dc <strstr>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <esp_at_command+0x72>
            return -3;
 8000c10:	f06f 0302 	mvn.w	r3, #2
 8000c14:	e022      	b.n	8000c5c <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 8000c16:	4916      	ldr	r1, [pc, #88]	@ (8000c70 <esp_at_command+0xcc>)
 8000c18:	4812      	ldr	r0, [pc, #72]	@ (8000c64 <esp_at_command+0xc0>)
 8000c1a:	f007 fbdf 	bl	80083dc <strstr>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00e      	beq.n	8000c42 <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 8000c24:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <esp_at_command+0xc0>)
 8000c26:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <esp_at_command+0xc0>)
 8000c2e:	68b8      	ldr	r0, [r7, #8]
 8000c30:	f007 fc65 	bl	80084fe <memcpy>
            *length = cb_data.length;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <esp_at_command+0xc0>)
 8000c36:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	801a      	strh	r2, [r3, #0]
            return 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e00c      	b.n	8000c5c <esp_at_command+0xb8>
        }
        time_out -= 10;
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	3b0a      	subs	r3, #10
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8000c4a:	200a      	movs	r0, #10
 8000c4c:	f002 f9f0 	bl	8003030 <HAL_Delay>
    while(time_out > 0)
 8000c50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	dccb      	bgt.n	8000bf0 <esp_at_command+0x4c>
    }
    return -4;
 8000c58:	f06f 0303 	mvn.w	r3, #3
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200004f0 	.word	0x200004f0
 8000c68:	20000ac4 	.word	0x20000ac4
 8000c6c:	08009400 	.word	0x08009400
 8000c70:	08009408 	.word	0x08009408

08000c74 <esp_reset>:

static int esp_reset(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000c7e:	1dba      	adds	r2, r7, #6
 8000c80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c84:	4909      	ldr	r1, [pc, #36]	@ (8000cac <esp_reset+0x38>)
 8000c86:	480a      	ldr	r0, [pc, #40]	@ (8000cb0 <esp_reset+0x3c>)
 8000c88:	f7ff ff8c 	bl	8000ba4 <esp_at_command>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <esp_reset+0x24>
    {
    	return -1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e004      	b.n	8000ca2 <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8000c98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c9c:	f002 f9c8 	bl	8003030 <HAL_Delay>
    return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000b8 	.word	0x200000b8
 8000cb0:	0800940c 	.word	0x0800940c

08000cb4 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000cc2:	f107 020a 	add.w	r2, r7, #10
 8000cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cca:	492d      	ldr	r1, [pc, #180]	@ (8000d80 <request_ip_addr+0xcc>)
 8000ccc:	482d      	ldr	r0, [pc, #180]	@ (8000d84 <request_ip_addr+0xd0>)
 8000cce:	f7ff ff69 	bl	8000ba4 <esp_at_command>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8000cd8:	482b      	ldr	r0, [pc, #172]	@ (8000d88 <request_ip_addr+0xd4>)
 8000cda:	f007 f9f9 	bl	80080d0 <puts>
 8000cde:	e049      	b.n	8000d74 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8000ce0:	492a      	ldr	r1, [pc, #168]	@ (8000d8c <request_ip_addr+0xd8>)
 8000ce2:	4827      	ldr	r0, [pc, #156]	@ (8000d80 <request_ip_addr+0xcc>)
 8000ce4:	f007 fb1e 	bl	8008324 <strtok>
 8000ce8:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d03e      	beq.n	8000d6e <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	e009      	b.n	8000d0a <request_ip_addr+0x56>
                printf("%c", response[i]);
 8000cf6:	4a22      	ldr	r2, [pc, #136]	@ (8000d80 <request_ip_addr+0xcc>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f007 f988 	bl	8008014 <putchar>
            for(int i = 0 ; i < length ; i++)
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	3301      	adds	r3, #1
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	897b      	ldrh	r3, [r7, #10]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	4293      	cmp	r3, r2
 8000d12:	dbf0      	blt.n	8000cf6 <request_ip_addr+0x42>
        }

        while(line != NULL)
 8000d14:	e02b      	b.n	8000d6e <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8000d16:	491e      	ldr	r1, [pc, #120]	@ (8000d90 <request_ip_addr+0xdc>)
 8000d18:	6978      	ldr	r0, [r7, #20]
 8000d1a:	f007 fb5f 	bl	80083dc <strstr>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d01f      	beq.n	8000d64 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8000d24:	491b      	ldr	r1, [pc, #108]	@ (8000d94 <request_ip_addr+0xe0>)
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f007 fafc 	bl	8008324 <strtok>
                ip = strtok(NULL, "\"");
 8000d2c:	4919      	ldr	r1, [pc, #100]	@ (8000d94 <request_ip_addr+0xe0>)
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f007 faf8 	bl	8008324 <strtok>
 8000d34:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 8000d36:	4918      	ldr	r1, [pc, #96]	@ (8000d98 <request_ip_addr+0xe4>)
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f7ff fa51 	bl	80001e0 <strcmp>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d00f      	beq.n	8000d64 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000d44:	2210      	movs	r2, #16
 8000d46:	2100      	movs	r1, #0
 8000d48:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <request_ip_addr+0xe8>)
 8000d4a:	f007 fac3 	bl	80082d4 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f7ff fa50 	bl	80001f4 <strlen>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	68f9      	ldr	r1, [r7, #12]
 8000d5a:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <request_ip_addr+0xe8>)
 8000d5c:	f007 fbcf 	bl	80084fe <memcpy>
                    return 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	e009      	b.n	8000d78 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8000d64:	4909      	ldr	r1, [pc, #36]	@ (8000d8c <request_ip_addr+0xd8>)
 8000d66:	2000      	movs	r0, #0
 8000d68:	f007 fadc 	bl	8008324 <strtok>
 8000d6c:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1d0      	bne.n	8000d16 <request_ip_addr+0x62>
        }
    }
    return -1;
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200000b8 	.word	0x200000b8
 8000d84:	08009454 	.word	0x08009454
 8000d88:	08009460 	.word	0x08009460
 8000d8c:	08009448 	.word	0x08009448
 8000d90:	08009480 	.word	0x08009480
 8000d94:	08009450 	.word	0x08009450
 8000d98:	08009418 	.word	0x08009418
 8000d9c:	200000a8 	.word	0x200000a8

08000da0 <esp_client_conn>:
int esp_client_conn()
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b092      	sub	sp, #72	@ 0x48
 8000da4:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	2240      	movs	r2, #64	@ 0x40
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f007 fa90 	bl	80082d4 <memset>
  uint16_t length = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8000db8:	f107 0008 	add.w	r0, r7, #8
 8000dbc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000dc0:	4a09      	ldr	r2, [pc, #36]	@ (8000de8 <esp_client_conn+0x48>)
 8000dc2:	490a      	ldr	r1, [pc, #40]	@ (8000dec <esp_client_conn+0x4c>)
 8000dc4:	f007 f98c 	bl	80080e0 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8000dc8:	1dba      	adds	r2, r7, #6
 8000dca:	f107 0008 	add.w	r0, r7, #8
 8000dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd2:	4907      	ldr	r1, [pc, #28]	@ (8000df0 <esp_client_conn+0x50>)
 8000dd4:	f7ff fee6 	bl	8000ba4 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8000dd8:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <esp_client_conn+0x54>)
 8000dda:	f000 f909 	bl	8000ff0 <esp_send_data>
	return 0;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3748      	adds	r7, #72	@ 0x48
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	0800948c 	.word	0x0800948c
 8000dec:	0800949c 	.word	0x0800949c
 8000df0:	200000b8 	.word	0x200000b8
 8000df4:	080094b8 	.word	0x080094b8

08000df8 <esp_get_status>:
int esp_get_status()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 8000e02:	1dba      	adds	r2, r7, #6
 8000e04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e08:	4909      	ldr	r1, [pc, #36]	@ (8000e30 <esp_get_status+0x38>)
 8000e0a:	480a      	ldr	r0, [pc, #40]	@ (8000e34 <esp_get_status+0x3c>)
 8000e0c:	f7ff feca 	bl	8000ba4 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8000e10:	4909      	ldr	r1, [pc, #36]	@ (8000e38 <esp_get_status+0x40>)
 8000e12:	4807      	ldr	r0, [pc, #28]	@ (8000e30 <esp_get_status+0x38>)
 8000e14:	f007 fae2 	bl	80083dc <strstr>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <esp_get_status+0x2a>
    {
    	return 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e001      	b.n	8000e26 <esp_get_status+0x2e>
    }
	return -1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000b8 	.word	0x200000b8
 8000e34:	080094cc 	.word	0x080094cc
 8000e38:	080094dc 	.word	0x080094dc

08000e3c <drv_esp_init>:
int drv_esp_init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000e40:	2210      	movs	r2, #16
 8000e42:	2100      	movs	r1, #0
 8000e44:	4806      	ldr	r0, [pc, #24]	@ (8000e60 <drv_esp_init+0x24>)
 8000e46:	f007 fa45 	bl	80082d4 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4905      	ldr	r1, [pc, #20]	@ (8000e64 <drv_esp_init+0x28>)
 8000e4e:	4806      	ldr	r0, [pc, #24]	@ (8000e68 <drv_esp_init+0x2c>)
 8000e50:	f006 f87b 	bl	8006f4a <HAL_UART_Receive_IT>

    return esp_reset();
 8000e54:	f7ff ff0e 	bl	8000c74 <esp_reset>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200000a8 	.word	0x200000a8
 8000e64:	200004ef 	.word	0x200004ef
 8000e68:	20000ac4 	.word	0x20000ac4

08000e6c <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b094      	sub	sp, #80	@ 0x50
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2240      	movs	r2, #64	@ 0x40
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f007 fa25 	bl	80082d4 <memset>
  if(ssid == NULL || passwd == NULL)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <ap_conn_func+0x2a>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d103      	bne.n	8000e9e <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8000e96:	4817      	ldr	r0, [pc, #92]	@ (8000ef4 <ap_conn_func+0x88>)
 8000e98:	f007 f91a 	bl	80080d0 <puts>
 8000e9c:	e026      	b.n	8000eec <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000e9e:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea6:	4914      	ldr	r1, [pc, #80]	@ (8000ef8 <ap_conn_func+0x8c>)
 8000ea8:	4814      	ldr	r0, [pc, #80]	@ (8000efc <ap_conn_func+0x90>)
 8000eaa:	f7ff fe7b 	bl	8000ba4 <esp_at_command>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8000eb4:	4812      	ldr	r0, [pc, #72]	@ (8000f00 <ap_conn_func+0x94>)
 8000eb6:	f007 f90b 	bl	80080d0 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8000eba:	f107 000c 	add.w	r0, r7, #12
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	4910      	ldr	r1, [pc, #64]	@ (8000f04 <ap_conn_func+0x98>)
 8000ec4:	f007 f90c 	bl	80080e0 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000ec8:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000ecc:	f107 000c 	add.w	r0, r7, #12
 8000ed0:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000ed4:	4908      	ldr	r1, [pc, #32]	@ (8000ef8 <ap_conn_func+0x8c>)
 8000ed6:	f7ff fe65 	bl	8000ba4 <esp_at_command>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4808      	ldr	r0, [pc, #32]	@ (8000f08 <ap_conn_func+0x9c>)
 8000ee8:	f007 f882 	bl	8007ff0 <iprintf>
}
 8000eec:	3750      	adds	r7, #80	@ 0x50
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08009540 	.word	0x08009540
 8000ef8:	200000b8 	.word	0x200000b8
 8000efc:	0800956c 	.word	0x0800956c
 8000f00:	0800957c 	.word	0x0800957c
 8000f04:	08009590 	.word	0x08009590
 8000f08:	080095a8 	.word	0x080095a8

08000f0c <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a23      	ldr	r2, [pc, #140]	@ (8000fa8 <HAL_UART_RxCpltCallback+0x9c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d117      	bne.n	8000f4e <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8000f1e:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <HAL_UART_RxCpltCallback+0xa0>)
 8000f20:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f28:	d20c      	bcs.n	8000f44 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <HAL_UART_RxCpltCallback+0xa0>)
 8000f2c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	b291      	uxth	r1, r2
 8000f34:	4a1d      	ldr	r2, [pc, #116]	@ (8000fac <HAL_UART_RxCpltCallback+0xa0>)
 8000f36:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <HAL_UART_RxCpltCallback+0xa4>)
 8000f3e:	7819      	ldrb	r1, [r3, #0]
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <HAL_UART_RxCpltCallback+0xa0>)
 8000f42:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	491a      	ldr	r1, [pc, #104]	@ (8000fb0 <HAL_UART_RxCpltCallback+0xa4>)
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f005 fffe 	bl	8006f4a <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a18      	ldr	r2, [pc, #96]	@ (8000fb4 <HAL_UART_RxCpltCallback+0xa8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d122      	bne.n	8000f9e <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8000f58:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a17      	ldr	r2, [pc, #92]	@ (8000fbc <HAL_UART_RxCpltCallback+0xb0>)
 8000f5e:	7811      	ldrb	r1, [r2, #0]
 8000f60:	4a17      	ldr	r2, [pc, #92]	@ (8000fc0 <HAL_UART_RxCpltCallback+0xb4>)
 8000f62:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a15      	ldr	r2, [pc, #84]	@ (8000fc0 <HAL_UART_RxCpltCallback+0xb4>)
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b0d      	cmp	r3, #13
 8000f70:	d10b      	bne.n	8000f8a <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <HAL_UART_RxCpltCallback+0xb4>)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <HAL_UART_RxCpltCallback+0xb8>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e004      	b.n	8000f94 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f92:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8000f94:	2201      	movs	r2, #1
 8000f96:	4909      	ldr	r1, [pc, #36]	@ (8000fbc <HAL_UART_RxCpltCallback+0xb0>)
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f005 ffd6 	bl	8006f4a <HAL_UART_Receive_IT>
    }
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40011400 	.word	0x40011400
 8000fac:	200004f0 	.word	0x200004f0
 8000fb0:	200004ef 	.word	0x200004ef
 8000fb4:	40004400 	.word	0x40004400
 8000fb8:	200008f4 	.word	0x200008f4
 8000fbc:	200004ee 	.word	0x200004ee
 8000fc0:	200004bc 	.word	0x200004bc
 8000fc4:	200004b8 	.word	0x200004b8

08000fc8 <AiotClient_Init>:


void AiotClient_Init()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 8000fcc:	4906      	ldr	r1, [pc, #24]	@ (8000fe8 <AiotClient_Init+0x20>)
 8000fce:	4807      	ldr	r0, [pc, #28]	@ (8000fec <AiotClient_Init+0x24>)
 8000fd0:	f7ff ff4c 	bl	8000e6c <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff fe6d 	bl	8000cb4 <request_ip_addr>
	esp_client_conn();
 8000fda:	f7ff fee1 	bl	8000da0 <esp_client_conn>
	esp_get_status();
 8000fde:	f7ff ff0b 	bl	8000df8 <esp_get_status>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	08009608 	.word	0x08009608
 8000fec:	08009614 	.word	0x08009614

08000ff0 <esp_send_data>:

void esp_send_data(char *data)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	@ 0x50
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	2240      	movs	r2, #64	@ 0x40
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f007 f967 	bl	80082d4 <memset>
	uint16_t length = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff f8f2 	bl	80001f4 <strlen>
 8001010:	4602      	mov	r2, r0
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	490e      	ldr	r1, [pc, #56]	@ (8001050 <esp_send_data+0x60>)
 8001018:	4618      	mov	r0, r3
 800101a:	f007 f861 	bl	80080e0 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 800101e:	f107 020e 	add.w	r2, r7, #14
 8001022:	f107 0010 	add.w	r0, r7, #16
 8001026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102a:	490a      	ldr	r1, [pc, #40]	@ (8001054 <esp_send_data+0x64>)
 800102c:	f7ff fdba 	bl	8000ba4 <esp_at_command>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d107      	bne.n	8001046 <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8001036:	f107 020e 	add.w	r2, r7, #14
 800103a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103e:	4905      	ldr	r1, [pc, #20]	@ (8001054 <esp_send_data+0x64>)
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fdaf 	bl	8000ba4 <esp_at_command>
	}
}
 8001046:	bf00      	nop
 8001048:	3750      	adds	r7, #80	@ 0x50
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	0800961c 	.word	0x0800961c
 8001054:	200000b8 	.word	0x200000b8

08001058 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 800105c:	2201      	movs	r2, #1
 800105e:	4903      	ldr	r1, [pc, #12]	@ (800106c <drv_uart_init+0x14>)
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <drv_uart_init+0x18>)
 8001062:	f005 ff72 	bl	8006f4a <HAL_UART_Receive_IT>
    return 0;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200004ee 	.word	0x200004ee
 8001070:	20000a7c 	.word	0x20000a7c

08001074 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 800107c:	1d39      	adds	r1, r7, #4
 800107e:	230a      	movs	r3, #10
 8001080:	2201      	movs	r2, #1
 8001082:	4807      	ldr	r0, [pc, #28]	@ (80010a0 <__io_putchar+0x2c>)
 8001084:	f005 fed6 	bl	8006e34 <HAL_UART_Transmit>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <__io_putchar+0x1e>
        return ch;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	e001      	b.n	8001096 <__io_putchar+0x22>
    return -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000a7c 	.word	0x20000a7c

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010aa:	f001 ff4f 	bl	8002f4c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ae:	f000 f963 	bl	8001378 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b2:	f000 fb87 	bl	80017c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010b6:	f000 fb31 	bl	800171c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80010ba:	f000 f9c7 	bl	800144c <MX_ADC1_Init>
  MX_TIM3_Init();
 80010be:	f000 fa7b 	bl	80015b8 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80010c2:	f000 fb55 	bl	8001770 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 80010c6:	f000 fa13 	bl	80014f0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010ca:	f000 fa3f 	bl	800154c <MX_SPI1_Init>
  MX_TIM4_Init();
 80010ce:	f000 fac1 	bl	8001654 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	// TIMER 4
	if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 80010d2:	4887      	ldr	r0, [pc, #540]	@ (80012f0 <main+0x24c>)
 80010d4:	f004 ff06 	bl	8005ee4 <HAL_TIM_Base_Start_IT>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <main+0x3e>
		Error_Handler();
 80010de:	f001 f983 	bl	80023e8 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4882      	ldr	r0, [pc, #520]	@ (80012f0 <main+0x24c>)
 80010e6:	f004 ffaf 	bl	8006048 <HAL_TIM_PWM_Start>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <main+0x50>
		Error_Handler();
 80010f0:	f001 f97a 	bl	80023e8 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK)
 80010f4:	2104      	movs	r1, #4
 80010f6:	487e      	ldr	r0, [pc, #504]	@ (80012f0 <main+0x24c>)
 80010f8:	f004 ffa6 	bl	8006048 <HAL_TIM_PWM_Start>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <main+0x62>
		Error_Handler();
 8001102:	f001 f971 	bl	80023e8 <Error_Handler>

	// ESP
	printf("Start main() - wifi\r\n");
 8001106:	487b      	ldr	r0, [pc, #492]	@ (80012f4 <main+0x250>)
 8001108:	f006 ffe2 	bl	80080d0 <puts>
	ret |= drv_uart_init();
 800110c:	f7ff ffa4 	bl	8001058 <drv_uart_init>
 8001110:	4602      	mov	r2, r0
 8001112:	4b79      	ldr	r3, [pc, #484]	@ (80012f8 <main+0x254>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4313      	orrs	r3, r2
 8001118:	4a77      	ldr	r2, [pc, #476]	@ (80012f8 <main+0x254>)
 800111a:	6013      	str	r3, [r2, #0]
	ret |= drv_esp_init();
 800111c:	f7ff fe8e 	bl	8000e3c <drv_esp_init>
 8001120:	4602      	mov	r2, r0
 8001122:	4b75      	ldr	r3, [pc, #468]	@ (80012f8 <main+0x254>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4313      	orrs	r3, r2
 8001128:	4a73      	ldr	r2, [pc, #460]	@ (80012f8 <main+0x254>)
 800112a:	6013      	str	r3, [r2, #0]
	if (ret != 0) {
 800112c:	4b72      	ldr	r3, [pc, #456]	@ (80012f8 <main+0x254>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <main+0x9a>
		printf("Esp response error\r\n");
 8001134:	4871      	ldr	r0, [pc, #452]	@ (80012fc <main+0x258>)
 8001136:	f006 ffcb 	bl	80080d0 <puts>
		Error_Handler();
 800113a:	f001 f955 	bl	80023e8 <Error_Handler>
	}

	AiotClient_Init();
 800113e:	f7ff ff43 	bl	8000fc8 <AiotClient_Init>
	// DHT
	DHT11_Init();
 8001142:	f7ff fc35 	bl	80009b0 <DHT11_Init>

	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8001146:	486e      	ldr	r0, [pc, #440]	@ (8001300 <main+0x25c>)
 8001148:	f004 fecc 	bl	8005ee4 <HAL_TIM_Base_Start_IT>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <main+0xb2>
		Error_Handler();
 8001152:	f001 f949 	bl	80023e8 <Error_Handler>
	// LCD
	LCD_init(&hi2c1);
 8001156:	486b      	ldr	r0, [pc, #428]	@ (8001304 <main+0x260>)
 8001158:	f7ff fa40 	bl	80005dc <LCD_init>
	LCD_writeStringXY(0, 0, "hello lcd");
 800115c:	4a6a      	ldr	r2, [pc, #424]	@ (8001308 <main+0x264>)
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fb82 	bl	800086a <LCD_writeStringXY>

	// RFID
	MFRC522_Init();                               // RC522 초기화
 8001166:	f001 fa0b 	bl	8002580 <MFRC522_Init>
	uint8_t version = MFRC522_ReadRegister(0x37); // VersionReg
 800116a:	2037      	movs	r0, #55	@ 0x37
 800116c:	f001 f97c 	bl	8002468 <MFRC522_ReadRegister>
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
	printf("RC522 Version: 0x%02X\r\n", version);
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4619      	mov	r1, r3
 8001178:	4864      	ldr	r0, [pc, #400]	@ (800130c <main+0x268>)
 800117a:	f006 ff39 	bl	8007ff0 <iprintf>
	printf("카드를 인식해주세요\r\n");
 800117e:	4864      	ldr	r0, [pc, #400]	@ (8001310 <main+0x26c>)
 8001180:	f006 ffa6 	bl	80080d0 <puts>

	//PIR
	PIR_Init();
 8001184:	f000 ffea 	bl	800215c <PIR_Init>

	//ADC
	if (HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8001188:	4862      	ldr	r0, [pc, #392]	@ (8001314 <main+0x270>)
 800118a:	f001 ffb9 	bl	8003100 <HAL_ADC_Start_IT>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <main+0xf4>
		Error_Handler();
 8001194:	f001 f928 	bl	80023e8 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (strstr((char*) cb_data.buf, "+IPD")
 8001198:	495f      	ldr	r1, [pc, #380]	@ (8001318 <main+0x274>)
 800119a:	4860      	ldr	r0, [pc, #384]	@ (800131c <main+0x278>)
 800119c:	f007 f91e 	bl	80083dc <strstr>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01d      	beq.n	80011e2 <main+0x13e>
				&& cb_data.buf[cb_data.length - 1] == '\n') {
 80011a6:	4b5d      	ldr	r3, [pc, #372]	@ (800131c <main+0x278>)
 80011a8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80011ac:	3b01      	subs	r3, #1
 80011ae:	4a5b      	ldr	r2, [pc, #364]	@ (800131c <main+0x278>)
 80011b0:	5cd3      	ldrb	r3, [r2, r3]
 80011b2:	2b0a      	cmp	r3, #10
 80011b4:	d115      	bne.n	80011e2 <main+0x13e>
			//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff, strchr((char*) cb_data.buf, '['));
 80011b6:	215b      	movs	r1, #91	@ 0x5b
 80011b8:	4858      	ldr	r0, [pc, #352]	@ (800131c <main+0x278>)
 80011ba:	f007 f893 	bl	80082e4 <strchr>
 80011be:	4603      	mov	r3, r0
 80011c0:	4619      	mov	r1, r3
 80011c2:	4857      	ldr	r0, [pc, #348]	@ (8001320 <main+0x27c>)
 80011c4:	f007 f993 	bl	80084ee <strcpy>
			memset(cb_data.buf, 0x0, sizeof(cb_data.buf));
 80011c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011cc:	2100      	movs	r1, #0
 80011ce:	4853      	ldr	r0, [pc, #332]	@ (800131c <main+0x278>)
 80011d0:	f007 f880 	bl	80082d4 <memset>
			cb_data.length = 0;
 80011d4:	4b51      	ldr	r3, [pc, #324]	@ (800131c <main+0x278>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 80011dc:	4850      	ldr	r0, [pc, #320]	@ (8001320 <main+0x27c>)
 80011de:	f000 fdf7 	bl	8001dd0 <esp_event>
		}
		if (rx2Flag) {
 80011e2:	4b50      	ldr	r3, [pc, #320]	@ (8001324 <main+0x280>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d006      	beq.n	80011fa <main+0x156>
			printf("recv2 : %s\r\n", rx2Data);
 80011ec:	494e      	ldr	r1, [pc, #312]	@ (8001328 <main+0x284>)
 80011ee:	484f      	ldr	r0, [pc, #316]	@ (800132c <main+0x288>)
 80011f0:	f006 fefe 	bl	8007ff0 <iprintf>
			rx2Flag = 0;
 80011f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001324 <main+0x280>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
		}
		room_status_display();
 80011fa:	f000 fcff 	bl	8001bfc <room_status_display>
		user_authentication();
 80011fe:	f000 fd25 	bl	8001c4c <user_authentication>

		// 10초 경과 확인
		if (authentication_flag == 1 && (tim3Sec - auth_start_time >= 10)) {
 8001202:	4b4b      	ldr	r3, [pc, #300]	@ (8001330 <main+0x28c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d11a      	bne.n	8001240 <main+0x19c>
 800120a:	4b4a      	ldr	r3, [pc, #296]	@ (8001334 <main+0x290>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a4a      	ldr	r2, [pc, #296]	@ (8001338 <main+0x294>)
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	1a9b      	subs	r3, r3, r2
 8001214:	2b09      	cmp	r3, #9
 8001216:	d913      	bls.n	8001240 <main+0x19c>
			authentication_flag = 0;
 8001218:	4b45      	ldr	r3, [pc, #276]	@ (8001330 <main+0x28c>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
			auth_start_time = -1;
 800121e:	4b46      	ldr	r3, [pc, #280]	@ (8001338 <main+0x294>)
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	601a      	str	r2, [r3, #0]
			printf("인증시간 초과\r\n");
 8001226:	4845      	ldr	r0, [pc, #276]	@ (800133c <main+0x298>)
 8001228:	f006 ff52 	bl	80080d0 <puts>
			sprintf(line2, "%s", "Time Over");
 800122c:	4a44      	ldr	r2, [pc, #272]	@ (8001340 <main+0x29c>)
 800122e:	4945      	ldr	r1, [pc, #276]	@ (8001344 <main+0x2a0>)
 8001230:	4845      	ldr	r0, [pc, #276]	@ (8001348 <main+0x2a4>)
 8001232:	f006 ff55 	bl	80080e0 <siprintf>
			LCD_writeStringXY(1, 0, line2);
 8001236:	4a44      	ldr	r2, [pc, #272]	@ (8001348 <main+0x2a4>)
 8001238:	2100      	movs	r1, #0
 800123a:	2001      	movs	r0, #1
 800123c:	f7ff fb15 	bl	800086a <LCD_writeStringXY>
		}

		static int last_door_state = -1;  // 초기값은 존재하지 않는 값으로 설정

		if (door_state != last_door_state) {
 8001240:	4b42      	ldr	r3, [pc, #264]	@ (800134c <main+0x2a8>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b42      	ldr	r3, [pc, #264]	@ (8001350 <main+0x2ac>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d016      	beq.n	800127a <main+0x1d6>
			if (door_state == 1) {
 800124c:	4b3f      	ldr	r3, [pc, #252]	@ (800134c <main+0x2a8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d107      	bne.n	8001264 <main+0x1c0>
				door_pulse = 500;
 8001254:	4b3f      	ldr	r3, [pc, #252]	@ (8001354 <main+0x2b0>)
 8001256:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800125a:	601a      	str	r2, [r3, #0]
				printf("UNLOCK!!\r\n");
 800125c:	483e      	ldr	r0, [pc, #248]	@ (8001358 <main+0x2b4>)
 800125e:	f006 ff37 	bl	80080d0 <puts>
 8001262:	e006      	b.n	8001272 <main+0x1ce>
			} else {
				door_pulse = 1500;
 8001264:	4b3b      	ldr	r3, [pc, #236]	@ (8001354 <main+0x2b0>)
 8001266:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800126a:	601a      	str	r2, [r3, #0]
				printf("LOCK!!\r\n");
 800126c:	483b      	ldr	r0, [pc, #236]	@ (800135c <main+0x2b8>)
 800126e:	f006 ff2f 	bl	80080d0 <puts>
			}
			last_door_state = door_state;
 8001272:	4b36      	ldr	r3, [pc, #216]	@ (800134c <main+0x2a8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a36      	ldr	r2, [pc, #216]	@ (8001350 <main+0x2ac>)
 8001278:	6013      	str	r3, [r2, #0]
		}
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, door_pulse - 1);
 800127a:	4b36      	ldr	r3, [pc, #216]	@ (8001354 <main+0x2b0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	1e5a      	subs	r2, r3, #1
 8001280:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <main+0x24c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	639a      	str	r2, [r3, #56]	@ 0x38

		room_status_set();
 8001286:	f000 fba1 	bl	80019cc <room_status_set>

		if (pir_flag == 1 && door_state == 0) {
 800128a:	4b35      	ldr	r3, [pc, #212]	@ (8001360 <main+0x2bc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d110      	bne.n	80012b4 <main+0x210>
 8001292:	4b2e      	ldr	r3, [pc, #184]	@ (800134c <main+0x2a8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10c      	bne.n	80012b4 <main+0x210>
			pir_flag = 0;
 800129a:	4b31      	ldr	r3, [pc, #196]	@ (8001360 <main+0x2bc>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
			printf("움직임 감지됨!\r\n");
 80012a0:	4830      	ldr	r0, [pc, #192]	@ (8001364 <main+0x2c0>)
 80012a2:	f006 ff15 	bl	80080d0 <puts>
			sprintf(sendBuf, "[PRJ_CEN]DETECTED@101\r\n");
 80012a6:	4930      	ldr	r1, [pc, #192]	@ (8001368 <main+0x2c4>)
 80012a8:	4830      	ldr	r0, [pc, #192]	@ (800136c <main+0x2c8>)
 80012aa:	f006 ff19 	bl	80080e0 <siprintf>
			esp_send_data(sendBuf);
 80012ae:	482f      	ldr	r0, [pc, #188]	@ (800136c <main+0x2c8>)
 80012b0:	f7ff fe9e 	bl	8000ff0 <esp_send_data>
//			last_curtainFlag = curtainFlag;
//		}
//		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, curtain_pulse - 1);

		// DHT, DC
		if (tim3Sec % 5 == 0 && tim3Sec != last_checked_sec) //5초에 한번 실행되게
 80012b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <main+0x290>)
 80012b6:	6819      	ldr	r1, [r3, #0]
 80012b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001370 <main+0x2cc>)
 80012ba:	fba3 2301 	umull	r2, r3, r3, r1
 80012be:	089a      	lsrs	r2, r3, #2
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	1aca      	subs	r2, r1, r3
 80012c8:	2a00      	cmp	r2, #0
 80012ca:	f47f af65 	bne.w	8001198 <main+0xf4>
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <main+0x290>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a28      	ldr	r2, [pc, #160]	@ (8001374 <main+0x2d0>)
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	4293      	cmp	r3, r2
 80012d8:	f43f af5e 	beq.w	8001198 <main+0xf4>
				{
			dht_status_motor(); // 한번 실행
 80012dc:	f000 ff90 	bl	8002200 <dht_status_motor>
			cds_status_servo();
 80012e0:	f001 f822 	bl	8002328 <cds_status_servo>
			last_checked_sec = tim3Sec; // 재실행 방지용
 80012e4:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <main+0x290>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <main+0x2d0>)
 80012ec:	601a      	str	r2, [r3, #0]
	while (1) {
 80012ee:	e753      	b.n	8001198 <main+0xf4>
 80012f0:	20000a34 	.word	0x20000a34
 80012f4:	0800962c 	.word	0x0800962c
 80012f8:	20000b0c 	.word	0x20000b0c
 80012fc:	08009644 	.word	0x08009644
 8001300:	200009ec 	.word	0x200009ec
 8001304:	20000940 	.word	0x20000940
 8001308:	08009658 	.word	0x08009658
 800130c:	08009664 	.word	0x08009664
 8001310:	0800967c 	.word	0x0800967c
 8001314:	200008f8 	.word	0x200008f8
 8001318:	0800969c 	.word	0x0800969c
 800131c:	200004f0 	.word	0x200004f0
 8001320:	20000c38 	.word	0x20000c38
 8001324:	200004b8 	.word	0x200004b8
 8001328:	200004bc 	.word	0x200004bc
 800132c:	080096a4 	.word	0x080096a4
 8001330:	20000b94 	.word	0x20000b94
 8001334:	20000b74 	.word	0x20000b74
 8001338:	20000014 	.word	0x20000014
 800133c:	080096b4 	.word	0x080096b4
 8001340:	080096cc 	.word	0x080096cc
 8001344:	080096d8 	.word	0x080096d8
 8001348:	20000b5c 	.word	0x20000b5c
 800134c:	20000bf4 	.word	0x20000bf4
 8001350:	20000018 	.word	0x20000018
 8001354:	20000bf0 	.word	0x20000bf0
 8001358:	080096dc 	.word	0x080096dc
 800135c:	080096e8 	.word	0x080096e8
 8001360:	20000bf8 	.word	0x20000bf8
 8001364:	080096f0 	.word	0x080096f0
 8001368:	08009708 	.word	0x08009708
 800136c:	20000b98 	.word	0x20000b98
 8001370:	cccccccd 	.word	0xcccccccd
 8001374:	20000c34 	.word	0x20000c34

08001378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b094      	sub	sp, #80	@ 0x50
 800137c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137e:	f107 0320 	add.w	r3, r7, #32
 8001382:	2230      	movs	r2, #48	@ 0x30
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f006 ffa4 	bl	80082d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <SystemClock_Config+0xcc>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	4a27      	ldr	r2, [pc, #156]	@ (8001444 <SystemClock_Config+0xcc>)
 80013a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ac:	4b25      	ldr	r3, [pc, #148]	@ (8001444 <SystemClock_Config+0xcc>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <SystemClock_Config+0xd0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a21      	ldr	r2, [pc, #132]	@ (8001448 <SystemClock_Config+0xd0>)
 80013c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <SystemClock_Config+0xd0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d4:	2302      	movs	r3, #2
 80013d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d8:	2301      	movs	r3, #1
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013dc:	2310      	movs	r3, #16
 80013de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e0:	2302      	movs	r3, #2
 80013e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e4:	2300      	movs	r3, #0
 80013e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013e8:	2310      	movs	r3, #16
 80013ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013f2:	2304      	movs	r3, #4
 80013f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013f6:	2304      	movs	r3, #4
 80013f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fab6 	bl	8004970 <HAL_RCC_OscConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800140a:	f000 ffed 	bl	80023e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140e:	230f      	movs	r3, #15
 8001410:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001412:	2302      	movs	r3, #2
 8001414:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	2102      	movs	r1, #2
 800142a:	4618      	mov	r0, r3
 800142c:	f003 fd18 	bl	8004e60 <HAL_RCC_ClockConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001436:	f000 ffd7 	bl	80023e8 <Error_Handler>
  }
}
 800143a:	bf00      	nop
 800143c:	3750      	adds	r7, #80	@ 0x50
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40007000 	.word	0x40007000

0800144c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800145e:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <MX_ADC1_Init+0x98>)
 8001460:	4a21      	ldr	r2, [pc, #132]	@ (80014e8 <MX_ADC1_Init+0x9c>)
 8001462:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001464:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <MX_ADC1_Init+0x98>)
 8001466:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800146a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800146c:	4b1d      	ldr	r3, [pc, #116]	@ (80014e4 <MX_ADC1_Init+0x98>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001472:	4b1c      	ldr	r3, [pc, #112]	@ (80014e4 <MX_ADC1_Init+0x98>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001478:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <MX_ADC1_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800147e:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <MX_ADC1_Init+0x98>)
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001486:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <MX_ADC1_Init+0x98>)
 8001488:	2200      	movs	r2, #0
 800148a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148c:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <MX_ADC1_Init+0x98>)
 800148e:	4a17      	ldr	r2, [pc, #92]	@ (80014ec <MX_ADC1_Init+0xa0>)
 8001490:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <MX_ADC1_Init+0x98>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001498:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <MX_ADC1_Init+0x98>)
 800149a:	2201      	movs	r2, #1
 800149c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_ADC1_Init+0x98>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_ADC1_Init+0x98>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ac:	480d      	ldr	r0, [pc, #52]	@ (80014e4 <MX_ADC1_Init+0x98>)
 80014ae:	f001 fde3 	bl	8003078 <HAL_ADC_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014b8:	f000 ff96 	bl	80023e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014bc:	2300      	movs	r3, #0
 80014be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80014c4:	2304      	movs	r3, #4
 80014c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c8:	463b      	mov	r3, r7
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <MX_ADC1_Init+0x98>)
 80014ce:	f002 f807 	bl	80034e0 <HAL_ADC_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014d8:	f000 ff86 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200008f8 	.word	0x200008f8
 80014e8:	40012000 	.word	0x40012000
 80014ec:	0f000001 	.word	0x0f000001

080014f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_I2C1_Init+0x50>)
 80014f6:	4a13      	ldr	r2, [pc, #76]	@ (8001544 <MX_I2C1_Init+0x54>)
 80014f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_I2C1_Init+0x50>)
 80014fc:	4a12      	ldr	r2, [pc, #72]	@ (8001548 <MX_I2C1_Init+0x58>)
 80014fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_I2C1_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_I2C1_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_I2C1_Init+0x50>)
 800150e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001512:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800151a:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001520:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <MX_I2C1_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_I2C1_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	@ (8001540 <MX_I2C1_Init+0x50>)
 800152e:	f002 fd81 	bl	8004034 <HAL_I2C_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001538:	f000 ff56 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000940 	.word	0x20000940
 8001544:	40005400 	.word	0x40005400
 8001548:	000186a0 	.word	0x000186a0

0800154c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <MX_SPI1_Init+0x64>)
 8001552:	4a18      	ldr	r2, [pc, #96]	@ (80015b4 <MX_SPI1_Init+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <MX_SPI1_Init+0x64>)
 8001558:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800155c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800155e:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <MX_SPI1_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_SPI1_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_SPI1_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_SPI1_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_SPI1_Init+0x64>)
 8001578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800157c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_SPI1_Init+0x64>)
 8001580:	2210      	movs	r2, #16
 8001582:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001584:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <MX_SPI1_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_SPI1_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <MX_SPI1_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_SPI1_Init+0x64>)
 8001598:	220a      	movs	r2, #10
 800159a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_SPI1_Init+0x64>)
 800159e:	f003 fe7f 	bl	80052a0 <HAL_SPI_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015a8:	f000 ff1e 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000994 	.word	0x20000994
 80015b4:	40013000 	.word	0x40013000

080015b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <MX_TIM3_Init+0x94>)
 80015d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001650 <MX_TIM3_Init+0x98>)
 80015d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80015da:	4b1c      	ldr	r3, [pc, #112]	@ (800164c <MX_TIM3_Init+0x94>)
 80015dc:	2253      	movs	r2, #83	@ 0x53
 80015de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <MX_TIM3_Init+0x94>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80015e6:	4b19      	ldr	r3, [pc, #100]	@ (800164c <MX_TIM3_Init+0x94>)
 80015e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	4b17      	ldr	r3, [pc, #92]	@ (800164c <MX_TIM3_Init+0x94>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f4:	4b15      	ldr	r3, [pc, #84]	@ (800164c <MX_TIM3_Init+0x94>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015fa:	4814      	ldr	r0, [pc, #80]	@ (800164c <MX_TIM3_Init+0x94>)
 80015fc:	f004 fc22 	bl	8005e44 <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001606:	f000 feef 	bl	80023e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800160e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	4619      	mov	r1, r3
 8001616:	480d      	ldr	r0, [pc, #52]	@ (800164c <MX_TIM3_Init+0x94>)
 8001618:	f004 ff78 	bl	800650c <HAL_TIM_ConfigClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001622:	f000 fee1 	bl	80023e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800162e:	463b      	mov	r3, r7
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	@ (800164c <MX_TIM3_Init+0x94>)
 8001634:	f005 fb2c 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800163e:	f000 fed3 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200009ec 	.word	0x200009ec
 8001650:	40000400 	.word	0x40000400

08001654 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	@ 0x28
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165a:	f107 0320 	add.w	r3, r7, #32
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001676:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <MX_TIM4_Init+0xc0>)
 8001678:	4a27      	ldr	r2, [pc, #156]	@ (8001718 <MX_TIM4_Init+0xc4>)
 800167a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800167c:	4b25      	ldr	r3, [pc, #148]	@ (8001714 <MX_TIM4_Init+0xc0>)
 800167e:	2253      	movs	r2, #83	@ 0x53
 8001680:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001682:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <MX_TIM4_Init+0xc0>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8001688:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <MX_TIM4_Init+0xc0>)
 800168a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800168e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001690:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <MX_TIM4_Init+0xc0>)
 8001692:	2200      	movs	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001696:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <MX_TIM4_Init+0xc0>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800169c:	481d      	ldr	r0, [pc, #116]	@ (8001714 <MX_TIM4_Init+0xc0>)
 800169e:	f004 fc83 	bl	8005fa8 <HAL_TIM_PWM_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80016a8:	f000 fe9e 	bl	80023e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016b4:	f107 0320 	add.w	r3, r7, #32
 80016b8:	4619      	mov	r1, r3
 80016ba:	4816      	ldr	r0, [pc, #88]	@ (8001714 <MX_TIM4_Init+0xc0>)
 80016bc:	f005 fae8 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80016c6:	f000 fe8f 	bl	80023e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ca:	2360      	movs	r3, #96	@ 0x60
 80016cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	480c      	ldr	r0, [pc, #48]	@ (8001714 <MX_TIM4_Init+0xc0>)
 80016e2:	f004 fe51 	bl	8006388 <HAL_TIM_PWM_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80016ec:	f000 fe7c 	bl	80023e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2204      	movs	r2, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	4807      	ldr	r0, [pc, #28]	@ (8001714 <MX_TIM4_Init+0xc0>)
 80016f8:	f004 fe46 	bl	8006388 <HAL_TIM_PWM_ConfigChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001702:	f000 fe71 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001706:	4803      	ldr	r0, [pc, #12]	@ (8001714 <MX_TIM4_Init+0xc0>)
 8001708:	f001 fa02 	bl	8002b10 <HAL_TIM_MspPostInit>

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	@ 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000a34 	.word	0x20000a34
 8001718:	40000800 	.word	0x40000800

0800171c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <MX_USART2_UART_Init+0x4c>)
 8001722:	4a12      	ldr	r2, [pc, #72]	@ (800176c <MX_USART2_UART_Init+0x50>)
 8001724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <MX_USART2_UART_Init+0x4c>)
 8001728:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800172c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <MX_USART2_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <MX_USART2_UART_Init+0x4c>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <MX_USART2_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <MX_USART2_UART_Init+0x4c>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <MX_USART2_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <MX_USART2_UART_Init+0x4c>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	@ (8001768 <MX_USART2_UART_Init+0x4c>)
 8001754:	f005 fb1e 	bl	8006d94 <HAL_UART_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800175e:	f000 fe43 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000a7c 	.word	0x20000a7c
 800176c:	40004400 	.word	0x40004400

08001770 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_Init 0 */
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */
  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <MX_USART6_UART_Init+0x4c>)
 8001776:	4a12      	ldr	r2, [pc, #72]	@ (80017c0 <MX_USART6_UART_Init+0x50>)
 8001778:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <MX_USART6_UART_Init+0x4c>)
 800177c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001780:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <MX_USART6_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001788:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <MX_USART6_UART_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <MX_USART6_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001794:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <MX_USART6_UART_Init+0x4c>)
 8001796:	220c      	movs	r2, #12
 8001798:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179a:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <MX_USART6_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <MX_USART6_UART_Init+0x4c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	@ (80017bc <MX_USART6_UART_Init+0x4c>)
 80017a8:	f005 faf4 	bl	8006d94 <HAL_UART_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017b2:	f000 fe19 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  /* USER CODE END USART6_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000ac4 	.word	0x20000ac4
 80017c0:	40011400 	.word	0x40011400

080017c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	@ 0x28
 80017c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b5b      	ldr	r3, [pc, #364]	@ (800194c <MX_GPIO_Init+0x188>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a5a      	ldr	r2, [pc, #360]	@ (800194c <MX_GPIO_Init+0x188>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b58      	ldr	r3, [pc, #352]	@ (800194c <MX_GPIO_Init+0x188>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b54      	ldr	r3, [pc, #336]	@ (800194c <MX_GPIO_Init+0x188>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a53      	ldr	r2, [pc, #332]	@ (800194c <MX_GPIO_Init+0x188>)
 8001800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b51      	ldr	r3, [pc, #324]	@ (800194c <MX_GPIO_Init+0x188>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b4d      	ldr	r3, [pc, #308]	@ (800194c <MX_GPIO_Init+0x188>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a4c      	ldr	r2, [pc, #304]	@ (800194c <MX_GPIO_Init+0x188>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b4a      	ldr	r3, [pc, #296]	@ (800194c <MX_GPIO_Init+0x188>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4b46      	ldr	r3, [pc, #280]	@ (800194c <MX_GPIO_Init+0x188>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	4a45      	ldr	r2, [pc, #276]	@ (800194c <MX_GPIO_Init+0x188>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	@ 0x30
 800183e:	4b43      	ldr	r3, [pc, #268]	@ (800194c <MX_GPIO_Init+0x188>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2110      	movs	r1, #16
 800184e:	4840      	ldr	r0, [pc, #256]	@ (8001950 <MX_GPIO_Init+0x18c>)
 8001850:	f002 fbbe 	bl	8003fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RC522_RST_Pin|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f246 0104 	movw	r1, #24580	@ 0x6004
 800185a:	483e      	ldr	r0, [pc, #248]	@ (8001954 <MX_GPIO_Init+0x190>)
 800185c:	f002 fbb8 	bl	8003fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	2180      	movs	r1, #128	@ 0x80
 8001864:	483c      	ldr	r0, [pc, #240]	@ (8001958 <MX_GPIO_Init+0x194>)
 8001866:	f002 fbb3 	bl	8003fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800186a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001870:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	4835      	ldr	r0, [pc, #212]	@ (8001958 <MX_GPIO_Init+0x194>)
 8001882:	f002 fa09 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin
                           BUTTON4_Pin BUTTON5_Pin BUTTON6_Pin DHT_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin
 8001886:	f240 437f 	movw	r3, #1151	@ 0x47f
 800188a:	617b      	str	r3, [r7, #20]
                          |BUTTON4_Pin|BUTTON5_Pin|BUTTON6_Pin|DHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	482f      	ldr	r0, [pc, #188]	@ (8001958 <MX_GPIO_Init+0x194>)
 800189c:	f002 f9fc 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018a0:	2310      	movs	r3, #16
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4826      	ldr	r0, [pc, #152]	@ (8001950 <MX_GPIO_Init+0x18c>)
 80018b8:	f002 f9ee 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
 80018bc:	2302      	movs	r3, #2
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4820      	ldr	r0, [pc, #128]	@ (8001954 <MX_GPIO_Init+0x190>)
 80018d2:	f002 f9e1 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : RC522_RST_Pin PB13 PB14 */
  GPIO_InitStruct.Pin = RC522_RST_Pin|GPIO_PIN_13|GPIO_PIN_14;
 80018d6:	f246 0304 	movw	r3, #24580	@ 0x6004
 80018da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	4819      	ldr	r0, [pc, #100]	@ (8001954 <MX_GPIO_Init+0x190>)
 80018f0:	f002 f9d2 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018f4:	2380      	movs	r3, #128	@ 0x80
 80018f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	4813      	ldr	r0, [pc, #76]	@ (8001958 <MX_GPIO_Init+0x194>)
 800190c:	f002 f9c4 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001910:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001922:	2307      	movs	r3, #7
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4808      	ldr	r0, [pc, #32]	@ (8001950 <MX_GPIO_Init+0x18c>)
 800192e:	f002 f9b3 	bl	8003c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	2007      	movs	r0, #7
 8001938:	f002 f8e5 	bl	8003b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800193c:	2007      	movs	r0, #7
 800193e:	f002 f8fe 	bl	8003b3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	@ 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	40020800 	.word	0x40020800

0800195c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 1ms 마다 호출
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 8001964:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	4a13      	ldr	r2, [pc, #76]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800196c:	6013      	str	r3, [r2, #0]
	if (tim3Cnt >= 1000) { // 1ms * 1000 = 1Sec
 800196e:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001976:	db0a      	blt.n	800198e <HAL_TIM_PeriodElapsedCallback+0x32>
		tim3Flag1Sec = 1;
 8001978:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0x60>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3301      	adds	r3, #1
 8001984:	4a0e      	ldr	r2, [pc, #56]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001986:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 8001988:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
	}
	if (tim3Sec % 5 == 0) {
 800198e:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001990:	6819      	ldr	r1, [r3, #0]
 8001992:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001994:	fba3 2301 	umull	r2, r3, r3, r1
 8001998:	089a      	lsrs	r2, r3, #2
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	1aca      	subs	r2, r1, r3
 80019a2:	2a00      	cmp	r2, #0
 80019a4:	d102      	bne.n	80019ac <HAL_TIM_PeriodElapsedCallback+0x50>
		tim3Flag5Sec = 1;
 80019a6:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
	}
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	20000c78 	.word	0x20000c78
 80019bc:	20000b70 	.word	0x20000b70
 80019c0:	20000b74 	.word	0x20000b74
 80019c4:	cccccccd 	.word	0xcccccccd
 80019c8:	20000b78 	.word	0x20000b78

080019cc <room_status_set>:

void room_status_set() {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++) {
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	e0da      	b.n	8001b8e <room_status_set+0x1c2>
		button_state[i] = HAL_GPIO_ReadPin(GPIOC, button_pins[i]);
 80019d8:	4a71      	ldr	r2, [pc, #452]	@ (8001ba0 <room_status_set+0x1d4>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019e0:	4619      	mov	r1, r3
 80019e2:	4870      	ldr	r0, [pc, #448]	@ (8001ba4 <room_status_set+0x1d8>)
 80019e4:	f002 fadc 	bl	8003fa0 <HAL_GPIO_ReadPin>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4619      	mov	r1, r3
 80019ec:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba8 <room_status_set+0x1dc>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if (last_button_state[i] == 0 && button_state[i] == 1
 80019f4:	4a6d      	ldr	r2, [pc, #436]	@ (8001bac <room_status_set+0x1e0>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f040 80bb 	bne.w	8001b78 <room_status_set+0x1ac>
 8001a02:	4a69      	ldr	r2, [pc, #420]	@ (8001ba8 <room_status_set+0x1dc>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	f040 80b4 	bne.w	8001b78 <room_status_set+0x1ac>
				&& authentication_flag == 1) {
 8001a10:	4b67      	ldr	r3, [pc, #412]	@ (8001bb0 <room_status_set+0x1e4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	f040 80af 	bne.w	8001b78 <room_status_set+0x1ac>
			switch (i) {
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	f200 80ab 	bhi.w	8001b78 <room_status_set+0x1ac>
 8001a22:	a201      	add	r2, pc, #4	@ (adr r2, 8001a28 <room_status_set+0x5c>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001a41 	.word	0x08001a41
 8001a2c:	08001a75 	.word	0x08001a75
 8001a30:	08001aa9 	.word	0x08001aa9
 8001a34:	08001add 	.word	0x08001add
 8001a38:	08001b11 	.word	0x08001b11
 8001a3c:	08001b45 	.word	0x08001b45
			case 0:
				printf("button : %d\r\n", i);
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	485c      	ldr	r0, [pc, #368]	@ (8001bb4 <room_status_set+0x1e8>)
 8001a44:	f006 fad4 	bl	8007ff0 <iprintf>
				sprintf(current_room_status.room_status, "%s",
 8001a48:	4a5b      	ldr	r2, [pc, #364]	@ (8001bb8 <room_status_set+0x1ec>)
 8001a4a:	495c      	ldr	r1, [pc, #368]	@ (8001bbc <room_status_set+0x1f0>)
 8001a4c:	485c      	ldr	r0, [pc, #368]	@ (8001bc0 <room_status_set+0x1f4>)
 8001a4e:	f006 fb47 	bl	80080e0 <siprintf>
						"In Room        ");
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@IN\n", ROOM_NUMBER);
 8001a52:	4a5c      	ldr	r2, [pc, #368]	@ (8001bc4 <room_status_set+0x1f8>)
 8001a54:	495c      	ldr	r1, [pc, #368]	@ (8001bc8 <room_status_set+0x1fc>)
 8001a56:	485d      	ldr	r0, [pc, #372]	@ (8001bcc <room_status_set+0x200>)
 8001a58:	f006 fb42 	bl	80080e0 <siprintf>
				esp_send_data(sendBuf);
 8001a5c:	485b      	ldr	r0, [pc, #364]	@ (8001bcc <room_status_set+0x200>)
 8001a5e:	f7ff fac7 	bl	8000ff0 <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001a62:	2201      	movs	r2, #1
 8001a64:	2180      	movs	r1, #128	@ 0x80
 8001a66:	484f      	ldr	r0, [pc, #316]	@ (8001ba4 <room_status_set+0x1d8>)
 8001a68:	f002 fab2 	bl	8003fd0 <HAL_GPIO_WritePin>
				door_state = 1;
 8001a6c:	4b58      	ldr	r3, [pc, #352]	@ (8001bd0 <room_status_set+0x204>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
				break;
 8001a72:	e081      	b.n	8001b78 <room_status_set+0x1ac>
			case 1:
				printf("button : %d\r\n", i);
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	484f      	ldr	r0, [pc, #316]	@ (8001bb4 <room_status_set+0x1e8>)
 8001a78:	f006 faba 	bl	8007ff0 <iprintf>
				sprintf(current_room_status.room_status, "%s",
 8001a7c:	4a55      	ldr	r2, [pc, #340]	@ (8001bd4 <room_status_set+0x208>)
 8001a7e:	494f      	ldr	r1, [pc, #316]	@ (8001bbc <room_status_set+0x1f0>)
 8001a80:	484f      	ldr	r0, [pc, #316]	@ (8001bc0 <room_status_set+0x1f4>)
 8001a82:	f006 fb2d 	bl	80080e0 <siprintf>
						"Lecture        ");
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@LEC\n", ROOM_NUMBER);
 8001a86:	4a4f      	ldr	r2, [pc, #316]	@ (8001bc4 <room_status_set+0x1f8>)
 8001a88:	4953      	ldr	r1, [pc, #332]	@ (8001bd8 <room_status_set+0x20c>)
 8001a8a:	4850      	ldr	r0, [pc, #320]	@ (8001bcc <room_status_set+0x200>)
 8001a8c:	f006 fb28 	bl	80080e0 <siprintf>
				esp_send_data(sendBuf);
 8001a90:	484e      	ldr	r0, [pc, #312]	@ (8001bcc <room_status_set+0x200>)
 8001a92:	f7ff faad 	bl	8000ff0 <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2180      	movs	r1, #128	@ 0x80
 8001a9a:	4842      	ldr	r0, [pc, #264]	@ (8001ba4 <room_status_set+0x1d8>)
 8001a9c:	f002 fa98 	bl	8003fd0 <HAL_GPIO_WritePin>
				door_state = 0;
 8001aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8001bd0 <room_status_set+0x204>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
				break;
 8001aa6:	e067      	b.n	8001b78 <room_status_set+0x1ac>
			case 2:
				printf("button : %d\r\n", i);
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4842      	ldr	r0, [pc, #264]	@ (8001bb4 <room_status_set+0x1e8>)
 8001aac:	f006 faa0 	bl	8007ff0 <iprintf>
				sprintf(current_room_status.room_status, "%s",
 8001ab0:	4a4a      	ldr	r2, [pc, #296]	@ (8001bdc <room_status_set+0x210>)
 8001ab2:	4942      	ldr	r1, [pc, #264]	@ (8001bbc <room_status_set+0x1f0>)
 8001ab4:	4842      	ldr	r0, [pc, #264]	@ (8001bc0 <room_status_set+0x1f4>)
 8001ab6:	f006 fb13 	bl	80080e0 <siprintf>
						"Vacation       ");
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@VAC\n", ROOM_NUMBER);
 8001aba:	4a42      	ldr	r2, [pc, #264]	@ (8001bc4 <room_status_set+0x1f8>)
 8001abc:	4948      	ldr	r1, [pc, #288]	@ (8001be0 <room_status_set+0x214>)
 8001abe:	4843      	ldr	r0, [pc, #268]	@ (8001bcc <room_status_set+0x200>)
 8001ac0:	f006 fb0e 	bl	80080e0 <siprintf>
				esp_send_data(sendBuf);
 8001ac4:	4841      	ldr	r0, [pc, #260]	@ (8001bcc <room_status_set+0x200>)
 8001ac6:	f7ff fa93 	bl	8000ff0 <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2180      	movs	r1, #128	@ 0x80
 8001ace:	4835      	ldr	r0, [pc, #212]	@ (8001ba4 <room_status_set+0x1d8>)
 8001ad0:	f002 fa7e 	bl	8003fd0 <HAL_GPIO_WritePin>
				door_state = 0;
 8001ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd0 <room_status_set+0x204>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
				break;
 8001ada:	e04d      	b.n	8001b78 <room_status_set+0x1ac>
			case 3:
				printf("button : %d\r\n", i);
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4835      	ldr	r0, [pc, #212]	@ (8001bb4 <room_status_set+0x1e8>)
 8001ae0:	f006 fa86 	bl	8007ff0 <iprintf>
				sprintf(current_room_status.room_status, "%s",
 8001ae4:	4a3f      	ldr	r2, [pc, #252]	@ (8001be4 <room_status_set+0x218>)
 8001ae6:	4935      	ldr	r1, [pc, #212]	@ (8001bbc <room_status_set+0x1f0>)
 8001ae8:	4835      	ldr	r0, [pc, #212]	@ (8001bc0 <room_status_set+0x1f4>)
 8001aea:	f006 faf9 	bl	80080e0 <siprintf>
						"Meeting        ");
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@MTG\n", ROOM_NUMBER);
 8001aee:	4a35      	ldr	r2, [pc, #212]	@ (8001bc4 <room_status_set+0x1f8>)
 8001af0:	493d      	ldr	r1, [pc, #244]	@ (8001be8 <room_status_set+0x21c>)
 8001af2:	4836      	ldr	r0, [pc, #216]	@ (8001bcc <room_status_set+0x200>)
 8001af4:	f006 faf4 	bl	80080e0 <siprintf>
				esp_send_data(sendBuf);
 8001af8:	4834      	ldr	r0, [pc, #208]	@ (8001bcc <room_status_set+0x200>)
 8001afa:	f7ff fa79 	bl	8000ff0 <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2180      	movs	r1, #128	@ 0x80
 8001b02:	4828      	ldr	r0, [pc, #160]	@ (8001ba4 <room_status_set+0x1d8>)
 8001b04:	f002 fa64 	bl	8003fd0 <HAL_GPIO_WritePin>
				door_state = 0;
 8001b08:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <room_status_set+0x204>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
				break;
 8001b0e:	e033      	b.n	8001b78 <room_status_set+0x1ac>
			case 4:
				printf("button : %d\r\n", i);
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4828      	ldr	r0, [pc, #160]	@ (8001bb4 <room_status_set+0x1e8>)
 8001b14:	f006 fa6c 	bl	8007ff0 <iprintf>
				sprintf(current_room_status.room_status, "%s",
 8001b18:	4a34      	ldr	r2, [pc, #208]	@ (8001bec <room_status_set+0x220>)
 8001b1a:	4928      	ldr	r1, [pc, #160]	@ (8001bbc <room_status_set+0x1f0>)
 8001b1c:	4828      	ldr	r0, [pc, #160]	@ (8001bc0 <room_status_set+0x1f4>)
 8001b1e:	f006 fadf 	bl	80080e0 <siprintf>
						"Break          ");
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@BRK\n", ROOM_NUMBER);
 8001b22:	4a28      	ldr	r2, [pc, #160]	@ (8001bc4 <room_status_set+0x1f8>)
 8001b24:	4932      	ldr	r1, [pc, #200]	@ (8001bf0 <room_status_set+0x224>)
 8001b26:	4829      	ldr	r0, [pc, #164]	@ (8001bcc <room_status_set+0x200>)
 8001b28:	f006 fada 	bl	80080e0 <siprintf>
				esp_send_data(sendBuf);
 8001b2c:	4827      	ldr	r0, [pc, #156]	@ (8001bcc <room_status_set+0x200>)
 8001b2e:	f7ff fa5f 	bl	8000ff0 <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2180      	movs	r1, #128	@ 0x80
 8001b36:	481b      	ldr	r0, [pc, #108]	@ (8001ba4 <room_status_set+0x1d8>)
 8001b38:	f002 fa4a 	bl	8003fd0 <HAL_GPIO_WritePin>
				door_state = 0;
 8001b3c:	4b24      	ldr	r3, [pc, #144]	@ (8001bd0 <room_status_set+0x204>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
				break;
 8001b42:	e019      	b.n	8001b78 <room_status_set+0x1ac>
			case 5:
				printf("button : %d\r\n", i);
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	481b      	ldr	r0, [pc, #108]	@ (8001bb4 <room_status_set+0x1e8>)
 8001b48:	f006 fa52 	bl	8007ff0 <iprintf>
				sprintf(current_room_status.room_status, "%s",
 8001b4c:	4a29      	ldr	r2, [pc, #164]	@ (8001bf4 <room_status_set+0x228>)
 8001b4e:	491b      	ldr	r1, [pc, #108]	@ (8001bbc <room_status_set+0x1f0>)
 8001b50:	481b      	ldr	r0, [pc, #108]	@ (8001bc0 <room_status_set+0x1f4>)
 8001b52:	f006 fac5 	bl	80080e0 <siprintf>
						"Off Work       ");
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@OUT\n", ROOM_NUMBER);
 8001b56:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc4 <room_status_set+0x1f8>)
 8001b58:	4927      	ldr	r1, [pc, #156]	@ (8001bf8 <room_status_set+0x22c>)
 8001b5a:	481c      	ldr	r0, [pc, #112]	@ (8001bcc <room_status_set+0x200>)
 8001b5c:	f006 fac0 	bl	80080e0 <siprintf>
				esp_send_data(sendBuf);
 8001b60:	481a      	ldr	r0, [pc, #104]	@ (8001bcc <room_status_set+0x200>)
 8001b62:	f7ff fa45 	bl	8000ff0 <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2180      	movs	r1, #128	@ 0x80
 8001b6a:	480e      	ldr	r0, [pc, #56]	@ (8001ba4 <room_status_set+0x1d8>)
 8001b6c:	f002 fa30 	bl	8003fd0 <HAL_GPIO_WritePin>
				door_state = 0;
 8001b70:	4b17      	ldr	r3, [pc, #92]	@ (8001bd0 <room_status_set+0x204>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
				break;
 8001b76:	bf00      	nop
			}
		}

		last_button_state[i] = button_state[i];
 8001b78:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba8 <room_status_set+0x1dc>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b80:	490a      	ldr	r1, [pc, #40]	@ (8001bac <room_status_set+0x1e0>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 6; i++) {
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	f77f af21 	ble.w	80019d8 <room_status_set+0xc>
	}
}
 8001b96:	bf00      	nop
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	08009ab8 	.word	0x08009ab8
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	20000b18 	.word	0x20000b18
 8001bac:	20000b30 	.word	0x20000b30
 8001bb0:	20000b94 	.word	0x20000b94
 8001bb4:	08009720 	.word	0x08009720
 8001bb8:	08009730 	.word	0x08009730
 8001bbc:	080096d8 	.word	0x080096d8
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	08009740 	.word	0x08009740
 8001bc8:	08009744 	.word	0x08009744
 8001bcc:	20000b98 	.word	0x20000b98
 8001bd0:	20000bf4 	.word	0x20000bf4
 8001bd4:	0800975c 	.word	0x0800975c
 8001bd8:	0800976c 	.word	0x0800976c
 8001bdc:	08009788 	.word	0x08009788
 8001be0:	08009798 	.word	0x08009798
 8001be4:	080097b4 	.word	0x080097b4
 8001be8:	080097c4 	.word	0x080097c4
 8001bec:	080097e0 	.word	0x080097e0
 8001bf0:	080097f0 	.word	0x080097f0
 8001bf4:	0800980c 	.word	0x0800980c
 8001bf8:	0800981c 	.word	0x0800981c

08001bfc <room_status_display>:

void room_status_display() {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0

	sprintf(line1, "%s - %s", ROOM_NUMBER, USER_NAME);
 8001c00:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <room_status_display+0x34>)
 8001c02:	4a0c      	ldr	r2, [pc, #48]	@ (8001c34 <room_status_display+0x38>)
 8001c04:	490c      	ldr	r1, [pc, #48]	@ (8001c38 <room_status_display+0x3c>)
 8001c06:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <room_status_display+0x40>)
 8001c08:	f006 fa6a 	bl	80080e0 <siprintf>
	// sprintf(line2, "%s", "LEC");
	sprintf(line2, "%s", current_room_status.room_status);
 8001c0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c40 <room_status_display+0x44>)
 8001c0e:	490d      	ldr	r1, [pc, #52]	@ (8001c44 <room_status_display+0x48>)
 8001c10:	480d      	ldr	r0, [pc, #52]	@ (8001c48 <room_status_display+0x4c>)
 8001c12:	f006 fa65 	bl	80080e0 <siprintf>

	LCD_writeStringXY(0, 0, line1);
 8001c16:	4a09      	ldr	r2, [pc, #36]	@ (8001c3c <room_status_display+0x40>)
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f7fe fe25 	bl	800086a <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, line2);
 8001c20:	4a09      	ldr	r2, [pc, #36]	@ (8001c48 <room_status_display+0x4c>)
 8001c22:	2100      	movs	r1, #0
 8001c24:	2001      	movs	r0, #1
 8001c26:	f7fe fe20 	bl	800086a <LCD_writeStringXY>
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	08009838 	.word	0x08009838
 8001c34:	08009740 	.word	0x08009740
 8001c38:	08009840 	.word	0x08009840
 8001c3c:	20000b48 	.word	0x20000b48
 8001c40:	20000000 	.word	0x20000000
 8001c44:	080096d8 	.word	0x080096d8
 8001c48:	20000b5c 	.word	0x20000b5c

08001c4c <user_authentication>:
//			LCD_writeStringXY(1, 0, line2);
//		}
//	}
//}

void user_authentication() {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af02      	add	r7, sp, #8
	if (MFRC522_Check(cardID) == MI_OK) {
 8001c52:	4849      	ldr	r0, [pc, #292]	@ (8001d78 <user_authentication+0x12c>)
 8001c54:	f000 fde8 	bl	8002828 <MFRC522_Check>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 8088 	bne.w	8001d70 <user_authentication+0x124>
		sprintf(uid_str, "%02X%02X%02X%02X", cardID[0], cardID[1], cardID[2],
 8001c60:	4b45      	ldr	r3, [pc, #276]	@ (8001d78 <user_authentication+0x12c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4b44      	ldr	r3, [pc, #272]	@ (8001d78 <user_authentication+0x12c>)
 8001c68:	785b      	ldrb	r3, [r3, #1]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4b42      	ldr	r3, [pc, #264]	@ (8001d78 <user_authentication+0x12c>)
 8001c6e:	789b      	ldrb	r3, [r3, #2]
 8001c70:	461a      	mov	r2, r3
				cardID[3]);
 8001c72:	4b41      	ldr	r3, [pc, #260]	@ (8001d78 <user_authentication+0x12c>)
 8001c74:	78db      	ldrb	r3, [r3, #3]
		sprintf(uid_str, "%02X%02X%02X%02X", cardID[0], cardID[1], cardID[2],
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	9200      	str	r2, [sp, #0]
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	493f      	ldr	r1, [pc, #252]	@ (8001d7c <user_authentication+0x130>)
 8001c80:	483f      	ldr	r0, [pc, #252]	@ (8001d80 <user_authentication+0x134>)
 8001c82:	f006 fa2d 	bl	80080e0 <siprintf>
		printf("Card UID: %s\r\n", uid_str);
 8001c86:	493e      	ldr	r1, [pc, #248]	@ (8001d80 <user_authentication+0x134>)
 8001c88:	483e      	ldr	r0, [pc, #248]	@ (8001d84 <user_authentication+0x138>)
 8001c8a:	f006 f9b1 	bl	8007ff0 <iprintf>

		// SQL 클라이언트로 인증 요청 전송
		sprintf(sendBuf, "[PRJ_SQL]CERT@%s@%s\n", ROOM_NUMBER, uid_str);
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d80 <user_authentication+0x134>)
 8001c90:	4a3d      	ldr	r2, [pc, #244]	@ (8001d88 <user_authentication+0x13c>)
 8001c92:	493e      	ldr	r1, [pc, #248]	@ (8001d8c <user_authentication+0x140>)
 8001c94:	483e      	ldr	r0, [pc, #248]	@ (8001d90 <user_authentication+0x144>)
 8001c96:	f006 fa23 	bl	80080e0 <siprintf>
		esp_send_data(sendBuf);
 8001c9a:	483d      	ldr	r0, [pc, #244]	@ (8001d90 <user_authentication+0x144>)
 8001c9c:	f7ff f9a8 	bl	8000ff0 <esp_send_data>
		printf("Send to SQL client: %s\r\n", sendBuf);
 8001ca0:	493b      	ldr	r1, [pc, #236]	@ (8001d90 <user_authentication+0x144>)
 8001ca2:	483c      	ldr	r0, [pc, #240]	@ (8001d94 <user_authentication+0x148>)
 8001ca4:	f006 f9a4 	bl	8007ff0 <iprintf>

		// 응답 대기 타이머 시작
		int wait_start_time = tim3Sec;
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8001d98 <user_authentication+0x14c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	607b      	str	r3, [r7, #4]
		int timeout_sec = 2;  // 최대 대기 시간 (초)
 8001cae:	2302      	movs	r3, #2
 8001cb0:	603b      	str	r3, [r7, #0]

		while ((tim3Sec - wait_start_time) < timeout_sec) {
 8001cb2:	e038      	b.n	8001d26 <user_authentication+0xda>
			if (strstr((char*) cb_data.buf, "[PRJ_SQL]CERT@OK")) {
 8001cb4:	4939      	ldr	r1, [pc, #228]	@ (8001d9c <user_authentication+0x150>)
 8001cb6:	483a      	ldr	r0, [pc, #232]	@ (8001da0 <user_authentication+0x154>)
 8001cb8:	f006 fb90 	bl	80083dc <strstr>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d015      	beq.n	8001cee <user_authentication+0xa2>
				authentication_flag = 1;
 8001cc2:	4b38      	ldr	r3, [pc, #224]	@ (8001da4 <user_authentication+0x158>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
				auth_start_time = tim3Sec;
 8001cc8:	4b33      	ldr	r3, [pc, #204]	@ (8001d98 <user_authentication+0x14c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b36      	ldr	r3, [pc, #216]	@ (8001da8 <user_authentication+0x15c>)
 8001cd0:	601a      	str	r2, [r3, #0]
				printf("인증성공!\r\n");
 8001cd2:	4836      	ldr	r0, [pc, #216]	@ (8001dac <user_authentication+0x160>)
 8001cd4:	f006 f9fc 	bl	80080d0 <puts>
				sprintf(line2, "%s", "Success!!");
 8001cd8:	4a35      	ldr	r2, [pc, #212]	@ (8001db0 <user_authentication+0x164>)
 8001cda:	4936      	ldr	r1, [pc, #216]	@ (8001db4 <user_authentication+0x168>)
 8001cdc:	4836      	ldr	r0, [pc, #216]	@ (8001db8 <user_authentication+0x16c>)
 8001cde:	f006 f9ff 	bl	80080e0 <siprintf>
				LCD_writeStringXY(1, 0, line2);
 8001ce2:	4a35      	ldr	r2, [pc, #212]	@ (8001db8 <user_authentication+0x16c>)
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f7fe fdbf 	bl	800086a <LCD_writeStringXY>

				goto auth_done;
 8001cec:	e036      	b.n	8001d5c <user_authentication+0x110>
			} else if (strstr((char*) cb_data.buf, "[PRJ_SQL]CERT@NO")) {
 8001cee:	4933      	ldr	r1, [pc, #204]	@ (8001dbc <user_authentication+0x170>)
 8001cf0:	482b      	ldr	r0, [pc, #172]	@ (8001da0 <user_authentication+0x154>)
 8001cf2:	f006 fb73 	bl	80083dc <strstr>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d014      	beq.n	8001d26 <user_authentication+0xda>
				authentication_flag = 0;
 8001cfc:	4b29      	ldr	r3, [pc, #164]	@ (8001da4 <user_authentication+0x158>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
				auth_start_time = -1;
 8001d02:	4b29      	ldr	r3, [pc, #164]	@ (8001da8 <user_authentication+0x15c>)
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295
 8001d08:	601a      	str	r2, [r3, #0]
				printf("인증실패!\r\n");
 8001d0a:	482d      	ldr	r0, [pc, #180]	@ (8001dc0 <user_authentication+0x174>)
 8001d0c:	f006 f9e0 	bl	80080d0 <puts>
				sprintf(line2, "%s", "Failed!!");
 8001d10:	4a2c      	ldr	r2, [pc, #176]	@ (8001dc4 <user_authentication+0x178>)
 8001d12:	4928      	ldr	r1, [pc, #160]	@ (8001db4 <user_authentication+0x168>)
 8001d14:	4828      	ldr	r0, [pc, #160]	@ (8001db8 <user_authentication+0x16c>)
 8001d16:	f006 f9e3 	bl	80080e0 <siprintf>
				LCD_writeStringXY(1, 0, line2);
 8001d1a:	4a27      	ldr	r2, [pc, #156]	@ (8001db8 <user_authentication+0x16c>)
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f7fe fda3 	bl	800086a <LCD_writeStringXY>

				goto auth_done;
 8001d24:	e01a      	b.n	8001d5c <user_authentication+0x110>
		while ((tim3Sec - wait_start_time) < timeout_sec) {
 8001d26:	4b1c      	ldr	r3, [pc, #112]	@ (8001d98 <user_authentication+0x14c>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	1ad2      	subs	r2, r2, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d3bf      	bcc.n	8001cb4 <user_authentication+0x68>
			}
		}

		// 응답 없음 (타임아웃)
		authentication_flag = 0;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <user_authentication+0x158>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
		auth_start_time = -1;
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <user_authentication+0x15c>)
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d40:	601a      	str	r2, [r3, #0]
		printf("인증응답 없음!\r\n");
 8001d42:	4821      	ldr	r0, [pc, #132]	@ (8001dc8 <user_authentication+0x17c>)
 8001d44:	f006 f9c4 	bl	80080d0 <puts>
		sprintf(line2, "%s", "No Resp!!");
 8001d48:	4a20      	ldr	r2, [pc, #128]	@ (8001dcc <user_authentication+0x180>)
 8001d4a:	491a      	ldr	r1, [pc, #104]	@ (8001db4 <user_authentication+0x168>)
 8001d4c:	481a      	ldr	r0, [pc, #104]	@ (8001db8 <user_authentication+0x16c>)
 8001d4e:	f006 f9c7 	bl	80080e0 <siprintf>
		LCD_writeStringXY(1, 0, line2);
 8001d52:	4a19      	ldr	r2, [pc, #100]	@ (8001db8 <user_authentication+0x16c>)
 8001d54:	2100      	movs	r1, #0
 8001d56:	2001      	movs	r0, #1
 8001d58:	f7fe fd87 	bl	800086a <LCD_writeStringXY>

		auth_done:
		// 수신 버퍼 정리
		memset(cb_data.buf, 0, sizeof(cb_data.buf));
 8001d5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d60:	2100      	movs	r1, #0
 8001d62:	480f      	ldr	r0, [pc, #60]	@ (8001da0 <user_authentication+0x154>)
 8001d64:	f006 fab6 	bl	80082d4 <memset>
		cb_data.length = 0;
 8001d68:	4b0d      	ldr	r3, [pc, #52]	@ (8001da0 <user_authentication+0x154>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
	}
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000b7c 	.word	0x20000b7c
 8001d7c:	08009848 	.word	0x08009848
 8001d80:	20000b84 	.word	0x20000b84
 8001d84:	0800985c 	.word	0x0800985c
 8001d88:	08009740 	.word	0x08009740
 8001d8c:	0800986c 	.word	0x0800986c
 8001d90:	20000b98 	.word	0x20000b98
 8001d94:	08009884 	.word	0x08009884
 8001d98:	20000b74 	.word	0x20000b74
 8001d9c:	080098a0 	.word	0x080098a0
 8001da0:	200004f0 	.word	0x200004f0
 8001da4:	20000b94 	.word	0x20000b94
 8001da8:	20000014 	.word	0x20000014
 8001dac:	080098b4 	.word	0x080098b4
 8001db0:	080098c4 	.word	0x080098c4
 8001db4:	080096d8 	.word	0x080096d8
 8001db8:	20000b5c 	.word	0x20000b5c
 8001dbc:	080098d0 	.word	0x080098d0
 8001dc0:	080098e4 	.word	0x080098e4
 8001dc4:	080098f4 	.word	0x080098f4
 8001dc8:	08009900 	.word	0x08009900
 8001dcc:	08009918 	.word	0x08009918

08001dd0 <esp_event>:

void esp_event(char *recvBuf) {
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b09d      	sub	sp, #116	@ 0x74
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	667b      	str	r3, [r7, #100]	@ 0x64
	char *pToken;
	char *pArray[ARR_CNT] = { 0 };
 8001ddc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
	char sendBuf[MAX_UART_COMMAND_LEN] = { 0 };
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	2240      	movs	r2, #64	@ 0x40
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f006 fa6d 	bl	80082d4 <memset>

	strBuff[strlen(recvBuf) - 1] = '\0'; //'\n' cut
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7fe f9fa 	bl	80001f4 <strlen>
 8001e00:	4603      	mov	r3, r0
 8001e02:	3b01      	subs	r3, #1
 8001e04:	4a9f      	ldr	r2, [pc, #636]	@ (8002084 <esp_event+0x2b4>)
 8001e06:	2100      	movs	r1, #0
 8001e08:	54d1      	strb	r1, [r2, r3]
	printf("\r\nDebug recv : %s\r\n", recvBuf);
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	489e      	ldr	r0, [pc, #632]	@ (8002088 <esp_event+0x2b8>)
 8001e0e:	f006 f8ef 	bl	8007ff0 <iprintf>

	pToken = strtok(recvBuf, "[@]");
 8001e12:	499e      	ldr	r1, [pc, #632]	@ (800208c <esp_event+0x2bc>)
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f006 fa85 	bl	8008324 <strtok>
 8001e1a:	6638      	str	r0, [r7, #96]	@ 0x60
	while (pToken != NULL) {
 8001e1c:	e011      	b.n	8001e42 <esp_event+0x72>
		pArray[i] = pToken;
 8001e1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	3368      	adds	r3, #104	@ 0x68
 8001e24:	443b      	add	r3, r7
 8001e26:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e28:	f843 2c20 	str.w	r2, [r3, #-32]
		if (++i >= ARR_CNT)
 8001e2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e2e:	3301      	adds	r3, #1
 8001e30:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	dc08      	bgt.n	8001e4a <esp_event+0x7a>
			break;
		pToken = strtok(NULL, "[@]");
 8001e38:	4994      	ldr	r1, [pc, #592]	@ (800208c <esp_event+0x2bc>)
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f006 fa72 	bl	8008324 <strtok>
 8001e40:	6638      	str	r0, [r7, #96]	@ 0x60
	while (pToken != NULL) {
 8001e42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1ea      	bne.n	8001e1e <esp_event+0x4e>
 8001e48:	e000      	b.n	8001e4c <esp_event+0x7c>
			break;
 8001e4a:	bf00      	nop
	}

	for (int j = 0; j < i; j++) {
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e50:	e00f      	b.n	8001e72 <esp_event+0xa2>
		if (pArray[j] == NULL) {
 8001e52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	3368      	adds	r3, #104	@ 0x68
 8001e58:	443b      	add	r3, r7
 8001e5a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d104      	bne.n	8001e6c <esp_event+0x9c>
			printf("Warning: NULL in pArray[%d]\r\n", j);
 8001e62:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001e64:	488a      	ldr	r0, [pc, #552]	@ (8002090 <esp_event+0x2c0>)
 8001e66:	f006 f8c3 	bl	8007ff0 <iprintf>
			return;
 8001e6a:	e15e      	b.n	800212a <esp_event+0x35a>
	for (int j = 0; j < i; j++) {
 8001e6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e6e:	3301      	adds	r3, #1
 8001e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001e74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e76:	429a      	cmp	r2, r3
 8001e78:	dbeb      	blt.n	8001e52 <esp_event+0x82>
		}
	}

	if (i < 2) {
 8001e7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	dc04      	bgt.n	8001e8a <esp_event+0xba>
		printf("Parsing error: too few tokens (%d)\r\n", i);
 8001e80:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001e82:	4884      	ldr	r0, [pc, #528]	@ (8002094 <esp_event+0x2c4>)
 8001e84:	f006 f8b4 	bl	8007ff0 <iprintf>
		return;
 8001e88:	e14f      	b.n	800212a <esp_event+0x35a>
	}

	if (i == 2) {
 8001e8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d11a      	bne.n	8001ec6 <esp_event+0xf6>
		ppAArray.client = pArray[0];
 8001e90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e92:	4a81      	ldr	r2, [pc, #516]	@ (8002098 <esp_event+0x2c8>)
 8001e94:	6013      	str	r3, [r2, #0]
		ppAArray.door = pArray[1];
 8001e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e98:	4a7f      	ldr	r2, [pc, #508]	@ (8002098 <esp_event+0x2c8>)
 8001e9a:	6053      	str	r3, [r2, #4]

		if (!strcmp(pArray[1], "UNLOCK")) {
 8001e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e9e:	497f      	ldr	r1, [pc, #508]	@ (800209c <esp_event+0x2cc>)
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe f99d 	bl	80001e0 <strcmp>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f040 812d 	bne.w	8002108 <esp_event+0x338>
			sprintf(sendBuf, "[%s]%s\r\n", "PRJ_SQL", ppAArray.door);
 8001eae:	4b7a      	ldr	r3, [pc, #488]	@ (8002098 <esp_event+0x2c8>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f107 0008 	add.w	r0, r7, #8
 8001eb6:	4a7a      	ldr	r2, [pc, #488]	@ (80020a0 <esp_event+0x2d0>)
 8001eb8:	497a      	ldr	r1, [pc, #488]	@ (80020a4 <esp_event+0x2d4>)
 8001eba:	f006 f911 	bl	80080e0 <siprintf>
			door_state = 1;
 8001ebe:	4b7a      	ldr	r3, [pc, #488]	@ (80020a8 <esp_event+0x2d8>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e120      	b.n	8002108 <esp_event+0x338>
		}
	}

	else if (i == 4) {
 8001ec6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	f040 80c5 	bne.w	8002058 <esp_event+0x288>

		pppAAArray.cclient = pArray[0];
 8001ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ed0:	4a76      	ldr	r2, [pc, #472]	@ (80020ac <esp_event+0x2dc>)
 8001ed2:	6013      	str	r3, [r2, #0]
		pppAAArray.ssetroom = pArray[1];
 8001ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ed6:	4a75      	ldr	r2, [pc, #468]	@ (80020ac <esp_event+0x2dc>)
 8001ed8:	6053      	str	r3, [r2, #4]
		pppAAArray.rroom = pArray[2];
 8001eda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001edc:	4a73      	ldr	r2, [pc, #460]	@ (80020ac <esp_event+0x2dc>)
 8001ede:	6093      	str	r3, [r2, #8]
		pppAAArray.sstatus = pArray[3];
 8001ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee2:	4a72      	ldr	r2, [pc, #456]	@ (80020ac <esp_event+0x2dc>)
 8001ee4:	60d3      	str	r3, [r2, #12]

		if (!strcmp(pppAAArray.ssetroom, "SETROOM")
 8001ee6:	4b71      	ldr	r3, [pc, #452]	@ (80020ac <esp_event+0x2dc>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4971      	ldr	r1, [pc, #452]	@ (80020b0 <esp_event+0x2e0>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe f977 	bl	80001e0 <strcmp>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f040 8107 	bne.w	8002108 <esp_event+0x338>
				&& !strcmp(pppAAArray.rroom, ROOM_NUMBER)) {
 8001efa:	4b6c      	ldr	r3, [pc, #432]	@ (80020ac <esp_event+0x2dc>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	496d      	ldr	r1, [pc, #436]	@ (80020b4 <esp_event+0x2e4>)
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe f96d 	bl	80001e0 <strcmp>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f040 80fd 	bne.w	8002108 <esp_event+0x338>

			if (!strcmp(pppAAArray.sstatus, "IN")) {
 8001f0e:	4b67      	ldr	r3, [pc, #412]	@ (80020ac <esp_event+0x2dc>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	4969      	ldr	r1, [pc, #420]	@ (80020b8 <esp_event+0x2e8>)
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe f963 	bl	80001e0 <strcmp>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <esp_event+0x16c>
				sprintf(current_room_status.room_status, "%s",
 8001f20:	4a66      	ldr	r2, [pc, #408]	@ (80020bc <esp_event+0x2ec>)
 8001f22:	4967      	ldr	r1, [pc, #412]	@ (80020c0 <esp_event+0x2f0>)
 8001f24:	4867      	ldr	r0, [pc, #412]	@ (80020c4 <esp_event+0x2f4>)
 8001f26:	f006 f8db 	bl	80080e0 <siprintf>
						"In Room        ");
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	2180      	movs	r1, #128	@ 0x80
 8001f2e:	4866      	ldr	r0, [pc, #408]	@ (80020c8 <esp_event+0x2f8>)
 8001f30:	f002 f84e 	bl	8003fd0 <HAL_GPIO_WritePin>
				door_state = 1;
 8001f34:	4b5c      	ldr	r3, [pc, #368]	@ (80020a8 <esp_event+0x2d8>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	e075      	b.n	8002028 <esp_event+0x258>

			} else if (!strcmp(pppAAArray.sstatus, "LEC")) {
 8001f3c:	4b5b      	ldr	r3, [pc, #364]	@ (80020ac <esp_event+0x2dc>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4962      	ldr	r1, [pc, #392]	@ (80020cc <esp_event+0x2fc>)
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe f94c 	bl	80001e0 <strcmp>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10d      	bne.n	8001f6a <esp_event+0x19a>
				sprintf(current_room_status.room_status, "%s",
 8001f4e:	4a60      	ldr	r2, [pc, #384]	@ (80020d0 <esp_event+0x300>)
 8001f50:	495b      	ldr	r1, [pc, #364]	@ (80020c0 <esp_event+0x2f0>)
 8001f52:	485c      	ldr	r0, [pc, #368]	@ (80020c4 <esp_event+0x2f4>)
 8001f54:	f006 f8c4 	bl	80080e0 <siprintf>
						"Lecture        ");
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2180      	movs	r1, #128	@ 0x80
 8001f5c:	485a      	ldr	r0, [pc, #360]	@ (80020c8 <esp_event+0x2f8>)
 8001f5e:	f002 f837 	bl	8003fd0 <HAL_GPIO_WritePin>
				door_state = 0;
 8001f62:	4b51      	ldr	r3, [pc, #324]	@ (80020a8 <esp_event+0x2d8>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	e05e      	b.n	8002028 <esp_event+0x258>

			} else if (!strcmp(pppAAArray.sstatus, "VAC")) {
 8001f6a:	4b50      	ldr	r3, [pc, #320]	@ (80020ac <esp_event+0x2dc>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	4959      	ldr	r1, [pc, #356]	@ (80020d4 <esp_event+0x304>)
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe f935 	bl	80001e0 <strcmp>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10d      	bne.n	8001f98 <esp_event+0x1c8>
				sprintf(current_room_status.room_status, "%s",
 8001f7c:	4a56      	ldr	r2, [pc, #344]	@ (80020d8 <esp_event+0x308>)
 8001f7e:	4950      	ldr	r1, [pc, #320]	@ (80020c0 <esp_event+0x2f0>)
 8001f80:	4850      	ldr	r0, [pc, #320]	@ (80020c4 <esp_event+0x2f4>)
 8001f82:	f006 f8ad 	bl	80080e0 <siprintf>
						"Vacation       ");
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2180      	movs	r1, #128	@ 0x80
 8001f8a:	484f      	ldr	r0, [pc, #316]	@ (80020c8 <esp_event+0x2f8>)
 8001f8c:	f002 f820 	bl	8003fd0 <HAL_GPIO_WritePin>
				door_state = 0;
 8001f90:	4b45      	ldr	r3, [pc, #276]	@ (80020a8 <esp_event+0x2d8>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e047      	b.n	8002028 <esp_event+0x258>

			} else if (!strcmp(pppAAArray.sstatus, "MTG")) {
 8001f98:	4b44      	ldr	r3, [pc, #272]	@ (80020ac <esp_event+0x2dc>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	494f      	ldr	r1, [pc, #316]	@ (80020dc <esp_event+0x30c>)
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe f91e 	bl	80001e0 <strcmp>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10d      	bne.n	8001fc6 <esp_event+0x1f6>
				sprintf(current_room_status.room_status, "%s",
 8001faa:	4a4d      	ldr	r2, [pc, #308]	@ (80020e0 <esp_event+0x310>)
 8001fac:	4944      	ldr	r1, [pc, #272]	@ (80020c0 <esp_event+0x2f0>)
 8001fae:	4845      	ldr	r0, [pc, #276]	@ (80020c4 <esp_event+0x2f4>)
 8001fb0:	f006 f896 	bl	80080e0 <siprintf>
						"Meeting        ");
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2180      	movs	r1, #128	@ 0x80
 8001fb8:	4843      	ldr	r0, [pc, #268]	@ (80020c8 <esp_event+0x2f8>)
 8001fba:	f002 f809 	bl	8003fd0 <HAL_GPIO_WritePin>
				door_state = 0;
 8001fbe:	4b3a      	ldr	r3, [pc, #232]	@ (80020a8 <esp_event+0x2d8>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e030      	b.n	8002028 <esp_event+0x258>

			} else if (!strcmp(pppAAArray.sstatus, "BRK")) {
 8001fc6:	4b39      	ldr	r3, [pc, #228]	@ (80020ac <esp_event+0x2dc>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	4946      	ldr	r1, [pc, #280]	@ (80020e4 <esp_event+0x314>)
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe f907 	bl	80001e0 <strcmp>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10d      	bne.n	8001ff4 <esp_event+0x224>
				sprintf(current_room_status.room_status, "%s",
 8001fd8:	4a43      	ldr	r2, [pc, #268]	@ (80020e8 <esp_event+0x318>)
 8001fda:	4939      	ldr	r1, [pc, #228]	@ (80020c0 <esp_event+0x2f0>)
 8001fdc:	4839      	ldr	r0, [pc, #228]	@ (80020c4 <esp_event+0x2f4>)
 8001fde:	f006 f87f 	bl	80080e0 <siprintf>
						"Break          ");
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2180      	movs	r1, #128	@ 0x80
 8001fe6:	4838      	ldr	r0, [pc, #224]	@ (80020c8 <esp_event+0x2f8>)
 8001fe8:	f001 fff2 	bl	8003fd0 <HAL_GPIO_WritePin>
				door_state = 0;
 8001fec:	4b2e      	ldr	r3, [pc, #184]	@ (80020a8 <esp_event+0x2d8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e019      	b.n	8002028 <esp_event+0x258>

			} else if (!strcmp(pppAAArray.sstatus, "OUT")) {
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80020ac <esp_event+0x2dc>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	493c      	ldr	r1, [pc, #240]	@ (80020ec <esp_event+0x31c>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe f8f0 	bl	80001e0 <strcmp>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 808c 	bne.w	8002120 <esp_event+0x350>
				printf("out!!!!!!!\r\n");
 8002008:	4839      	ldr	r0, [pc, #228]	@ (80020f0 <esp_event+0x320>)
 800200a:	f006 f861 	bl	80080d0 <puts>
				sprintf(current_room_status.room_status, "%s",
 800200e:	4a39      	ldr	r2, [pc, #228]	@ (80020f4 <esp_event+0x324>)
 8002010:	492b      	ldr	r1, [pc, #172]	@ (80020c0 <esp_event+0x2f0>)
 8002012:	482c      	ldr	r0, [pc, #176]	@ (80020c4 <esp_event+0x2f4>)
 8002014:	f006 f864 	bl	80080e0 <siprintf>
						"Off Work       ");
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	2180      	movs	r1, #128	@ 0x80
 800201c:	482a      	ldr	r0, [pc, #168]	@ (80020c8 <esp_event+0x2f8>)
 800201e:	f001 ffd7 	bl	8003fd0 <HAL_GPIO_WritePin>
				door_state = 0;
 8002022:	4b21      	ldr	r3, [pc, #132]	@ (80020a8 <esp_event+0x2d8>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
			} else {
				// 처리할 수 없는 상태일 경우 무시
				return;
			}

			sprintf(sendBuf, "[PRJ_SQL]%s@%s@%s@%s\r\n", pppAAArray.ssetroom,
 8002028:	4b20      	ldr	r3, [pc, #128]	@ (80020ac <esp_event+0x2dc>)
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <esp_event+0x2dc>)
 800202e:	689c      	ldr	r4, [r3, #8]
 8002030:	4b1e      	ldr	r3, [pc, #120]	@ (80020ac <esp_event+0x2dc>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a1d      	ldr	r2, [pc, #116]	@ (80020ac <esp_event+0x2dc>)
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	f107 0008 	add.w	r0, r7, #8
 800203c:	9201      	str	r2, [sp, #4]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	4623      	mov	r3, r4
 8002042:	460a      	mov	r2, r1
 8002044:	492c      	ldr	r1, [pc, #176]	@ (80020f8 <esp_event+0x328>)
 8002046:	f006 f84b 	bl	80080e0 <siprintf>
					pppAAArray.rroom, pppAAArray.sstatus, pppAAArray.cclient);
			printf("client = %s\r\n", pppAAArray.cclient);
 800204a:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <esp_event+0x2dc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4619      	mov	r1, r3
 8002050:	482a      	ldr	r0, [pc, #168]	@ (80020fc <esp_event+0x32c>)
 8002052:	f005 ffcd 	bl	8007ff0 <iprintf>
 8002056:	e057      	b.n	8002108 <esp_event+0x338>
		}

	}

	else if (!strncmp(pArray[1], " New conn", 8)) {
 8002058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800205a:	2208      	movs	r2, #8
 800205c:	4928      	ldr	r1, [pc, #160]	@ (8002100 <esp_event+0x330>)
 800205e:	4618      	mov	r0, r3
 8002060:	f006 f94d 	bl	80082fe <strncmp>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d05c      	beq.n	8002124 <esp_event+0x354>
		//	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
		return;
	} else if (!strncmp(pArray[1], " Already log", 8)) {
 800206a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800206c:	2208      	movs	r2, #8
 800206e:	4925      	ldr	r1, [pc, #148]	@ (8002104 <esp_event+0x334>)
 8002070:	4618      	mov	r0, r3
 8002072:	f006 f944 	bl	80082fe <strncmp>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d155      	bne.n	8002128 <esp_event+0x358>
		// 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
		esp_client_conn();
 800207c:	f7fe fe90 	bl	8000da0 <esp_client_conn>
		return;
 8002080:	e053      	b.n	800212a <esp_event+0x35a>
 8002082:	bf00      	nop
 8002084:	20000c38 	.word	0x20000c38
 8002088:	08009924 	.word	0x08009924
 800208c:	08009938 	.word	0x08009938
 8002090:	0800993c 	.word	0x0800993c
 8002094:	0800995c 	.word	0x0800995c
 8002098:	20000bd8 	.word	0x20000bd8
 800209c:	08009984 	.word	0x08009984
 80020a0:	0800998c 	.word	0x0800998c
 80020a4:	08009994 	.word	0x08009994
 80020a8:	20000bf4 	.word	0x20000bf4
 80020ac:	20000be0 	.word	0x20000be0
 80020b0:	080099a0 	.word	0x080099a0
 80020b4:	08009740 	.word	0x08009740
 80020b8:	080099a8 	.word	0x080099a8
 80020bc:	08009730 	.word	0x08009730
 80020c0:	080096d8 	.word	0x080096d8
 80020c4:	20000000 	.word	0x20000000
 80020c8:	40020800 	.word	0x40020800
 80020cc:	080099ac 	.word	0x080099ac
 80020d0:	0800975c 	.word	0x0800975c
 80020d4:	080099b0 	.word	0x080099b0
 80020d8:	08009788 	.word	0x08009788
 80020dc:	080099b4 	.word	0x080099b4
 80020e0:	080097b4 	.word	0x080097b4
 80020e4:	080099b8 	.word	0x080099b8
 80020e8:	080097e0 	.word	0x080097e0
 80020ec:	080099bc 	.word	0x080099bc
 80020f0:	080099c0 	.word	0x080099c0
 80020f4:	0800980c 	.word	0x0800980c
 80020f8:	080099cc 	.word	0x080099cc
 80020fc:	080099e4 	.word	0x080099e4
 8002100:	080099f4 	.word	0x080099f4
 8002104:	08009a00 	.word	0x08009a00
	} else
		return;

	esp_send_data(sendBuf);
 8002108:	f107 0308 	add.w	r3, r7, #8
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe ff6f 	bl	8000ff0 <esp_send_data>
	printf("Debug send : %s\r\n", sendBuf);
 8002112:	f107 0308 	add.w	r3, r7, #8
 8002116:	4619      	mov	r1, r3
 8002118:	4805      	ldr	r0, [pc, #20]	@ (8002130 <esp_event+0x360>)
 800211a:	f005 ff69 	bl	8007ff0 <iprintf>
 800211e:	e004      	b.n	800212a <esp_event+0x35a>
				return;
 8002120:	bf00      	nop
 8002122:	e002      	b.n	800212a <esp_event+0x35a>
		return;
 8002124:	bf00      	nop
 8002126:	e000      	b.n	800212a <esp_event+0x35a>
		return;
 8002128:	bf00      	nop
}
 800212a:	376c      	adds	r7, #108	@ 0x6c
 800212c:	46bd      	mov	sp, r7
 800212e:	bd90      	pop	{r4, r7, pc}
 8002130:	08009a10 	.word	0x08009a10

08002134 <HAL_GPIO_EXTI_Callback>:

// pir
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PIR_Pin) {
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d102      	bne.n	800214a <HAL_GPIO_EXTI_Callback+0x16>

		pir_flag = 1;
 8002144:	4b04      	ldr	r3, [pc, #16]	@ (8002158 <HAL_GPIO_EXTI_Callback+0x24>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

	}
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000bf8 	.word	0x20000bf8

0800215c <PIR_Init>:

void PIR_Init(void) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002170:	2300      	movs	r3, #0
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <PIR_Init+0x60>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002178:	4a10      	ldr	r2, [pc, #64]	@ (80021bc <PIR_Init+0x60>)
 800217a:	f043 0302 	orr.w	r3, r3, #2
 800217e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002180:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <PIR_Init+0x60>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = PIR_Pin;
 800218c:	2302      	movs	r3, #2
 800218e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002190:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002194:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	4619      	mov	r1, r3
 800219e:	4808      	ldr	r0, [pc, #32]	@ (80021c0 <PIR_Init+0x64>)
 80021a0:	f001 fd7a 	bl	8003c98 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2100      	movs	r1, #0
 80021a8:	2007      	movs	r0, #7
 80021aa:	f001 fcac 	bl	8003b06 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80021ae:	2007      	movs	r0, #7
 80021b0:	f001 fcc5 	bl	8003b3e <HAL_NVIC_EnableIRQ>
}
 80021b4:	bf00      	nop
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020400 	.word	0x40020400

080021c4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a08      	ldr	r2, [pc, #32]	@ (80021f4 <HAL_ADC_ConvCpltCallback+0x30>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d109      	bne.n	80021ea <HAL_ADC_ConvCpltCallback+0x26>
		ADC1ConvertValue = HAL_ADC_GetValue(hadc);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f001 f960 	bl	800349c <HAL_ADC_GetValue>
 80021dc:	4603      	mov	r3, r0
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <HAL_ADC_ConvCpltCallback+0x34>)
 80021e2:	801a      	strh	r2, [r3, #0]
		adcFlag = 1;                     // 메인 루프에 알림
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_ADC_ConvCpltCallback+0x38>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	801a      	strh	r2, [r3, #0]
	}
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40012000 	.word	0x40012000
 80021f8:	20000c04 	.word	0x20000c04
 80021fc:	20000c06 	.word	0x20000c06

08002200 <dht_status_motor>:

void dht_status_motor() {
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b085      	sub	sp, #20
 8002204:	af02      	add	r7, sp, #8
	dht11Data = DHT11_readData();
 8002206:	4c3d      	ldr	r4, [pc, #244]	@ (80022fc <dht_status_motor+0xfc>)
 8002208:	463b      	mov	r3, r7
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fc9e 	bl	8000b4c <DHT11_readData>
 8002210:	4622      	mov	r2, r4
 8002212:	463b      	mov	r3, r7
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	6010      	str	r0, [r2, #0]
 8002218:	889b      	ldrh	r3, [r3, #4]
 800221a:	8093      	strh	r3, [r2, #4]
	if (dht11Data.rh_byte1 != 255) {
 800221c:	4b37      	ldr	r3, [pc, #220]	@ (80022fc <dht_status_motor+0xfc>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2bff      	cmp	r3, #255	@ 0xff
 8002222:	d064      	beq.n	80022ee <dht_status_motor+0xee>
		sprintf(dhtbuff, "h: %d%% t: %d.%d'C", dht11Data.rh_byte1,
 8002224:	4b35      	ldr	r3, [pc, #212]	@ (80022fc <dht_status_motor+0xfc>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
				dht11Data.temp_byte1, dht11Data.temp_byte2);
 800222a:	4b34      	ldr	r3, [pc, #208]	@ (80022fc <dht_status_motor+0xfc>)
 800222c:	789b      	ldrb	r3, [r3, #2]
		sprintf(dhtbuff, "h: %d%% t: %d.%d'C", dht11Data.rh_byte1,
 800222e:	4619      	mov	r1, r3
				dht11Data.temp_byte1, dht11Data.temp_byte2);
 8002230:	4b32      	ldr	r3, [pc, #200]	@ (80022fc <dht_status_motor+0xfc>)
 8002232:	78db      	ldrb	r3, [r3, #3]
		sprintf(dhtbuff, "h: %d%% t: %d.%d'C", dht11Data.rh_byte1,
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	460b      	mov	r3, r1
 8002238:	4931      	ldr	r1, [pc, #196]	@ (8002300 <dht_status_motor+0x100>)
 800223a:	4832      	ldr	r0, [pc, #200]	@ (8002304 <dht_status_motor+0x104>)
 800223c:	f005 ff50 	bl	80080e0 <siprintf>
		printf("%s\r\n", dhtbuff);
 8002240:	4930      	ldr	r1, [pc, #192]	@ (8002304 <dht_status_motor+0x104>)
 8002242:	4831      	ldr	r0, [pc, #196]	@ (8002308 <dht_status_motor+0x108>)
 8002244:	f005 fed4 	bl	8007ff0 <iprintf>
		printf("dht11Data.rh_byte1 = %d \r\n", dht11Data.rh_byte1);
 8002248:	4b2c      	ldr	r3, [pc, #176]	@ (80022fc <dht_status_motor+0xfc>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	482f      	ldr	r0, [pc, #188]	@ (800230c <dht_status_motor+0x10c>)
 8002250:	f005 fece 	bl	8007ff0 <iprintf>

		if (dht11Data.rh_byte1 >= 60 || dht11Data.temp_byte1 > 30)
 8002254:	4b29      	ldr	r3, [pc, #164]	@ (80022fc <dht_status_motor+0xfc>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b3b      	cmp	r3, #59	@ 0x3b
 800225a:	d803      	bhi.n	8002264 <dht_status_motor+0x64>
 800225c:	4b27      	ldr	r3, [pc, #156]	@ (80022fc <dht_status_motor+0xfc>)
 800225e:	789b      	ldrb	r3, [r3, #2]
 8002260:	2b1e      	cmp	r3, #30
 8002262:	d903      	bls.n	800226c <dht_status_motor+0x6c>
			fanFlag = 1;
 8002264:	4b2a      	ldr	r3, [pc, #168]	@ (8002310 <dht_status_motor+0x110>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	e002      	b.n	8002272 <dht_status_motor+0x72>
		else
			fanFlag = 0;
 800226c:	4b28      	ldr	r3, [pc, #160]	@ (8002310 <dht_status_motor+0x110>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]

		if (fanFlag != last_fanFlag) {
 8002272:	4b27      	ldr	r3, [pc, #156]	@ (8002310 <dht_status_motor+0x110>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b27      	ldr	r3, [pc, #156]	@ (8002314 <dht_status_motor+0x114>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d03a      	beq.n	80022f4 <dht_status_motor+0xf4>
			if (fanFlag == 1) {
 800227e:	4b24      	ldr	r3, [pc, #144]	@ (8002310 <dht_status_motor+0x110>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d115      	bne.n	80022b2 <dht_status_motor+0xb2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8002286:	2201      	movs	r2, #1
 8002288:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800228c:	4822      	ldr	r0, [pc, #136]	@ (8002318 <dht_status_motor+0x118>)
 800228e:	f001 fe9f 	bl	8003fd0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002298:	481f      	ldr	r0, [pc, #124]	@ (8002318 <dht_status_motor+0x118>)
 800229a:	f001 fe99 	bl	8003fd0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022a4:	481c      	ldr	r0, [pc, #112]	@ (8002318 <dht_status_motor+0x118>)
 80022a6:	f001 fe93 	bl	8003fd0 <HAL_GPIO_WritePin>
				printf("fan on!!\r\n");
 80022aa:	481c      	ldr	r0, [pc, #112]	@ (800231c <dht_status_motor+0x11c>)
 80022ac:	f005 ff10 	bl	80080d0 <puts>
 80022b0:	e018      	b.n	80022e4 <dht_status_motor+0xe4>
			} else if (fanFlag == 0) {
 80022b2:	4b17      	ldr	r3, [pc, #92]	@ (8002310 <dht_status_motor+0x110>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d114      	bne.n	80022e4 <dht_status_motor+0xe4>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80022ba:	2200      	movs	r2, #0
 80022bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022c0:	4815      	ldr	r0, [pc, #84]	@ (8002318 <dht_status_motor+0x118>)
 80022c2:	f001 fe85 	bl	8003fd0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022cc:	4812      	ldr	r0, [pc, #72]	@ (8002318 <dht_status_motor+0x118>)
 80022ce:	f001 fe7f 	bl	8003fd0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80022d2:	2200      	movs	r2, #0
 80022d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022d8:	480f      	ldr	r0, [pc, #60]	@ (8002318 <dht_status_motor+0x118>)
 80022da:	f001 fe79 	bl	8003fd0 <HAL_GPIO_WritePin>
				printf("fan off!!\r\n");
 80022de:	4810      	ldr	r0, [pc, #64]	@ (8002320 <dht_status_motor+0x120>)
 80022e0:	f005 fef6 	bl	80080d0 <puts>
			}
			last_fanFlag = fanFlag;
 80022e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002310 <dht_status_motor+0x110>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <dht_status_motor+0x114>)
 80022ea:	6013      	str	r3, [r2, #0]
		}
	} else
		printf("DHT11 response error\r\n");

}
 80022ec:	e002      	b.n	80022f4 <dht_status_motor+0xf4>
		printf("DHT11 response error\r\n");
 80022ee:	480d      	ldr	r0, [pc, #52]	@ (8002324 <dht_status_motor+0x124>)
 80022f0:	f005 feee 	bl	80080d0 <puts>
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd90      	pop	{r4, r7, pc}
 80022fc:	20000b10 	.word	0x20000b10
 8002300:	08009a24 	.word	0x08009a24
 8002304:	20000c14 	.word	0x20000c14
 8002308:	08009a38 	.word	0x08009a38
 800230c:	08009a40 	.word	0x08009a40
 8002310:	20000c00 	.word	0x20000c00
 8002314:	20000bfc 	.word	0x20000bfc
 8002318:	40020400 	.word	0x40020400
 800231c:	08009a5c 	.word	0x08009a5c
 8002320:	08009a68 	.word	0x08009a68
 8002324:	08009a74 	.word	0x08009a74

08002328 <cds_status_servo>:

void cds_status_servo() {
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
	//ADC
	if (adcFlag) {
 800232c:	4b24      	ldr	r3, [pc, #144]	@ (80023c0 <cds_status_servo+0x98>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01a      	beq.n	800236c <cds_status_servo+0x44>
		adcFlag = 0;
 8002336:	4b22      	ldr	r3, [pc, #136]	@ (80023c0 <cds_status_servo+0x98>)
 8002338:	2200      	movs	r2, #0
 800233a:	801a      	strh	r2, [r3, #0]
		if (ADC1ConvertValue > 2300) {
 800233c:	4b21      	ldr	r3, [pc, #132]	@ (80023c4 <cds_status_servo+0x9c>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	b29b      	uxth	r3, r3
 8002342:	f640 02fc 	movw	r2, #2300	@ 0x8fc
 8002346:	4293      	cmp	r3, r2
 8002348:	d903      	bls.n	8002352 <cds_status_servo+0x2a>
			curtainFlag = 1;
 800234a:	4b1f      	ldr	r3, [pc, #124]	@ (80023c8 <cds_status_servo+0xa0>)
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	e002      	b.n	8002358 <cds_status_servo+0x30>
		} else {
			curtainFlag = 0;
 8002352:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <cds_status_servo+0xa0>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
		}
		printf("CDS : %d\r\n", ADC1ConvertValue);
 8002358:	4b1a      	ldr	r3, [pc, #104]	@ (80023c4 <cds_status_servo+0x9c>)
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4619      	mov	r1, r3
 8002360:	481a      	ldr	r0, [pc, #104]	@ (80023cc <cds_status_servo+0xa4>)
 8002362:	f005 fe45 	bl	8007ff0 <iprintf>

		HAL_ADC_Start_IT(&hadc1);   // 다음 변환 시작
 8002366:	481a      	ldr	r0, [pc, #104]	@ (80023d0 <cds_status_servo+0xa8>)
 8002368:	f000 feca 	bl	8003100 <HAL_ADC_Start_IT>
	}

	if (curtainFlag != last_curtainFlag) {
 800236c:	4b16      	ldr	r3, [pc, #88]	@ (80023c8 <cds_status_servo+0xa0>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <cds_status_servo+0xac>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d01a      	beq.n	80023ae <cds_status_servo+0x86>
		if (curtainFlag == 1) {
 8002378:	4b13      	ldr	r3, [pc, #76]	@ (80023c8 <cds_status_servo+0xa0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d107      	bne.n	8002390 <cds_status_servo+0x68>
			curtain_pulse = 500;
 8002380:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <cds_status_servo+0xb0>)
 8002382:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002386:	601a      	str	r2, [r3, #0]
			printf("curtain on!!\r\n");
 8002388:	4814      	ldr	r0, [pc, #80]	@ (80023dc <cds_status_servo+0xb4>)
 800238a:	f005 fea1 	bl	80080d0 <puts>
 800238e:	e00a      	b.n	80023a6 <cds_status_servo+0x7e>
		} else if (curtainFlag == 0) {
 8002390:	4b0d      	ldr	r3, [pc, #52]	@ (80023c8 <cds_status_servo+0xa0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d106      	bne.n	80023a6 <cds_status_servo+0x7e>
			curtain_pulse = 1500;
 8002398:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <cds_status_servo+0xb0>)
 800239a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800239e:	601a      	str	r2, [r3, #0]
			printf("curtain off!!\r\n");
 80023a0:	480f      	ldr	r0, [pc, #60]	@ (80023e0 <cds_status_servo+0xb8>)
 80023a2:	f005 fe95 	bl	80080d0 <puts>
		}
		last_curtainFlag = curtainFlag;
 80023a6:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <cds_status_servo+0xa0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a0a      	ldr	r2, [pc, #40]	@ (80023d4 <cds_status_servo+0xac>)
 80023ac:	6013      	str	r3, [r2, #0]
	}
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, curtain_pulse - 1);
 80023ae:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <cds_status_servo+0xb0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	1e5a      	subs	r2, r3, #1
 80023b4:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <cds_status_servo+0xbc>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000c06 	.word	0x20000c06
 80023c4:	20000c04 	.word	0x20000c04
 80023c8:	20000c08 	.word	0x20000c08
 80023cc:	08009a8c 	.word	0x08009a8c
 80023d0:	200008f8 	.word	0x200008f8
 80023d4:	20000c0c 	.word	0x20000c0c
 80023d8:	20000c10 	.word	0x20000c10
 80023dc:	08009a98 	.word	0x08009a98
 80023e0:	08009aa8 	.word	0x08009aa8
 80023e4:	20000a34 	.word	0x20000a34

080023e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <MFRC522_WriteRegister>:
#include "string.h"
#include "stm32f4xx_hal.h"

extern SPI_HandleTypeDef hspi1;

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	460a      	mov	r2, r1
 8002402:	71fb      	strb	r3, [r7, #7]
 8002404:	4613      	mov	r3, r2
 8002406:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = (addr << 1) & 0x7E;
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002412:	b2db      	uxtb	r3, r3
 8002414:	733b      	strb	r3, [r7, #12]
	data[1] = val;
 8002416:	79bb      	ldrb	r3, [r7, #6]
 8002418:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_RESET);
 800241a:	2200      	movs	r2, #0
 800241c:	2104      	movs	r1, #4
 800241e:	480f      	ldr	r0, [pc, #60]	@ (800245c <MFRC522_WriteRegister+0x64>)
 8002420:	f001 fdd6 	bl	8003fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);
 8002424:	2201      	movs	r2, #1
 8002426:	2104      	movs	r1, #4
 8002428:	480c      	ldr	r0, [pc, #48]	@ (800245c <MFRC522_WriteRegister+0x64>)
 800242a:	f001 fdd1 	bl	8003fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // NSS = LOW
 800242e:	2200      	movs	r2, #0
 8002430:	2110      	movs	r1, #16
 8002432:	480b      	ldr	r0, [pc, #44]	@ (8002460 <MFRC522_WriteRegister+0x68>)
 8002434:	f001 fdcc 	bl	8003fd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 8002438:	f107 010c 	add.w	r1, r7, #12
 800243c:	f04f 33ff 	mov.w	r3, #4294967295
 8002440:	2202      	movs	r2, #2
 8002442:	4808      	ldr	r0, [pc, #32]	@ (8002464 <MFRC522_WriteRegister+0x6c>)
 8002444:	f002 ffb5 	bl	80053b2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // NSS = HIGH
 8002448:	2201      	movs	r2, #1
 800244a:	2110      	movs	r1, #16
 800244c:	4804      	ldr	r0, [pc, #16]	@ (8002460 <MFRC522_WriteRegister+0x68>)
 800244e:	f001 fdbf 	bl	8003fd0 <HAL_GPIO_WritePin>
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40020400 	.word	0x40020400
 8002460:	40020000 	.word	0x40020000
 8002464:	20000994 	.word	0x20000994

08002468 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
	uint8_t tx = ((addr << 1) & 0x7E) | 0x80;
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	b25b      	sxtb	r3, r3
 800247a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800247e:	b25b      	sxtb	r3, r3
 8002480:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002484:	b25b      	sxtb	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	73fb      	strb	r3, [r7, #15]
	uint8_t rx;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800248a:	2200      	movs	r2, #0
 800248c:	2110      	movs	r1, #16
 800248e:	480e      	ldr	r0, [pc, #56]	@ (80024c8 <MFRC522_ReadRegister+0x60>)
 8002490:	f001 fd9e 	bl	8003fd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 8002494:	f107 010f 	add.w	r1, r7, #15
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
 800249c:	2201      	movs	r2, #1
 800249e:	480b      	ldr	r0, [pc, #44]	@ (80024cc <MFRC522_ReadRegister+0x64>)
 80024a0:	f002 ff87 	bl	80053b2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 80024a4:	f107 010e 	add.w	r1, r7, #14
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ac:	2201      	movs	r2, #1
 80024ae:	4807      	ldr	r0, [pc, #28]	@ (80024cc <MFRC522_ReadRegister+0x64>)
 80024b0:	f003 f8c3 	bl	800563a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80024b4:	2201      	movs	r2, #1
 80024b6:	2110      	movs	r1, #16
 80024b8:	4803      	ldr	r0, [pc, #12]	@ (80024c8 <MFRC522_ReadRegister+0x60>)
 80024ba:	f001 fd89 	bl	8003fd0 <HAL_GPIO_WritePin>
	return rx;
 80024be:	7bbb      	ldrb	r3, [r7, #14]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40020000 	.word	0x40020000
 80024cc:	20000994 	.word	0x20000994

080024d0 <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	460a      	mov	r2, r1
 80024da:	71fb      	strb	r3, [r7, #7]
 80024dc:	4613      	mov	r3, r2
 80024de:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = MFRC522_ReadRegister(reg);
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ffc0 	bl	8002468 <MFRC522_ReadRegister>
 80024e8:	4603      	mov	r3, r0
 80024ea:	73fb      	strb	r3, [r7, #15]
	MFRC522_WriteRegister(reg, tmp | mask);
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	79bb      	ldrb	r3, [r7, #6]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff7d 	bl	80023f8 <MFRC522_WriteRegister>
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask) {
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	460a      	mov	r2, r1
 8002510:	71fb      	strb	r3, [r7, #7]
 8002512:	4613      	mov	r3, r2
 8002514:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = MFRC522_ReadRegister(reg);
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ffa5 	bl	8002468 <MFRC522_ReadRegister>
 800251e:	4603      	mov	r3, r0
 8002520:	73fb      	strb	r3, [r7, #15]
	MFRC522_WriteRegister(reg, tmp & (~mask));
 8002522:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002526:	43db      	mvns	r3, r3
 8002528:	b25a      	sxtb	r2, r3
 800252a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252e:	4013      	ands	r3, r2
 8002530:	b25b      	sxtb	r3, r3
 8002532:	b2da      	uxtb	r2, r3
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff ff5d 	bl	80023f8 <MFRC522_WriteRegister>
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
	uint8_t temp = MFRC522_ReadRegister(TxControlReg);
 800254c:	2014      	movs	r0, #20
 800254e:	f7ff ff8b 	bl	8002468 <MFRC522_ReadRegister>
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d103      	bne.n	8002568 <MFRC522_AntennaOn+0x22>
		MFRC522_SetBitMask(TxControlReg, 0x03);
 8002560:	2103      	movs	r1, #3
 8002562:	2014      	movs	r0, #20
 8002564:	f7ff ffb4 	bl	80024d0 <MFRC522_SetBitMask>
	}
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(CommandReg, PCD_RESETPHASE);
 8002574:	210f      	movs	r1, #15
 8002576:	2001      	movs	r0, #1
 8002578:	f7ff ff3e 	bl	80023f8 <MFRC522_WriteRegister>
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}

08002580 <MFRC522_Init>:

void MFRC522_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
    // ① RST 핀으로 리셋 신호 제공
    HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_RESET);
 8002584:	2200      	movs	r2, #0
 8002586:	2104      	movs	r1, #4
 8002588:	4815      	ldr	r0, [pc, #84]	@ (80025e0 <MFRC522_Init+0x60>)
 800258a:	f001 fd21 	bl	8003fd0 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800258e:	2032      	movs	r0, #50	@ 0x32
 8002590:	f000 fd4e 	bl	8003030 <HAL_Delay>
    HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);
 8002594:	2201      	movs	r2, #1
 8002596:	2104      	movs	r1, #4
 8002598:	4811      	ldr	r0, [pc, #68]	@ (80025e0 <MFRC522_Init+0x60>)
 800259a:	f001 fd19 	bl	8003fd0 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800259e:	2032      	movs	r0, #50	@ 0x32
 80025a0:	f000 fd46 	bl	8003030 <HAL_Delay>

    // ② 소프트웨어 초기화
    MFRC522_Reset();
 80025a4:	f7ff ffe4 	bl	8002570 <MFRC522_Reset>

    MFRC522_WriteRegister(TModeReg, 0x8D);
 80025a8:	218d      	movs	r1, #141	@ 0x8d
 80025aa:	202a      	movs	r0, #42	@ 0x2a
 80025ac:	f7ff ff24 	bl	80023f8 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(TPrescalerReg, 0x3E);
 80025b0:	213e      	movs	r1, #62	@ 0x3e
 80025b2:	202b      	movs	r0, #43	@ 0x2b
 80025b4:	f7ff ff20 	bl	80023f8 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(TReloadRegL, 30);
 80025b8:	211e      	movs	r1, #30
 80025ba:	202d      	movs	r0, #45	@ 0x2d
 80025bc:	f7ff ff1c 	bl	80023f8 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(TReloadRegH, 0);
 80025c0:	2100      	movs	r1, #0
 80025c2:	202c      	movs	r0, #44	@ 0x2c
 80025c4:	f7ff ff18 	bl	80023f8 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(TxASKReg, 0x40);
 80025c8:	2140      	movs	r1, #64	@ 0x40
 80025ca:	2015      	movs	r0, #21
 80025cc:	f7ff ff14 	bl	80023f8 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(ModeReg, 0x3D);
 80025d0:	213d      	movs	r1, #61	@ 0x3d
 80025d2:	2011      	movs	r0, #17
 80025d4:	f7ff ff10 	bl	80023f8 <MFRC522_WriteRegister>

    // ③ 안테나 켜기
    MFRC522_AntennaOn();
 80025d8:	f7ff ffb5 	bl	8002546 <MFRC522_AntennaOn>
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40020400 	.word	0x40020400

080025e4 <MFRC522_Request>:


char MFRC522_Request(uint8_t reqMode, uint8_t *TagType) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
	char status;
	uint16_t backBits;

	MFRC522_WriteRegister(BitFramingReg, 0x07);
 80025f0:	2107      	movs	r1, #7
 80025f2:	200d      	movs	r0, #13
 80025f4:	f7ff ff00 	bl	80023f8 <MFRC522_WriteRegister>

	TagType[0] = reqMode;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	79fa      	ldrb	r2, [r7, #7]
 80025fc:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80025fe:	f107 030c 	add.w	r3, r7, #12
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	2201      	movs	r2, #1
 8002608:	6839      	ldr	r1, [r7, #0]
 800260a:	200c      	movs	r0, #12
 800260c:	f000 f80f 	bl	800262e <MFRC522_ToCard>
 8002610:	4603      	mov	r3, r0
 8002612:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <MFRC522_Request+0x3c>
 800261a:	89bb      	ldrh	r3, [r7, #12]
 800261c:	2b10      	cmp	r3, #16
 800261e:	d001      	beq.n	8002624 <MFRC522_Request+0x40>
		status = MI_ERR;
 8002620:	2302      	movs	r3, #2
 8002622:	73fb      	strb	r3, [r7, #15]

	return status;
 8002624:	7bfb      	ldrb	r3, [r7, #15]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <MFRC522_ToCard>:

char MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen,
					uint8_t *backData, uint16_t *backLen) {
 800262e:	b590      	push	{r4, r7, lr}
 8002630:	b087      	sub	sp, #28
 8002632:	af00      	add	r7, sp, #0
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	4603      	mov	r3, r0
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	4613      	mov	r3, r2
 800263e:	73bb      	strb	r3, [r7, #14]
	char status = MI_ERR;
 8002640:	2302      	movs	r3, #2
 8002642:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8002644:	2300      	movs	r3, #0
 8002646:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8002648:	2300      	movs	r3, #0
 800264a:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b0c      	cmp	r3, #12
 8002650:	d006      	beq.n	8002660 <MFRC522_ToCard+0x32>
 8002652:	2b0e      	cmp	r3, #14
 8002654:	d109      	bne.n	800266a <MFRC522_ToCard+0x3c>
	case PCD_AUTHENT:
		irqEn = 0x12;
 8002656:	2312      	movs	r3, #18
 8002658:	75bb      	strb	r3, [r7, #22]
		waitIRq = 0x10;
 800265a:	2310      	movs	r3, #16
 800265c:	757b      	strb	r3, [r7, #21]
		break;
 800265e:	e004      	b.n	800266a <MFRC522_ToCard+0x3c>
	case PCD_TRANSCEIVE:
		irqEn = 0x77;
 8002660:	2377      	movs	r3, #119	@ 0x77
 8002662:	75bb      	strb	r3, [r7, #22]
		waitIRq = 0x30;
 8002664:	2330      	movs	r3, #48	@ 0x30
 8002666:	757b      	strb	r3, [r7, #21]
		break;
 8002668:	bf00      	nop
	}

	MFRC522_WriteRegister(CommIEnReg, irqEn | 0x80);
 800266a:	7dbb      	ldrb	r3, [r7, #22]
 800266c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002670:	b2db      	uxtb	r3, r3
 8002672:	4619      	mov	r1, r3
 8002674:	2002      	movs	r0, #2
 8002676:	f7ff febf 	bl	80023f8 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(CommIrqReg, 0x80);
 800267a:	2180      	movs	r1, #128	@ 0x80
 800267c:	2004      	movs	r0, #4
 800267e:	f7ff ff42 	bl	8002506 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(FIFOLevelReg, 0x80);
 8002682:	2180      	movs	r1, #128	@ 0x80
 8002684:	200a      	movs	r0, #10
 8002686:	f7ff ff23 	bl	80024d0 <MFRC522_SetBitMask>

	MFRC522_WriteRegister(CommandReg, PCD_IDLE);
 800268a:	2100      	movs	r1, #0
 800268c:	2001      	movs	r0, #1
 800268e:	f7ff feb3 	bl	80023f8 <MFRC522_WriteRegister>

	for (i = 0; i < sendLen; i++) {
 8002692:	2300      	movs	r3, #0
 8002694:	827b      	strh	r3, [r7, #18]
 8002696:	e00a      	b.n	80026ae <MFRC522_ToCard+0x80>
		MFRC522_WriteRegister(FIFODataReg, sendData[i]);
 8002698:	8a7b      	ldrh	r3, [r7, #18]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	4413      	add	r3, r2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	2009      	movs	r0, #9
 80026a4:	f7ff fea8 	bl	80023f8 <MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 80026a8:	8a7b      	ldrh	r3, [r7, #18]
 80026aa:	3301      	adds	r3, #1
 80026ac:	827b      	strh	r3, [r7, #18]
 80026ae:	7bbb      	ldrb	r3, [r7, #14]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	8a7a      	ldrh	r2, [r7, #18]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d3ef      	bcc.n	8002698 <MFRC522_ToCard+0x6a>
	}
	MFRC522_WriteRegister(CommandReg, command);
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	4619      	mov	r1, r3
 80026bc:	2001      	movs	r0, #1
 80026be:	f7ff fe9b 	bl	80023f8 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b0c      	cmp	r3, #12
 80026c6:	d103      	bne.n	80026d0 <MFRC522_ToCard+0xa2>
		MFRC522_SetBitMask(BitFramingReg, 0x80);
 80026c8:	2180      	movs	r1, #128	@ 0x80
 80026ca:	200d      	movs	r0, #13
 80026cc:	f7ff ff00 	bl	80024d0 <MFRC522_SetBitMask>
	}

	i = 2000;
 80026d0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80026d4:	827b      	strh	r3, [r7, #18]
	do {
		n = MFRC522_ReadRegister(CommIrqReg);
 80026d6:	2004      	movs	r0, #4
 80026d8:	f7ff fec6 	bl	8002468 <MFRC522_ReadRegister>
 80026dc:	4603      	mov	r3, r0
 80026de:	747b      	strb	r3, [r7, #17]
		i--;
 80026e0:	8a7b      	ldrh	r3, [r7, #18]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	827b      	strh	r3, [r7, #18]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 80026e6:	8a7b      	ldrh	r3, [r7, #18]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <MFRC522_ToCard+0xd4>
 80026ec:	7c7b      	ldrb	r3, [r7, #17]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d105      	bne.n	8002702 <MFRC522_ToCard+0xd4>
 80026f6:	7c7a      	ldrb	r2, [r7, #17]
 80026f8:	7d7b      	ldrb	r3, [r7, #21]
 80026fa:	4013      	ands	r3, r2
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0e9      	beq.n	80026d6 <MFRC522_ToCard+0xa8>

	MFRC522_ClearBitMask(BitFramingReg, 0x80);
 8002702:	2180      	movs	r1, #128	@ 0x80
 8002704:	200d      	movs	r0, #13
 8002706:	f7ff fefe 	bl	8002506 <MFRC522_ClearBitMask>

	if (i != 0) {
 800270a:	8a7b      	ldrh	r3, [r7, #18]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d04a      	beq.n	80027a6 <MFRC522_ToCard+0x178>
		if (!(MFRC522_ReadRegister(ErrorReg) & 0x1B)) {
 8002710:	2006      	movs	r0, #6
 8002712:	f7ff fea9 	bl	8002468 <MFRC522_ReadRegister>
 8002716:	4603      	mov	r3, r0
 8002718:	f003 031b 	and.w	r3, r3, #27
 800271c:	2b00      	cmp	r3, #0
 800271e:	d142      	bne.n	80027a6 <MFRC522_ToCard+0x178>
			status = MI_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01)
 8002724:	7c7a      	ldrb	r2, [r7, #17]
 8002726:	7dbb      	ldrb	r3, [r7, #22]
 8002728:	4013      	ands	r3, r2
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MFRC522_ToCard+0x10a>
				status = MI_NOTAGERR;
 8002734:	2301      	movs	r3, #1
 8002736:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b0c      	cmp	r3, #12
 800273c:	d133      	bne.n	80027a6 <MFRC522_ToCard+0x178>
				n = MFRC522_ReadRegister(FIFOLevelReg);
 800273e:	200a      	movs	r0, #10
 8002740:	f7ff fe92 	bl	8002468 <MFRC522_ReadRegister>
 8002744:	4603      	mov	r3, r0
 8002746:	747b      	strb	r3, [r7, #17]
				lastBits = MFRC522_ReadRegister(ControlReg) & 0x07;
 8002748:	200c      	movs	r0, #12
 800274a:	f7ff fe8d 	bl	8002468 <MFRC522_ReadRegister>
 800274e:	4603      	mov	r3, r0
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	743b      	strb	r3, [r7, #16]
				if (lastBits)
 8002756:	7c3b      	ldrb	r3, [r7, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00b      	beq.n	8002774 <MFRC522_ToCard+0x146>
					*backLen = (n - 1) * 8 + lastBits;
 800275c:	7c7b      	ldrb	r3, [r7, #17]
 800275e:	3b01      	subs	r3, #1
 8002760:	b29b      	uxth	r3, r3
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	b29a      	uxth	r2, r3
 8002766:	7c3b      	ldrb	r3, [r7, #16]
 8002768:	b29b      	uxth	r3, r3
 800276a:	4413      	add	r3, r2
 800276c:	b29a      	uxth	r2, r3
 800276e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002770:	801a      	strh	r2, [r3, #0]
 8002772:	e005      	b.n	8002780 <MFRC522_ToCard+0x152>
				else
					*backLen = n * 8;
 8002774:	7c7b      	ldrb	r3, [r7, #17]
 8002776:	b29b      	uxth	r3, r3
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	b29a      	uxth	r2, r3
 800277c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277e:	801a      	strh	r2, [r3, #0]
				for (i = 0; i < n; i++) {
 8002780:	2300      	movs	r3, #0
 8002782:	827b      	strh	r3, [r7, #18]
 8002784:	e00a      	b.n	800279c <MFRC522_ToCard+0x16e>
					backData[i] = MFRC522_ReadRegister(FIFODataReg);
 8002786:	8a7b      	ldrh	r3, [r7, #18]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	18d4      	adds	r4, r2, r3
 800278c:	2009      	movs	r0, #9
 800278e:	f7ff fe6b 	bl	8002468 <MFRC522_ReadRegister>
 8002792:	4603      	mov	r3, r0
 8002794:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8002796:	8a7b      	ldrh	r3, [r7, #18]
 8002798:	3301      	adds	r3, #1
 800279a:	827b      	strh	r3, [r7, #18]
 800279c:	7c7b      	ldrb	r3, [r7, #17]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	8a7a      	ldrh	r2, [r7, #18]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d3ef      	bcc.n	8002786 <MFRC522_ToCard+0x158>
				}
			}
		}
	}
	return status;
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd90      	pop	{r4, r7, pc}

080027b0 <MFRC522_Anticoll>:

char MFRC522_Anticoll(uint8_t *serNum) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	6078      	str	r0, [r7, #4]
	char status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(BitFramingReg, 0x00);
 80027bc:	2100      	movs	r1, #0
 80027be:	200d      	movs	r0, #13
 80027c0:	f7ff fe1a 	bl	80023f8 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2293      	movs	r2, #147	@ 0x93
 80027c8:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3301      	adds	r3, #1
 80027ce:	2220      	movs	r2, #32
 80027d0:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80027d2:	f107 030a 	add.w	r3, r7, #10
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	200c      	movs	r0, #12
 80027e0:	f7ff ff25 	bl	800262e <MFRC522_ToCard>
 80027e4:	4603      	mov	r3, r0
 80027e6:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d117      	bne.n	800281e <MFRC522_Anticoll+0x6e>
		for (i = 0; i < 4; i++) {
 80027ee:	2300      	movs	r3, #0
 80027f0:	73bb      	strb	r3, [r7, #14]
 80027f2:	e009      	b.n	8002808 <MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 80027f4:	7bbb      	ldrb	r3, [r7, #14]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	781a      	ldrb	r2, [r3, #0]
 80027fc:	7b7b      	ldrb	r3, [r7, #13]
 80027fe:	4053      	eors	r3, r2
 8002800:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8002802:	7bbb      	ldrb	r3, [r7, #14]
 8002804:	3301      	adds	r3, #1
 8002806:	73bb      	strb	r3, [r7, #14]
 8002808:	7bbb      	ldrb	r3, [r7, #14]
 800280a:	2b03      	cmp	r3, #3
 800280c:	d9f2      	bls.n	80027f4 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[4])
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3304      	adds	r3, #4
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	7b7a      	ldrb	r2, [r7, #13]
 8002816:	429a      	cmp	r2, r3
 8002818:	d001      	beq.n	800281e <MFRC522_Anticoll+0x6e>
			status = MI_ERR;
 800281a:	2302      	movs	r3, #2
 800281c:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <MFRC522_Check>:

char MFRC522_Check(uint8_t *id)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
    char status;
    uint8_t type[2];

    // ① 카드가 감지되는지 먼저 확인 (Request)
    status = MFRC522_Request(PICC_REQIDL, type);
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	4619      	mov	r1, r3
 8002836:	2026      	movs	r0, #38	@ 0x26
 8002838:	f7ff fed4 	bl	80025e4 <MFRC522_Request>
 800283c:	4603      	mov	r3, r0
 800283e:	73fb      	strb	r3, [r7, #15]
    if (status != MI_OK)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MFRC522_Check+0x22>
        return MI_ERR; // 카드 없음
 8002846:	2302      	movs	r3, #2
 8002848:	e00a      	b.n	8002860 <MFRC522_Check+0x38>

    // ② UID 읽기 (Anti-collision)
    status = MFRC522_Anticoll(id);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ffb0 	bl	80027b0 <MFRC522_Anticoll>
 8002850:	4603      	mov	r3, r0
 8002852:	73fb      	strb	r3, [r7, #15]
    if (status != MI_OK)
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MFRC522_Check+0x36>
        return MI_ERR; // UID 읽기 실패
 800285a:	2302      	movs	r3, #2
 800285c:	e000      	b.n	8002860 <MFRC522_Check+0x38>

    return MI_OK; // 성공
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <HAL_MspInit+0x4c>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	4a0f      	ldr	r2, [pc, #60]	@ (80028b4 <HAL_MspInit+0x4c>)
 8002878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800287c:	6453      	str	r3, [r2, #68]	@ 0x44
 800287e:	4b0d      	ldr	r3, [pc, #52]	@ (80028b4 <HAL_MspInit+0x4c>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	603b      	str	r3, [r7, #0]
 800288e:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <HAL_MspInit+0x4c>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	4a08      	ldr	r2, [pc, #32]	@ (80028b4 <HAL_MspInit+0x4c>)
 8002894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002898:	6413      	str	r3, [r2, #64]	@ 0x40
 800289a:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HAL_MspInit+0x4c>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028a6:	2007      	movs	r0, #7
 80028a8:	f001 f922 	bl	8003af0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40023800 	.word	0x40023800

080028b8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	@ 0x28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002944 <HAL_ADC_MspInit+0x8c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d12f      	bne.n	800293a <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	4b1a      	ldr	r3, [pc, #104]	@ (8002948 <HAL_ADC_MspInit+0x90>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	4a19      	ldr	r2, [pc, #100]	@ (8002948 <HAL_ADC_MspInit+0x90>)
 80028e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ea:	4b17      	ldr	r3, [pc, #92]	@ (8002948 <HAL_ADC_MspInit+0x90>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <HAL_ADC_MspInit+0x90>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	4a12      	ldr	r2, [pc, #72]	@ (8002948 <HAL_ADC_MspInit+0x90>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6313      	str	r3, [r2, #48]	@ 0x30
 8002906:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <HAL_ADC_MspInit+0x90>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002912:	2301      	movs	r3, #1
 8002914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002916:	2303      	movs	r3, #3
 8002918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	4809      	ldr	r0, [pc, #36]	@ (800294c <HAL_ADC_MspInit+0x94>)
 8002926:	f001 f9b7 	bl	8003c98 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	2012      	movs	r0, #18
 8002930:	f001 f8e9 	bl	8003b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002934:	2012      	movs	r0, #18
 8002936:	f001 f902 	bl	8003b3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800293a:	bf00      	nop
 800293c:	3728      	adds	r7, #40	@ 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40012000 	.word	0x40012000
 8002948:	40023800 	.word	0x40023800
 800294c:	40020000 	.word	0x40020000

08002950 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	@ 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a19      	ldr	r2, [pc, #100]	@ (80029d4 <HAL_I2C_MspInit+0x84>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d12c      	bne.n	80029cc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	4b18      	ldr	r3, [pc, #96]	@ (80029d8 <HAL_I2C_MspInit+0x88>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	4a17      	ldr	r2, [pc, #92]	@ (80029d8 <HAL_I2C_MspInit+0x88>)
 800297c:	f043 0302 	orr.w	r3, r3, #2
 8002980:	6313      	str	r3, [r2, #48]	@ 0x30
 8002982:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <HAL_I2C_MspInit+0x88>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800298e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002994:	2312      	movs	r3, #18
 8002996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029a0:	2304      	movs	r3, #4
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	4619      	mov	r1, r3
 80029aa:	480c      	ldr	r0, [pc, #48]	@ (80029dc <HAL_I2C_MspInit+0x8c>)
 80029ac:	f001 f974 	bl	8003c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <HAL_I2C_MspInit+0x88>)
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	4a07      	ldr	r2, [pc, #28]	@ (80029d8 <HAL_I2C_MspInit+0x88>)
 80029ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029be:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c0:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_I2C_MspInit+0x88>)
 80029c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80029cc:	bf00      	nop
 80029ce:	3728      	adds	r7, #40	@ 0x28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40005400 	.word	0x40005400
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40020400 	.word	0x40020400

080029e0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	@ 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a19      	ldr	r2, [pc, #100]	@ (8002a64 <HAL_SPI_MspInit+0x84>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d12b      	bne.n	8002a5a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	4b18      	ldr	r3, [pc, #96]	@ (8002a68 <HAL_SPI_MspInit+0x88>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0a:	4a17      	ldr	r2, [pc, #92]	@ (8002a68 <HAL_SPI_MspInit+0x88>)
 8002a0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a12:	4b15      	ldr	r3, [pc, #84]	@ (8002a68 <HAL_SPI_MspInit+0x88>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <HAL_SPI_MspInit+0x88>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a10      	ldr	r2, [pc, #64]	@ (8002a68 <HAL_SPI_MspInit+0x88>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a68 <HAL_SPI_MspInit+0x88>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a3a:	23e0      	movs	r3, #224	@ 0xe0
 8002a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a4a:	2305      	movs	r3, #5
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	4805      	ldr	r0, [pc, #20]	@ (8002a6c <HAL_SPI_MspInit+0x8c>)
 8002a56:	f001 f91f 	bl	8003c98 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002a5a:	bf00      	nop
 8002a5c:	3728      	adds	r7, #40	@ 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40013000 	.word	0x40013000
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020000 	.word	0x40020000

08002a70 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab8 <HAL_TIM_Base_MspInit+0x48>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d115      	bne.n	8002aae <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	4b0d      	ldr	r3, [pc, #52]	@ (8002abc <HAL_TIM_Base_MspInit+0x4c>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002abc <HAL_TIM_Base_MspInit+0x4c>)
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <HAL_TIM_Base_MspInit+0x4c>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	201d      	movs	r0, #29
 8002aa4:	f001 f82f 	bl	8003b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002aa8:	201d      	movs	r0, #29
 8002aaa:	f001 f848 	bl	8003b3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	40023800 	.word	0x40023800

08002ac0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0e      	ldr	r2, [pc, #56]	@ (8002b08 <HAL_TIM_PWM_MspInit+0x48>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d115      	bne.n	8002afe <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b0c <HAL_TIM_PWM_MspInit+0x4c>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	4a0c      	ldr	r2, [pc, #48]	@ (8002b0c <HAL_TIM_PWM_MspInit+0x4c>)
 8002adc:	f043 0304 	orr.w	r3, r3, #4
 8002ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <HAL_TIM_PWM_MspInit+0x4c>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	201e      	movs	r0, #30
 8002af4:	f001 f807 	bl	8003b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002af8:	201e      	movs	r0, #30
 8002afa:	f001 f820 	bl	8003b3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40000800 	.word	0x40000800
 8002b0c:	40023800 	.word	0x40023800

08002b10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 030c 	add.w	r3, r7, #12
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a12      	ldr	r2, [pc, #72]	@ (8002b78 <HAL_TIM_MspPostInit+0x68>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d11d      	bne.n	8002b6e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <HAL_TIM_MspPostInit+0x6c>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	4a10      	ldr	r2, [pc, #64]	@ (8002b7c <HAL_TIM_MspPostInit+0x6c>)
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b42:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <HAL_TIM_MspPostInit+0x6c>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = TIM4_PWM1_SERVO2_Pin|TIM4_PWM2_SERVO_Pin;
 8002b4e:	23c0      	movs	r3, #192	@ 0xc0
 8002b50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b62:	f107 030c 	add.w	r3, r7, #12
 8002b66:	4619      	mov	r1, r3
 8002b68:	4805      	ldr	r0, [pc, #20]	@ (8002b80 <HAL_TIM_MspPostInit+0x70>)
 8002b6a:	f001 f895 	bl	8003c98 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002b6e:	bf00      	nop
 8002b70:	3720      	adds	r7, #32
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40000800 	.word	0x40000800
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40020400 	.word	0x40020400

08002b84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08c      	sub	sp, #48	@ 0x30
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 031c 	add.w	r3, r7, #28
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a36      	ldr	r2, [pc, #216]	@ (8002c7c <HAL_UART_MspInit+0xf8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d12c      	bne.n	8002c00 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	4b35      	ldr	r3, [pc, #212]	@ (8002c80 <HAL_UART_MspInit+0xfc>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	4a34      	ldr	r2, [pc, #208]	@ (8002c80 <HAL_UART_MspInit+0xfc>)
 8002bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bb6:	4b32      	ldr	r3, [pc, #200]	@ (8002c80 <HAL_UART_MspInit+0xfc>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8002c80 <HAL_UART_MspInit+0xfc>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	4a2d      	ldr	r2, [pc, #180]	@ (8002c80 <HAL_UART_MspInit+0xfc>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c80 <HAL_UART_MspInit+0xfc>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bde:	230c      	movs	r3, #12
 8002be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bea:	2303      	movs	r3, #3
 8002bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bee:	2307      	movs	r3, #7
 8002bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf2:	f107 031c 	add.w	r3, r7, #28
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4822      	ldr	r0, [pc, #136]	@ (8002c84 <HAL_UART_MspInit+0x100>)
 8002bfa:	f001 f84d 	bl	8003c98 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002bfe:	e039      	b.n	8002c74 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a20      	ldr	r2, [pc, #128]	@ (8002c88 <HAL_UART_MspInit+0x104>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d134      	bne.n	8002c74 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c80 <HAL_UART_MspInit+0xfc>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c12:	4a1b      	ldr	r2, [pc, #108]	@ (8002c80 <HAL_UART_MspInit+0xfc>)
 8002c14:	f043 0320 	orr.w	r3, r3, #32
 8002c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c1a:	4b19      	ldr	r3, [pc, #100]	@ (8002c80 <HAL_UART_MspInit+0xfc>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <HAL_UART_MspInit+0xfc>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	4a14      	ldr	r2, [pc, #80]	@ (8002c80 <HAL_UART_MspInit+0xfc>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c36:	4b12      	ldr	r3, [pc, #72]	@ (8002c80 <HAL_UART_MspInit+0xfc>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c42:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c50:	2303      	movs	r3, #3
 8002c52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c54:	2308      	movs	r3, #8
 8002c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c58:	f107 031c 	add.w	r3, r7, #28
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4809      	ldr	r0, [pc, #36]	@ (8002c84 <HAL_UART_MspInit+0x100>)
 8002c60:	f001 f81a 	bl	8003c98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002c64:	2200      	movs	r2, #0
 8002c66:	2100      	movs	r1, #0
 8002c68:	2047      	movs	r0, #71	@ 0x47
 8002c6a:	f000 ff4c 	bl	8003b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002c6e:	2047      	movs	r0, #71	@ 0x47
 8002c70:	f000 ff65 	bl	8003b3e <HAL_NVIC_EnableIRQ>
}
 8002c74:	bf00      	nop
 8002c76:	3730      	adds	r7, #48	@ 0x30
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40004400 	.word	0x40004400
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020000 	.word	0x40020000
 8002c88:	40011400 	.word	0x40011400

08002c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <NMI_Handler+0x4>

08002c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <HardFault_Handler+0x4>

08002c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <MemManage_Handler+0x4>

08002ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <BusFault_Handler+0x4>

08002cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <UsageFault_Handler+0x4>

08002cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ce2:	f000 f985 	bl	8002ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_Pin);
 8002cee:	2002      	movs	r0, #2
 8002cf0:	f001 f988 	bl	8004004 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002cf4:	bf00      	nop
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002cfc:	4802      	ldr	r0, [pc, #8]	@ (8002d08 <ADC_IRQHandler+0x10>)
 8002cfe:	f000 fabd 	bl	800327c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200008f8 	.word	0x200008f8

08002d0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d10:	4802      	ldr	r0, [pc, #8]	@ (8002d1c <TIM3_IRQHandler+0x10>)
 8002d12:	f003 fa49 	bl	80061a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	200009ec 	.word	0x200009ec

08002d20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d24:	4802      	ldr	r0, [pc, #8]	@ (8002d30 <TIM4_IRQHandler+0x10>)
 8002d26:	f003 fa3f 	bl	80061a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000a34 	.word	0x20000a34

08002d34 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002d38:	4802      	ldr	r0, [pc, #8]	@ (8002d44 <USART6_IRQHandler+0x10>)
 8002d3a:	f004 f92b 	bl	8006f94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000ac4 	.word	0x20000ac4

08002d48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return 1;
 8002d4c:	2301      	movs	r3, #1
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <_kill>:

int _kill(int pid, int sig)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d62:	f005 fb97 	bl	8008494 <__errno>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2216      	movs	r2, #22
 8002d6a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <_exit>:

void _exit (int status)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d80:	f04f 31ff 	mov.w	r1, #4294967295
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ffe7 	bl	8002d58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d8a:	bf00      	nop
 8002d8c:	e7fd      	b.n	8002d8a <_exit+0x12>

08002d8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b086      	sub	sp, #24
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e00a      	b.n	8002db6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002da0:	f3af 8000 	nop.w
 8002da4:	4601      	mov	r1, r0
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	60ba      	str	r2, [r7, #8]
 8002dac:	b2ca      	uxtb	r2, r1
 8002dae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	3301      	adds	r3, #1
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	dbf0      	blt.n	8002da0 <_read+0x12>
  }

  return len;
 8002dbe:	687b      	ldr	r3, [r7, #4]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	e009      	b.n	8002dee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	60ba      	str	r2, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe f946 	bl	8001074 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	3301      	adds	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	dbf1      	blt.n	8002dda <_write+0x12>
  }
  return len;
 8002df6:	687b      	ldr	r3, [r7, #4]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <_close>:

int _close(int file)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e28:	605a      	str	r2, [r3, #4]
  return 0;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <_isatty>:

int _isatty(int file)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e40:	2301      	movs	r3, #1
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e70:	4a14      	ldr	r2, [pc, #80]	@ (8002ec4 <_sbrk+0x5c>)
 8002e72:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <_sbrk+0x60>)
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e7c:	4b13      	ldr	r3, [pc, #76]	@ (8002ecc <_sbrk+0x64>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e84:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <_sbrk+0x64>)
 8002e86:	4a12      	ldr	r2, [pc, #72]	@ (8002ed0 <_sbrk+0x68>)
 8002e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ecc <_sbrk+0x64>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d207      	bcs.n	8002ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e98:	f005 fafc 	bl	8008494 <__errno>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea6:	e009      	b.n	8002ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ea8:	4b08      	ldr	r3, [pc, #32]	@ (8002ecc <_sbrk+0x64>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eae:	4b07      	ldr	r3, [pc, #28]	@ (8002ecc <_sbrk+0x64>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	4a05      	ldr	r2, [pc, #20]	@ (8002ecc <_sbrk+0x64>)
 8002eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eba:	68fb      	ldr	r3, [r7, #12]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20020000 	.word	0x20020000
 8002ec8:	00000400 	.word	0x00000400
 8002ecc:	20000c7c 	.word	0x20000c7c
 8002ed0:	20000dd0 	.word	0x20000dd0

08002ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ed8:	4b06      	ldr	r3, [pc, #24]	@ (8002ef4 <SystemInit+0x20>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ede:	4a05      	ldr	r2, [pc, #20]	@ (8002ef4 <SystemInit+0x20>)
 8002ee0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ee4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ef8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002efc:	f7ff ffea 	bl	8002ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f00:	480c      	ldr	r0, [pc, #48]	@ (8002f34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f02:	490d      	ldr	r1, [pc, #52]	@ (8002f38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f04:	4a0d      	ldr	r2, [pc, #52]	@ (8002f3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f08:	e002      	b.n	8002f10 <LoopCopyDataInit>

08002f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f0e:	3304      	adds	r3, #4

08002f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f14:	d3f9      	bcc.n	8002f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f16:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f18:	4c0a      	ldr	r4, [pc, #40]	@ (8002f44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f1c:	e001      	b.n	8002f22 <LoopFillZerobss>

08002f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f20:	3204      	adds	r2, #4

08002f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f24:	d3fb      	bcc.n	8002f1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f26:	f005 fabb 	bl	80084a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f2a:	f7fe f8bb 	bl	80010a4 <main>
  bx  lr    
 8002f2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f38:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002f3c:	08009bcc 	.word	0x08009bcc
  ldr r2, =_sbss
 8002f40:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002f44:	20000dd0 	.word	0x20000dd0

08002f48 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f48:	e7fe      	b.n	8002f48 <DMA1_Stream0_IRQHandler>
	...

08002f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f50:	4b0e      	ldr	r3, [pc, #56]	@ (8002f8c <HAL_Init+0x40>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0d      	ldr	r2, [pc, #52]	@ (8002f8c <HAL_Init+0x40>)
 8002f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <HAL_Init+0x40>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0a      	ldr	r2, [pc, #40]	@ (8002f8c <HAL_Init+0x40>)
 8002f62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f68:	4b08      	ldr	r3, [pc, #32]	@ (8002f8c <HAL_Init+0x40>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a07      	ldr	r2, [pc, #28]	@ (8002f8c <HAL_Init+0x40>)
 8002f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f74:	2003      	movs	r0, #3
 8002f76:	f000 fdbb 	bl	8003af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f000 f808 	bl	8002f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f80:	f7ff fc72 	bl	8002868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40023c00 	.word	0x40023c00

08002f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f98:	4b12      	ldr	r3, [pc, #72]	@ (8002fe4 <HAL_InitTick+0x54>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b12      	ldr	r3, [pc, #72]	@ (8002fe8 <HAL_InitTick+0x58>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fdd3 	bl	8003b5a <HAL_SYSTICK_Config>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e00e      	b.n	8002fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b0f      	cmp	r3, #15
 8002fc2:	d80a      	bhi.n	8002fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	f000 fd9b 	bl	8003b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fd0:	4a06      	ldr	r2, [pc, #24]	@ (8002fec <HAL_InitTick+0x5c>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e000      	b.n	8002fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	2000001c 	.word	0x2000001c
 8002fe8:	20000024 	.word	0x20000024
 8002fec:	20000020 	.word	0x20000020

08002ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ff4:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <HAL_IncTick+0x20>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <HAL_IncTick+0x24>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4413      	add	r3, r2
 8003000:	4a04      	ldr	r2, [pc, #16]	@ (8003014 <HAL_IncTick+0x24>)
 8003002:	6013      	str	r3, [r2, #0]
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000024 	.word	0x20000024
 8003014:	20000c80 	.word	0x20000c80

08003018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return uwTick;
 800301c:	4b03      	ldr	r3, [pc, #12]	@ (800302c <HAL_GetTick+0x14>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000c80 	.word	0x20000c80

08003030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003038:	f7ff ffee 	bl	8003018 <HAL_GetTick>
 800303c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d005      	beq.n	8003056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800304a:	4b0a      	ldr	r3, [pc, #40]	@ (8003074 <HAL_Delay+0x44>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003056:	bf00      	nop
 8003058:	f7ff ffde 	bl	8003018 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	429a      	cmp	r2, r3
 8003066:	d8f7      	bhi.n	8003058 <HAL_Delay+0x28>
  {
  }
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000024 	.word	0x20000024

08003078 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e033      	b.n	80030f6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff fc0e 	bl	80028b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d118      	bne.n	80030e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030be:	f023 0302 	bic.w	r3, r3, #2
 80030c2:	f043 0202 	orr.w	r2, r3, #2
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fb3a 	bl	8003744 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	f023 0303 	bic.w	r3, r3, #3
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80030e6:	e001      	b.n	80030ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_ADC_Start_IT+0x1a>
 8003116:	2302      	movs	r3, #2
 8003118:	e0a1      	b.n	800325e <HAL_ADC_Start_IT+0x15e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b01      	cmp	r3, #1
 800312e:	d018      	beq.n	8003162 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003140:	4b4a      	ldr	r3, [pc, #296]	@ (800326c <HAL_ADC_Start_IT+0x16c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a4a      	ldr	r2, [pc, #296]	@ (8003270 <HAL_ADC_Start_IT+0x170>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	0c9a      	lsrs	r2, r3, #18
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003154:	e002      	b.n	800315c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	3b01      	subs	r3, #1
 800315a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f9      	bne.n	8003156 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d169      	bne.n	8003244 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800319a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ae:	d106      	bne.n	80031be <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b4:	f023 0206 	bic.w	r2, r3, #6
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	645a      	str	r2, [r3, #68]	@ 0x44
 80031bc:	e002      	b.n	80031c4 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031cc:	4b29      	ldr	r3, [pc, #164]	@ (8003274 <HAL_ADC_Start_IT+0x174>)
 80031ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80031d8:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031e8:	f043 0320 	orr.w	r3, r3, #32
 80031ec:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10f      	bne.n	800321a <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d129      	bne.n	800325c <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	e020      	b.n	800325c <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a16      	ldr	r2, [pc, #88]	@ (8003278 <HAL_ADC_Start_IT+0x178>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d11b      	bne.n	800325c <HAL_ADC_Start_IT+0x15c>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d114      	bne.n	800325c <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003240:	609a      	str	r2, [r3, #8]
 8003242:	e00b      	b.n	800325c <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	f043 0210 	orr.w	r2, r3, #16
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003254:	f043 0201 	orr.w	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	2000001c 	.word	0x2000001c
 8003270:	431bde83 	.word	0x431bde83
 8003274:	40012300 	.word	0x40012300
 8003278:	40012000 	.word	0x40012000

0800327c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d049      	beq.n	8003346 <HAL_ADC_IRQHandler+0xca>
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d046      	beq.n	8003346 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d12b      	bne.n	8003336 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d127      	bne.n	8003336 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ec:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d006      	beq.n	8003302 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d119      	bne.n	8003336 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0220 	bic.w	r2, r2, #32
 8003310:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d105      	bne.n	8003336 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	f043 0201 	orr.w	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe ff44 	bl	80021c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0212 	mvn.w	r2, #18
 8003344:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003354:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d057      	beq.n	800340c <HAL_ADC_IRQHandler+0x190>
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d054      	beq.n	800340c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	d105      	bne.n	800337a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d139      	bne.n	80033fc <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d12b      	bne.n	80033fc <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d124      	bne.n	80033fc <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d11d      	bne.n	80033fc <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d119      	bne.n	80033fc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033d6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fa9d 	bl	800393c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f06f 020c 	mvn.w	r2, #12
 800340a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800341a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d017      	beq.n	8003452 <HAL_ADC_IRQHandler+0x1d6>
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d014      	beq.n	8003452 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b01      	cmp	r3, #1
 8003434:	d10d      	bne.n	8003452 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f837 	bl	80034b6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0201 	mvn.w	r2, #1
 8003450:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003460:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d015      	beq.n	8003494 <HAL_ADC_IRQHandler+0x218>
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d012      	beq.n	8003494 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	f043 0202 	orr.w	r2, r3, #2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f06f 0220 	mvn.w	r2, #32
 8003482:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f820 	bl	80034ca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f06f 0220 	mvn.w	r2, #32
 8003492:	601a      	str	r2, [r3, #0]
  }
}
 8003494:	bf00      	nop
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x1c>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e113      	b.n	8003724 <HAL_ADC_ConfigChannel+0x244>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b09      	cmp	r3, #9
 800350a:	d925      	bls.n	8003558 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68d9      	ldr	r1, [r3, #12]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	4613      	mov	r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	4413      	add	r3, r2
 8003520:	3b1e      	subs	r3, #30
 8003522:	2207      	movs	r2, #7
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43da      	mvns	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	400a      	ands	r2, r1
 8003530:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68d9      	ldr	r1, [r3, #12]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	4618      	mov	r0, r3
 8003544:	4603      	mov	r3, r0
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4403      	add	r3, r0
 800354a:	3b1e      	subs	r3, #30
 800354c:	409a      	lsls	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	e022      	b.n	800359e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6919      	ldr	r1, [r3, #16]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	2207      	movs	r2, #7
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43da      	mvns	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	400a      	ands	r2, r1
 800357a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6919      	ldr	r1, [r3, #16]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	4618      	mov	r0, r3
 800358e:	4603      	mov	r3, r0
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4403      	add	r3, r0
 8003594:	409a      	lsls	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d824      	bhi.n	80035f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	3b05      	subs	r3, #5
 80035b8:	221f      	movs	r2, #31
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	400a      	ands	r2, r1
 80035c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	4618      	mov	r0, r3
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	3b05      	subs	r3, #5
 80035e2:	fa00 f203 	lsl.w	r2, r0, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80035ee:	e04c      	b.n	800368a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b0c      	cmp	r3, #12
 80035f6:	d824      	bhi.n	8003642 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	3b23      	subs	r3, #35	@ 0x23
 800360a:	221f      	movs	r2, #31
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43da      	mvns	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	400a      	ands	r2, r1
 8003618:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	4618      	mov	r0, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	3b23      	subs	r3, #35	@ 0x23
 8003634:	fa00 f203 	lsl.w	r2, r0, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003640:	e023      	b.n	800368a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	3b41      	subs	r3, #65	@ 0x41
 8003654:	221f      	movs	r2, #31
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43da      	mvns	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	400a      	ands	r2, r1
 8003662:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	4618      	mov	r0, r3
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	3b41      	subs	r3, #65	@ 0x41
 800367e:	fa00 f203 	lsl.w	r2, r0, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800368a:	4b29      	ldr	r3, [pc, #164]	@ (8003730 <HAL_ADC_ConfigChannel+0x250>)
 800368c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a28      	ldr	r2, [pc, #160]	@ (8003734 <HAL_ADC_ConfigChannel+0x254>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d10f      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x1d8>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b12      	cmp	r3, #18
 800369e:	d10b      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003734 <HAL_ADC_ConfigChannel+0x254>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d12b      	bne.n	800371a <HAL_ADC_ConfigChannel+0x23a>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003738 <HAL_ADC_ConfigChannel+0x258>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0x1f4>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b11      	cmp	r3, #17
 80036d2:	d122      	bne.n	800371a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a11      	ldr	r2, [pc, #68]	@ (8003738 <HAL_ADC_ConfigChannel+0x258>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d111      	bne.n	800371a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036f6:	4b11      	ldr	r3, [pc, #68]	@ (800373c <HAL_ADC_ConfigChannel+0x25c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a11      	ldr	r2, [pc, #68]	@ (8003740 <HAL_ADC_ConfigChannel+0x260>)
 80036fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003700:	0c9a      	lsrs	r2, r3, #18
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800370c:	e002      	b.n	8003714 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	3b01      	subs	r3, #1
 8003712:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f9      	bne.n	800370e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	40012300 	.word	0x40012300
 8003734:	40012000 	.word	0x40012000
 8003738:	10000012 	.word	0x10000012
 800373c:	2000001c 	.word	0x2000001c
 8003740:	431bde83 	.word	0x431bde83

08003744 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800374c:	4b79      	ldr	r3, [pc, #484]	@ (8003934 <ADC_Init+0x1f0>)
 800374e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003778:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	021a      	lsls	r2, r3, #8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800379c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d6:	4a58      	ldr	r2, [pc, #352]	@ (8003938 <ADC_Init+0x1f4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d022      	beq.n	8003822 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6899      	ldr	r1, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800380c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6899      	ldr	r1, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	e00f      	b.n	8003842 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003830:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003840:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0202 	bic.w	r2, r2, #2
 8003850:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6899      	ldr	r1, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7e1b      	ldrb	r3, [r3, #24]
 800385c:	005a      	lsls	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01b      	beq.n	80038a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800387e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800388e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6859      	ldr	r1, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	3b01      	subs	r3, #1
 800389c:	035a      	lsls	r2, r3, #13
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	e007      	b.n	80038b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80038c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	051a      	lsls	r2, r3, #20
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6899      	ldr	r1, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038fa:	025a      	lsls	r2, r3, #9
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6899      	ldr	r1, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	029a      	lsls	r2, r3, #10
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	40012300 	.word	0x40012300
 8003938:	0f000001 	.word	0x0f000001

0800393c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003960:	4b0c      	ldr	r3, [pc, #48]	@ (8003994 <__NVIC_SetPriorityGrouping+0x44>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800396c:	4013      	ands	r3, r2
 800396e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003978:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800397c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003982:	4a04      	ldr	r2, [pc, #16]	@ (8003994 <__NVIC_SetPriorityGrouping+0x44>)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	60d3      	str	r3, [r2, #12]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800399c:	4b04      	ldr	r3, [pc, #16]	@ (80039b0 <__NVIC_GetPriorityGrouping+0x18>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	0a1b      	lsrs	r3, r3, #8
 80039a2:	f003 0307 	and.w	r3, r3, #7
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	e000ed00 	.word	0xe000ed00

080039b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	db0b      	blt.n	80039de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	f003 021f 	and.w	r2, r3, #31
 80039cc:	4907      	ldr	r1, [pc, #28]	@ (80039ec <__NVIC_EnableIRQ+0x38>)
 80039ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2001      	movs	r0, #1
 80039d6:	fa00 f202 	lsl.w	r2, r0, r2
 80039da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	e000e100 	.word	0xe000e100

080039f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	6039      	str	r1, [r7, #0]
 80039fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	db0a      	blt.n	8003a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	490c      	ldr	r1, [pc, #48]	@ (8003a3c <__NVIC_SetPriority+0x4c>)
 8003a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0e:	0112      	lsls	r2, r2, #4
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	440b      	add	r3, r1
 8003a14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a18:	e00a      	b.n	8003a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	4908      	ldr	r1, [pc, #32]	@ (8003a40 <__NVIC_SetPriority+0x50>)
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	3b04      	subs	r3, #4
 8003a28:	0112      	lsls	r2, r2, #4
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	761a      	strb	r2, [r3, #24]
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	e000e100 	.word	0xe000e100
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b089      	sub	sp, #36	@ 0x24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f1c3 0307 	rsb	r3, r3, #7
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	bf28      	it	cs
 8003a62:	2304      	movcs	r3, #4
 8003a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	2b06      	cmp	r3, #6
 8003a6c:	d902      	bls.n	8003a74 <NVIC_EncodePriority+0x30>
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3b03      	subs	r3, #3
 8003a72:	e000      	b.n	8003a76 <NVIC_EncodePriority+0x32>
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a78:	f04f 32ff 	mov.w	r2, #4294967295
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43da      	mvns	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	401a      	ands	r2, r3
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	fa01 f303 	lsl.w	r3, r1, r3
 8003a96:	43d9      	mvns	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a9c:	4313      	orrs	r3, r2
         );
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3724      	adds	r7, #36	@ 0x24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
	...

08003aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003abc:	d301      	bcc.n	8003ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e00f      	b.n	8003ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8003aec <SysTick_Config+0x40>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aca:	210f      	movs	r1, #15
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	f7ff ff8e 	bl	80039f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ad4:	4b05      	ldr	r3, [pc, #20]	@ (8003aec <SysTick_Config+0x40>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ada:	4b04      	ldr	r3, [pc, #16]	@ (8003aec <SysTick_Config+0x40>)
 8003adc:	2207      	movs	r2, #7
 8003ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	e000e010 	.word	0xe000e010

08003af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ff29 	bl	8003950 <__NVIC_SetPriorityGrouping>
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b086      	sub	sp, #24
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b18:	f7ff ff3e 	bl	8003998 <__NVIC_GetPriorityGrouping>
 8003b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	6978      	ldr	r0, [r7, #20]
 8003b24:	f7ff ff8e 	bl	8003a44 <NVIC_EncodePriority>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff5d 	bl	80039f0 <__NVIC_SetPriority>
}
 8003b36:	bf00      	nop
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	4603      	mov	r3, r0
 8003b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff31 	bl	80039b4 <__NVIC_EnableIRQ>
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff ffa2 	bl	8003aac <SysTick_Config>
 8003b68:	4603      	mov	r3, r0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b80:	f7ff fa4a 	bl	8003018 <HAL_GetTick>
 8003b84:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d008      	beq.n	8003ba4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2280      	movs	r2, #128	@ 0x80
 8003b96:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e052      	b.n	8003c4a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0216 	bic.w	r2, r2, #22
 8003bb2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bc2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <HAL_DMA_Abort+0x62>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d007      	beq.n	8003be4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0208 	bic.w	r2, r2, #8
 8003be2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bf4:	e013      	b.n	8003c1e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bf6:	f7ff fa0f 	bl	8003018 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b05      	cmp	r3, #5
 8003c02:	d90c      	bls.n	8003c1e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e015      	b.n	8003c4a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e4      	bne.n	8003bf6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c30:	223f      	movs	r2, #63	@ 0x3f
 8003c32:	409a      	lsls	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d004      	beq.n	8003c70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2280      	movs	r2, #128	@ 0x80
 8003c6a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e00c      	b.n	8003c8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2205      	movs	r2, #5
 8003c74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0201 	bic.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	@ 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	e159      	b.n	8003f68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	f040 8148 	bne.w	8003f62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d005      	beq.n	8003cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d130      	bne.n	8003d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d20:	2201      	movs	r2, #1
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f003 0201 	and.w	r2, r3, #1
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d017      	beq.n	8003d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	2203      	movs	r2, #3
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d123      	bne.n	8003ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	08da      	lsrs	r2, r3, #3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3208      	adds	r2, #8
 8003d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	220f      	movs	r2, #15
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	08da      	lsrs	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3208      	adds	r2, #8
 8003dd6:	69b9      	ldr	r1, [r7, #24]
 8003dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	2203      	movs	r2, #3
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 0203 	and.w	r2, r3, #3
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80a2 	beq.w	8003f62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	4b57      	ldr	r3, [pc, #348]	@ (8003f80 <HAL_GPIO_Init+0x2e8>)
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	4a56      	ldr	r2, [pc, #344]	@ (8003f80 <HAL_GPIO_Init+0x2e8>)
 8003e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e2e:	4b54      	ldr	r3, [pc, #336]	@ (8003f80 <HAL_GPIO_Init+0x2e8>)
 8003e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e3a:	4a52      	ldr	r2, [pc, #328]	@ (8003f84 <HAL_GPIO_Init+0x2ec>)
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	3302      	adds	r3, #2
 8003e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	220f      	movs	r2, #15
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a49      	ldr	r2, [pc, #292]	@ (8003f88 <HAL_GPIO_Init+0x2f0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d019      	beq.n	8003e9a <HAL_GPIO_Init+0x202>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a48      	ldr	r2, [pc, #288]	@ (8003f8c <HAL_GPIO_Init+0x2f4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d013      	beq.n	8003e96 <HAL_GPIO_Init+0x1fe>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a47      	ldr	r2, [pc, #284]	@ (8003f90 <HAL_GPIO_Init+0x2f8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00d      	beq.n	8003e92 <HAL_GPIO_Init+0x1fa>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a46      	ldr	r2, [pc, #280]	@ (8003f94 <HAL_GPIO_Init+0x2fc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d007      	beq.n	8003e8e <HAL_GPIO_Init+0x1f6>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a45      	ldr	r2, [pc, #276]	@ (8003f98 <HAL_GPIO_Init+0x300>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d101      	bne.n	8003e8a <HAL_GPIO_Init+0x1f2>
 8003e86:	2304      	movs	r3, #4
 8003e88:	e008      	b.n	8003e9c <HAL_GPIO_Init+0x204>
 8003e8a:	2307      	movs	r3, #7
 8003e8c:	e006      	b.n	8003e9c <HAL_GPIO_Init+0x204>
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e004      	b.n	8003e9c <HAL_GPIO_Init+0x204>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e002      	b.n	8003e9c <HAL_GPIO_Init+0x204>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <HAL_GPIO_Init+0x204>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	f002 0203 	and.w	r2, r2, #3
 8003ea2:	0092      	lsls	r2, r2, #2
 8003ea4:	4093      	lsls	r3, r2
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eac:	4935      	ldr	r1, [pc, #212]	@ (8003f84 <HAL_GPIO_Init+0x2ec>)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	089b      	lsrs	r3, r3, #2
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eba:	4b38      	ldr	r3, [pc, #224]	@ (8003f9c <HAL_GPIO_Init+0x304>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ede:	4a2f      	ldr	r2, [pc, #188]	@ (8003f9c <HAL_GPIO_Init+0x304>)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f9c <HAL_GPIO_Init+0x304>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f08:	4a24      	ldr	r2, [pc, #144]	@ (8003f9c <HAL_GPIO_Init+0x304>)
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f0e:	4b23      	ldr	r3, [pc, #140]	@ (8003f9c <HAL_GPIO_Init+0x304>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f32:	4a1a      	ldr	r2, [pc, #104]	@ (8003f9c <HAL_GPIO_Init+0x304>)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f38:	4b18      	ldr	r3, [pc, #96]	@ (8003f9c <HAL_GPIO_Init+0x304>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f5c:	4a0f      	ldr	r2, [pc, #60]	@ (8003f9c <HAL_GPIO_Init+0x304>)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3301      	adds	r3, #1
 8003f66:	61fb      	str	r3, [r7, #28]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	f67f aea2 	bls.w	8003cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	3724      	adds	r7, #36	@ 0x24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40013800 	.word	0x40013800
 8003f88:	40020000 	.word	0x40020000
 8003f8c:	40020400 	.word	0x40020400
 8003f90:	40020800 	.word	0x40020800
 8003f94:	40020c00 	.word	0x40020c00
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40013c00 	.word	0x40013c00

08003fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	887b      	ldrh	r3, [r7, #2]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	e001      	b.n	8003fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	807b      	strh	r3, [r7, #2]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fe0:	787b      	ldrb	r3, [r7, #1]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fe6:	887a      	ldrh	r2, [r7, #2]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fec:	e003      	b.n	8003ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fee:	887b      	ldrh	r3, [r7, #2]
 8003ff0:	041a      	lsls	r2, r3, #16
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	619a      	str	r2, [r3, #24]
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800400e:	4b08      	ldr	r3, [pc, #32]	@ (8004030 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	4013      	ands	r3, r2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800401a:	4a05      	ldr	r2, [pc, #20]	@ (8004030 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe f886 	bl	8002134 <HAL_GPIO_EXTI_Callback>
  }
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40013c00 	.word	0x40013c00

08004034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e12b      	b.n	800429e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fe fc78 	bl	8002950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2224      	movs	r2, #36	@ 0x24
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0201 	bic.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004086:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004096:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004098:	f001 f8da 	bl	8005250 <HAL_RCC_GetPCLK1Freq>
 800409c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4a81      	ldr	r2, [pc, #516]	@ (80042a8 <HAL_I2C_Init+0x274>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d807      	bhi.n	80040b8 <HAL_I2C_Init+0x84>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4a80      	ldr	r2, [pc, #512]	@ (80042ac <HAL_I2C_Init+0x278>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	bf94      	ite	ls
 80040b0:	2301      	movls	r3, #1
 80040b2:	2300      	movhi	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	e006      	b.n	80040c6 <HAL_I2C_Init+0x92>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4a7d      	ldr	r2, [pc, #500]	@ (80042b0 <HAL_I2C_Init+0x27c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	bf94      	ite	ls
 80040c0:	2301      	movls	r3, #1
 80040c2:	2300      	movhi	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e0e7      	b.n	800429e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a78      	ldr	r2, [pc, #480]	@ (80042b4 <HAL_I2C_Init+0x280>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	0c9b      	lsrs	r3, r3, #18
 80040d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4a6a      	ldr	r2, [pc, #424]	@ (80042a8 <HAL_I2C_Init+0x274>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d802      	bhi.n	8004108 <HAL_I2C_Init+0xd4>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	3301      	adds	r3, #1
 8004106:	e009      	b.n	800411c <HAL_I2C_Init+0xe8>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	4a69      	ldr	r2, [pc, #420]	@ (80042b8 <HAL_I2C_Init+0x284>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	099b      	lsrs	r3, r3, #6
 800411a:	3301      	adds	r3, #1
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	430b      	orrs	r3, r1
 8004122:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800412e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	495c      	ldr	r1, [pc, #368]	@ (80042a8 <HAL_I2C_Init+0x274>)
 8004138:	428b      	cmp	r3, r1
 800413a:	d819      	bhi.n	8004170 <HAL_I2C_Init+0x13c>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1e59      	subs	r1, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	fbb1 f3f3 	udiv	r3, r1, r3
 800414a:	1c59      	adds	r1, r3, #1
 800414c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004150:	400b      	ands	r3, r1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_I2C_Init+0x138>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1e59      	subs	r1, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	fbb1 f3f3 	udiv	r3, r1, r3
 8004164:	3301      	adds	r3, #1
 8004166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416a:	e051      	b.n	8004210 <HAL_I2C_Init+0x1dc>
 800416c:	2304      	movs	r3, #4
 800416e:	e04f      	b.n	8004210 <HAL_I2C_Init+0x1dc>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d111      	bne.n	800419c <HAL_I2C_Init+0x168>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1e58      	subs	r0, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6859      	ldr	r1, [r3, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	440b      	add	r3, r1
 8004186:	fbb0 f3f3 	udiv	r3, r0, r3
 800418a:	3301      	adds	r3, #1
 800418c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004190:	2b00      	cmp	r3, #0
 8004192:	bf0c      	ite	eq
 8004194:	2301      	moveq	r3, #1
 8004196:	2300      	movne	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	e012      	b.n	80041c2 <HAL_I2C_Init+0x18e>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1e58      	subs	r0, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6859      	ldr	r1, [r3, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	0099      	lsls	r1, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b2:	3301      	adds	r3, #1
 80041b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_I2C_Init+0x196>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e022      	b.n	8004210 <HAL_I2C_Init+0x1dc>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10e      	bne.n	80041f0 <HAL_I2C_Init+0x1bc>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1e58      	subs	r0, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6859      	ldr	r1, [r3, #4]
 80041da:	460b      	mov	r3, r1
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	440b      	add	r3, r1
 80041e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e4:	3301      	adds	r3, #1
 80041e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ee:	e00f      	b.n	8004210 <HAL_I2C_Init+0x1dc>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1e58      	subs	r0, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	0099      	lsls	r1, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	fbb0 f3f3 	udiv	r3, r0, r3
 8004206:	3301      	adds	r3, #1
 8004208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800420c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	6809      	ldr	r1, [r1, #0]
 8004214:	4313      	orrs	r3, r2
 8004216:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69da      	ldr	r2, [r3, #28]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800423e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6911      	ldr	r1, [r2, #16]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68d2      	ldr	r2, [r2, #12]
 800424a:	4311      	orrs	r1, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	430b      	orrs	r3, r1
 8004252:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	000186a0 	.word	0x000186a0
 80042ac:	001e847f 	.word	0x001e847f
 80042b0:	003d08ff 	.word	0x003d08ff
 80042b4:	431bde83 	.word	0x431bde83
 80042b8:	10624dd3 	.word	0x10624dd3

080042bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	461a      	mov	r2, r3
 80042c8:	460b      	mov	r3, r1
 80042ca:	817b      	strh	r3, [r7, #10]
 80042cc:	4613      	mov	r3, r2
 80042ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042d0:	f7fe fea2 	bl	8003018 <HAL_GetTick>
 80042d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b20      	cmp	r3, #32
 80042e0:	f040 80e0 	bne.w	80044a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2319      	movs	r3, #25
 80042ea:	2201      	movs	r2, #1
 80042ec:	4970      	ldr	r1, [pc, #448]	@ (80044b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f964 	bl	80045bc <I2C_WaitOnFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042fa:	2302      	movs	r3, #2
 80042fc:	e0d3      	b.n	80044a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_I2C_Master_Transmit+0x50>
 8004308:	2302      	movs	r3, #2
 800430a:	e0cc      	b.n	80044a6 <HAL_I2C_Master_Transmit+0x1ea>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b01      	cmp	r3, #1
 8004320:	d007      	beq.n	8004332 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0201 	orr.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004340:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2221      	movs	r2, #33	@ 0x21
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2210      	movs	r2, #16
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	893a      	ldrh	r2, [r7, #8]
 8004362:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4a50      	ldr	r2, [pc, #320]	@ (80044b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004372:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004374:	8979      	ldrh	r1, [r7, #10]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	6a3a      	ldr	r2, [r7, #32]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f89c 	bl	80044b8 <I2C_MasterRequestWrite>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e08d      	b.n	80044a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80043a0:	e066      	b.n	8004470 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	6a39      	ldr	r1, [r7, #32]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fa22 	bl	80047f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00d      	beq.n	80043ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d107      	bne.n	80043ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e06b      	b.n	80044a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	781a      	ldrb	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b04      	cmp	r3, #4
 800440a:	d11b      	bne.n	8004444 <HAL_I2C_Master_Transmit+0x188>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004410:	2b00      	cmp	r3, #0
 8004412:	d017      	beq.n	8004444 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	6a39      	ldr	r1, [r7, #32]
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fa19 	bl	8004880 <I2C_WaitOnBTFFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00d      	beq.n	8004470 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004458:	2b04      	cmp	r3, #4
 800445a:	d107      	bne.n	800446c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800446a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e01a      	b.n	80044a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004474:	2b00      	cmp	r3, #0
 8004476:	d194      	bne.n	80043a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	e000      	b.n	80044a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
  }
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	00100002 	.word	0x00100002
 80044b4:	ffff0000 	.word	0xffff0000

080044b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	460b      	mov	r3, r1
 80044c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d006      	beq.n	80044e2 <I2C_MasterRequestWrite+0x2a>
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d003      	beq.n	80044e2 <I2C_MasterRequestWrite+0x2a>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044e0:	d108      	bne.n	80044f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	e00b      	b.n	800450c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	2b12      	cmp	r3, #18
 80044fa:	d107      	bne.n	800450c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800450a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f84f 	bl	80045bc <I2C_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00d      	beq.n	8004540 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004532:	d103      	bne.n	800453c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e035      	b.n	80045ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004548:	d108      	bne.n	800455c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800454a:	897b      	ldrh	r3, [r7, #10]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004558:	611a      	str	r2, [r3, #16]
 800455a:	e01b      	b.n	8004594 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800455c:	897b      	ldrh	r3, [r7, #10]
 800455e:	11db      	asrs	r3, r3, #7
 8004560:	b2db      	uxtb	r3, r3
 8004562:	f003 0306 	and.w	r3, r3, #6
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f063 030f 	orn	r3, r3, #15
 800456c:	b2da      	uxtb	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	490e      	ldr	r1, [pc, #56]	@ (80045b4 <I2C_MasterRequestWrite+0xfc>)
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f898 	bl	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e010      	b.n	80045ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800458a:	897b      	ldrh	r3, [r7, #10]
 800458c:	b2da      	uxtb	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	4907      	ldr	r1, [pc, #28]	@ (80045b8 <I2C_MasterRequestWrite+0x100>)
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f888 	bl	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e000      	b.n	80045ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	00010008 	.word	0x00010008
 80045b8:	00010002 	.word	0x00010002

080045bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	4613      	mov	r3, r2
 80045ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045cc:	e048      	b.n	8004660 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d044      	beq.n	8004660 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d6:	f7fe fd1f 	bl	8003018 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d302      	bcc.n	80045ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d139      	bne.n	8004660 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	0c1b      	lsrs	r3, r3, #16
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d10d      	bne.n	8004612 <I2C_WaitOnFlagUntilTimeout+0x56>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	43da      	mvns	r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4013      	ands	r3, r2
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	e00c      	b.n	800462c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	43da      	mvns	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4013      	ands	r3, r2
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	bf0c      	ite	eq
 8004624:	2301      	moveq	r3, #1
 8004626:	2300      	movne	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	429a      	cmp	r2, r3
 8004630:	d116      	bne.n	8004660 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464c:	f043 0220 	orr.w	r2, r3, #32
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e023      	b.n	80046a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	0c1b      	lsrs	r3, r3, #16
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b01      	cmp	r3, #1
 8004668:	d10d      	bne.n	8004686 <I2C_WaitOnFlagUntilTimeout+0xca>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	43da      	mvns	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4013      	ands	r3, r2
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	e00c      	b.n	80046a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	43da      	mvns	r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	4013      	ands	r3, r2
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d093      	beq.n	80045ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046be:	e071      	b.n	80047a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ce:	d123      	bne.n	8004718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004704:	f043 0204 	orr.w	r2, r3, #4
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e067      	b.n	80047e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471e:	d041      	beq.n	80047a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004720:	f7fe fc7a 	bl	8003018 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	429a      	cmp	r2, r3
 800472e:	d302      	bcc.n	8004736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d136      	bne.n	80047a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	0c1b      	lsrs	r3, r3, #16
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	d10c      	bne.n	800475a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	43da      	mvns	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4013      	ands	r3, r2
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	bf14      	ite	ne
 8004752:	2301      	movne	r3, #1
 8004754:	2300      	moveq	r3, #0
 8004756:	b2db      	uxtb	r3, r3
 8004758:	e00b      	b.n	8004772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	43da      	mvns	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	4013      	ands	r3, r2
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	bf14      	ite	ne
 800476c:	2301      	movne	r3, #1
 800476e:	2300      	moveq	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d016      	beq.n	80047a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004790:	f043 0220 	orr.w	r2, r3, #32
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e021      	b.n	80047e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	0c1b      	lsrs	r3, r3, #16
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d10c      	bne.n	80047c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	43da      	mvns	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4013      	ands	r3, r2
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e00b      	b.n	80047e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	43da      	mvns	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4013      	ands	r3, r2
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bf14      	ite	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	2300      	moveq	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f47f af6d 	bne.w	80046c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047fc:	e034      	b.n	8004868 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f886 	bl	8004910 <I2C_IsAcknowledgeFailed>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e034      	b.n	8004878 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d028      	beq.n	8004868 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004816:	f7fe fbff 	bl	8003018 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	429a      	cmp	r2, r3
 8004824:	d302      	bcc.n	800482c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d11d      	bne.n	8004868 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004836:	2b80      	cmp	r3, #128	@ 0x80
 8004838:	d016      	beq.n	8004868 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004854:	f043 0220 	orr.w	r2, r3, #32
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e007      	b.n	8004878 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004872:	2b80      	cmp	r3, #128	@ 0x80
 8004874:	d1c3      	bne.n	80047fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800488c:	e034      	b.n	80048f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f83e 	bl	8004910 <I2C_IsAcknowledgeFailed>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e034      	b.n	8004908 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a4:	d028      	beq.n	80048f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a6:	f7fe fbb7 	bl	8003018 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d302      	bcc.n	80048bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d11d      	bne.n	80048f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d016      	beq.n	80048f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	f043 0220 	orr.w	r2, r3, #32
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e007      	b.n	8004908 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	2b04      	cmp	r3, #4
 8004904:	d1c3      	bne.n	800488e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004926:	d11b      	bne.n	8004960 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004930:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494c:	f043 0204 	orr.w	r2, r3, #4
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e000      	b.n	8004962 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e267      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d075      	beq.n	8004a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800498e:	4b88      	ldr	r3, [pc, #544]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b04      	cmp	r3, #4
 8004998:	d00c      	beq.n	80049b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800499a:	4b85      	ldr	r3, [pc, #532]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d112      	bne.n	80049cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049a6:	4b82      	ldr	r3, [pc, #520]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049b2:	d10b      	bne.n	80049cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b4:	4b7e      	ldr	r3, [pc, #504]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d05b      	beq.n	8004a78 <HAL_RCC_OscConfig+0x108>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d157      	bne.n	8004a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e242      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d4:	d106      	bne.n	80049e4 <HAL_RCC_OscConfig+0x74>
 80049d6:	4b76      	ldr	r3, [pc, #472]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a75      	ldr	r2, [pc, #468]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e01d      	b.n	8004a20 <HAL_RCC_OscConfig+0xb0>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x98>
 80049ee:	4b70      	ldr	r3, [pc, #448]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a6f      	ldr	r2, [pc, #444]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	4b6d      	ldr	r3, [pc, #436]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a6c      	ldr	r2, [pc, #432]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	e00b      	b.n	8004a20 <HAL_RCC_OscConfig+0xb0>
 8004a08:	4b69      	ldr	r3, [pc, #420]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a68      	ldr	r2, [pc, #416]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	4b66      	ldr	r3, [pc, #408]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a65      	ldr	r2, [pc, #404]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d013      	beq.n	8004a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7fe faf6 	bl	8003018 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a30:	f7fe faf2 	bl	8003018 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	@ 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e207      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	4b5b      	ldr	r3, [pc, #364]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0xc0>
 8004a4e:	e014      	b.n	8004a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a50:	f7fe fae2 	bl	8003018 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a58:	f7fe fade 	bl	8003018 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b64      	cmp	r3, #100	@ 0x64
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e1f3      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6a:	4b51      	ldr	r3, [pc, #324]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0xe8>
 8004a76:	e000      	b.n	8004a7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d063      	beq.n	8004b4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a86:	4b4a      	ldr	r3, [pc, #296]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00b      	beq.n	8004aaa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a92:	4b47      	ldr	r3, [pc, #284]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d11c      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a9e:	4b44      	ldr	r3, [pc, #272]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d116      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aaa:	4b41      	ldr	r3, [pc, #260]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x152>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d001      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e1c7      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4937      	ldr	r1, [pc, #220]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ad6:	e03a      	b.n	8004b4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d020      	beq.n	8004b22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ae0:	4b34      	ldr	r3, [pc, #208]	@ (8004bb4 <HAL_RCC_OscConfig+0x244>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae6:	f7fe fa97 	bl	8003018 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aee:	f7fe fa93 	bl	8003018 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e1a8      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b00:	4b2b      	ldr	r3, [pc, #172]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0f0      	beq.n	8004aee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0c:	4b28      	ldr	r3, [pc, #160]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4925      	ldr	r1, [pc, #148]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	600b      	str	r3, [r1, #0]
 8004b20:	e015      	b.n	8004b4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b22:	4b24      	ldr	r3, [pc, #144]	@ (8004bb4 <HAL_RCC_OscConfig+0x244>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fe fa76 	bl	8003018 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b30:	f7fe fa72 	bl	8003018 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e187      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b42:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d036      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d016      	beq.n	8004b90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b62:	4b15      	ldr	r3, [pc, #84]	@ (8004bb8 <HAL_RCC_OscConfig+0x248>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b68:	f7fe fa56 	bl	8003018 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b70:	f7fe fa52 	bl	8003018 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e167      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b82:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCC_OscConfig+0x200>
 8004b8e:	e01b      	b.n	8004bc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b90:	4b09      	ldr	r3, [pc, #36]	@ (8004bb8 <HAL_RCC_OscConfig+0x248>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b96:	f7fe fa3f 	bl	8003018 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b9c:	e00e      	b.n	8004bbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9e:	f7fe fa3b 	bl	8003018 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d907      	bls.n	8004bbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e150      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	42470000 	.word	0x42470000
 8004bb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bbc:	4b88      	ldr	r3, [pc, #544]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1ea      	bne.n	8004b9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8097 	beq.w	8004d04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bda:	4b81      	ldr	r3, [pc, #516]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10f      	bne.n	8004c06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	4b7d      	ldr	r3, [pc, #500]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bee:	4a7c      	ldr	r2, [pc, #496]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bf6:	4b7a      	ldr	r3, [pc, #488]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bfe:	60bb      	str	r3, [r7, #8]
 8004c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c02:	2301      	movs	r3, #1
 8004c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c06:	4b77      	ldr	r3, [pc, #476]	@ (8004de4 <HAL_RCC_OscConfig+0x474>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d118      	bne.n	8004c44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c12:	4b74      	ldr	r3, [pc, #464]	@ (8004de4 <HAL_RCC_OscConfig+0x474>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a73      	ldr	r2, [pc, #460]	@ (8004de4 <HAL_RCC_OscConfig+0x474>)
 8004c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c1e:	f7fe f9fb 	bl	8003018 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c26:	f7fe f9f7 	bl	8003018 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e10c      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c38:	4b6a      	ldr	r3, [pc, #424]	@ (8004de4 <HAL_RCC_OscConfig+0x474>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f0      	beq.n	8004c26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d106      	bne.n	8004c5a <HAL_RCC_OscConfig+0x2ea>
 8004c4c:	4b64      	ldr	r3, [pc, #400]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c50:	4a63      	ldr	r2, [pc, #396]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c58:	e01c      	b.n	8004c94 <HAL_RCC_OscConfig+0x324>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b05      	cmp	r3, #5
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCC_OscConfig+0x30c>
 8004c62:	4b5f      	ldr	r3, [pc, #380]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c66:	4a5e      	ldr	r2, [pc, #376]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c68:	f043 0304 	orr.w	r3, r3, #4
 8004c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c72:	4a5b      	ldr	r2, [pc, #364]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c7a:	e00b      	b.n	8004c94 <HAL_RCC_OscConfig+0x324>
 8004c7c:	4b58      	ldr	r3, [pc, #352]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c80:	4a57      	ldr	r2, [pc, #348]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c88:	4b55      	ldr	r3, [pc, #340]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8c:	4a54      	ldr	r2, [pc, #336]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c8e:	f023 0304 	bic.w	r3, r3, #4
 8004c92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d015      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9c:	f7fe f9bc 	bl	8003018 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca2:	e00a      	b.n	8004cba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca4:	f7fe f9b8 	bl	8003018 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e0cb      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cba:	4b49      	ldr	r3, [pc, #292]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0ee      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x334>
 8004cc6:	e014      	b.n	8004cf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc8:	f7fe f9a6 	bl	8003018 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cce:	e00a      	b.n	8004ce6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd0:	f7fe f9a2 	bl	8003018 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e0b5      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1ee      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d105      	bne.n	8004d04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf8:	4b39      	ldr	r3, [pc, #228]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfc:	4a38      	ldr	r2, [pc, #224]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80a1 	beq.w	8004e50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d0e:	4b34      	ldr	r3, [pc, #208]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d05c      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d141      	bne.n	8004da6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d22:	4b31      	ldr	r3, [pc, #196]	@ (8004de8 <HAL_RCC_OscConfig+0x478>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d28:	f7fe f976 	bl	8003018 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d30:	f7fe f972 	bl	8003018 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e087      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d42:	4b27      	ldr	r3, [pc, #156]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f0      	bne.n	8004d30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	019b      	lsls	r3, r3, #6
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d64:	085b      	lsrs	r3, r3, #1
 8004d66:	3b01      	subs	r3, #1
 8004d68:	041b      	lsls	r3, r3, #16
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d70:	061b      	lsls	r3, r3, #24
 8004d72:	491b      	ldr	r1, [pc, #108]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d78:	4b1b      	ldr	r3, [pc, #108]	@ (8004de8 <HAL_RCC_OscConfig+0x478>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7e:	f7fe f94b 	bl	8003018 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d86:	f7fe f947 	bl	8003018 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e05c      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d98:	4b11      	ldr	r3, [pc, #68]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_OscConfig+0x416>
 8004da4:	e054      	b.n	8004e50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da6:	4b10      	ldr	r3, [pc, #64]	@ (8004de8 <HAL_RCC_OscConfig+0x478>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dac:	f7fe f934 	bl	8003018 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db4:	f7fe f930 	bl	8003018 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e045      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc6:	4b06      	ldr	r3, [pc, #24]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x444>
 8004dd2:	e03d      	b.n	8004e50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d107      	bne.n	8004dec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e038      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40007000 	.word	0x40007000
 8004de8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dec:	4b1b      	ldr	r3, [pc, #108]	@ (8004e5c <HAL_RCC_OscConfig+0x4ec>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d028      	beq.n	8004e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d121      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d11a      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d111      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e32:	085b      	lsrs	r3, r3, #1
 8004e34:	3b01      	subs	r3, #1
 8004e36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d107      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800

08004e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0cc      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e74:	4b68      	ldr	r3, [pc, #416]	@ (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d90c      	bls.n	8004e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e82:	4b65      	ldr	r3, [pc, #404]	@ (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8a:	4b63      	ldr	r3, [pc, #396]	@ (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d001      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0b8      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d020      	beq.n	8004eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eb4:	4b59      	ldr	r3, [pc, #356]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	4a58      	ldr	r2, [pc, #352]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ebe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ecc:	4b53      	ldr	r3, [pc, #332]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	4a52      	ldr	r2, [pc, #328]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed8:	4b50      	ldr	r3, [pc, #320]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	494d      	ldr	r1, [pc, #308]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d044      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d107      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	4b47      	ldr	r3, [pc, #284]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d119      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e07f      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d003      	beq.n	8004f1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d107      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e06f      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e067      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f3e:	4b37      	ldr	r3, [pc, #220]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f023 0203 	bic.w	r2, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	4934      	ldr	r1, [pc, #208]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f50:	f7fe f862 	bl	8003018 <HAL_GetTick>
 8004f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f56:	e00a      	b.n	8004f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f58:	f7fe f85e 	bl	8003018 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e04f      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 020c 	and.w	r2, r3, #12
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d1eb      	bne.n	8004f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f80:	4b25      	ldr	r3, [pc, #148]	@ (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d20c      	bcs.n	8004fa8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8e:	4b22      	ldr	r3, [pc, #136]	@ (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f96:	4b20      	ldr	r3, [pc, #128]	@ (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e032      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb4:	4b19      	ldr	r3, [pc, #100]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4916      	ldr	r1, [pc, #88]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fd2:	4b12      	ldr	r3, [pc, #72]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	490e      	ldr	r1, [pc, #56]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fe6:	f000 f821 	bl	800502c <HAL_RCC_GetSysClockFreq>
 8004fea:	4602      	mov	r2, r0
 8004fec:	4b0b      	ldr	r3, [pc, #44]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	091b      	lsrs	r3, r3, #4
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	490a      	ldr	r1, [pc, #40]	@ (8005020 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff8:	5ccb      	ldrb	r3, [r1, r3]
 8004ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffe:	4a09      	ldr	r2, [pc, #36]	@ (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8005000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005002:	4b09      	ldr	r3, [pc, #36]	@ (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f7fd ffc2 	bl	8002f90 <HAL_InitTick>

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40023c00 	.word	0x40023c00
 800501c:	40023800 	.word	0x40023800
 8005020:	08009ac4 	.word	0x08009ac4
 8005024:	2000001c 	.word	0x2000001c
 8005028:	20000020 	.word	0x20000020

0800502c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800502c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005030:	b094      	sub	sp, #80	@ 0x50
 8005032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005044:	4b79      	ldr	r3, [pc, #484]	@ (800522c <HAL_RCC_GetSysClockFreq+0x200>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 030c 	and.w	r3, r3, #12
 800504c:	2b08      	cmp	r3, #8
 800504e:	d00d      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0x40>
 8005050:	2b08      	cmp	r3, #8
 8005052:	f200 80e1 	bhi.w	8005218 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_RCC_GetSysClockFreq+0x34>
 800505a:	2b04      	cmp	r3, #4
 800505c:	d003      	beq.n	8005066 <HAL_RCC_GetSysClockFreq+0x3a>
 800505e:	e0db      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005060:	4b73      	ldr	r3, [pc, #460]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x204>)
 8005062:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005064:	e0db      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005066:	4b73      	ldr	r3, [pc, #460]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x208>)
 8005068:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800506a:	e0d8      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800506c:	4b6f      	ldr	r3, [pc, #444]	@ (800522c <HAL_RCC_GetSysClockFreq+0x200>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005074:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005076:	4b6d      	ldr	r3, [pc, #436]	@ (800522c <HAL_RCC_GetSysClockFreq+0x200>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d063      	beq.n	800514a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005082:	4b6a      	ldr	r3, [pc, #424]	@ (800522c <HAL_RCC_GetSysClockFreq+0x200>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	2200      	movs	r2, #0
 800508a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800508c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800508e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005094:	633b      	str	r3, [r7, #48]	@ 0x30
 8005096:	2300      	movs	r3, #0
 8005098:	637b      	str	r3, [r7, #52]	@ 0x34
 800509a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800509e:	4622      	mov	r2, r4
 80050a0:	462b      	mov	r3, r5
 80050a2:	f04f 0000 	mov.w	r0, #0
 80050a6:	f04f 0100 	mov.w	r1, #0
 80050aa:	0159      	lsls	r1, r3, #5
 80050ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050b0:	0150      	lsls	r0, r2, #5
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4621      	mov	r1, r4
 80050b8:	1a51      	subs	r1, r2, r1
 80050ba:	6139      	str	r1, [r7, #16]
 80050bc:	4629      	mov	r1, r5
 80050be:	eb63 0301 	sbc.w	r3, r3, r1
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050d0:	4659      	mov	r1, fp
 80050d2:	018b      	lsls	r3, r1, #6
 80050d4:	4651      	mov	r1, sl
 80050d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050da:	4651      	mov	r1, sl
 80050dc:	018a      	lsls	r2, r1, #6
 80050de:	4651      	mov	r1, sl
 80050e0:	ebb2 0801 	subs.w	r8, r2, r1
 80050e4:	4659      	mov	r1, fp
 80050e6:	eb63 0901 	sbc.w	r9, r3, r1
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	f04f 0300 	mov.w	r3, #0
 80050f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050fe:	4690      	mov	r8, r2
 8005100:	4699      	mov	r9, r3
 8005102:	4623      	mov	r3, r4
 8005104:	eb18 0303 	adds.w	r3, r8, r3
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	462b      	mov	r3, r5
 800510c:	eb49 0303 	adc.w	r3, r9, r3
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800511e:	4629      	mov	r1, r5
 8005120:	024b      	lsls	r3, r1, #9
 8005122:	4621      	mov	r1, r4
 8005124:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005128:	4621      	mov	r1, r4
 800512a:	024a      	lsls	r2, r1, #9
 800512c:	4610      	mov	r0, r2
 800512e:	4619      	mov	r1, r3
 8005130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005132:	2200      	movs	r2, #0
 8005134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005138:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800513c:	f7fb f8b8 	bl	80002b0 <__aeabi_uldivmod>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4613      	mov	r3, r2
 8005146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005148:	e058      	b.n	80051fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514a:	4b38      	ldr	r3, [pc, #224]	@ (800522c <HAL_RCC_GetSysClockFreq+0x200>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	099b      	lsrs	r3, r3, #6
 8005150:	2200      	movs	r2, #0
 8005152:	4618      	mov	r0, r3
 8005154:	4611      	mov	r1, r2
 8005156:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800515a:	623b      	str	r3, [r7, #32]
 800515c:	2300      	movs	r3, #0
 800515e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005160:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005164:	4642      	mov	r2, r8
 8005166:	464b      	mov	r3, r9
 8005168:	f04f 0000 	mov.w	r0, #0
 800516c:	f04f 0100 	mov.w	r1, #0
 8005170:	0159      	lsls	r1, r3, #5
 8005172:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005176:	0150      	lsls	r0, r2, #5
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4641      	mov	r1, r8
 800517e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005182:	4649      	mov	r1, r9
 8005184:	eb63 0b01 	sbc.w	fp, r3, r1
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005194:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005198:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800519c:	ebb2 040a 	subs.w	r4, r2, sl
 80051a0:	eb63 050b 	sbc.w	r5, r3, fp
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	00eb      	lsls	r3, r5, #3
 80051ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051b2:	00e2      	lsls	r2, r4, #3
 80051b4:	4614      	mov	r4, r2
 80051b6:	461d      	mov	r5, r3
 80051b8:	4643      	mov	r3, r8
 80051ba:	18e3      	adds	r3, r4, r3
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	464b      	mov	r3, r9
 80051c0:	eb45 0303 	adc.w	r3, r5, r3
 80051c4:	607b      	str	r3, [r7, #4]
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051d2:	4629      	mov	r1, r5
 80051d4:	028b      	lsls	r3, r1, #10
 80051d6:	4621      	mov	r1, r4
 80051d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051dc:	4621      	mov	r1, r4
 80051de:	028a      	lsls	r2, r1, #10
 80051e0:	4610      	mov	r0, r2
 80051e2:	4619      	mov	r1, r3
 80051e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051e6:	2200      	movs	r2, #0
 80051e8:	61bb      	str	r3, [r7, #24]
 80051ea:	61fa      	str	r2, [r7, #28]
 80051ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051f0:	f7fb f85e 	bl	80002b0 <__aeabi_uldivmod>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4613      	mov	r3, r2
 80051fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80051fc:	4b0b      	ldr	r3, [pc, #44]	@ (800522c <HAL_RCC_GetSysClockFreq+0x200>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	0c1b      	lsrs	r3, r3, #16
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	3301      	adds	r3, #1
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800520c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800520e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005216:	e002      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005218:	4b05      	ldr	r3, [pc, #20]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x204>)
 800521a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800521c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800521e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005220:	4618      	mov	r0, r3
 8005222:	3750      	adds	r7, #80	@ 0x50
 8005224:	46bd      	mov	sp, r7
 8005226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800522a:	bf00      	nop
 800522c:	40023800 	.word	0x40023800
 8005230:	00f42400 	.word	0x00f42400
 8005234:	007a1200 	.word	0x007a1200

08005238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800523c:	4b03      	ldr	r3, [pc, #12]	@ (800524c <HAL_RCC_GetHCLKFreq+0x14>)
 800523e:	681b      	ldr	r3, [r3, #0]
}
 8005240:	4618      	mov	r0, r3
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	2000001c 	.word	0x2000001c

08005250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005254:	f7ff fff0 	bl	8005238 <HAL_RCC_GetHCLKFreq>
 8005258:	4602      	mov	r2, r0
 800525a:	4b05      	ldr	r3, [pc, #20]	@ (8005270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	0a9b      	lsrs	r3, r3, #10
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	4903      	ldr	r1, [pc, #12]	@ (8005274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005266:	5ccb      	ldrb	r3, [r1, r3]
 8005268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800526c:	4618      	mov	r0, r3
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40023800 	.word	0x40023800
 8005274:	08009ad4 	.word	0x08009ad4

08005278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800527c:	f7ff ffdc 	bl	8005238 <HAL_RCC_GetHCLKFreq>
 8005280:	4602      	mov	r2, r0
 8005282:	4b05      	ldr	r3, [pc, #20]	@ (8005298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	0b5b      	lsrs	r3, r3, #13
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	4903      	ldr	r1, [pc, #12]	@ (800529c <HAL_RCC_GetPCLK2Freq+0x24>)
 800528e:	5ccb      	ldrb	r3, [r1, r3]
 8005290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005294:	4618      	mov	r0, r3
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40023800 	.word	0x40023800
 800529c:	08009ad4 	.word	0x08009ad4

080052a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e07b      	b.n	80053aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d108      	bne.n	80052cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052c2:	d009      	beq.n	80052d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	61da      	str	r2, [r3, #28]
 80052ca:	e005      	b.n	80052d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fd fb74 	bl	80029e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800530e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800535c:	ea42 0103 	orr.w	r1, r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005364:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	0c1b      	lsrs	r3, r3, #16
 8005376:	f003 0104 	and.w	r1, r3, #4
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	f003 0210 	and.w	r2, r3, #16
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005398:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b088      	sub	sp, #32
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	603b      	str	r3, [r7, #0]
 80053be:	4613      	mov	r3, r2
 80053c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053c2:	f7fd fe29 	bl	8003018 <HAL_GetTick>
 80053c6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80053c8:	88fb      	ldrh	r3, [r7, #6]
 80053ca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d001      	beq.n	80053dc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80053d8:	2302      	movs	r3, #2
 80053da:	e12a      	b.n	8005632 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_SPI_Transmit+0x36>
 80053e2:	88fb      	ldrh	r3, [r7, #6]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e122      	b.n	8005632 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d101      	bne.n	80053fa <HAL_SPI_Transmit+0x48>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e11b      	b.n	8005632 <HAL_SPI_Transmit+0x280>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2203      	movs	r2, #3
 8005406:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	88fa      	ldrh	r2, [r7, #6]
 800541a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	88fa      	ldrh	r2, [r7, #6]
 8005420:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005448:	d10f      	bne.n	800546a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005458:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005468:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005474:	2b40      	cmp	r3, #64	@ 0x40
 8005476:	d007      	beq.n	8005488 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005486:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005490:	d152      	bne.n	8005538 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <HAL_SPI_Transmit+0xee>
 800549a:	8b7b      	ldrh	r3, [r7, #26]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d145      	bne.n	800552c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a4:	881a      	ldrh	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b0:	1c9a      	adds	r2, r3, #2
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054c4:	e032      	b.n	800552c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d112      	bne.n	80054fa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d8:	881a      	ldrh	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e4:	1c9a      	adds	r2, r3, #2
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80054f8:	e018      	b.n	800552c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054fa:	f7fd fd8d 	bl	8003018 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d803      	bhi.n	8005512 <HAL_SPI_Transmit+0x160>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d102      	bne.n	8005518 <HAL_SPI_Transmit+0x166>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d109      	bne.n	800552c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e082      	b.n	8005632 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1c7      	bne.n	80054c6 <HAL_SPI_Transmit+0x114>
 8005536:	e053      	b.n	80055e0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <HAL_SPI_Transmit+0x194>
 8005540:	8b7b      	ldrh	r3, [r7, #26]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d147      	bne.n	80055d6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	330c      	adds	r3, #12
 8005550:	7812      	ldrb	r2, [r2, #0]
 8005552:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800556c:	e033      	b.n	80055d6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b02      	cmp	r3, #2
 800557a:	d113      	bne.n	80055a4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	330c      	adds	r3, #12
 8005586:	7812      	ldrb	r2, [r2, #0]
 8005588:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80055a2:	e018      	b.n	80055d6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055a4:	f7fd fd38 	bl	8003018 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d803      	bhi.n	80055bc <HAL_SPI_Transmit+0x20a>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ba:	d102      	bne.n	80055c2 <HAL_SPI_Transmit+0x210>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d109      	bne.n	80055d6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e02d      	b.n	8005632 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1c6      	bne.n	800556e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 fbd9 	bl	8005d9c <SPI_EndRxTxTransaction>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005630:	2300      	movs	r3, #0
  }
}
 8005632:	4618      	mov	r0, r3
 8005634:	3720      	adds	r7, #32
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b088      	sub	sp, #32
 800563e:	af02      	add	r7, sp, #8
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4613      	mov	r3, r2
 8005648:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b01      	cmp	r3, #1
 8005654:	d001      	beq.n	800565a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005656:	2302      	movs	r3, #2
 8005658:	e104      	b.n	8005864 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <HAL_SPI_Receive+0x2c>
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e0fc      	b.n	8005864 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005672:	d112      	bne.n	800569a <HAL_SPI_Receive+0x60>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10e      	bne.n	800569a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2204      	movs	r2, #4
 8005680:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005684:	88fa      	ldrh	r2, [r7, #6]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	4613      	mov	r3, r2
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f8eb 	bl	800586c <HAL_SPI_TransmitReceive>
 8005696:	4603      	mov	r3, r0
 8005698:	e0e4      	b.n	8005864 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800569a:	f7fd fcbd 	bl	8003018 <HAL_GetTick>
 800569e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_SPI_Receive+0x74>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e0da      	b.n	8005864 <HAL_SPI_Receive+0x22a>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2204      	movs	r2, #4
 80056ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	88fa      	ldrh	r2, [r7, #6]
 80056ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	88fa      	ldrh	r2, [r7, #6]
 80056d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056fc:	d10f      	bne.n	800571e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800570c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800571c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005728:	2b40      	cmp	r3, #64	@ 0x40
 800572a:	d007      	beq.n	800573c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800573a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d170      	bne.n	8005826 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005744:	e035      	b.n	80057b2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b01      	cmp	r3, #1
 8005752:	d115      	bne.n	8005780 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f103 020c 	add.w	r2, r3, #12
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005760:	7812      	ldrb	r2, [r2, #0]
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005774:	b29b      	uxth	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800577e:	e018      	b.n	80057b2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005780:	f7fd fc4a 	bl	8003018 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d803      	bhi.n	8005798 <HAL_SPI_Receive+0x15e>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d102      	bne.n	800579e <HAL_SPI_Receive+0x164>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d109      	bne.n	80057b2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e058      	b.n	8005864 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1c4      	bne.n	8005746 <HAL_SPI_Receive+0x10c>
 80057bc:	e038      	b.n	8005830 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d113      	bne.n	80057f4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d6:	b292      	uxth	r2, r2
 80057d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057de:	1c9a      	adds	r2, r3, #2
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057f2:	e018      	b.n	8005826 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057f4:	f7fd fc10 	bl	8003018 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d803      	bhi.n	800580c <HAL_SPI_Receive+0x1d2>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580a:	d102      	bne.n	8005812 <HAL_SPI_Receive+0x1d8>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d109      	bne.n	8005826 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e01e      	b.n	8005864 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1c6      	bne.n	80057be <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fa4b 	bl	8005cd0 <SPI_EndRxTransaction>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005862:	2300      	movs	r3, #0
  }
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08a      	sub	sp, #40	@ 0x28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800587a:	2301      	movs	r3, #1
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800587e:	f7fd fbcb 	bl	8003018 <HAL_GetTick>
 8005882:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800588a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005892:	887b      	ldrh	r3, [r7, #2]
 8005894:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005896:	7ffb      	ldrb	r3, [r7, #31]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d00c      	beq.n	80058b6 <HAL_SPI_TransmitReceive+0x4a>
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058a2:	d106      	bne.n	80058b2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d102      	bne.n	80058b2 <HAL_SPI_TransmitReceive+0x46>
 80058ac:	7ffb      	ldrb	r3, [r7, #31]
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d001      	beq.n	80058b6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80058b2:	2302      	movs	r3, #2
 80058b4:	e17f      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <HAL_SPI_TransmitReceive+0x5c>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_SPI_TransmitReceive+0x5c>
 80058c2:	887b      	ldrh	r3, [r7, #2]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e174      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_SPI_TransmitReceive+0x6e>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e16d      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x34a>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d003      	beq.n	80058f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2205      	movs	r2, #5
 80058f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	887a      	ldrh	r2, [r7, #2]
 8005906:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	887a      	ldrh	r2, [r7, #2]
 800590c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	887a      	ldrh	r2, [r7, #2]
 8005918:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	887a      	ldrh	r2, [r7, #2]
 800591e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005936:	2b40      	cmp	r3, #64	@ 0x40
 8005938:	d007      	beq.n	800594a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005948:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005952:	d17e      	bne.n	8005a52 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <HAL_SPI_TransmitReceive+0xf6>
 800595c:	8afb      	ldrh	r3, [r7, #22]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d16c      	bne.n	8005a3c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005966:	881a      	ldrh	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005972:	1c9a      	adds	r2, r3, #2
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005986:	e059      	b.n	8005a3c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b02      	cmp	r3, #2
 8005994:	d11b      	bne.n	80059ce <HAL_SPI_TransmitReceive+0x162>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d016      	beq.n	80059ce <HAL_SPI_TransmitReceive+0x162>
 80059a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d113      	bne.n	80059ce <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059aa:	881a      	ldrh	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b6:	1c9a      	adds	r2, r3, #2
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d119      	bne.n	8005a10 <HAL_SPI_TransmitReceive+0x1a4>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d014      	beq.n	8005a10 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f0:	b292      	uxth	r2, r2
 80059f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f8:	1c9a      	adds	r2, r3, #2
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a10:	f7fd fb02 	bl	8003018 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d80d      	bhi.n	8005a3c <HAL_SPI_TransmitReceive+0x1d0>
 8005a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a26:	d009      	beq.n	8005a3c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e0bc      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1a0      	bne.n	8005988 <HAL_SPI_TransmitReceive+0x11c>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d19b      	bne.n	8005988 <HAL_SPI_TransmitReceive+0x11c>
 8005a50:	e082      	b.n	8005b58 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_SPI_TransmitReceive+0x1f4>
 8005a5a:	8afb      	ldrh	r3, [r7, #22]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d171      	bne.n	8005b44 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	7812      	ldrb	r2, [r2, #0]
 8005a6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a86:	e05d      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d11c      	bne.n	8005ad0 <HAL_SPI_TransmitReceive+0x264>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d017      	beq.n	8005ad0 <HAL_SPI_TransmitReceive+0x264>
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d114      	bne.n	8005ad0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	330c      	adds	r3, #12
 8005ab0:	7812      	ldrb	r2, [r2, #0]
 8005ab2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d119      	bne.n	8005b12 <HAL_SPI_TransmitReceive+0x2a6>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d014      	beq.n	8005b12 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afa:	1c5a      	adds	r2, r3, #1
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	3b01      	subs	r3, #1
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b12:	f7fd fa81 	bl	8003018 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d803      	bhi.n	8005b2a <HAL_SPI_TransmitReceive+0x2be>
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d102      	bne.n	8005b30 <HAL_SPI_TransmitReceive+0x2c4>
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d109      	bne.n	8005b44 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e038      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d19c      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0x21c>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d197      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b58:	6a3a      	ldr	r2, [r7, #32]
 8005b5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f91d 	bl	8005d9c <SPI_EndRxTxTransaction>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d008      	beq.n	8005b7a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e01d      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10a      	bne.n	8005b98 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b82:	2300      	movs	r3, #0
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
  }
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3728      	adds	r7, #40	@ 0x28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bd0:	f7fd fa22 	bl	8003018 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	4413      	add	r3, r2
 8005bde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005be0:	f7fd fa1a 	bl	8003018 <HAL_GetTick>
 8005be4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005be6:	4b39      	ldr	r3, [pc, #228]	@ (8005ccc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	015b      	lsls	r3, r3, #5
 8005bec:	0d1b      	lsrs	r3, r3, #20
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	fb02 f303 	mul.w	r3, r2, r3
 8005bf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bf6:	e055      	b.n	8005ca4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfe:	d051      	beq.n	8005ca4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c00:	f7fd fa0a 	bl	8003018 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d902      	bls.n	8005c16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d13d      	bne.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c2e:	d111      	bne.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c38:	d004      	beq.n	8005c44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c42:	d107      	bne.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c5c:	d10f      	bne.n	8005c7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e018      	b.n	8005cc4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	e002      	b.n	8005ca4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689a      	ldr	r2, [r3, #8]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	4013      	ands	r3, r2
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	bf0c      	ite	eq
 8005cb4:	2301      	moveq	r3, #1
 8005cb6:	2300      	movne	r3, #0
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	461a      	mov	r2, r3
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d19a      	bne.n	8005bf8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3720      	adds	r7, #32
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	2000001c 	.word	0x2000001c

08005cd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ce4:	d111      	bne.n	8005d0a <SPI_EndRxTransaction+0x3a>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cee:	d004      	beq.n	8005cfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cf8:	d107      	bne.n	8005d0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d12:	d12a      	bne.n	8005d6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d1c:	d012      	beq.n	8005d44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2200      	movs	r2, #0
 8005d26:	2180      	movs	r1, #128	@ 0x80
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f7ff ff49 	bl	8005bc0 <SPI_WaitFlagStateUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d02d      	beq.n	8005d90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d38:	f043 0220 	orr.w	r2, r3, #32
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e026      	b.n	8005d92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f7ff ff36 	bl	8005bc0 <SPI_WaitFlagStateUntilTimeout>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d01a      	beq.n	8005d90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d5e:	f043 0220 	orr.w	r2, r3, #32
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e013      	b.n	8005d92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2200      	movs	r2, #0
 8005d72:	2101      	movs	r1, #1
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7ff ff23 	bl	8005bc0 <SPI_WaitFlagStateUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d84:	f043 0220 	orr.w	r2, r3, #32
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e000      	b.n	8005d92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2201      	movs	r2, #1
 8005db0:	2102      	movs	r1, #2
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff ff04 	bl	8005bc0 <SPI_WaitFlagStateUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc2:	f043 0220 	orr.w	r2, r3, #32
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e032      	b.n	8005e34 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005dce:	4b1b      	ldr	r3, [pc, #108]	@ (8005e3c <SPI_EndRxTxTransaction+0xa0>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8005e40 <SPI_EndRxTxTransaction+0xa4>)
 8005dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd8:	0d5b      	lsrs	r3, r3, #21
 8005dda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005dde:	fb02 f303 	mul.w	r3, r2, r3
 8005de2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dec:	d112      	bne.n	8005e14 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2200      	movs	r2, #0
 8005df6:	2180      	movs	r1, #128	@ 0x80
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f7ff fee1 	bl	8005bc0 <SPI_WaitFlagStateUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d016      	beq.n	8005e32 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e08:	f043 0220 	orr.w	r2, r3, #32
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e00f      	b.n	8005e34 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e2a:	2b80      	cmp	r3, #128	@ 0x80
 8005e2c:	d0f2      	beq.n	8005e14 <SPI_EndRxTxTransaction+0x78>
 8005e2e:	e000      	b.n	8005e32 <SPI_EndRxTxTransaction+0x96>
        break;
 8005e30:	bf00      	nop
  }

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	2000001c 	.word	0x2000001c
 8005e40:	165e9f81 	.word	0x165e9f81

08005e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e041      	b.n	8005eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7fc fe00 	bl	8002a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3304      	adds	r3, #4
 8005e80:	4619      	mov	r1, r3
 8005e82:	4610      	mov	r0, r2
 8005e84:	f000 fc32 	bl	80066ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d001      	beq.n	8005efc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e044      	b.n	8005f86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0201 	orr.w	r2, r2, #1
 8005f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1e      	ldr	r2, [pc, #120]	@ (8005f94 <HAL_TIM_Base_Start_IT+0xb0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d018      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x6c>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f26:	d013      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x6c>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005f98 <HAL_TIM_Base_Start_IT+0xb4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00e      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x6c>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a19      	ldr	r2, [pc, #100]	@ (8005f9c <HAL_TIM_Base_Start_IT+0xb8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d009      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x6c>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a17      	ldr	r2, [pc, #92]	@ (8005fa0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d004      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x6c>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a16      	ldr	r2, [pc, #88]	@ (8005fa4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d111      	bne.n	8005f74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b06      	cmp	r3, #6
 8005f60:	d010      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0201 	orr.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f72:	e007      	b.n	8005f84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40000800 	.word	0x40000800
 8005fa0:	40000c00 	.word	0x40000c00
 8005fa4:	40014000 	.word	0x40014000

08005fa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e041      	b.n	800603e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fc fd76 	bl	8002ac0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	f000 fb80 	bl	80066ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d109      	bne.n	800606c <HAL_TIM_PWM_Start+0x24>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b01      	cmp	r3, #1
 8006062:	bf14      	ite	ne
 8006064:	2301      	movne	r3, #1
 8006066:	2300      	moveq	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	e022      	b.n	80060b2 <HAL_TIM_PWM_Start+0x6a>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b04      	cmp	r3, #4
 8006070:	d109      	bne.n	8006086 <HAL_TIM_PWM_Start+0x3e>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b01      	cmp	r3, #1
 800607c:	bf14      	ite	ne
 800607e:	2301      	movne	r3, #1
 8006080:	2300      	moveq	r3, #0
 8006082:	b2db      	uxtb	r3, r3
 8006084:	e015      	b.n	80060b2 <HAL_TIM_PWM_Start+0x6a>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b08      	cmp	r3, #8
 800608a:	d109      	bne.n	80060a0 <HAL_TIM_PWM_Start+0x58>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	bf14      	ite	ne
 8006098:	2301      	movne	r3, #1
 800609a:	2300      	moveq	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	e008      	b.n	80060b2 <HAL_TIM_PWM_Start+0x6a>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	bf14      	ite	ne
 80060ac:	2301      	movne	r3, #1
 80060ae:	2300      	moveq	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e068      	b.n	800618c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d104      	bne.n	80060ca <HAL_TIM_PWM_Start+0x82>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060c8:	e013      	b.n	80060f2 <HAL_TIM_PWM_Start+0xaa>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d104      	bne.n	80060da <HAL_TIM_PWM_Start+0x92>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060d8:	e00b      	b.n	80060f2 <HAL_TIM_PWM_Start+0xaa>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d104      	bne.n	80060ea <HAL_TIM_PWM_Start+0xa2>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060e8:	e003      	b.n	80060f2 <HAL_TIM_PWM_Start+0xaa>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2202      	movs	r2, #2
 80060ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2201      	movs	r2, #1
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fda2 	bl	8006c44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a23      	ldr	r2, [pc, #140]	@ (8006194 <HAL_TIM_PWM_Start+0x14c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d107      	bne.n	800611a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006118:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1d      	ldr	r2, [pc, #116]	@ (8006194 <HAL_TIM_PWM_Start+0x14c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d018      	beq.n	8006156 <HAL_TIM_PWM_Start+0x10e>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800612c:	d013      	beq.n	8006156 <HAL_TIM_PWM_Start+0x10e>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a19      	ldr	r2, [pc, #100]	@ (8006198 <HAL_TIM_PWM_Start+0x150>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d00e      	beq.n	8006156 <HAL_TIM_PWM_Start+0x10e>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a17      	ldr	r2, [pc, #92]	@ (800619c <HAL_TIM_PWM_Start+0x154>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d009      	beq.n	8006156 <HAL_TIM_PWM_Start+0x10e>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a16      	ldr	r2, [pc, #88]	@ (80061a0 <HAL_TIM_PWM_Start+0x158>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d004      	beq.n	8006156 <HAL_TIM_PWM_Start+0x10e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a14      	ldr	r2, [pc, #80]	@ (80061a4 <HAL_TIM_PWM_Start+0x15c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d111      	bne.n	800617a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b06      	cmp	r3, #6
 8006166:	d010      	beq.n	800618a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0201 	orr.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006178:	e007      	b.n	800618a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f042 0201 	orr.w	r2, r2, #1
 8006188:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40010000 	.word	0x40010000
 8006198:	40000400 	.word	0x40000400
 800619c:	40000800 	.word	0x40000800
 80061a0:	40000c00 	.word	0x40000c00
 80061a4:	40014000 	.word	0x40014000

080061a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d020      	beq.n	800620c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01b      	beq.n	800620c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0202 	mvn.w	r2, #2
 80061dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fa5b 	bl	80066ae <HAL_TIM_IC_CaptureCallback>
 80061f8:	e005      	b.n	8006206 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fa4d 	bl	800669a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fa5e 	bl	80066c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d020      	beq.n	8006258 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01b      	beq.n	8006258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0204 	mvn.w	r2, #4
 8006228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fa35 	bl	80066ae <HAL_TIM_IC_CaptureCallback>
 8006244:	e005      	b.n	8006252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fa27 	bl	800669a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fa38 	bl	80066c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d020      	beq.n	80062a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f003 0308 	and.w	r3, r3, #8
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01b      	beq.n	80062a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0208 	mvn.w	r2, #8
 8006274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2204      	movs	r2, #4
 800627a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fa0f 	bl	80066ae <HAL_TIM_IC_CaptureCallback>
 8006290:	e005      	b.n	800629e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fa01 	bl	800669a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fa12 	bl	80066c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f003 0310 	and.w	r3, r3, #16
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d020      	beq.n	80062f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01b      	beq.n	80062f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0210 	mvn.w	r2, #16
 80062c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2208      	movs	r2, #8
 80062c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f9e9 	bl	80066ae <HAL_TIM_IC_CaptureCallback>
 80062dc:	e005      	b.n	80062ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f9db 	bl	800669a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f9ec 	bl	80066c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00c      	beq.n	8006314 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f06f 0201 	mvn.w	r2, #1
 800630c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fb fb24 	bl	800195c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006324:	2b00      	cmp	r3, #0
 8006326:	d007      	beq.n	8006338 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fd24 	bl	8006d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00c      	beq.n	800635c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d007      	beq.n	800635c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f9bd 	bl	80066d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00c      	beq.n	8006380 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0220 	mvn.w	r2, #32
 8006378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fcf6 	bl	8006d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d101      	bne.n	80063a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063a2:	2302      	movs	r3, #2
 80063a4:	e0ae      	b.n	8006504 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b0c      	cmp	r3, #12
 80063b2:	f200 809f 	bhi.w	80064f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063b6:	a201      	add	r2, pc, #4	@ (adr r2, 80063bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063bc:	080063f1 	.word	0x080063f1
 80063c0:	080064f5 	.word	0x080064f5
 80063c4:	080064f5 	.word	0x080064f5
 80063c8:	080064f5 	.word	0x080064f5
 80063cc:	08006431 	.word	0x08006431
 80063d0:	080064f5 	.word	0x080064f5
 80063d4:	080064f5 	.word	0x080064f5
 80063d8:	080064f5 	.word	0x080064f5
 80063dc:	08006473 	.word	0x08006473
 80063e0:	080064f5 	.word	0x080064f5
 80063e4:	080064f5 	.word	0x080064f5
 80063e8:	080064f5 	.word	0x080064f5
 80063ec:	080064b3 	.word	0x080064b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 f9fe 	bl	80067f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0208 	orr.w	r2, r2, #8
 800640a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	699a      	ldr	r2, [r3, #24]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 0204 	bic.w	r2, r2, #4
 800641a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6999      	ldr	r1, [r3, #24]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	619a      	str	r2, [r3, #24]
      break;
 800642e:	e064      	b.n	80064fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68b9      	ldr	r1, [r7, #8]
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fa44 	bl	80068c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800644a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699a      	ldr	r2, [r3, #24]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800645a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6999      	ldr	r1, [r3, #24]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	021a      	lsls	r2, r3, #8
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	619a      	str	r2, [r3, #24]
      break;
 8006470:	e043      	b.n	80064fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	4618      	mov	r0, r3
 800647a:	f000 fa8f 	bl	800699c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0208 	orr.w	r2, r2, #8
 800648c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69da      	ldr	r2, [r3, #28]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0204 	bic.w	r2, r2, #4
 800649c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69d9      	ldr	r1, [r3, #28]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	691a      	ldr	r2, [r3, #16]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	61da      	str	r2, [r3, #28]
      break;
 80064b0:	e023      	b.n	80064fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fad9 	bl	8006a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69da      	ldr	r2, [r3, #28]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69d9      	ldr	r1, [r3, #28]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	021a      	lsls	r2, r3, #8
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	61da      	str	r2, [r3, #28]
      break;
 80064f2:	e002      	b.n	80064fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	75fb      	strb	r3, [r7, #23]
      break;
 80064f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006502:	7dfb      	ldrb	r3, [r7, #23]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <HAL_TIM_ConfigClockSource+0x1c>
 8006524:	2302      	movs	r3, #2
 8006526:	e0b4      	b.n	8006692 <HAL_TIM_ConfigClockSource+0x186>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800654e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006560:	d03e      	beq.n	80065e0 <HAL_TIM_ConfigClockSource+0xd4>
 8006562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006566:	f200 8087 	bhi.w	8006678 <HAL_TIM_ConfigClockSource+0x16c>
 800656a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800656e:	f000 8086 	beq.w	800667e <HAL_TIM_ConfigClockSource+0x172>
 8006572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006576:	d87f      	bhi.n	8006678 <HAL_TIM_ConfigClockSource+0x16c>
 8006578:	2b70      	cmp	r3, #112	@ 0x70
 800657a:	d01a      	beq.n	80065b2 <HAL_TIM_ConfigClockSource+0xa6>
 800657c:	2b70      	cmp	r3, #112	@ 0x70
 800657e:	d87b      	bhi.n	8006678 <HAL_TIM_ConfigClockSource+0x16c>
 8006580:	2b60      	cmp	r3, #96	@ 0x60
 8006582:	d050      	beq.n	8006626 <HAL_TIM_ConfigClockSource+0x11a>
 8006584:	2b60      	cmp	r3, #96	@ 0x60
 8006586:	d877      	bhi.n	8006678 <HAL_TIM_ConfigClockSource+0x16c>
 8006588:	2b50      	cmp	r3, #80	@ 0x50
 800658a:	d03c      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0xfa>
 800658c:	2b50      	cmp	r3, #80	@ 0x50
 800658e:	d873      	bhi.n	8006678 <HAL_TIM_ConfigClockSource+0x16c>
 8006590:	2b40      	cmp	r3, #64	@ 0x40
 8006592:	d058      	beq.n	8006646 <HAL_TIM_ConfigClockSource+0x13a>
 8006594:	2b40      	cmp	r3, #64	@ 0x40
 8006596:	d86f      	bhi.n	8006678 <HAL_TIM_ConfigClockSource+0x16c>
 8006598:	2b30      	cmp	r3, #48	@ 0x30
 800659a:	d064      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x15a>
 800659c:	2b30      	cmp	r3, #48	@ 0x30
 800659e:	d86b      	bhi.n	8006678 <HAL_TIM_ConfigClockSource+0x16c>
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d060      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x15a>
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	d867      	bhi.n	8006678 <HAL_TIM_ConfigClockSource+0x16c>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d05c      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x15a>
 80065ac:	2b10      	cmp	r3, #16
 80065ae:	d05a      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x15a>
 80065b0:	e062      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065c2:	f000 fb1f 	bl	8006c04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80065d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	609a      	str	r2, [r3, #8]
      break;
 80065de:	e04f      	b.n	8006680 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065f0:	f000 fb08 	bl	8006c04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006602:	609a      	str	r2, [r3, #8]
      break;
 8006604:	e03c      	b.n	8006680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006612:	461a      	mov	r2, r3
 8006614:	f000 fa7c 	bl	8006b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2150      	movs	r1, #80	@ 0x50
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fad5 	bl	8006bce <TIM_ITRx_SetConfig>
      break;
 8006624:	e02c      	b.n	8006680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006632:	461a      	mov	r2, r3
 8006634:	f000 fa9b 	bl	8006b6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2160      	movs	r1, #96	@ 0x60
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fac5 	bl	8006bce <TIM_ITRx_SetConfig>
      break;
 8006644:	e01c      	b.n	8006680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006652:	461a      	mov	r2, r3
 8006654:	f000 fa5c 	bl	8006b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2140      	movs	r1, #64	@ 0x40
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fab5 	bl	8006bce <TIM_ITRx_SetConfig>
      break;
 8006664:	e00c      	b.n	8006680 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f000 faac 	bl	8006bce <TIM_ITRx_SetConfig>
      break;
 8006676:	e003      	b.n	8006680 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	73fb      	strb	r3, [r7, #15]
      break;
 800667c:	e000      	b.n	8006680 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800667e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006690:	7bfb      	ldrb	r3, [r7, #15]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
	...

080066ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a37      	ldr	r2, [pc, #220]	@ (80067dc <TIM_Base_SetConfig+0xf0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00f      	beq.n	8006724 <TIM_Base_SetConfig+0x38>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800670a:	d00b      	beq.n	8006724 <TIM_Base_SetConfig+0x38>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a34      	ldr	r2, [pc, #208]	@ (80067e0 <TIM_Base_SetConfig+0xf4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d007      	beq.n	8006724 <TIM_Base_SetConfig+0x38>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a33      	ldr	r2, [pc, #204]	@ (80067e4 <TIM_Base_SetConfig+0xf8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_Base_SetConfig+0x38>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a32      	ldr	r2, [pc, #200]	@ (80067e8 <TIM_Base_SetConfig+0xfc>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d108      	bne.n	8006736 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800672a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a28      	ldr	r2, [pc, #160]	@ (80067dc <TIM_Base_SetConfig+0xf0>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d01b      	beq.n	8006776 <TIM_Base_SetConfig+0x8a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006744:	d017      	beq.n	8006776 <TIM_Base_SetConfig+0x8a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a25      	ldr	r2, [pc, #148]	@ (80067e0 <TIM_Base_SetConfig+0xf4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d013      	beq.n	8006776 <TIM_Base_SetConfig+0x8a>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a24      	ldr	r2, [pc, #144]	@ (80067e4 <TIM_Base_SetConfig+0xf8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00f      	beq.n	8006776 <TIM_Base_SetConfig+0x8a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a23      	ldr	r2, [pc, #140]	@ (80067e8 <TIM_Base_SetConfig+0xfc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00b      	beq.n	8006776 <TIM_Base_SetConfig+0x8a>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a22      	ldr	r2, [pc, #136]	@ (80067ec <TIM_Base_SetConfig+0x100>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d007      	beq.n	8006776 <TIM_Base_SetConfig+0x8a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a21      	ldr	r2, [pc, #132]	@ (80067f0 <TIM_Base_SetConfig+0x104>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d003      	beq.n	8006776 <TIM_Base_SetConfig+0x8a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a20      	ldr	r2, [pc, #128]	@ (80067f4 <TIM_Base_SetConfig+0x108>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d108      	bne.n	8006788 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800677c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a0c      	ldr	r2, [pc, #48]	@ (80067dc <TIM_Base_SetConfig+0xf0>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d103      	bne.n	80067b6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	691a      	ldr	r2, [r3, #16]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f043 0204 	orr.w	r2, r3, #4
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	601a      	str	r2, [r3, #0]
}
 80067ce:	bf00      	nop
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40010000 	.word	0x40010000
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40000800 	.word	0x40000800
 80067e8:	40000c00 	.word	0x40000c00
 80067ec:	40014000 	.word	0x40014000
 80067f0:	40014400 	.word	0x40014400
 80067f4:	40014800 	.word	0x40014800

080067f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	f023 0201 	bic.w	r2, r3, #1
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0303 	bic.w	r3, r3, #3
 800682e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f023 0302 	bic.w	r3, r3, #2
 8006840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a1c      	ldr	r2, [pc, #112]	@ (80068c0 <TIM_OC1_SetConfig+0xc8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d10c      	bne.n	800686e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f023 0308 	bic.w	r3, r3, #8
 800685a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	4313      	orrs	r3, r2
 8006864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f023 0304 	bic.w	r3, r3, #4
 800686c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a13      	ldr	r2, [pc, #76]	@ (80068c0 <TIM_OC1_SetConfig+0xc8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d111      	bne.n	800689a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800687c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	621a      	str	r2, [r3, #32]
}
 80068b4:	bf00      	nop
 80068b6:	371c      	adds	r7, #28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	40010000 	.word	0x40010000

080068c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	f023 0210 	bic.w	r2, r3, #16
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	021b      	lsls	r3, r3, #8
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4313      	orrs	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f023 0320 	bic.w	r3, r3, #32
 800690e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a1e      	ldr	r2, [pc, #120]	@ (8006998 <TIM_OC2_SetConfig+0xd4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d10d      	bne.n	8006940 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800692a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	4313      	orrs	r3, r2
 8006936:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800693e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a15      	ldr	r2, [pc, #84]	@ (8006998 <TIM_OC2_SetConfig+0xd4>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d113      	bne.n	8006970 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800694e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	621a      	str	r2, [r3, #32]
}
 800698a:	bf00      	nop
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40010000 	.word	0x40010000

0800699c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0303 	bic.w	r3, r3, #3
 80069d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	021b      	lsls	r3, r3, #8
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a6c <TIM_OC3_SetConfig+0xd0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d10d      	bne.n	8006a16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a14      	ldr	r2, [pc, #80]	@ (8006a6c <TIM_OC3_SetConfig+0xd0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d113      	bne.n	8006a46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	621a      	str	r2, [r3, #32]
}
 8006a60:	bf00      	nop
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	40010000 	.word	0x40010000

08006a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	021b      	lsls	r3, r3, #8
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	031b      	lsls	r3, r3, #12
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a10      	ldr	r2, [pc, #64]	@ (8006b0c <TIM_OC4_SetConfig+0x9c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d109      	bne.n	8006ae4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	019b      	lsls	r3, r3, #6
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	621a      	str	r2, [r3, #32]
}
 8006afe:	bf00      	nop
 8006b00:	371c      	adds	r7, #28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40010000 	.word	0x40010000

08006b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	f023 0201 	bic.w	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	011b      	lsls	r3, r3, #4
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f023 030a 	bic.w	r3, r3, #10
 8006b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	621a      	str	r2, [r3, #32]
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b087      	sub	sp, #28
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	f023 0210 	bic.w	r2, r3, #16
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	031b      	lsls	r3, r3, #12
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006baa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b085      	sub	sp, #20
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	f043 0307 	orr.w	r3, r3, #7
 8006bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	609a      	str	r2, [r3, #8]
}
 8006bf8:	bf00      	nop
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	021a      	lsls	r2, r3, #8
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	609a      	str	r2, [r3, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f003 031f 	and.w	r3, r3, #31
 8006c56:	2201      	movs	r2, #1
 8006c58:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a1a      	ldr	r2, [r3, #32]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	43db      	mvns	r3, r3
 8006c66:	401a      	ands	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6a1a      	ldr	r2, [r3, #32]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f003 031f 	and.w	r3, r3, #31
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	fa01 f303 	lsl.w	r3, r1, r3
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	621a      	str	r2, [r3, #32]
}
 8006c82:	bf00      	nop
 8006c84:	371c      	adds	r7, #28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
	...

08006c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e050      	b.n	8006d4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8006d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d018      	beq.n	8006d1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf4:	d013      	beq.n	8006d1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a18      	ldr	r2, [pc, #96]	@ (8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d00e      	beq.n	8006d1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a16      	ldr	r2, [pc, #88]	@ (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d009      	beq.n	8006d1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a15      	ldr	r2, [pc, #84]	@ (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d004      	beq.n	8006d1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a13      	ldr	r2, [pc, #76]	@ (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d10c      	bne.n	8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	40010000 	.word	0x40010000
 8006d5c:	40000400 	.word	0x40000400
 8006d60:	40000800 	.word	0x40000800
 8006d64:	40000c00 	.word	0x40000c00
 8006d68:	40014000 	.word	0x40014000

08006d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e042      	b.n	8006e2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d106      	bne.n	8006dc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7fb fee2 	bl	8002b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2224      	movs	r2, #36	@ 0x24
 8006dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006dd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fdd3 	bl	8007984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	691a      	ldr	r2, [r3, #16]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	695a      	ldr	r2, [r3, #20]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2220      	movs	r2, #32
 8006e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b08a      	sub	sp, #40	@ 0x28
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	4613      	mov	r3, r2
 8006e42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b20      	cmp	r3, #32
 8006e52:	d175      	bne.n	8006f40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <HAL_UART_Transmit+0x2c>
 8006e5a:	88fb      	ldrh	r3, [r7, #6]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e06e      	b.n	8006f42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2221      	movs	r2, #33	@ 0x21
 8006e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e72:	f7fc f8d1 	bl	8003018 <HAL_GetTick>
 8006e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	88fa      	ldrh	r2, [r7, #6]
 8006e7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	88fa      	ldrh	r2, [r7, #6]
 8006e82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e8c:	d108      	bne.n	8006ea0 <HAL_UART_Transmit+0x6c>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d104      	bne.n	8006ea0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	e003      	b.n	8006ea8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ea8:	e02e      	b.n	8006f08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2180      	movs	r1, #128	@ 0x80
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 fb37 	bl	8007528 <UART_WaitOnFlagUntilTimeout>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d005      	beq.n	8006ecc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e03a      	b.n	8006f42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10b      	bne.n	8006eea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ee0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	3302      	adds	r3, #2
 8006ee6:	61bb      	str	r3, [r7, #24]
 8006ee8:	e007      	b.n	8006efa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	781a      	ldrb	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3b01      	subs	r3, #1
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1cb      	bne.n	8006eaa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2140      	movs	r1, #64	@ 0x40
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 fb03 	bl	8007528 <UART_WaitOnFlagUntilTimeout>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e006      	b.n	8006f42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	e000      	b.n	8006f42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006f40:	2302      	movs	r3, #2
  }
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3720      	adds	r7, #32
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	4613      	mov	r3, r2
 8006f56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b20      	cmp	r3, #32
 8006f62:	d112      	bne.n	8006f8a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <HAL_UART_Receive_IT+0x26>
 8006f6a:	88fb      	ldrh	r3, [r7, #6]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e00b      	b.n	8006f8c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f7a:	88fb      	ldrh	r3, [r7, #6]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 fb2a 	bl	80075da <UART_Start_Receive_IT>
 8006f86:	4603      	mov	r3, r0
 8006f88:	e000      	b.n	8006f8c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006f8a:	2302      	movs	r3, #2
  }
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b0ba      	sub	sp, #232	@ 0xe8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006fd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10f      	bne.n	8006ffa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fde:	f003 0320 	and.w	r3, r3, #32
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d009      	beq.n	8006ffa <HAL_UART_IRQHandler+0x66>
 8006fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fea:	f003 0320 	and.w	r3, r3, #32
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fc07 	bl	8007806 <UART_Receive_IT>
      return;
 8006ff8:	e273      	b.n	80074e2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ffa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 80de 	beq.w	80071c0 <HAL_UART_IRQHandler+0x22c>
 8007004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d106      	bne.n	800701e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007014:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 80d1 	beq.w	80071c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800701e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00b      	beq.n	8007042 <HAL_UART_IRQHandler+0xae>
 800702a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800702e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007032:	2b00      	cmp	r3, #0
 8007034:	d005      	beq.n	8007042 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800703a:	f043 0201 	orr.w	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <HAL_UART_IRQHandler+0xd2>
 800704e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d005      	beq.n	8007066 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800705e:	f043 0202 	orr.w	r2, r3, #2
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00b      	beq.n	800708a <HAL_UART_IRQHandler+0xf6>
 8007072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d005      	beq.n	800708a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007082:	f043 0204 	orr.w	r2, r3, #4
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800708a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800708e:	f003 0308 	and.w	r3, r3, #8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d011      	beq.n	80070ba <HAL_UART_IRQHandler+0x126>
 8007096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d105      	bne.n	80070ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80070a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d005      	beq.n	80070ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b2:	f043 0208 	orr.w	r2, r3, #8
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 820a 	beq.w	80074d8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070c8:	f003 0320 	and.w	r3, r3, #32
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d008      	beq.n	80070e2 <HAL_UART_IRQHandler+0x14e>
 80070d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070d4:	f003 0320 	and.w	r3, r3, #32
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fb92 	bl	8007806 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ec:	2b40      	cmp	r3, #64	@ 0x40
 80070ee:	bf0c      	ite	eq
 80070f0:	2301      	moveq	r3, #1
 80070f2:	2300      	movne	r3, #0
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070fe:	f003 0308 	and.w	r3, r3, #8
 8007102:	2b00      	cmp	r3, #0
 8007104:	d103      	bne.n	800710e <HAL_UART_IRQHandler+0x17a>
 8007106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800710a:	2b00      	cmp	r3, #0
 800710c:	d04f      	beq.n	80071ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fa9d 	bl	800764e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800711e:	2b40      	cmp	r3, #64	@ 0x40
 8007120:	d141      	bne.n	80071a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3314      	adds	r3, #20
 8007128:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007138:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800713c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007140:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3314      	adds	r3, #20
 800714a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800714e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007152:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800715a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007166:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1d9      	bne.n	8007122 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d013      	beq.n	800719e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800717a:	4a8a      	ldr	r2, [pc, #552]	@ (80073a4 <HAL_UART_IRQHandler+0x410>)
 800717c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007182:	4618      	mov	r0, r3
 8007184:	f7fc fd65 	bl	8003c52 <HAL_DMA_Abort_IT>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d016      	beq.n	80071bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007198:	4610      	mov	r0, r2
 800719a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800719c:	e00e      	b.n	80071bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f9ac 	bl	80074fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a4:	e00a      	b.n	80071bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f9a8 	bl	80074fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ac:	e006      	b.n	80071bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f9a4 	bl	80074fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80071ba:	e18d      	b.n	80074d8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071bc:	bf00      	nop
    return;
 80071be:	e18b      	b.n	80074d8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	f040 8167 	bne.w	8007498 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80071ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ce:	f003 0310 	and.w	r3, r3, #16
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 8160 	beq.w	8007498 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80071d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 8159 	beq.w	8007498 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071e6:	2300      	movs	r3, #0
 80071e8:	60bb      	str	r3, [r7, #8]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	60bb      	str	r3, [r7, #8]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	60bb      	str	r3, [r7, #8]
 80071fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007206:	2b40      	cmp	r3, #64	@ 0x40
 8007208:	f040 80ce 	bne.w	80073a8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007218:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 80a9 	beq.w	8007374 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007226:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800722a:	429a      	cmp	r2, r3
 800722c:	f080 80a2 	bcs.w	8007374 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007236:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007242:	f000 8088 	beq.w	8007356 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	330c      	adds	r3, #12
 800724c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800725c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007264:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007272:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007276:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800727e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800728a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1d9      	bne.n	8007246 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3314      	adds	r3, #20
 8007298:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80072a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072a4:	f023 0301 	bic.w	r3, r3, #1
 80072a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3314      	adds	r3, #20
 80072b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80072b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80072ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80072be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80072c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e1      	bne.n	8007292 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3314      	adds	r3, #20
 80072d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072d8:	e853 3f00 	ldrex	r3, [r3]
 80072dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80072de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3314      	adds	r3, #20
 80072ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80072f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80072f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80072f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e3      	bne.n	80072ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	330c      	adds	r3, #12
 800731a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800731e:	e853 3f00 	ldrex	r3, [r3]
 8007322:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007326:	f023 0310 	bic.w	r3, r3, #16
 800732a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	330c      	adds	r3, #12
 8007334:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007338:	65ba      	str	r2, [r7, #88]	@ 0x58
 800733a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800733e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e3      	bne.n	8007314 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007350:	4618      	mov	r0, r3
 8007352:	f7fc fc0e 	bl	8003b72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2202      	movs	r2, #2
 800735a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007364:	b29b      	uxth	r3, r3
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	b29b      	uxth	r3, r3
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f8cf 	bl	8007510 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007372:	e0b3      	b.n	80074dc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007378:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800737c:	429a      	cmp	r2, r3
 800737e:	f040 80ad 	bne.w	80074dc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800738c:	f040 80a6 	bne.w	80074dc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f8b7 	bl	8007510 <HAL_UARTEx_RxEventCallback>
      return;
 80073a2:	e09b      	b.n	80074dc <HAL_UART_IRQHandler+0x548>
 80073a4:	08007715 	.word	0x08007715
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 808e 	beq.w	80074e0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80073c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 8089 	beq.w	80074e0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	330c      	adds	r3, #12
 80073d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d8:	e853 3f00 	ldrex	r3, [r3]
 80073dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	330c      	adds	r3, #12
 80073ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80073f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80073f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e3      	bne.n	80073ce <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3314      	adds	r3, #20
 800740c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	623b      	str	r3, [r7, #32]
   return(result);
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	f023 0301 	bic.w	r3, r3, #1
 800741c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3314      	adds	r3, #20
 8007426:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800742a:	633a      	str	r2, [r7, #48]	@ 0x30
 800742c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e3      	bne.n	8007406 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2220      	movs	r2, #32
 8007442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	330c      	adds	r3, #12
 8007452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	60fb      	str	r3, [r7, #12]
   return(result);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0310 	bic.w	r3, r3, #16
 8007462:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	330c      	adds	r3, #12
 800746c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007470:	61fa      	str	r2, [r7, #28]
 8007472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007474:	69b9      	ldr	r1, [r7, #24]
 8007476:	69fa      	ldr	r2, [r7, #28]
 8007478:	e841 2300 	strex	r3, r2, [r1]
 800747c:	617b      	str	r3, [r7, #20]
   return(result);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e3      	bne.n	800744c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800748a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f83d 	bl	8007510 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007496:	e023      	b.n	80074e0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800749c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d009      	beq.n	80074b8 <HAL_UART_IRQHandler+0x524>
 80074a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f940 	bl	8007736 <UART_Transmit_IT>
    return;
 80074b6:	e014      	b.n	80074e2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00e      	beq.n	80074e2 <HAL_UART_IRQHandler+0x54e>
 80074c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d008      	beq.n	80074e2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f980 	bl	80077d6 <UART_EndTransmit_IT>
    return;
 80074d6:	e004      	b.n	80074e2 <HAL_UART_IRQHandler+0x54e>
    return;
 80074d8:	bf00      	nop
 80074da:	e002      	b.n	80074e2 <HAL_UART_IRQHandler+0x54e>
      return;
 80074dc:	bf00      	nop
 80074de:	e000      	b.n	80074e2 <HAL_UART_IRQHandler+0x54e>
      return;
 80074e0:	bf00      	nop
  }
}
 80074e2:	37e8      	adds	r7, #232	@ 0xe8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	4613      	mov	r3, r2
 8007536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007538:	e03b      	b.n	80075b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007540:	d037      	beq.n	80075b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007542:	f7fb fd69 	bl	8003018 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	6a3a      	ldr	r2, [r7, #32]
 800754e:	429a      	cmp	r2, r3
 8007550:	d302      	bcc.n	8007558 <UART_WaitOnFlagUntilTimeout+0x30>
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e03a      	b.n	80075d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f003 0304 	and.w	r3, r3, #4
 8007566:	2b00      	cmp	r3, #0
 8007568:	d023      	beq.n	80075b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b80      	cmp	r3, #128	@ 0x80
 800756e:	d020      	beq.n	80075b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2b40      	cmp	r3, #64	@ 0x40
 8007574:	d01d      	beq.n	80075b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0308 	and.w	r3, r3, #8
 8007580:	2b08      	cmp	r3, #8
 8007582:	d116      	bne.n	80075b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007584:	2300      	movs	r3, #0
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 f857 	bl	800764e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2208      	movs	r2, #8
 80075a4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e00f      	b.n	80075d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	4013      	ands	r3, r2
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	429a      	cmp	r2, r3
 80075c0:	bf0c      	ite	eq
 80075c2:	2301      	moveq	r3, #1
 80075c4:	2300      	movne	r3, #0
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	461a      	mov	r2, r3
 80075ca:	79fb      	ldrb	r3, [r7, #7]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d0b4      	beq.n	800753a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	4613      	mov	r3, r2
 80075e6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	88fa      	ldrh	r2, [r7, #6]
 80075f2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	88fa      	ldrh	r2, [r7, #6]
 80075f8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2222      	movs	r2, #34	@ 0x22
 8007604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d007      	beq.n	8007620 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800761e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	695a      	ldr	r2, [r3, #20]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f042 0201 	orr.w	r2, r2, #1
 800762e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f042 0220 	orr.w	r2, r2, #32
 800763e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800764e:	b480      	push	{r7}
 8007650:	b095      	sub	sp, #84	@ 0x54
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	330c      	adds	r3, #12
 800765c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007668:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800766c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	330c      	adds	r3, #12
 8007674:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007676:	643a      	str	r2, [r7, #64]	@ 0x40
 8007678:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800767c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e5      	bne.n	8007656 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3314      	adds	r3, #20
 8007690:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	e853 3f00 	ldrex	r3, [r3]
 8007698:	61fb      	str	r3, [r7, #28]
   return(result);
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	f023 0301 	bic.w	r3, r3, #1
 80076a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3314      	adds	r3, #20
 80076a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076b2:	e841 2300 	strex	r3, r2, [r1]
 80076b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1e5      	bne.n	800768a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d119      	bne.n	80076fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	330c      	adds	r3, #12
 80076cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	f023 0310 	bic.w	r3, r3, #16
 80076dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	330c      	adds	r3, #12
 80076e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076e6:	61ba      	str	r2, [r7, #24]
 80076e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	6979      	ldr	r1, [r7, #20]
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	613b      	str	r3, [r7, #16]
   return(result);
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e5      	bne.n	80076c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007708:	bf00      	nop
 800770a:	3754      	adds	r7, #84	@ 0x54
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007720:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f7ff fee7 	bl	80074fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800772e:	bf00      	nop
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007736:	b480      	push	{r7}
 8007738:	b085      	sub	sp, #20
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b21      	cmp	r3, #33	@ 0x21
 8007748:	d13e      	bne.n	80077c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007752:	d114      	bne.n	800777e <UART_Transmit_IT+0x48>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d110      	bne.n	800777e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007770:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	1c9a      	adds	r2, r3, #2
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	621a      	str	r2, [r3, #32]
 800777c:	e008      	b.n	8007790 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	1c59      	adds	r1, r3, #1
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	6211      	str	r1, [r2, #32]
 8007788:	781a      	ldrb	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	b29b      	uxth	r3, r3
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	4619      	mov	r1, r3
 800779e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10f      	bne.n	80077c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68da      	ldr	r2, [r3, #12]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	e000      	b.n	80077ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077c8:	2302      	movs	r3, #2
  }
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b082      	sub	sp, #8
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68da      	ldr	r2, [r3, #12]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff fe76 	bl	80074e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b08c      	sub	sp, #48	@ 0x30
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800780e:	2300      	movs	r3, #0
 8007810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b22      	cmp	r3, #34	@ 0x22
 8007820:	f040 80aa 	bne.w	8007978 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800782c:	d115      	bne.n	800785a <UART_Receive_IT+0x54>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d111      	bne.n	800785a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	b29b      	uxth	r3, r3
 8007844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007848:	b29a      	uxth	r2, r3
 800784a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007852:	1c9a      	adds	r2, r3, #2
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	629a      	str	r2, [r3, #40]	@ 0x28
 8007858:	e024      	b.n	80078a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007868:	d007      	beq.n	800787a <UART_Receive_IT+0x74>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <UART_Receive_IT+0x82>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	b2da      	uxtb	r2, r3
 8007882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007884:	701a      	strb	r2, [r3, #0]
 8007886:	e008      	b.n	800789a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	b2db      	uxtb	r3, r3
 8007890:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007894:	b2da      	uxtb	r2, r3
 8007896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007898:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	4619      	mov	r1, r3
 80078b2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d15d      	bne.n	8007974 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0220 	bic.w	r2, r2, #32
 80078c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80078d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	695a      	ldr	r2, [r3, #20]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 0201 	bic.w	r2, r2, #1
 80078e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d135      	bne.n	800796a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	330c      	adds	r3, #12
 800790a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	e853 3f00 	ldrex	r3, [r3]
 8007912:	613b      	str	r3, [r7, #16]
   return(result);
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f023 0310 	bic.w	r3, r3, #16
 800791a:	627b      	str	r3, [r7, #36]	@ 0x24
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	330c      	adds	r3, #12
 8007922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007924:	623a      	str	r2, [r7, #32]
 8007926:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	69f9      	ldr	r1, [r7, #28]
 800792a:	6a3a      	ldr	r2, [r7, #32]
 800792c:	e841 2300 	strex	r3, r2, [r1]
 8007930:	61bb      	str	r3, [r7, #24]
   return(result);
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e5      	bne.n	8007904 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0310 	and.w	r3, r3, #16
 8007942:	2b10      	cmp	r3, #16
 8007944:	d10a      	bne.n	800795c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007946:	2300      	movs	r3, #0
 8007948:	60fb      	str	r3, [r7, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	60fb      	str	r3, [r7, #12]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	60fb      	str	r3, [r7, #12]
 800795a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff fdd4 	bl	8007510 <HAL_UARTEx_RxEventCallback>
 8007968:	e002      	b.n	8007970 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7f9 face 	bl	8000f0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	e002      	b.n	800797a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	e000      	b.n	800797a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007978:	2302      	movs	r3, #2
  }
}
 800797a:	4618      	mov	r0, r3
 800797c:	3730      	adds	r7, #48	@ 0x30
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
	...

08007984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007988:	b0c0      	sub	sp, #256	@ 0x100
 800798a:	af00      	add	r7, sp, #0
 800798c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800799c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a0:	68d9      	ldr	r1, [r3, #12]
 80079a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	ea40 0301 	orr.w	r3, r0, r1
 80079ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	431a      	orrs	r2, r3
 80079bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80079dc:	f021 010c 	bic.w	r1, r1, #12
 80079e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80079ea:	430b      	orrs	r3, r1
 80079ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80079fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079fe:	6999      	ldr	r1, [r3, #24]
 8007a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	ea40 0301 	orr.w	r3, r0, r1
 8007a0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	4b8f      	ldr	r3, [pc, #572]	@ (8007c50 <UART_SetConfig+0x2cc>)
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d005      	beq.n	8007a24 <UART_SetConfig+0xa0>
 8007a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	4b8d      	ldr	r3, [pc, #564]	@ (8007c54 <UART_SetConfig+0x2d0>)
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d104      	bne.n	8007a2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a24:	f7fd fc28 	bl	8005278 <HAL_RCC_GetPCLK2Freq>
 8007a28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007a2c:	e003      	b.n	8007a36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a2e:	f7fd fc0f 	bl	8005250 <HAL_RCC_GetPCLK1Freq>
 8007a32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a40:	f040 810c 	bne.w	8007c5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007a52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007a56:	4622      	mov	r2, r4
 8007a58:	462b      	mov	r3, r5
 8007a5a:	1891      	adds	r1, r2, r2
 8007a5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007a5e:	415b      	adcs	r3, r3
 8007a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007a66:	4621      	mov	r1, r4
 8007a68:	eb12 0801 	adds.w	r8, r2, r1
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	eb43 0901 	adc.w	r9, r3, r1
 8007a72:	f04f 0200 	mov.w	r2, #0
 8007a76:	f04f 0300 	mov.w	r3, #0
 8007a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a86:	4690      	mov	r8, r2
 8007a88:	4699      	mov	r9, r3
 8007a8a:	4623      	mov	r3, r4
 8007a8c:	eb18 0303 	adds.w	r3, r8, r3
 8007a90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a94:	462b      	mov	r3, r5
 8007a96:	eb49 0303 	adc.w	r3, r9, r3
 8007a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007aaa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007aae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	18db      	adds	r3, r3, r3
 8007ab6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ab8:	4613      	mov	r3, r2
 8007aba:	eb42 0303 	adc.w	r3, r2, r3
 8007abe:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ac0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007ac4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007ac8:	f7f8 fbf2 	bl	80002b0 <__aeabi_uldivmod>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4b61      	ldr	r3, [pc, #388]	@ (8007c58 <UART_SetConfig+0x2d4>)
 8007ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ad6:	095b      	lsrs	r3, r3, #5
 8007ad8:	011c      	lsls	r4, r3, #4
 8007ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ae4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007ae8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007aec:	4642      	mov	r2, r8
 8007aee:	464b      	mov	r3, r9
 8007af0:	1891      	adds	r1, r2, r2
 8007af2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007af4:	415b      	adcs	r3, r3
 8007af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007af8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007afc:	4641      	mov	r1, r8
 8007afe:	eb12 0a01 	adds.w	sl, r2, r1
 8007b02:	4649      	mov	r1, r9
 8007b04:	eb43 0b01 	adc.w	fp, r3, r1
 8007b08:	f04f 0200 	mov.w	r2, #0
 8007b0c:	f04f 0300 	mov.w	r3, #0
 8007b10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b1c:	4692      	mov	sl, r2
 8007b1e:	469b      	mov	fp, r3
 8007b20:	4643      	mov	r3, r8
 8007b22:	eb1a 0303 	adds.w	r3, sl, r3
 8007b26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b2a:	464b      	mov	r3, r9
 8007b2c:	eb4b 0303 	adc.w	r3, fp, r3
 8007b30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007b44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	18db      	adds	r3, r3, r3
 8007b4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b4e:	4613      	mov	r3, r2
 8007b50:	eb42 0303 	adc.w	r3, r2, r3
 8007b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007b5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007b5e:	f7f8 fba7 	bl	80002b0 <__aeabi_uldivmod>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4611      	mov	r1, r2
 8007b68:	4b3b      	ldr	r3, [pc, #236]	@ (8007c58 <UART_SetConfig+0x2d4>)
 8007b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	2264      	movs	r2, #100	@ 0x64
 8007b72:	fb02 f303 	mul.w	r3, r2, r3
 8007b76:	1acb      	subs	r3, r1, r3
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007b7e:	4b36      	ldr	r3, [pc, #216]	@ (8007c58 <UART_SetConfig+0x2d4>)
 8007b80:	fba3 2302 	umull	r2, r3, r3, r2
 8007b84:	095b      	lsrs	r3, r3, #5
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b8c:	441c      	add	r4, r3
 8007b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b92:	2200      	movs	r2, #0
 8007b94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007b9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007ba0:	4642      	mov	r2, r8
 8007ba2:	464b      	mov	r3, r9
 8007ba4:	1891      	adds	r1, r2, r2
 8007ba6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ba8:	415b      	adcs	r3, r3
 8007baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007bb0:	4641      	mov	r1, r8
 8007bb2:	1851      	adds	r1, r2, r1
 8007bb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	414b      	adcs	r3, r1
 8007bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	f04f 0300 	mov.w	r3, #0
 8007bc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007bc8:	4659      	mov	r1, fp
 8007bca:	00cb      	lsls	r3, r1, #3
 8007bcc:	4651      	mov	r1, sl
 8007bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bd2:	4651      	mov	r1, sl
 8007bd4:	00ca      	lsls	r2, r1, #3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4603      	mov	r3, r0
 8007bdc:	4642      	mov	r2, r8
 8007bde:	189b      	adds	r3, r3, r2
 8007be0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007be4:	464b      	mov	r3, r9
 8007be6:	460a      	mov	r2, r1
 8007be8:	eb42 0303 	adc.w	r3, r2, r3
 8007bec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007bfc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007c00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c04:	460b      	mov	r3, r1
 8007c06:	18db      	adds	r3, r3, r3
 8007c08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	eb42 0303 	adc.w	r3, r2, r3
 8007c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007c1a:	f7f8 fb49 	bl	80002b0 <__aeabi_uldivmod>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4b0d      	ldr	r3, [pc, #52]	@ (8007c58 <UART_SetConfig+0x2d4>)
 8007c24:	fba3 1302 	umull	r1, r3, r3, r2
 8007c28:	095b      	lsrs	r3, r3, #5
 8007c2a:	2164      	movs	r1, #100	@ 0x64
 8007c2c:	fb01 f303 	mul.w	r3, r1, r3
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	3332      	adds	r3, #50	@ 0x32
 8007c36:	4a08      	ldr	r2, [pc, #32]	@ (8007c58 <UART_SetConfig+0x2d4>)
 8007c38:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3c:	095b      	lsrs	r3, r3, #5
 8007c3e:	f003 0207 	and.w	r2, r3, #7
 8007c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4422      	add	r2, r4
 8007c4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c4c:	e106      	b.n	8007e5c <UART_SetConfig+0x4d8>
 8007c4e:	bf00      	nop
 8007c50:	40011000 	.word	0x40011000
 8007c54:	40011400 	.word	0x40011400
 8007c58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007c6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007c6e:	4642      	mov	r2, r8
 8007c70:	464b      	mov	r3, r9
 8007c72:	1891      	adds	r1, r2, r2
 8007c74:	6239      	str	r1, [r7, #32]
 8007c76:	415b      	adcs	r3, r3
 8007c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c7e:	4641      	mov	r1, r8
 8007c80:	1854      	adds	r4, r2, r1
 8007c82:	4649      	mov	r1, r9
 8007c84:	eb43 0501 	adc.w	r5, r3, r1
 8007c88:	f04f 0200 	mov.w	r2, #0
 8007c8c:	f04f 0300 	mov.w	r3, #0
 8007c90:	00eb      	lsls	r3, r5, #3
 8007c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c96:	00e2      	lsls	r2, r4, #3
 8007c98:	4614      	mov	r4, r2
 8007c9a:	461d      	mov	r5, r3
 8007c9c:	4643      	mov	r3, r8
 8007c9e:	18e3      	adds	r3, r4, r3
 8007ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ca4:	464b      	mov	r3, r9
 8007ca6:	eb45 0303 	adc.w	r3, r5, r3
 8007caa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007cba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007cbe:	f04f 0200 	mov.w	r2, #0
 8007cc2:	f04f 0300 	mov.w	r3, #0
 8007cc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007cca:	4629      	mov	r1, r5
 8007ccc:	008b      	lsls	r3, r1, #2
 8007cce:	4621      	mov	r1, r4
 8007cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	008a      	lsls	r2, r1, #2
 8007cd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007cdc:	f7f8 fae8 	bl	80002b0 <__aeabi_uldivmod>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4b60      	ldr	r3, [pc, #384]	@ (8007e68 <UART_SetConfig+0x4e4>)
 8007ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8007cea:	095b      	lsrs	r3, r3, #5
 8007cec:	011c      	lsls	r4, r3, #4
 8007cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cf8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007cfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007d00:	4642      	mov	r2, r8
 8007d02:	464b      	mov	r3, r9
 8007d04:	1891      	adds	r1, r2, r2
 8007d06:	61b9      	str	r1, [r7, #24]
 8007d08:	415b      	adcs	r3, r3
 8007d0a:	61fb      	str	r3, [r7, #28]
 8007d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d10:	4641      	mov	r1, r8
 8007d12:	1851      	adds	r1, r2, r1
 8007d14:	6139      	str	r1, [r7, #16]
 8007d16:	4649      	mov	r1, r9
 8007d18:	414b      	adcs	r3, r1
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d28:	4659      	mov	r1, fp
 8007d2a:	00cb      	lsls	r3, r1, #3
 8007d2c:	4651      	mov	r1, sl
 8007d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d32:	4651      	mov	r1, sl
 8007d34:	00ca      	lsls	r2, r1, #3
 8007d36:	4610      	mov	r0, r2
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	4642      	mov	r2, r8
 8007d3e:	189b      	adds	r3, r3, r2
 8007d40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d44:	464b      	mov	r3, r9
 8007d46:	460a      	mov	r2, r1
 8007d48:	eb42 0303 	adc.w	r3, r2, r3
 8007d4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007d5c:	f04f 0200 	mov.w	r2, #0
 8007d60:	f04f 0300 	mov.w	r3, #0
 8007d64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007d68:	4649      	mov	r1, r9
 8007d6a:	008b      	lsls	r3, r1, #2
 8007d6c:	4641      	mov	r1, r8
 8007d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d72:	4641      	mov	r1, r8
 8007d74:	008a      	lsls	r2, r1, #2
 8007d76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007d7a:	f7f8 fa99 	bl	80002b0 <__aeabi_uldivmod>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4611      	mov	r1, r2
 8007d84:	4b38      	ldr	r3, [pc, #224]	@ (8007e68 <UART_SetConfig+0x4e4>)
 8007d86:	fba3 2301 	umull	r2, r3, r3, r1
 8007d8a:	095b      	lsrs	r3, r3, #5
 8007d8c:	2264      	movs	r2, #100	@ 0x64
 8007d8e:	fb02 f303 	mul.w	r3, r2, r3
 8007d92:	1acb      	subs	r3, r1, r3
 8007d94:	011b      	lsls	r3, r3, #4
 8007d96:	3332      	adds	r3, #50	@ 0x32
 8007d98:	4a33      	ldr	r2, [pc, #204]	@ (8007e68 <UART_SetConfig+0x4e4>)
 8007d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9e:	095b      	lsrs	r3, r3, #5
 8007da0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007da4:	441c      	add	r4, r3
 8007da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007daa:	2200      	movs	r2, #0
 8007dac:	673b      	str	r3, [r7, #112]	@ 0x70
 8007dae:	677a      	str	r2, [r7, #116]	@ 0x74
 8007db0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007db4:	4642      	mov	r2, r8
 8007db6:	464b      	mov	r3, r9
 8007db8:	1891      	adds	r1, r2, r2
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	415b      	adcs	r3, r3
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dc4:	4641      	mov	r1, r8
 8007dc6:	1851      	adds	r1, r2, r1
 8007dc8:	6039      	str	r1, [r7, #0]
 8007dca:	4649      	mov	r1, r9
 8007dcc:	414b      	adcs	r3, r1
 8007dce:	607b      	str	r3, [r7, #4]
 8007dd0:	f04f 0200 	mov.w	r2, #0
 8007dd4:	f04f 0300 	mov.w	r3, #0
 8007dd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ddc:	4659      	mov	r1, fp
 8007dde:	00cb      	lsls	r3, r1, #3
 8007de0:	4651      	mov	r1, sl
 8007de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007de6:	4651      	mov	r1, sl
 8007de8:	00ca      	lsls	r2, r1, #3
 8007dea:	4610      	mov	r0, r2
 8007dec:	4619      	mov	r1, r3
 8007dee:	4603      	mov	r3, r0
 8007df0:	4642      	mov	r2, r8
 8007df2:	189b      	adds	r3, r3, r2
 8007df4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007df6:	464b      	mov	r3, r9
 8007df8:	460a      	mov	r2, r1
 8007dfa:	eb42 0303 	adc.w	r3, r2, r3
 8007dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007e0c:	f04f 0200 	mov.w	r2, #0
 8007e10:	f04f 0300 	mov.w	r3, #0
 8007e14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007e18:	4649      	mov	r1, r9
 8007e1a:	008b      	lsls	r3, r1, #2
 8007e1c:	4641      	mov	r1, r8
 8007e1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e22:	4641      	mov	r1, r8
 8007e24:	008a      	lsls	r2, r1, #2
 8007e26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007e2a:	f7f8 fa41 	bl	80002b0 <__aeabi_uldivmod>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4b0d      	ldr	r3, [pc, #52]	@ (8007e68 <UART_SetConfig+0x4e4>)
 8007e34:	fba3 1302 	umull	r1, r3, r3, r2
 8007e38:	095b      	lsrs	r3, r3, #5
 8007e3a:	2164      	movs	r1, #100	@ 0x64
 8007e3c:	fb01 f303 	mul.w	r3, r1, r3
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	011b      	lsls	r3, r3, #4
 8007e44:	3332      	adds	r3, #50	@ 0x32
 8007e46:	4a08      	ldr	r2, [pc, #32]	@ (8007e68 <UART_SetConfig+0x4e4>)
 8007e48:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4c:	095b      	lsrs	r3, r3, #5
 8007e4e:	f003 020f 	and.w	r2, r3, #15
 8007e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4422      	add	r2, r4
 8007e5a:	609a      	str	r2, [r3, #8]
}
 8007e5c:	bf00      	nop
 8007e5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007e62:	46bd      	mov	sp, r7
 8007e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e68:	51eb851f 	.word	0x51eb851f

08007e6c <std>:
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	b510      	push	{r4, lr}
 8007e70:	4604      	mov	r4, r0
 8007e72:	e9c0 3300 	strd	r3, r3, [r0]
 8007e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e7a:	6083      	str	r3, [r0, #8]
 8007e7c:	8181      	strh	r1, [r0, #12]
 8007e7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e80:	81c2      	strh	r2, [r0, #14]
 8007e82:	6183      	str	r3, [r0, #24]
 8007e84:	4619      	mov	r1, r3
 8007e86:	2208      	movs	r2, #8
 8007e88:	305c      	adds	r0, #92	@ 0x5c
 8007e8a:	f000 fa23 	bl	80082d4 <memset>
 8007e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec4 <std+0x58>)
 8007e90:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e92:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec8 <std+0x5c>)
 8007e94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e96:	4b0d      	ldr	r3, [pc, #52]	@ (8007ecc <std+0x60>)
 8007e98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed0 <std+0x64>)
 8007e9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed4 <std+0x68>)
 8007ea0:	6224      	str	r4, [r4, #32]
 8007ea2:	429c      	cmp	r4, r3
 8007ea4:	d006      	beq.n	8007eb4 <std+0x48>
 8007ea6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007eaa:	4294      	cmp	r4, r2
 8007eac:	d002      	beq.n	8007eb4 <std+0x48>
 8007eae:	33d0      	adds	r3, #208	@ 0xd0
 8007eb0:	429c      	cmp	r4, r3
 8007eb2:	d105      	bne.n	8007ec0 <std+0x54>
 8007eb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ebc:	f000 bb14 	b.w	80084e8 <__retarget_lock_init_recursive>
 8007ec0:	bd10      	pop	{r4, pc}
 8007ec2:	bf00      	nop
 8007ec4:	08008125 	.word	0x08008125
 8007ec8:	08008147 	.word	0x08008147
 8007ecc:	0800817f 	.word	0x0800817f
 8007ed0:	080081a3 	.word	0x080081a3
 8007ed4:	20000c84 	.word	0x20000c84

08007ed8 <stdio_exit_handler>:
 8007ed8:	4a02      	ldr	r2, [pc, #8]	@ (8007ee4 <stdio_exit_handler+0xc>)
 8007eda:	4903      	ldr	r1, [pc, #12]	@ (8007ee8 <stdio_exit_handler+0x10>)
 8007edc:	4803      	ldr	r0, [pc, #12]	@ (8007eec <stdio_exit_handler+0x14>)
 8007ede:	f000 b869 	b.w	8007fb4 <_fwalk_sglue>
 8007ee2:	bf00      	nop
 8007ee4:	20000028 	.word	0x20000028
 8007ee8:	080090ad 	.word	0x080090ad
 8007eec:	20000038 	.word	0x20000038

08007ef0 <cleanup_stdio>:
 8007ef0:	6841      	ldr	r1, [r0, #4]
 8007ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8007f24 <cleanup_stdio+0x34>)
 8007ef4:	4299      	cmp	r1, r3
 8007ef6:	b510      	push	{r4, lr}
 8007ef8:	4604      	mov	r4, r0
 8007efa:	d001      	beq.n	8007f00 <cleanup_stdio+0x10>
 8007efc:	f001 f8d6 	bl	80090ac <_fflush_r>
 8007f00:	68a1      	ldr	r1, [r4, #8]
 8007f02:	4b09      	ldr	r3, [pc, #36]	@ (8007f28 <cleanup_stdio+0x38>)
 8007f04:	4299      	cmp	r1, r3
 8007f06:	d002      	beq.n	8007f0e <cleanup_stdio+0x1e>
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f001 f8cf 	bl	80090ac <_fflush_r>
 8007f0e:	68e1      	ldr	r1, [r4, #12]
 8007f10:	4b06      	ldr	r3, [pc, #24]	@ (8007f2c <cleanup_stdio+0x3c>)
 8007f12:	4299      	cmp	r1, r3
 8007f14:	d004      	beq.n	8007f20 <cleanup_stdio+0x30>
 8007f16:	4620      	mov	r0, r4
 8007f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f1c:	f001 b8c6 	b.w	80090ac <_fflush_r>
 8007f20:	bd10      	pop	{r4, pc}
 8007f22:	bf00      	nop
 8007f24:	20000c84 	.word	0x20000c84
 8007f28:	20000cec 	.word	0x20000cec
 8007f2c:	20000d54 	.word	0x20000d54

08007f30 <global_stdio_init.part.0>:
 8007f30:	b510      	push	{r4, lr}
 8007f32:	4b0b      	ldr	r3, [pc, #44]	@ (8007f60 <global_stdio_init.part.0+0x30>)
 8007f34:	4c0b      	ldr	r4, [pc, #44]	@ (8007f64 <global_stdio_init.part.0+0x34>)
 8007f36:	4a0c      	ldr	r2, [pc, #48]	@ (8007f68 <global_stdio_init.part.0+0x38>)
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2104      	movs	r1, #4
 8007f40:	f7ff ff94 	bl	8007e6c <std>
 8007f44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f48:	2201      	movs	r2, #1
 8007f4a:	2109      	movs	r1, #9
 8007f4c:	f7ff ff8e 	bl	8007e6c <std>
 8007f50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f54:	2202      	movs	r2, #2
 8007f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f5a:	2112      	movs	r1, #18
 8007f5c:	f7ff bf86 	b.w	8007e6c <std>
 8007f60:	20000dbc 	.word	0x20000dbc
 8007f64:	20000c84 	.word	0x20000c84
 8007f68:	08007ed9 	.word	0x08007ed9

08007f6c <__sfp_lock_acquire>:
 8007f6c:	4801      	ldr	r0, [pc, #4]	@ (8007f74 <__sfp_lock_acquire+0x8>)
 8007f6e:	f000 babc 	b.w	80084ea <__retarget_lock_acquire_recursive>
 8007f72:	bf00      	nop
 8007f74:	20000dc5 	.word	0x20000dc5

08007f78 <__sfp_lock_release>:
 8007f78:	4801      	ldr	r0, [pc, #4]	@ (8007f80 <__sfp_lock_release+0x8>)
 8007f7a:	f000 bab7 	b.w	80084ec <__retarget_lock_release_recursive>
 8007f7e:	bf00      	nop
 8007f80:	20000dc5 	.word	0x20000dc5

08007f84 <__sinit>:
 8007f84:	b510      	push	{r4, lr}
 8007f86:	4604      	mov	r4, r0
 8007f88:	f7ff fff0 	bl	8007f6c <__sfp_lock_acquire>
 8007f8c:	6a23      	ldr	r3, [r4, #32]
 8007f8e:	b11b      	cbz	r3, 8007f98 <__sinit+0x14>
 8007f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f94:	f7ff bff0 	b.w	8007f78 <__sfp_lock_release>
 8007f98:	4b04      	ldr	r3, [pc, #16]	@ (8007fac <__sinit+0x28>)
 8007f9a:	6223      	str	r3, [r4, #32]
 8007f9c:	4b04      	ldr	r3, [pc, #16]	@ (8007fb0 <__sinit+0x2c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1f5      	bne.n	8007f90 <__sinit+0xc>
 8007fa4:	f7ff ffc4 	bl	8007f30 <global_stdio_init.part.0>
 8007fa8:	e7f2      	b.n	8007f90 <__sinit+0xc>
 8007faa:	bf00      	nop
 8007fac:	08007ef1 	.word	0x08007ef1
 8007fb0:	20000dbc 	.word	0x20000dbc

08007fb4 <_fwalk_sglue>:
 8007fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb8:	4607      	mov	r7, r0
 8007fba:	4688      	mov	r8, r1
 8007fbc:	4614      	mov	r4, r2
 8007fbe:	2600      	movs	r6, #0
 8007fc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fc4:	f1b9 0901 	subs.w	r9, r9, #1
 8007fc8:	d505      	bpl.n	8007fd6 <_fwalk_sglue+0x22>
 8007fca:	6824      	ldr	r4, [r4, #0]
 8007fcc:	2c00      	cmp	r4, #0
 8007fce:	d1f7      	bne.n	8007fc0 <_fwalk_sglue+0xc>
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fd6:	89ab      	ldrh	r3, [r5, #12]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d907      	bls.n	8007fec <_fwalk_sglue+0x38>
 8007fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	d003      	beq.n	8007fec <_fwalk_sglue+0x38>
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	47c0      	blx	r8
 8007fea:	4306      	orrs	r6, r0
 8007fec:	3568      	adds	r5, #104	@ 0x68
 8007fee:	e7e9      	b.n	8007fc4 <_fwalk_sglue+0x10>

08007ff0 <iprintf>:
 8007ff0:	b40f      	push	{r0, r1, r2, r3}
 8007ff2:	b507      	push	{r0, r1, r2, lr}
 8007ff4:	4906      	ldr	r1, [pc, #24]	@ (8008010 <iprintf+0x20>)
 8007ff6:	ab04      	add	r3, sp, #16
 8007ff8:	6808      	ldr	r0, [r1, #0]
 8007ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ffe:	6881      	ldr	r1, [r0, #8]
 8008000:	9301      	str	r3, [sp, #4]
 8008002:	f000 fd2b 	bl	8008a5c <_vfiprintf_r>
 8008006:	b003      	add	sp, #12
 8008008:	f85d eb04 	ldr.w	lr, [sp], #4
 800800c:	b004      	add	sp, #16
 800800e:	4770      	bx	lr
 8008010:	20000034 	.word	0x20000034

08008014 <putchar>:
 8008014:	4b02      	ldr	r3, [pc, #8]	@ (8008020 <putchar+0xc>)
 8008016:	4601      	mov	r1, r0
 8008018:	6818      	ldr	r0, [r3, #0]
 800801a:	6882      	ldr	r2, [r0, #8]
 800801c:	f001 b8e2 	b.w	80091e4 <_putc_r>
 8008020:	20000034 	.word	0x20000034

08008024 <_puts_r>:
 8008024:	6a03      	ldr	r3, [r0, #32]
 8008026:	b570      	push	{r4, r5, r6, lr}
 8008028:	6884      	ldr	r4, [r0, #8]
 800802a:	4605      	mov	r5, r0
 800802c:	460e      	mov	r6, r1
 800802e:	b90b      	cbnz	r3, 8008034 <_puts_r+0x10>
 8008030:	f7ff ffa8 	bl	8007f84 <__sinit>
 8008034:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008036:	07db      	lsls	r3, r3, #31
 8008038:	d405      	bmi.n	8008046 <_puts_r+0x22>
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	0598      	lsls	r0, r3, #22
 800803e:	d402      	bmi.n	8008046 <_puts_r+0x22>
 8008040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008042:	f000 fa52 	bl	80084ea <__retarget_lock_acquire_recursive>
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	0719      	lsls	r1, r3, #28
 800804a:	d502      	bpl.n	8008052 <_puts_r+0x2e>
 800804c:	6923      	ldr	r3, [r4, #16]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d135      	bne.n	80080be <_puts_r+0x9a>
 8008052:	4621      	mov	r1, r4
 8008054:	4628      	mov	r0, r5
 8008056:	f000 f8e7 	bl	8008228 <__swsetup_r>
 800805a:	b380      	cbz	r0, 80080be <_puts_r+0x9a>
 800805c:	f04f 35ff 	mov.w	r5, #4294967295
 8008060:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008062:	07da      	lsls	r2, r3, #31
 8008064:	d405      	bmi.n	8008072 <_puts_r+0x4e>
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	059b      	lsls	r3, r3, #22
 800806a:	d402      	bmi.n	8008072 <_puts_r+0x4e>
 800806c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800806e:	f000 fa3d 	bl	80084ec <__retarget_lock_release_recursive>
 8008072:	4628      	mov	r0, r5
 8008074:	bd70      	pop	{r4, r5, r6, pc}
 8008076:	2b00      	cmp	r3, #0
 8008078:	da04      	bge.n	8008084 <_puts_r+0x60>
 800807a:	69a2      	ldr	r2, [r4, #24]
 800807c:	429a      	cmp	r2, r3
 800807e:	dc17      	bgt.n	80080b0 <_puts_r+0x8c>
 8008080:	290a      	cmp	r1, #10
 8008082:	d015      	beq.n	80080b0 <_puts_r+0x8c>
 8008084:	6823      	ldr	r3, [r4, #0]
 8008086:	1c5a      	adds	r2, r3, #1
 8008088:	6022      	str	r2, [r4, #0]
 800808a:	7019      	strb	r1, [r3, #0]
 800808c:	68a3      	ldr	r3, [r4, #8]
 800808e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008092:	3b01      	subs	r3, #1
 8008094:	60a3      	str	r3, [r4, #8]
 8008096:	2900      	cmp	r1, #0
 8008098:	d1ed      	bne.n	8008076 <_puts_r+0x52>
 800809a:	2b00      	cmp	r3, #0
 800809c:	da11      	bge.n	80080c2 <_puts_r+0x9e>
 800809e:	4622      	mov	r2, r4
 80080a0:	210a      	movs	r1, #10
 80080a2:	4628      	mov	r0, r5
 80080a4:	f000 f881 	bl	80081aa <__swbuf_r>
 80080a8:	3001      	adds	r0, #1
 80080aa:	d0d7      	beq.n	800805c <_puts_r+0x38>
 80080ac:	250a      	movs	r5, #10
 80080ae:	e7d7      	b.n	8008060 <_puts_r+0x3c>
 80080b0:	4622      	mov	r2, r4
 80080b2:	4628      	mov	r0, r5
 80080b4:	f000 f879 	bl	80081aa <__swbuf_r>
 80080b8:	3001      	adds	r0, #1
 80080ba:	d1e7      	bne.n	800808c <_puts_r+0x68>
 80080bc:	e7ce      	b.n	800805c <_puts_r+0x38>
 80080be:	3e01      	subs	r6, #1
 80080c0:	e7e4      	b.n	800808c <_puts_r+0x68>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	6022      	str	r2, [r4, #0]
 80080c8:	220a      	movs	r2, #10
 80080ca:	701a      	strb	r2, [r3, #0]
 80080cc:	e7ee      	b.n	80080ac <_puts_r+0x88>
	...

080080d0 <puts>:
 80080d0:	4b02      	ldr	r3, [pc, #8]	@ (80080dc <puts+0xc>)
 80080d2:	4601      	mov	r1, r0
 80080d4:	6818      	ldr	r0, [r3, #0]
 80080d6:	f7ff bfa5 	b.w	8008024 <_puts_r>
 80080da:	bf00      	nop
 80080dc:	20000034 	.word	0x20000034

080080e0 <siprintf>:
 80080e0:	b40e      	push	{r1, r2, r3}
 80080e2:	b510      	push	{r4, lr}
 80080e4:	b09d      	sub	sp, #116	@ 0x74
 80080e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80080e8:	9002      	str	r0, [sp, #8]
 80080ea:	9006      	str	r0, [sp, #24]
 80080ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80080f0:	480a      	ldr	r0, [pc, #40]	@ (800811c <siprintf+0x3c>)
 80080f2:	9107      	str	r1, [sp, #28]
 80080f4:	9104      	str	r1, [sp, #16]
 80080f6:	490a      	ldr	r1, [pc, #40]	@ (8008120 <siprintf+0x40>)
 80080f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080fc:	9105      	str	r1, [sp, #20]
 80080fe:	2400      	movs	r4, #0
 8008100:	a902      	add	r1, sp, #8
 8008102:	6800      	ldr	r0, [r0, #0]
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008108:	f000 fb82 	bl	8008810 <_svfiprintf_r>
 800810c:	9b02      	ldr	r3, [sp, #8]
 800810e:	701c      	strb	r4, [r3, #0]
 8008110:	b01d      	add	sp, #116	@ 0x74
 8008112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008116:	b003      	add	sp, #12
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20000034 	.word	0x20000034
 8008120:	ffff0208 	.word	0xffff0208

08008124 <__sread>:
 8008124:	b510      	push	{r4, lr}
 8008126:	460c      	mov	r4, r1
 8008128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800812c:	f000 f98e 	bl	800844c <_read_r>
 8008130:	2800      	cmp	r0, #0
 8008132:	bfab      	itete	ge
 8008134:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008136:	89a3      	ldrhlt	r3, [r4, #12]
 8008138:	181b      	addge	r3, r3, r0
 800813a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800813e:	bfac      	ite	ge
 8008140:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008142:	81a3      	strhlt	r3, [r4, #12]
 8008144:	bd10      	pop	{r4, pc}

08008146 <__swrite>:
 8008146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800814a:	461f      	mov	r7, r3
 800814c:	898b      	ldrh	r3, [r1, #12]
 800814e:	05db      	lsls	r3, r3, #23
 8008150:	4605      	mov	r5, r0
 8008152:	460c      	mov	r4, r1
 8008154:	4616      	mov	r6, r2
 8008156:	d505      	bpl.n	8008164 <__swrite+0x1e>
 8008158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800815c:	2302      	movs	r3, #2
 800815e:	2200      	movs	r2, #0
 8008160:	f000 f962 	bl	8008428 <_lseek_r>
 8008164:	89a3      	ldrh	r3, [r4, #12]
 8008166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800816a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800816e:	81a3      	strh	r3, [r4, #12]
 8008170:	4632      	mov	r2, r6
 8008172:	463b      	mov	r3, r7
 8008174:	4628      	mov	r0, r5
 8008176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800817a:	f000 b979 	b.w	8008470 <_write_r>

0800817e <__sseek>:
 800817e:	b510      	push	{r4, lr}
 8008180:	460c      	mov	r4, r1
 8008182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008186:	f000 f94f 	bl	8008428 <_lseek_r>
 800818a:	1c43      	adds	r3, r0, #1
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	bf15      	itete	ne
 8008190:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008192:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008196:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800819a:	81a3      	strheq	r3, [r4, #12]
 800819c:	bf18      	it	ne
 800819e:	81a3      	strhne	r3, [r4, #12]
 80081a0:	bd10      	pop	{r4, pc}

080081a2 <__sclose>:
 80081a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a6:	f000 b92f 	b.w	8008408 <_close_r>

080081aa <__swbuf_r>:
 80081aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ac:	460e      	mov	r6, r1
 80081ae:	4614      	mov	r4, r2
 80081b0:	4605      	mov	r5, r0
 80081b2:	b118      	cbz	r0, 80081bc <__swbuf_r+0x12>
 80081b4:	6a03      	ldr	r3, [r0, #32]
 80081b6:	b90b      	cbnz	r3, 80081bc <__swbuf_r+0x12>
 80081b8:	f7ff fee4 	bl	8007f84 <__sinit>
 80081bc:	69a3      	ldr	r3, [r4, #24]
 80081be:	60a3      	str	r3, [r4, #8]
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	071a      	lsls	r2, r3, #28
 80081c4:	d501      	bpl.n	80081ca <__swbuf_r+0x20>
 80081c6:	6923      	ldr	r3, [r4, #16]
 80081c8:	b943      	cbnz	r3, 80081dc <__swbuf_r+0x32>
 80081ca:	4621      	mov	r1, r4
 80081cc:	4628      	mov	r0, r5
 80081ce:	f000 f82b 	bl	8008228 <__swsetup_r>
 80081d2:	b118      	cbz	r0, 80081dc <__swbuf_r+0x32>
 80081d4:	f04f 37ff 	mov.w	r7, #4294967295
 80081d8:	4638      	mov	r0, r7
 80081da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	6922      	ldr	r2, [r4, #16]
 80081e0:	1a98      	subs	r0, r3, r2
 80081e2:	6963      	ldr	r3, [r4, #20]
 80081e4:	b2f6      	uxtb	r6, r6
 80081e6:	4283      	cmp	r3, r0
 80081e8:	4637      	mov	r7, r6
 80081ea:	dc05      	bgt.n	80081f8 <__swbuf_r+0x4e>
 80081ec:	4621      	mov	r1, r4
 80081ee:	4628      	mov	r0, r5
 80081f0:	f000 ff5c 	bl	80090ac <_fflush_r>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d1ed      	bne.n	80081d4 <__swbuf_r+0x2a>
 80081f8:	68a3      	ldr	r3, [r4, #8]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	60a3      	str	r3, [r4, #8]
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	6022      	str	r2, [r4, #0]
 8008204:	701e      	strb	r6, [r3, #0]
 8008206:	6962      	ldr	r2, [r4, #20]
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	429a      	cmp	r2, r3
 800820c:	d004      	beq.n	8008218 <__swbuf_r+0x6e>
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	07db      	lsls	r3, r3, #31
 8008212:	d5e1      	bpl.n	80081d8 <__swbuf_r+0x2e>
 8008214:	2e0a      	cmp	r6, #10
 8008216:	d1df      	bne.n	80081d8 <__swbuf_r+0x2e>
 8008218:	4621      	mov	r1, r4
 800821a:	4628      	mov	r0, r5
 800821c:	f000 ff46 	bl	80090ac <_fflush_r>
 8008220:	2800      	cmp	r0, #0
 8008222:	d0d9      	beq.n	80081d8 <__swbuf_r+0x2e>
 8008224:	e7d6      	b.n	80081d4 <__swbuf_r+0x2a>
	...

08008228 <__swsetup_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	4b29      	ldr	r3, [pc, #164]	@ (80082d0 <__swsetup_r+0xa8>)
 800822c:	4605      	mov	r5, r0
 800822e:	6818      	ldr	r0, [r3, #0]
 8008230:	460c      	mov	r4, r1
 8008232:	b118      	cbz	r0, 800823c <__swsetup_r+0x14>
 8008234:	6a03      	ldr	r3, [r0, #32]
 8008236:	b90b      	cbnz	r3, 800823c <__swsetup_r+0x14>
 8008238:	f7ff fea4 	bl	8007f84 <__sinit>
 800823c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008240:	0719      	lsls	r1, r3, #28
 8008242:	d422      	bmi.n	800828a <__swsetup_r+0x62>
 8008244:	06da      	lsls	r2, r3, #27
 8008246:	d407      	bmi.n	8008258 <__swsetup_r+0x30>
 8008248:	2209      	movs	r2, #9
 800824a:	602a      	str	r2, [r5, #0]
 800824c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008250:	81a3      	strh	r3, [r4, #12]
 8008252:	f04f 30ff 	mov.w	r0, #4294967295
 8008256:	e033      	b.n	80082c0 <__swsetup_r+0x98>
 8008258:	0758      	lsls	r0, r3, #29
 800825a:	d512      	bpl.n	8008282 <__swsetup_r+0x5a>
 800825c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800825e:	b141      	cbz	r1, 8008272 <__swsetup_r+0x4a>
 8008260:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008264:	4299      	cmp	r1, r3
 8008266:	d002      	beq.n	800826e <__swsetup_r+0x46>
 8008268:	4628      	mov	r0, r5
 800826a:	f000 f975 	bl	8008558 <_free_r>
 800826e:	2300      	movs	r3, #0
 8008270:	6363      	str	r3, [r4, #52]	@ 0x34
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008278:	81a3      	strh	r3, [r4, #12]
 800827a:	2300      	movs	r3, #0
 800827c:	6063      	str	r3, [r4, #4]
 800827e:	6923      	ldr	r3, [r4, #16]
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	89a3      	ldrh	r3, [r4, #12]
 8008284:	f043 0308 	orr.w	r3, r3, #8
 8008288:	81a3      	strh	r3, [r4, #12]
 800828a:	6923      	ldr	r3, [r4, #16]
 800828c:	b94b      	cbnz	r3, 80082a2 <__swsetup_r+0x7a>
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008298:	d003      	beq.n	80082a2 <__swsetup_r+0x7a>
 800829a:	4621      	mov	r1, r4
 800829c:	4628      	mov	r0, r5
 800829e:	f000 ff65 	bl	800916c <__smakebuf_r>
 80082a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082a6:	f013 0201 	ands.w	r2, r3, #1
 80082aa:	d00a      	beq.n	80082c2 <__swsetup_r+0x9a>
 80082ac:	2200      	movs	r2, #0
 80082ae:	60a2      	str	r2, [r4, #8]
 80082b0:	6962      	ldr	r2, [r4, #20]
 80082b2:	4252      	negs	r2, r2
 80082b4:	61a2      	str	r2, [r4, #24]
 80082b6:	6922      	ldr	r2, [r4, #16]
 80082b8:	b942      	cbnz	r2, 80082cc <__swsetup_r+0xa4>
 80082ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082be:	d1c5      	bne.n	800824c <__swsetup_r+0x24>
 80082c0:	bd38      	pop	{r3, r4, r5, pc}
 80082c2:	0799      	lsls	r1, r3, #30
 80082c4:	bf58      	it	pl
 80082c6:	6962      	ldrpl	r2, [r4, #20]
 80082c8:	60a2      	str	r2, [r4, #8]
 80082ca:	e7f4      	b.n	80082b6 <__swsetup_r+0x8e>
 80082cc:	2000      	movs	r0, #0
 80082ce:	e7f7      	b.n	80082c0 <__swsetup_r+0x98>
 80082d0:	20000034 	.word	0x20000034

080082d4 <memset>:
 80082d4:	4402      	add	r2, r0
 80082d6:	4603      	mov	r3, r0
 80082d8:	4293      	cmp	r3, r2
 80082da:	d100      	bne.n	80082de <memset+0xa>
 80082dc:	4770      	bx	lr
 80082de:	f803 1b01 	strb.w	r1, [r3], #1
 80082e2:	e7f9      	b.n	80082d8 <memset+0x4>

080082e4 <strchr>:
 80082e4:	b2c9      	uxtb	r1, r1
 80082e6:	4603      	mov	r3, r0
 80082e8:	4618      	mov	r0, r3
 80082ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082ee:	b112      	cbz	r2, 80082f6 <strchr+0x12>
 80082f0:	428a      	cmp	r2, r1
 80082f2:	d1f9      	bne.n	80082e8 <strchr+0x4>
 80082f4:	4770      	bx	lr
 80082f6:	2900      	cmp	r1, #0
 80082f8:	bf18      	it	ne
 80082fa:	2000      	movne	r0, #0
 80082fc:	4770      	bx	lr

080082fe <strncmp>:
 80082fe:	b510      	push	{r4, lr}
 8008300:	b16a      	cbz	r2, 800831e <strncmp+0x20>
 8008302:	3901      	subs	r1, #1
 8008304:	1884      	adds	r4, r0, r2
 8008306:	f810 2b01 	ldrb.w	r2, [r0], #1
 800830a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800830e:	429a      	cmp	r2, r3
 8008310:	d103      	bne.n	800831a <strncmp+0x1c>
 8008312:	42a0      	cmp	r0, r4
 8008314:	d001      	beq.n	800831a <strncmp+0x1c>
 8008316:	2a00      	cmp	r2, #0
 8008318:	d1f5      	bne.n	8008306 <strncmp+0x8>
 800831a:	1ad0      	subs	r0, r2, r3
 800831c:	bd10      	pop	{r4, pc}
 800831e:	4610      	mov	r0, r2
 8008320:	e7fc      	b.n	800831c <strncmp+0x1e>
	...

08008324 <strtok>:
 8008324:	4b16      	ldr	r3, [pc, #88]	@ (8008380 <strtok+0x5c>)
 8008326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800832a:	681f      	ldr	r7, [r3, #0]
 800832c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800832e:	4605      	mov	r5, r0
 8008330:	460e      	mov	r6, r1
 8008332:	b9ec      	cbnz	r4, 8008370 <strtok+0x4c>
 8008334:	2050      	movs	r0, #80	@ 0x50
 8008336:	f000 f959 	bl	80085ec <malloc>
 800833a:	4602      	mov	r2, r0
 800833c:	6478      	str	r0, [r7, #68]	@ 0x44
 800833e:	b920      	cbnz	r0, 800834a <strtok+0x26>
 8008340:	4b10      	ldr	r3, [pc, #64]	@ (8008384 <strtok+0x60>)
 8008342:	4811      	ldr	r0, [pc, #68]	@ (8008388 <strtok+0x64>)
 8008344:	215b      	movs	r1, #91	@ 0x5b
 8008346:	f000 f8e9 	bl	800851c <__assert_func>
 800834a:	e9c0 4400 	strd	r4, r4, [r0]
 800834e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008352:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008356:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800835a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800835e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008362:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008366:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800836a:	6184      	str	r4, [r0, #24]
 800836c:	7704      	strb	r4, [r0, #28]
 800836e:	6244      	str	r4, [r0, #36]	@ 0x24
 8008370:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008372:	4631      	mov	r1, r6
 8008374:	4628      	mov	r0, r5
 8008376:	2301      	movs	r3, #1
 8008378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800837c:	f000 b806 	b.w	800838c <__strtok_r>
 8008380:	20000034 	.word	0x20000034
 8008384:	08009adc 	.word	0x08009adc
 8008388:	08009af3 	.word	0x08009af3

0800838c <__strtok_r>:
 800838c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800838e:	4604      	mov	r4, r0
 8008390:	b908      	cbnz	r0, 8008396 <__strtok_r+0xa>
 8008392:	6814      	ldr	r4, [r2, #0]
 8008394:	b144      	cbz	r4, 80083a8 <__strtok_r+0x1c>
 8008396:	4620      	mov	r0, r4
 8008398:	f814 5b01 	ldrb.w	r5, [r4], #1
 800839c:	460f      	mov	r7, r1
 800839e:	f817 6b01 	ldrb.w	r6, [r7], #1
 80083a2:	b91e      	cbnz	r6, 80083ac <__strtok_r+0x20>
 80083a4:	b965      	cbnz	r5, 80083c0 <__strtok_r+0x34>
 80083a6:	6015      	str	r5, [r2, #0]
 80083a8:	2000      	movs	r0, #0
 80083aa:	e005      	b.n	80083b8 <__strtok_r+0x2c>
 80083ac:	42b5      	cmp	r5, r6
 80083ae:	d1f6      	bne.n	800839e <__strtok_r+0x12>
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1f0      	bne.n	8008396 <__strtok_r+0xa>
 80083b4:	6014      	str	r4, [r2, #0]
 80083b6:	7003      	strb	r3, [r0, #0]
 80083b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083ba:	461c      	mov	r4, r3
 80083bc:	e00c      	b.n	80083d8 <__strtok_r+0x4c>
 80083be:	b91d      	cbnz	r5, 80083c8 <__strtok_r+0x3c>
 80083c0:	4627      	mov	r7, r4
 80083c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80083c6:	460e      	mov	r6, r1
 80083c8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80083cc:	42ab      	cmp	r3, r5
 80083ce:	d1f6      	bne.n	80083be <__strtok_r+0x32>
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d0f2      	beq.n	80083ba <__strtok_r+0x2e>
 80083d4:	2300      	movs	r3, #0
 80083d6:	703b      	strb	r3, [r7, #0]
 80083d8:	6014      	str	r4, [r2, #0]
 80083da:	e7ed      	b.n	80083b8 <__strtok_r+0x2c>

080083dc <strstr>:
 80083dc:	780a      	ldrb	r2, [r1, #0]
 80083de:	b570      	push	{r4, r5, r6, lr}
 80083e0:	b96a      	cbnz	r2, 80083fe <strstr+0x22>
 80083e2:	bd70      	pop	{r4, r5, r6, pc}
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d109      	bne.n	80083fc <strstr+0x20>
 80083e8:	460c      	mov	r4, r1
 80083ea:	4605      	mov	r5, r0
 80083ec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d0f6      	beq.n	80083e2 <strstr+0x6>
 80083f4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80083f8:	429e      	cmp	r6, r3
 80083fa:	d0f7      	beq.n	80083ec <strstr+0x10>
 80083fc:	3001      	adds	r0, #1
 80083fe:	7803      	ldrb	r3, [r0, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1ef      	bne.n	80083e4 <strstr+0x8>
 8008404:	4618      	mov	r0, r3
 8008406:	e7ec      	b.n	80083e2 <strstr+0x6>

08008408 <_close_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4d06      	ldr	r5, [pc, #24]	@ (8008424 <_close_r+0x1c>)
 800840c:	2300      	movs	r3, #0
 800840e:	4604      	mov	r4, r0
 8008410:	4608      	mov	r0, r1
 8008412:	602b      	str	r3, [r5, #0]
 8008414:	f7fa fcf4 	bl	8002e00 <_close>
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	d102      	bne.n	8008422 <_close_r+0x1a>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	b103      	cbz	r3, 8008422 <_close_r+0x1a>
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	20000dc0 	.word	0x20000dc0

08008428 <_lseek_r>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	4d07      	ldr	r5, [pc, #28]	@ (8008448 <_lseek_r+0x20>)
 800842c:	4604      	mov	r4, r0
 800842e:	4608      	mov	r0, r1
 8008430:	4611      	mov	r1, r2
 8008432:	2200      	movs	r2, #0
 8008434:	602a      	str	r2, [r5, #0]
 8008436:	461a      	mov	r2, r3
 8008438:	f7fa fd09 	bl	8002e4e <_lseek>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	d102      	bne.n	8008446 <_lseek_r+0x1e>
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	b103      	cbz	r3, 8008446 <_lseek_r+0x1e>
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	bd38      	pop	{r3, r4, r5, pc}
 8008448:	20000dc0 	.word	0x20000dc0

0800844c <_read_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4d07      	ldr	r5, [pc, #28]	@ (800846c <_read_r+0x20>)
 8008450:	4604      	mov	r4, r0
 8008452:	4608      	mov	r0, r1
 8008454:	4611      	mov	r1, r2
 8008456:	2200      	movs	r2, #0
 8008458:	602a      	str	r2, [r5, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	f7fa fc97 	bl	8002d8e <_read>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d102      	bne.n	800846a <_read_r+0x1e>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	b103      	cbz	r3, 800846a <_read_r+0x1e>
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	20000dc0 	.word	0x20000dc0

08008470 <_write_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4d07      	ldr	r5, [pc, #28]	@ (8008490 <_write_r+0x20>)
 8008474:	4604      	mov	r4, r0
 8008476:	4608      	mov	r0, r1
 8008478:	4611      	mov	r1, r2
 800847a:	2200      	movs	r2, #0
 800847c:	602a      	str	r2, [r5, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	f7fa fca2 	bl	8002dc8 <_write>
 8008484:	1c43      	adds	r3, r0, #1
 8008486:	d102      	bne.n	800848e <_write_r+0x1e>
 8008488:	682b      	ldr	r3, [r5, #0]
 800848a:	b103      	cbz	r3, 800848e <_write_r+0x1e>
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	bd38      	pop	{r3, r4, r5, pc}
 8008490:	20000dc0 	.word	0x20000dc0

08008494 <__errno>:
 8008494:	4b01      	ldr	r3, [pc, #4]	@ (800849c <__errno+0x8>)
 8008496:	6818      	ldr	r0, [r3, #0]
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	20000034 	.word	0x20000034

080084a0 <__libc_init_array>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	4d0d      	ldr	r5, [pc, #52]	@ (80084d8 <__libc_init_array+0x38>)
 80084a4:	4c0d      	ldr	r4, [pc, #52]	@ (80084dc <__libc_init_array+0x3c>)
 80084a6:	1b64      	subs	r4, r4, r5
 80084a8:	10a4      	asrs	r4, r4, #2
 80084aa:	2600      	movs	r6, #0
 80084ac:	42a6      	cmp	r6, r4
 80084ae:	d109      	bne.n	80084c4 <__libc_init_array+0x24>
 80084b0:	4d0b      	ldr	r5, [pc, #44]	@ (80084e0 <__libc_init_array+0x40>)
 80084b2:	4c0c      	ldr	r4, [pc, #48]	@ (80084e4 <__libc_init_array+0x44>)
 80084b4:	f000 ff98 	bl	80093e8 <_init>
 80084b8:	1b64      	subs	r4, r4, r5
 80084ba:	10a4      	asrs	r4, r4, #2
 80084bc:	2600      	movs	r6, #0
 80084be:	42a6      	cmp	r6, r4
 80084c0:	d105      	bne.n	80084ce <__libc_init_array+0x2e>
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c8:	4798      	blx	r3
 80084ca:	3601      	adds	r6, #1
 80084cc:	e7ee      	b.n	80084ac <__libc_init_array+0xc>
 80084ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d2:	4798      	blx	r3
 80084d4:	3601      	adds	r6, #1
 80084d6:	e7f2      	b.n	80084be <__libc_init_array+0x1e>
 80084d8:	08009bc4 	.word	0x08009bc4
 80084dc:	08009bc4 	.word	0x08009bc4
 80084e0:	08009bc4 	.word	0x08009bc4
 80084e4:	08009bc8 	.word	0x08009bc8

080084e8 <__retarget_lock_init_recursive>:
 80084e8:	4770      	bx	lr

080084ea <__retarget_lock_acquire_recursive>:
 80084ea:	4770      	bx	lr

080084ec <__retarget_lock_release_recursive>:
 80084ec:	4770      	bx	lr

080084ee <strcpy>:
 80084ee:	4603      	mov	r3, r0
 80084f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084f4:	f803 2b01 	strb.w	r2, [r3], #1
 80084f8:	2a00      	cmp	r2, #0
 80084fa:	d1f9      	bne.n	80084f0 <strcpy+0x2>
 80084fc:	4770      	bx	lr

080084fe <memcpy>:
 80084fe:	440a      	add	r2, r1
 8008500:	4291      	cmp	r1, r2
 8008502:	f100 33ff 	add.w	r3, r0, #4294967295
 8008506:	d100      	bne.n	800850a <memcpy+0xc>
 8008508:	4770      	bx	lr
 800850a:	b510      	push	{r4, lr}
 800850c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008510:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008514:	4291      	cmp	r1, r2
 8008516:	d1f9      	bne.n	800850c <memcpy+0xe>
 8008518:	bd10      	pop	{r4, pc}
	...

0800851c <__assert_func>:
 800851c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800851e:	4614      	mov	r4, r2
 8008520:	461a      	mov	r2, r3
 8008522:	4b09      	ldr	r3, [pc, #36]	@ (8008548 <__assert_func+0x2c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4605      	mov	r5, r0
 8008528:	68d8      	ldr	r0, [r3, #12]
 800852a:	b14c      	cbz	r4, 8008540 <__assert_func+0x24>
 800852c:	4b07      	ldr	r3, [pc, #28]	@ (800854c <__assert_func+0x30>)
 800852e:	9100      	str	r1, [sp, #0]
 8008530:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008534:	4906      	ldr	r1, [pc, #24]	@ (8008550 <__assert_func+0x34>)
 8008536:	462b      	mov	r3, r5
 8008538:	f000 fde0 	bl	80090fc <fiprintf>
 800853c:	f000 fed2 	bl	80092e4 <abort>
 8008540:	4b04      	ldr	r3, [pc, #16]	@ (8008554 <__assert_func+0x38>)
 8008542:	461c      	mov	r4, r3
 8008544:	e7f3      	b.n	800852e <__assert_func+0x12>
 8008546:	bf00      	nop
 8008548:	20000034 	.word	0x20000034
 800854c:	08009b4d 	.word	0x08009b4d
 8008550:	08009b5a 	.word	0x08009b5a
 8008554:	08009b88 	.word	0x08009b88

08008558 <_free_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4605      	mov	r5, r0
 800855c:	2900      	cmp	r1, #0
 800855e:	d041      	beq.n	80085e4 <_free_r+0x8c>
 8008560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008564:	1f0c      	subs	r4, r1, #4
 8008566:	2b00      	cmp	r3, #0
 8008568:	bfb8      	it	lt
 800856a:	18e4      	addlt	r4, r4, r3
 800856c:	f000 f8e8 	bl	8008740 <__malloc_lock>
 8008570:	4a1d      	ldr	r2, [pc, #116]	@ (80085e8 <_free_r+0x90>)
 8008572:	6813      	ldr	r3, [r2, #0]
 8008574:	b933      	cbnz	r3, 8008584 <_free_r+0x2c>
 8008576:	6063      	str	r3, [r4, #4]
 8008578:	6014      	str	r4, [r2, #0]
 800857a:	4628      	mov	r0, r5
 800857c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008580:	f000 b8e4 	b.w	800874c <__malloc_unlock>
 8008584:	42a3      	cmp	r3, r4
 8008586:	d908      	bls.n	800859a <_free_r+0x42>
 8008588:	6820      	ldr	r0, [r4, #0]
 800858a:	1821      	adds	r1, r4, r0
 800858c:	428b      	cmp	r3, r1
 800858e:	bf01      	itttt	eq
 8008590:	6819      	ldreq	r1, [r3, #0]
 8008592:	685b      	ldreq	r3, [r3, #4]
 8008594:	1809      	addeq	r1, r1, r0
 8008596:	6021      	streq	r1, [r4, #0]
 8008598:	e7ed      	b.n	8008576 <_free_r+0x1e>
 800859a:	461a      	mov	r2, r3
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	b10b      	cbz	r3, 80085a4 <_free_r+0x4c>
 80085a0:	42a3      	cmp	r3, r4
 80085a2:	d9fa      	bls.n	800859a <_free_r+0x42>
 80085a4:	6811      	ldr	r1, [r2, #0]
 80085a6:	1850      	adds	r0, r2, r1
 80085a8:	42a0      	cmp	r0, r4
 80085aa:	d10b      	bne.n	80085c4 <_free_r+0x6c>
 80085ac:	6820      	ldr	r0, [r4, #0]
 80085ae:	4401      	add	r1, r0
 80085b0:	1850      	adds	r0, r2, r1
 80085b2:	4283      	cmp	r3, r0
 80085b4:	6011      	str	r1, [r2, #0]
 80085b6:	d1e0      	bne.n	800857a <_free_r+0x22>
 80085b8:	6818      	ldr	r0, [r3, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	6053      	str	r3, [r2, #4]
 80085be:	4408      	add	r0, r1
 80085c0:	6010      	str	r0, [r2, #0]
 80085c2:	e7da      	b.n	800857a <_free_r+0x22>
 80085c4:	d902      	bls.n	80085cc <_free_r+0x74>
 80085c6:	230c      	movs	r3, #12
 80085c8:	602b      	str	r3, [r5, #0]
 80085ca:	e7d6      	b.n	800857a <_free_r+0x22>
 80085cc:	6820      	ldr	r0, [r4, #0]
 80085ce:	1821      	adds	r1, r4, r0
 80085d0:	428b      	cmp	r3, r1
 80085d2:	bf04      	itt	eq
 80085d4:	6819      	ldreq	r1, [r3, #0]
 80085d6:	685b      	ldreq	r3, [r3, #4]
 80085d8:	6063      	str	r3, [r4, #4]
 80085da:	bf04      	itt	eq
 80085dc:	1809      	addeq	r1, r1, r0
 80085de:	6021      	streq	r1, [r4, #0]
 80085e0:	6054      	str	r4, [r2, #4]
 80085e2:	e7ca      	b.n	800857a <_free_r+0x22>
 80085e4:	bd38      	pop	{r3, r4, r5, pc}
 80085e6:	bf00      	nop
 80085e8:	20000dcc 	.word	0x20000dcc

080085ec <malloc>:
 80085ec:	4b02      	ldr	r3, [pc, #8]	@ (80085f8 <malloc+0xc>)
 80085ee:	4601      	mov	r1, r0
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	f000 b825 	b.w	8008640 <_malloc_r>
 80085f6:	bf00      	nop
 80085f8:	20000034 	.word	0x20000034

080085fc <sbrk_aligned>:
 80085fc:	b570      	push	{r4, r5, r6, lr}
 80085fe:	4e0f      	ldr	r6, [pc, #60]	@ (800863c <sbrk_aligned+0x40>)
 8008600:	460c      	mov	r4, r1
 8008602:	6831      	ldr	r1, [r6, #0]
 8008604:	4605      	mov	r5, r0
 8008606:	b911      	cbnz	r1, 800860e <sbrk_aligned+0x12>
 8008608:	f000 fe5c 	bl	80092c4 <_sbrk_r>
 800860c:	6030      	str	r0, [r6, #0]
 800860e:	4621      	mov	r1, r4
 8008610:	4628      	mov	r0, r5
 8008612:	f000 fe57 	bl	80092c4 <_sbrk_r>
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	d103      	bne.n	8008622 <sbrk_aligned+0x26>
 800861a:	f04f 34ff 	mov.w	r4, #4294967295
 800861e:	4620      	mov	r0, r4
 8008620:	bd70      	pop	{r4, r5, r6, pc}
 8008622:	1cc4      	adds	r4, r0, #3
 8008624:	f024 0403 	bic.w	r4, r4, #3
 8008628:	42a0      	cmp	r0, r4
 800862a:	d0f8      	beq.n	800861e <sbrk_aligned+0x22>
 800862c:	1a21      	subs	r1, r4, r0
 800862e:	4628      	mov	r0, r5
 8008630:	f000 fe48 	bl	80092c4 <_sbrk_r>
 8008634:	3001      	adds	r0, #1
 8008636:	d1f2      	bne.n	800861e <sbrk_aligned+0x22>
 8008638:	e7ef      	b.n	800861a <sbrk_aligned+0x1e>
 800863a:	bf00      	nop
 800863c:	20000dc8 	.word	0x20000dc8

08008640 <_malloc_r>:
 8008640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008644:	1ccd      	adds	r5, r1, #3
 8008646:	f025 0503 	bic.w	r5, r5, #3
 800864a:	3508      	adds	r5, #8
 800864c:	2d0c      	cmp	r5, #12
 800864e:	bf38      	it	cc
 8008650:	250c      	movcc	r5, #12
 8008652:	2d00      	cmp	r5, #0
 8008654:	4606      	mov	r6, r0
 8008656:	db01      	blt.n	800865c <_malloc_r+0x1c>
 8008658:	42a9      	cmp	r1, r5
 800865a:	d904      	bls.n	8008666 <_malloc_r+0x26>
 800865c:	230c      	movs	r3, #12
 800865e:	6033      	str	r3, [r6, #0]
 8008660:	2000      	movs	r0, #0
 8008662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008666:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800873c <_malloc_r+0xfc>
 800866a:	f000 f869 	bl	8008740 <__malloc_lock>
 800866e:	f8d8 3000 	ldr.w	r3, [r8]
 8008672:	461c      	mov	r4, r3
 8008674:	bb44      	cbnz	r4, 80086c8 <_malloc_r+0x88>
 8008676:	4629      	mov	r1, r5
 8008678:	4630      	mov	r0, r6
 800867a:	f7ff ffbf 	bl	80085fc <sbrk_aligned>
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	4604      	mov	r4, r0
 8008682:	d158      	bne.n	8008736 <_malloc_r+0xf6>
 8008684:	f8d8 4000 	ldr.w	r4, [r8]
 8008688:	4627      	mov	r7, r4
 800868a:	2f00      	cmp	r7, #0
 800868c:	d143      	bne.n	8008716 <_malloc_r+0xd6>
 800868e:	2c00      	cmp	r4, #0
 8008690:	d04b      	beq.n	800872a <_malloc_r+0xea>
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	4639      	mov	r1, r7
 8008696:	4630      	mov	r0, r6
 8008698:	eb04 0903 	add.w	r9, r4, r3
 800869c:	f000 fe12 	bl	80092c4 <_sbrk_r>
 80086a0:	4581      	cmp	r9, r0
 80086a2:	d142      	bne.n	800872a <_malloc_r+0xea>
 80086a4:	6821      	ldr	r1, [r4, #0]
 80086a6:	1a6d      	subs	r5, r5, r1
 80086a8:	4629      	mov	r1, r5
 80086aa:	4630      	mov	r0, r6
 80086ac:	f7ff ffa6 	bl	80085fc <sbrk_aligned>
 80086b0:	3001      	adds	r0, #1
 80086b2:	d03a      	beq.n	800872a <_malloc_r+0xea>
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	442b      	add	r3, r5
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	f8d8 3000 	ldr.w	r3, [r8]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	bb62      	cbnz	r2, 800871c <_malloc_r+0xdc>
 80086c2:	f8c8 7000 	str.w	r7, [r8]
 80086c6:	e00f      	b.n	80086e8 <_malloc_r+0xa8>
 80086c8:	6822      	ldr	r2, [r4, #0]
 80086ca:	1b52      	subs	r2, r2, r5
 80086cc:	d420      	bmi.n	8008710 <_malloc_r+0xd0>
 80086ce:	2a0b      	cmp	r2, #11
 80086d0:	d917      	bls.n	8008702 <_malloc_r+0xc2>
 80086d2:	1961      	adds	r1, r4, r5
 80086d4:	42a3      	cmp	r3, r4
 80086d6:	6025      	str	r5, [r4, #0]
 80086d8:	bf18      	it	ne
 80086da:	6059      	strne	r1, [r3, #4]
 80086dc:	6863      	ldr	r3, [r4, #4]
 80086de:	bf08      	it	eq
 80086e0:	f8c8 1000 	streq.w	r1, [r8]
 80086e4:	5162      	str	r2, [r4, r5]
 80086e6:	604b      	str	r3, [r1, #4]
 80086e8:	4630      	mov	r0, r6
 80086ea:	f000 f82f 	bl	800874c <__malloc_unlock>
 80086ee:	f104 000b 	add.w	r0, r4, #11
 80086f2:	1d23      	adds	r3, r4, #4
 80086f4:	f020 0007 	bic.w	r0, r0, #7
 80086f8:	1ac2      	subs	r2, r0, r3
 80086fa:	bf1c      	itt	ne
 80086fc:	1a1b      	subne	r3, r3, r0
 80086fe:	50a3      	strne	r3, [r4, r2]
 8008700:	e7af      	b.n	8008662 <_malloc_r+0x22>
 8008702:	6862      	ldr	r2, [r4, #4]
 8008704:	42a3      	cmp	r3, r4
 8008706:	bf0c      	ite	eq
 8008708:	f8c8 2000 	streq.w	r2, [r8]
 800870c:	605a      	strne	r2, [r3, #4]
 800870e:	e7eb      	b.n	80086e8 <_malloc_r+0xa8>
 8008710:	4623      	mov	r3, r4
 8008712:	6864      	ldr	r4, [r4, #4]
 8008714:	e7ae      	b.n	8008674 <_malloc_r+0x34>
 8008716:	463c      	mov	r4, r7
 8008718:	687f      	ldr	r7, [r7, #4]
 800871a:	e7b6      	b.n	800868a <_malloc_r+0x4a>
 800871c:	461a      	mov	r2, r3
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	42a3      	cmp	r3, r4
 8008722:	d1fb      	bne.n	800871c <_malloc_r+0xdc>
 8008724:	2300      	movs	r3, #0
 8008726:	6053      	str	r3, [r2, #4]
 8008728:	e7de      	b.n	80086e8 <_malloc_r+0xa8>
 800872a:	230c      	movs	r3, #12
 800872c:	6033      	str	r3, [r6, #0]
 800872e:	4630      	mov	r0, r6
 8008730:	f000 f80c 	bl	800874c <__malloc_unlock>
 8008734:	e794      	b.n	8008660 <_malloc_r+0x20>
 8008736:	6005      	str	r5, [r0, #0]
 8008738:	e7d6      	b.n	80086e8 <_malloc_r+0xa8>
 800873a:	bf00      	nop
 800873c:	20000dcc 	.word	0x20000dcc

08008740 <__malloc_lock>:
 8008740:	4801      	ldr	r0, [pc, #4]	@ (8008748 <__malloc_lock+0x8>)
 8008742:	f7ff bed2 	b.w	80084ea <__retarget_lock_acquire_recursive>
 8008746:	bf00      	nop
 8008748:	20000dc4 	.word	0x20000dc4

0800874c <__malloc_unlock>:
 800874c:	4801      	ldr	r0, [pc, #4]	@ (8008754 <__malloc_unlock+0x8>)
 800874e:	f7ff becd 	b.w	80084ec <__retarget_lock_release_recursive>
 8008752:	bf00      	nop
 8008754:	20000dc4 	.word	0x20000dc4

08008758 <__ssputs_r>:
 8008758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800875c:	688e      	ldr	r6, [r1, #8]
 800875e:	461f      	mov	r7, r3
 8008760:	42be      	cmp	r6, r7
 8008762:	680b      	ldr	r3, [r1, #0]
 8008764:	4682      	mov	sl, r0
 8008766:	460c      	mov	r4, r1
 8008768:	4690      	mov	r8, r2
 800876a:	d82d      	bhi.n	80087c8 <__ssputs_r+0x70>
 800876c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008770:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008774:	d026      	beq.n	80087c4 <__ssputs_r+0x6c>
 8008776:	6965      	ldr	r5, [r4, #20]
 8008778:	6909      	ldr	r1, [r1, #16]
 800877a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800877e:	eba3 0901 	sub.w	r9, r3, r1
 8008782:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008786:	1c7b      	adds	r3, r7, #1
 8008788:	444b      	add	r3, r9
 800878a:	106d      	asrs	r5, r5, #1
 800878c:	429d      	cmp	r5, r3
 800878e:	bf38      	it	cc
 8008790:	461d      	movcc	r5, r3
 8008792:	0553      	lsls	r3, r2, #21
 8008794:	d527      	bpl.n	80087e6 <__ssputs_r+0x8e>
 8008796:	4629      	mov	r1, r5
 8008798:	f7ff ff52 	bl	8008640 <_malloc_r>
 800879c:	4606      	mov	r6, r0
 800879e:	b360      	cbz	r0, 80087fa <__ssputs_r+0xa2>
 80087a0:	6921      	ldr	r1, [r4, #16]
 80087a2:	464a      	mov	r2, r9
 80087a4:	f7ff feab 	bl	80084fe <memcpy>
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b2:	81a3      	strh	r3, [r4, #12]
 80087b4:	6126      	str	r6, [r4, #16]
 80087b6:	6165      	str	r5, [r4, #20]
 80087b8:	444e      	add	r6, r9
 80087ba:	eba5 0509 	sub.w	r5, r5, r9
 80087be:	6026      	str	r6, [r4, #0]
 80087c0:	60a5      	str	r5, [r4, #8]
 80087c2:	463e      	mov	r6, r7
 80087c4:	42be      	cmp	r6, r7
 80087c6:	d900      	bls.n	80087ca <__ssputs_r+0x72>
 80087c8:	463e      	mov	r6, r7
 80087ca:	6820      	ldr	r0, [r4, #0]
 80087cc:	4632      	mov	r2, r6
 80087ce:	4641      	mov	r1, r8
 80087d0:	f000 fd3c 	bl	800924c <memmove>
 80087d4:	68a3      	ldr	r3, [r4, #8]
 80087d6:	1b9b      	subs	r3, r3, r6
 80087d8:	60a3      	str	r3, [r4, #8]
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	4433      	add	r3, r6
 80087de:	6023      	str	r3, [r4, #0]
 80087e0:	2000      	movs	r0, #0
 80087e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e6:	462a      	mov	r2, r5
 80087e8:	f000 fd83 	bl	80092f2 <_realloc_r>
 80087ec:	4606      	mov	r6, r0
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d1e0      	bne.n	80087b4 <__ssputs_r+0x5c>
 80087f2:	6921      	ldr	r1, [r4, #16]
 80087f4:	4650      	mov	r0, sl
 80087f6:	f7ff feaf 	bl	8008558 <_free_r>
 80087fa:	230c      	movs	r3, #12
 80087fc:	f8ca 3000 	str.w	r3, [sl]
 8008800:	89a3      	ldrh	r3, [r4, #12]
 8008802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008806:	81a3      	strh	r3, [r4, #12]
 8008808:	f04f 30ff 	mov.w	r0, #4294967295
 800880c:	e7e9      	b.n	80087e2 <__ssputs_r+0x8a>
	...

08008810 <_svfiprintf_r>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	4698      	mov	r8, r3
 8008816:	898b      	ldrh	r3, [r1, #12]
 8008818:	061b      	lsls	r3, r3, #24
 800881a:	b09d      	sub	sp, #116	@ 0x74
 800881c:	4607      	mov	r7, r0
 800881e:	460d      	mov	r5, r1
 8008820:	4614      	mov	r4, r2
 8008822:	d510      	bpl.n	8008846 <_svfiprintf_r+0x36>
 8008824:	690b      	ldr	r3, [r1, #16]
 8008826:	b973      	cbnz	r3, 8008846 <_svfiprintf_r+0x36>
 8008828:	2140      	movs	r1, #64	@ 0x40
 800882a:	f7ff ff09 	bl	8008640 <_malloc_r>
 800882e:	6028      	str	r0, [r5, #0]
 8008830:	6128      	str	r0, [r5, #16]
 8008832:	b930      	cbnz	r0, 8008842 <_svfiprintf_r+0x32>
 8008834:	230c      	movs	r3, #12
 8008836:	603b      	str	r3, [r7, #0]
 8008838:	f04f 30ff 	mov.w	r0, #4294967295
 800883c:	b01d      	add	sp, #116	@ 0x74
 800883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008842:	2340      	movs	r3, #64	@ 0x40
 8008844:	616b      	str	r3, [r5, #20]
 8008846:	2300      	movs	r3, #0
 8008848:	9309      	str	r3, [sp, #36]	@ 0x24
 800884a:	2320      	movs	r3, #32
 800884c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008850:	f8cd 800c 	str.w	r8, [sp, #12]
 8008854:	2330      	movs	r3, #48	@ 0x30
 8008856:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089f4 <_svfiprintf_r+0x1e4>
 800885a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800885e:	f04f 0901 	mov.w	r9, #1
 8008862:	4623      	mov	r3, r4
 8008864:	469a      	mov	sl, r3
 8008866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800886a:	b10a      	cbz	r2, 8008870 <_svfiprintf_r+0x60>
 800886c:	2a25      	cmp	r2, #37	@ 0x25
 800886e:	d1f9      	bne.n	8008864 <_svfiprintf_r+0x54>
 8008870:	ebba 0b04 	subs.w	fp, sl, r4
 8008874:	d00b      	beq.n	800888e <_svfiprintf_r+0x7e>
 8008876:	465b      	mov	r3, fp
 8008878:	4622      	mov	r2, r4
 800887a:	4629      	mov	r1, r5
 800887c:	4638      	mov	r0, r7
 800887e:	f7ff ff6b 	bl	8008758 <__ssputs_r>
 8008882:	3001      	adds	r0, #1
 8008884:	f000 80a7 	beq.w	80089d6 <_svfiprintf_r+0x1c6>
 8008888:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800888a:	445a      	add	r2, fp
 800888c:	9209      	str	r2, [sp, #36]	@ 0x24
 800888e:	f89a 3000 	ldrb.w	r3, [sl]
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 809f 	beq.w	80089d6 <_svfiprintf_r+0x1c6>
 8008898:	2300      	movs	r3, #0
 800889a:	f04f 32ff 	mov.w	r2, #4294967295
 800889e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088a2:	f10a 0a01 	add.w	sl, sl, #1
 80088a6:	9304      	str	r3, [sp, #16]
 80088a8:	9307      	str	r3, [sp, #28]
 80088aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80088b0:	4654      	mov	r4, sl
 80088b2:	2205      	movs	r2, #5
 80088b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b8:	484e      	ldr	r0, [pc, #312]	@ (80089f4 <_svfiprintf_r+0x1e4>)
 80088ba:	f7f7 fca9 	bl	8000210 <memchr>
 80088be:	9a04      	ldr	r2, [sp, #16]
 80088c0:	b9d8      	cbnz	r0, 80088fa <_svfiprintf_r+0xea>
 80088c2:	06d0      	lsls	r0, r2, #27
 80088c4:	bf44      	itt	mi
 80088c6:	2320      	movmi	r3, #32
 80088c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088cc:	0711      	lsls	r1, r2, #28
 80088ce:	bf44      	itt	mi
 80088d0:	232b      	movmi	r3, #43	@ 0x2b
 80088d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088d6:	f89a 3000 	ldrb.w	r3, [sl]
 80088da:	2b2a      	cmp	r3, #42	@ 0x2a
 80088dc:	d015      	beq.n	800890a <_svfiprintf_r+0xfa>
 80088de:	9a07      	ldr	r2, [sp, #28]
 80088e0:	4654      	mov	r4, sl
 80088e2:	2000      	movs	r0, #0
 80088e4:	f04f 0c0a 	mov.w	ip, #10
 80088e8:	4621      	mov	r1, r4
 80088ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ee:	3b30      	subs	r3, #48	@ 0x30
 80088f0:	2b09      	cmp	r3, #9
 80088f2:	d94b      	bls.n	800898c <_svfiprintf_r+0x17c>
 80088f4:	b1b0      	cbz	r0, 8008924 <_svfiprintf_r+0x114>
 80088f6:	9207      	str	r2, [sp, #28]
 80088f8:	e014      	b.n	8008924 <_svfiprintf_r+0x114>
 80088fa:	eba0 0308 	sub.w	r3, r0, r8
 80088fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008902:	4313      	orrs	r3, r2
 8008904:	9304      	str	r3, [sp, #16]
 8008906:	46a2      	mov	sl, r4
 8008908:	e7d2      	b.n	80088b0 <_svfiprintf_r+0xa0>
 800890a:	9b03      	ldr	r3, [sp, #12]
 800890c:	1d19      	adds	r1, r3, #4
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	9103      	str	r1, [sp, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	bfbb      	ittet	lt
 8008916:	425b      	neglt	r3, r3
 8008918:	f042 0202 	orrlt.w	r2, r2, #2
 800891c:	9307      	strge	r3, [sp, #28]
 800891e:	9307      	strlt	r3, [sp, #28]
 8008920:	bfb8      	it	lt
 8008922:	9204      	strlt	r2, [sp, #16]
 8008924:	7823      	ldrb	r3, [r4, #0]
 8008926:	2b2e      	cmp	r3, #46	@ 0x2e
 8008928:	d10a      	bne.n	8008940 <_svfiprintf_r+0x130>
 800892a:	7863      	ldrb	r3, [r4, #1]
 800892c:	2b2a      	cmp	r3, #42	@ 0x2a
 800892e:	d132      	bne.n	8008996 <_svfiprintf_r+0x186>
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	1d1a      	adds	r2, r3, #4
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	9203      	str	r2, [sp, #12]
 8008938:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800893c:	3402      	adds	r4, #2
 800893e:	9305      	str	r3, [sp, #20]
 8008940:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a04 <_svfiprintf_r+0x1f4>
 8008944:	7821      	ldrb	r1, [r4, #0]
 8008946:	2203      	movs	r2, #3
 8008948:	4650      	mov	r0, sl
 800894a:	f7f7 fc61 	bl	8000210 <memchr>
 800894e:	b138      	cbz	r0, 8008960 <_svfiprintf_r+0x150>
 8008950:	9b04      	ldr	r3, [sp, #16]
 8008952:	eba0 000a 	sub.w	r0, r0, sl
 8008956:	2240      	movs	r2, #64	@ 0x40
 8008958:	4082      	lsls	r2, r0
 800895a:	4313      	orrs	r3, r2
 800895c:	3401      	adds	r4, #1
 800895e:	9304      	str	r3, [sp, #16]
 8008960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008964:	4824      	ldr	r0, [pc, #144]	@ (80089f8 <_svfiprintf_r+0x1e8>)
 8008966:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800896a:	2206      	movs	r2, #6
 800896c:	f7f7 fc50 	bl	8000210 <memchr>
 8008970:	2800      	cmp	r0, #0
 8008972:	d036      	beq.n	80089e2 <_svfiprintf_r+0x1d2>
 8008974:	4b21      	ldr	r3, [pc, #132]	@ (80089fc <_svfiprintf_r+0x1ec>)
 8008976:	bb1b      	cbnz	r3, 80089c0 <_svfiprintf_r+0x1b0>
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	3307      	adds	r3, #7
 800897c:	f023 0307 	bic.w	r3, r3, #7
 8008980:	3308      	adds	r3, #8
 8008982:	9303      	str	r3, [sp, #12]
 8008984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008986:	4433      	add	r3, r6
 8008988:	9309      	str	r3, [sp, #36]	@ 0x24
 800898a:	e76a      	b.n	8008862 <_svfiprintf_r+0x52>
 800898c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008990:	460c      	mov	r4, r1
 8008992:	2001      	movs	r0, #1
 8008994:	e7a8      	b.n	80088e8 <_svfiprintf_r+0xd8>
 8008996:	2300      	movs	r3, #0
 8008998:	3401      	adds	r4, #1
 800899a:	9305      	str	r3, [sp, #20]
 800899c:	4619      	mov	r1, r3
 800899e:	f04f 0c0a 	mov.w	ip, #10
 80089a2:	4620      	mov	r0, r4
 80089a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089a8:	3a30      	subs	r2, #48	@ 0x30
 80089aa:	2a09      	cmp	r2, #9
 80089ac:	d903      	bls.n	80089b6 <_svfiprintf_r+0x1a6>
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0c6      	beq.n	8008940 <_svfiprintf_r+0x130>
 80089b2:	9105      	str	r1, [sp, #20]
 80089b4:	e7c4      	b.n	8008940 <_svfiprintf_r+0x130>
 80089b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80089ba:	4604      	mov	r4, r0
 80089bc:	2301      	movs	r3, #1
 80089be:	e7f0      	b.n	80089a2 <_svfiprintf_r+0x192>
 80089c0:	ab03      	add	r3, sp, #12
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	462a      	mov	r2, r5
 80089c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008a00 <_svfiprintf_r+0x1f0>)
 80089c8:	a904      	add	r1, sp, #16
 80089ca:	4638      	mov	r0, r7
 80089cc:	f3af 8000 	nop.w
 80089d0:	1c42      	adds	r2, r0, #1
 80089d2:	4606      	mov	r6, r0
 80089d4:	d1d6      	bne.n	8008984 <_svfiprintf_r+0x174>
 80089d6:	89ab      	ldrh	r3, [r5, #12]
 80089d8:	065b      	lsls	r3, r3, #25
 80089da:	f53f af2d 	bmi.w	8008838 <_svfiprintf_r+0x28>
 80089de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089e0:	e72c      	b.n	800883c <_svfiprintf_r+0x2c>
 80089e2:	ab03      	add	r3, sp, #12
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	462a      	mov	r2, r5
 80089e8:	4b05      	ldr	r3, [pc, #20]	@ (8008a00 <_svfiprintf_r+0x1f0>)
 80089ea:	a904      	add	r1, sp, #16
 80089ec:	4638      	mov	r0, r7
 80089ee:	f000 f9bb 	bl	8008d68 <_printf_i>
 80089f2:	e7ed      	b.n	80089d0 <_svfiprintf_r+0x1c0>
 80089f4:	08009b89 	.word	0x08009b89
 80089f8:	08009b93 	.word	0x08009b93
 80089fc:	00000000 	.word	0x00000000
 8008a00:	08008759 	.word	0x08008759
 8008a04:	08009b8f 	.word	0x08009b8f

08008a08 <__sfputc_r>:
 8008a08:	6893      	ldr	r3, [r2, #8]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	b410      	push	{r4}
 8008a10:	6093      	str	r3, [r2, #8]
 8008a12:	da08      	bge.n	8008a26 <__sfputc_r+0x1e>
 8008a14:	6994      	ldr	r4, [r2, #24]
 8008a16:	42a3      	cmp	r3, r4
 8008a18:	db01      	blt.n	8008a1e <__sfputc_r+0x16>
 8008a1a:	290a      	cmp	r1, #10
 8008a1c:	d103      	bne.n	8008a26 <__sfputc_r+0x1e>
 8008a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a22:	f7ff bbc2 	b.w	80081aa <__swbuf_r>
 8008a26:	6813      	ldr	r3, [r2, #0]
 8008a28:	1c58      	adds	r0, r3, #1
 8008a2a:	6010      	str	r0, [r2, #0]
 8008a2c:	7019      	strb	r1, [r3, #0]
 8008a2e:	4608      	mov	r0, r1
 8008a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <__sfputs_r>:
 8008a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a38:	4606      	mov	r6, r0
 8008a3a:	460f      	mov	r7, r1
 8008a3c:	4614      	mov	r4, r2
 8008a3e:	18d5      	adds	r5, r2, r3
 8008a40:	42ac      	cmp	r4, r5
 8008a42:	d101      	bne.n	8008a48 <__sfputs_r+0x12>
 8008a44:	2000      	movs	r0, #0
 8008a46:	e007      	b.n	8008a58 <__sfputs_r+0x22>
 8008a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4c:	463a      	mov	r2, r7
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f7ff ffda 	bl	8008a08 <__sfputc_r>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d1f3      	bne.n	8008a40 <__sfputs_r+0xa>
 8008a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a5c <_vfiprintf_r>:
 8008a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a60:	460d      	mov	r5, r1
 8008a62:	b09d      	sub	sp, #116	@ 0x74
 8008a64:	4614      	mov	r4, r2
 8008a66:	4698      	mov	r8, r3
 8008a68:	4606      	mov	r6, r0
 8008a6a:	b118      	cbz	r0, 8008a74 <_vfiprintf_r+0x18>
 8008a6c:	6a03      	ldr	r3, [r0, #32]
 8008a6e:	b90b      	cbnz	r3, 8008a74 <_vfiprintf_r+0x18>
 8008a70:	f7ff fa88 	bl	8007f84 <__sinit>
 8008a74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a76:	07d9      	lsls	r1, r3, #31
 8008a78:	d405      	bmi.n	8008a86 <_vfiprintf_r+0x2a>
 8008a7a:	89ab      	ldrh	r3, [r5, #12]
 8008a7c:	059a      	lsls	r2, r3, #22
 8008a7e:	d402      	bmi.n	8008a86 <_vfiprintf_r+0x2a>
 8008a80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a82:	f7ff fd32 	bl	80084ea <__retarget_lock_acquire_recursive>
 8008a86:	89ab      	ldrh	r3, [r5, #12]
 8008a88:	071b      	lsls	r3, r3, #28
 8008a8a:	d501      	bpl.n	8008a90 <_vfiprintf_r+0x34>
 8008a8c:	692b      	ldr	r3, [r5, #16]
 8008a8e:	b99b      	cbnz	r3, 8008ab8 <_vfiprintf_r+0x5c>
 8008a90:	4629      	mov	r1, r5
 8008a92:	4630      	mov	r0, r6
 8008a94:	f7ff fbc8 	bl	8008228 <__swsetup_r>
 8008a98:	b170      	cbz	r0, 8008ab8 <_vfiprintf_r+0x5c>
 8008a9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a9c:	07dc      	lsls	r4, r3, #31
 8008a9e:	d504      	bpl.n	8008aaa <_vfiprintf_r+0x4e>
 8008aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa4:	b01d      	add	sp, #116	@ 0x74
 8008aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aaa:	89ab      	ldrh	r3, [r5, #12]
 8008aac:	0598      	lsls	r0, r3, #22
 8008aae:	d4f7      	bmi.n	8008aa0 <_vfiprintf_r+0x44>
 8008ab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ab2:	f7ff fd1b 	bl	80084ec <__retarget_lock_release_recursive>
 8008ab6:	e7f3      	b.n	8008aa0 <_vfiprintf_r+0x44>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8008abc:	2320      	movs	r3, #32
 8008abe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ac6:	2330      	movs	r3, #48	@ 0x30
 8008ac8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c78 <_vfiprintf_r+0x21c>
 8008acc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ad0:	f04f 0901 	mov.w	r9, #1
 8008ad4:	4623      	mov	r3, r4
 8008ad6:	469a      	mov	sl, r3
 8008ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008adc:	b10a      	cbz	r2, 8008ae2 <_vfiprintf_r+0x86>
 8008ade:	2a25      	cmp	r2, #37	@ 0x25
 8008ae0:	d1f9      	bne.n	8008ad6 <_vfiprintf_r+0x7a>
 8008ae2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ae6:	d00b      	beq.n	8008b00 <_vfiprintf_r+0xa4>
 8008ae8:	465b      	mov	r3, fp
 8008aea:	4622      	mov	r2, r4
 8008aec:	4629      	mov	r1, r5
 8008aee:	4630      	mov	r0, r6
 8008af0:	f7ff ffa1 	bl	8008a36 <__sfputs_r>
 8008af4:	3001      	adds	r0, #1
 8008af6:	f000 80a7 	beq.w	8008c48 <_vfiprintf_r+0x1ec>
 8008afa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008afc:	445a      	add	r2, fp
 8008afe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b00:	f89a 3000 	ldrb.w	r3, [sl]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 809f 	beq.w	8008c48 <_vfiprintf_r+0x1ec>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b14:	f10a 0a01 	add.w	sl, sl, #1
 8008b18:	9304      	str	r3, [sp, #16]
 8008b1a:	9307      	str	r3, [sp, #28]
 8008b1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b20:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b22:	4654      	mov	r4, sl
 8008b24:	2205      	movs	r2, #5
 8008b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b2a:	4853      	ldr	r0, [pc, #332]	@ (8008c78 <_vfiprintf_r+0x21c>)
 8008b2c:	f7f7 fb70 	bl	8000210 <memchr>
 8008b30:	9a04      	ldr	r2, [sp, #16]
 8008b32:	b9d8      	cbnz	r0, 8008b6c <_vfiprintf_r+0x110>
 8008b34:	06d1      	lsls	r1, r2, #27
 8008b36:	bf44      	itt	mi
 8008b38:	2320      	movmi	r3, #32
 8008b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b3e:	0713      	lsls	r3, r2, #28
 8008b40:	bf44      	itt	mi
 8008b42:	232b      	movmi	r3, #43	@ 0x2b
 8008b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b48:	f89a 3000 	ldrb.w	r3, [sl]
 8008b4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b4e:	d015      	beq.n	8008b7c <_vfiprintf_r+0x120>
 8008b50:	9a07      	ldr	r2, [sp, #28]
 8008b52:	4654      	mov	r4, sl
 8008b54:	2000      	movs	r0, #0
 8008b56:	f04f 0c0a 	mov.w	ip, #10
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b60:	3b30      	subs	r3, #48	@ 0x30
 8008b62:	2b09      	cmp	r3, #9
 8008b64:	d94b      	bls.n	8008bfe <_vfiprintf_r+0x1a2>
 8008b66:	b1b0      	cbz	r0, 8008b96 <_vfiprintf_r+0x13a>
 8008b68:	9207      	str	r2, [sp, #28]
 8008b6a:	e014      	b.n	8008b96 <_vfiprintf_r+0x13a>
 8008b6c:	eba0 0308 	sub.w	r3, r0, r8
 8008b70:	fa09 f303 	lsl.w	r3, r9, r3
 8008b74:	4313      	orrs	r3, r2
 8008b76:	9304      	str	r3, [sp, #16]
 8008b78:	46a2      	mov	sl, r4
 8008b7a:	e7d2      	b.n	8008b22 <_vfiprintf_r+0xc6>
 8008b7c:	9b03      	ldr	r3, [sp, #12]
 8008b7e:	1d19      	adds	r1, r3, #4
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	9103      	str	r1, [sp, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	bfbb      	ittet	lt
 8008b88:	425b      	neglt	r3, r3
 8008b8a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b8e:	9307      	strge	r3, [sp, #28]
 8008b90:	9307      	strlt	r3, [sp, #28]
 8008b92:	bfb8      	it	lt
 8008b94:	9204      	strlt	r2, [sp, #16]
 8008b96:	7823      	ldrb	r3, [r4, #0]
 8008b98:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b9a:	d10a      	bne.n	8008bb2 <_vfiprintf_r+0x156>
 8008b9c:	7863      	ldrb	r3, [r4, #1]
 8008b9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ba0:	d132      	bne.n	8008c08 <_vfiprintf_r+0x1ac>
 8008ba2:	9b03      	ldr	r3, [sp, #12]
 8008ba4:	1d1a      	adds	r2, r3, #4
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	9203      	str	r2, [sp, #12]
 8008baa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bae:	3402      	adds	r4, #2
 8008bb0:	9305      	str	r3, [sp, #20]
 8008bb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c88 <_vfiprintf_r+0x22c>
 8008bb6:	7821      	ldrb	r1, [r4, #0]
 8008bb8:	2203      	movs	r2, #3
 8008bba:	4650      	mov	r0, sl
 8008bbc:	f7f7 fb28 	bl	8000210 <memchr>
 8008bc0:	b138      	cbz	r0, 8008bd2 <_vfiprintf_r+0x176>
 8008bc2:	9b04      	ldr	r3, [sp, #16]
 8008bc4:	eba0 000a 	sub.w	r0, r0, sl
 8008bc8:	2240      	movs	r2, #64	@ 0x40
 8008bca:	4082      	lsls	r2, r0
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	3401      	adds	r4, #1
 8008bd0:	9304      	str	r3, [sp, #16]
 8008bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd6:	4829      	ldr	r0, [pc, #164]	@ (8008c7c <_vfiprintf_r+0x220>)
 8008bd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bdc:	2206      	movs	r2, #6
 8008bde:	f7f7 fb17 	bl	8000210 <memchr>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d03f      	beq.n	8008c66 <_vfiprintf_r+0x20a>
 8008be6:	4b26      	ldr	r3, [pc, #152]	@ (8008c80 <_vfiprintf_r+0x224>)
 8008be8:	bb1b      	cbnz	r3, 8008c32 <_vfiprintf_r+0x1d6>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	3307      	adds	r3, #7
 8008bee:	f023 0307 	bic.w	r3, r3, #7
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	9303      	str	r3, [sp, #12]
 8008bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf8:	443b      	add	r3, r7
 8008bfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bfc:	e76a      	b.n	8008ad4 <_vfiprintf_r+0x78>
 8008bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c02:	460c      	mov	r4, r1
 8008c04:	2001      	movs	r0, #1
 8008c06:	e7a8      	b.n	8008b5a <_vfiprintf_r+0xfe>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	3401      	adds	r4, #1
 8008c0c:	9305      	str	r3, [sp, #20]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	f04f 0c0a 	mov.w	ip, #10
 8008c14:	4620      	mov	r0, r4
 8008c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c1a:	3a30      	subs	r2, #48	@ 0x30
 8008c1c:	2a09      	cmp	r2, #9
 8008c1e:	d903      	bls.n	8008c28 <_vfiprintf_r+0x1cc>
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d0c6      	beq.n	8008bb2 <_vfiprintf_r+0x156>
 8008c24:	9105      	str	r1, [sp, #20]
 8008c26:	e7c4      	b.n	8008bb2 <_vfiprintf_r+0x156>
 8008c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e7f0      	b.n	8008c14 <_vfiprintf_r+0x1b8>
 8008c32:	ab03      	add	r3, sp, #12
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	462a      	mov	r2, r5
 8008c38:	4b12      	ldr	r3, [pc, #72]	@ (8008c84 <_vfiprintf_r+0x228>)
 8008c3a:	a904      	add	r1, sp, #16
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f3af 8000 	nop.w
 8008c42:	4607      	mov	r7, r0
 8008c44:	1c78      	adds	r0, r7, #1
 8008c46:	d1d6      	bne.n	8008bf6 <_vfiprintf_r+0x19a>
 8008c48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c4a:	07d9      	lsls	r1, r3, #31
 8008c4c:	d405      	bmi.n	8008c5a <_vfiprintf_r+0x1fe>
 8008c4e:	89ab      	ldrh	r3, [r5, #12]
 8008c50:	059a      	lsls	r2, r3, #22
 8008c52:	d402      	bmi.n	8008c5a <_vfiprintf_r+0x1fe>
 8008c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c56:	f7ff fc49 	bl	80084ec <__retarget_lock_release_recursive>
 8008c5a:	89ab      	ldrh	r3, [r5, #12]
 8008c5c:	065b      	lsls	r3, r3, #25
 8008c5e:	f53f af1f 	bmi.w	8008aa0 <_vfiprintf_r+0x44>
 8008c62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c64:	e71e      	b.n	8008aa4 <_vfiprintf_r+0x48>
 8008c66:	ab03      	add	r3, sp, #12
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	462a      	mov	r2, r5
 8008c6c:	4b05      	ldr	r3, [pc, #20]	@ (8008c84 <_vfiprintf_r+0x228>)
 8008c6e:	a904      	add	r1, sp, #16
 8008c70:	4630      	mov	r0, r6
 8008c72:	f000 f879 	bl	8008d68 <_printf_i>
 8008c76:	e7e4      	b.n	8008c42 <_vfiprintf_r+0x1e6>
 8008c78:	08009b89 	.word	0x08009b89
 8008c7c:	08009b93 	.word	0x08009b93
 8008c80:	00000000 	.word	0x00000000
 8008c84:	08008a37 	.word	0x08008a37
 8008c88:	08009b8f 	.word	0x08009b8f

08008c8c <_printf_common>:
 8008c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c90:	4616      	mov	r6, r2
 8008c92:	4698      	mov	r8, r3
 8008c94:	688a      	ldr	r2, [r1, #8]
 8008c96:	690b      	ldr	r3, [r1, #16]
 8008c98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	bfb8      	it	lt
 8008ca0:	4613      	movlt	r3, r2
 8008ca2:	6033      	str	r3, [r6, #0]
 8008ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ca8:	4607      	mov	r7, r0
 8008caa:	460c      	mov	r4, r1
 8008cac:	b10a      	cbz	r2, 8008cb2 <_printf_common+0x26>
 8008cae:	3301      	adds	r3, #1
 8008cb0:	6033      	str	r3, [r6, #0]
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	0699      	lsls	r1, r3, #26
 8008cb6:	bf42      	ittt	mi
 8008cb8:	6833      	ldrmi	r3, [r6, #0]
 8008cba:	3302      	addmi	r3, #2
 8008cbc:	6033      	strmi	r3, [r6, #0]
 8008cbe:	6825      	ldr	r5, [r4, #0]
 8008cc0:	f015 0506 	ands.w	r5, r5, #6
 8008cc4:	d106      	bne.n	8008cd4 <_printf_common+0x48>
 8008cc6:	f104 0a19 	add.w	sl, r4, #25
 8008cca:	68e3      	ldr	r3, [r4, #12]
 8008ccc:	6832      	ldr	r2, [r6, #0]
 8008cce:	1a9b      	subs	r3, r3, r2
 8008cd0:	42ab      	cmp	r3, r5
 8008cd2:	dc26      	bgt.n	8008d22 <_printf_common+0x96>
 8008cd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008cd8:	6822      	ldr	r2, [r4, #0]
 8008cda:	3b00      	subs	r3, #0
 8008cdc:	bf18      	it	ne
 8008cde:	2301      	movne	r3, #1
 8008ce0:	0692      	lsls	r2, r2, #26
 8008ce2:	d42b      	bmi.n	8008d3c <_printf_common+0xb0>
 8008ce4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ce8:	4641      	mov	r1, r8
 8008cea:	4638      	mov	r0, r7
 8008cec:	47c8      	blx	r9
 8008cee:	3001      	adds	r0, #1
 8008cf0:	d01e      	beq.n	8008d30 <_printf_common+0xa4>
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	6922      	ldr	r2, [r4, #16]
 8008cf6:	f003 0306 	and.w	r3, r3, #6
 8008cfa:	2b04      	cmp	r3, #4
 8008cfc:	bf02      	ittt	eq
 8008cfe:	68e5      	ldreq	r5, [r4, #12]
 8008d00:	6833      	ldreq	r3, [r6, #0]
 8008d02:	1aed      	subeq	r5, r5, r3
 8008d04:	68a3      	ldr	r3, [r4, #8]
 8008d06:	bf0c      	ite	eq
 8008d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d0c:	2500      	movne	r5, #0
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	bfc4      	itt	gt
 8008d12:	1a9b      	subgt	r3, r3, r2
 8008d14:	18ed      	addgt	r5, r5, r3
 8008d16:	2600      	movs	r6, #0
 8008d18:	341a      	adds	r4, #26
 8008d1a:	42b5      	cmp	r5, r6
 8008d1c:	d11a      	bne.n	8008d54 <_printf_common+0xc8>
 8008d1e:	2000      	movs	r0, #0
 8008d20:	e008      	b.n	8008d34 <_printf_common+0xa8>
 8008d22:	2301      	movs	r3, #1
 8008d24:	4652      	mov	r2, sl
 8008d26:	4641      	mov	r1, r8
 8008d28:	4638      	mov	r0, r7
 8008d2a:	47c8      	blx	r9
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	d103      	bne.n	8008d38 <_printf_common+0xac>
 8008d30:	f04f 30ff 	mov.w	r0, #4294967295
 8008d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d38:	3501      	adds	r5, #1
 8008d3a:	e7c6      	b.n	8008cca <_printf_common+0x3e>
 8008d3c:	18e1      	adds	r1, r4, r3
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	2030      	movs	r0, #48	@ 0x30
 8008d42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d46:	4422      	add	r2, r4
 8008d48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d50:	3302      	adds	r3, #2
 8008d52:	e7c7      	b.n	8008ce4 <_printf_common+0x58>
 8008d54:	2301      	movs	r3, #1
 8008d56:	4622      	mov	r2, r4
 8008d58:	4641      	mov	r1, r8
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	47c8      	blx	r9
 8008d5e:	3001      	adds	r0, #1
 8008d60:	d0e6      	beq.n	8008d30 <_printf_common+0xa4>
 8008d62:	3601      	adds	r6, #1
 8008d64:	e7d9      	b.n	8008d1a <_printf_common+0x8e>
	...

08008d68 <_printf_i>:
 8008d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d6c:	7e0f      	ldrb	r7, [r1, #24]
 8008d6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d70:	2f78      	cmp	r7, #120	@ 0x78
 8008d72:	4691      	mov	r9, r2
 8008d74:	4680      	mov	r8, r0
 8008d76:	460c      	mov	r4, r1
 8008d78:	469a      	mov	sl, r3
 8008d7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d7e:	d807      	bhi.n	8008d90 <_printf_i+0x28>
 8008d80:	2f62      	cmp	r7, #98	@ 0x62
 8008d82:	d80a      	bhi.n	8008d9a <_printf_i+0x32>
 8008d84:	2f00      	cmp	r7, #0
 8008d86:	f000 80d1 	beq.w	8008f2c <_printf_i+0x1c4>
 8008d8a:	2f58      	cmp	r7, #88	@ 0x58
 8008d8c:	f000 80b8 	beq.w	8008f00 <_printf_i+0x198>
 8008d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d98:	e03a      	b.n	8008e10 <_printf_i+0xa8>
 8008d9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d9e:	2b15      	cmp	r3, #21
 8008da0:	d8f6      	bhi.n	8008d90 <_printf_i+0x28>
 8008da2:	a101      	add	r1, pc, #4	@ (adr r1, 8008da8 <_printf_i+0x40>)
 8008da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008da8:	08008e01 	.word	0x08008e01
 8008dac:	08008e15 	.word	0x08008e15
 8008db0:	08008d91 	.word	0x08008d91
 8008db4:	08008d91 	.word	0x08008d91
 8008db8:	08008d91 	.word	0x08008d91
 8008dbc:	08008d91 	.word	0x08008d91
 8008dc0:	08008e15 	.word	0x08008e15
 8008dc4:	08008d91 	.word	0x08008d91
 8008dc8:	08008d91 	.word	0x08008d91
 8008dcc:	08008d91 	.word	0x08008d91
 8008dd0:	08008d91 	.word	0x08008d91
 8008dd4:	08008f13 	.word	0x08008f13
 8008dd8:	08008e3f 	.word	0x08008e3f
 8008ddc:	08008ecd 	.word	0x08008ecd
 8008de0:	08008d91 	.word	0x08008d91
 8008de4:	08008d91 	.word	0x08008d91
 8008de8:	08008f35 	.word	0x08008f35
 8008dec:	08008d91 	.word	0x08008d91
 8008df0:	08008e3f 	.word	0x08008e3f
 8008df4:	08008d91 	.word	0x08008d91
 8008df8:	08008d91 	.word	0x08008d91
 8008dfc:	08008ed5 	.word	0x08008ed5
 8008e00:	6833      	ldr	r3, [r6, #0]
 8008e02:	1d1a      	adds	r2, r3, #4
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6032      	str	r2, [r6, #0]
 8008e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e10:	2301      	movs	r3, #1
 8008e12:	e09c      	b.n	8008f4e <_printf_i+0x1e6>
 8008e14:	6833      	ldr	r3, [r6, #0]
 8008e16:	6820      	ldr	r0, [r4, #0]
 8008e18:	1d19      	adds	r1, r3, #4
 8008e1a:	6031      	str	r1, [r6, #0]
 8008e1c:	0606      	lsls	r6, r0, #24
 8008e1e:	d501      	bpl.n	8008e24 <_printf_i+0xbc>
 8008e20:	681d      	ldr	r5, [r3, #0]
 8008e22:	e003      	b.n	8008e2c <_printf_i+0xc4>
 8008e24:	0645      	lsls	r5, r0, #25
 8008e26:	d5fb      	bpl.n	8008e20 <_printf_i+0xb8>
 8008e28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e2c:	2d00      	cmp	r5, #0
 8008e2e:	da03      	bge.n	8008e38 <_printf_i+0xd0>
 8008e30:	232d      	movs	r3, #45	@ 0x2d
 8008e32:	426d      	negs	r5, r5
 8008e34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e38:	4858      	ldr	r0, [pc, #352]	@ (8008f9c <_printf_i+0x234>)
 8008e3a:	230a      	movs	r3, #10
 8008e3c:	e011      	b.n	8008e62 <_printf_i+0xfa>
 8008e3e:	6821      	ldr	r1, [r4, #0]
 8008e40:	6833      	ldr	r3, [r6, #0]
 8008e42:	0608      	lsls	r0, r1, #24
 8008e44:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e48:	d402      	bmi.n	8008e50 <_printf_i+0xe8>
 8008e4a:	0649      	lsls	r1, r1, #25
 8008e4c:	bf48      	it	mi
 8008e4e:	b2ad      	uxthmi	r5, r5
 8008e50:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e52:	4852      	ldr	r0, [pc, #328]	@ (8008f9c <_printf_i+0x234>)
 8008e54:	6033      	str	r3, [r6, #0]
 8008e56:	bf14      	ite	ne
 8008e58:	230a      	movne	r3, #10
 8008e5a:	2308      	moveq	r3, #8
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e62:	6866      	ldr	r6, [r4, #4]
 8008e64:	60a6      	str	r6, [r4, #8]
 8008e66:	2e00      	cmp	r6, #0
 8008e68:	db05      	blt.n	8008e76 <_printf_i+0x10e>
 8008e6a:	6821      	ldr	r1, [r4, #0]
 8008e6c:	432e      	orrs	r6, r5
 8008e6e:	f021 0104 	bic.w	r1, r1, #4
 8008e72:	6021      	str	r1, [r4, #0]
 8008e74:	d04b      	beq.n	8008f0e <_printf_i+0x1a6>
 8008e76:	4616      	mov	r6, r2
 8008e78:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e7c:	fb03 5711 	mls	r7, r3, r1, r5
 8008e80:	5dc7      	ldrb	r7, [r0, r7]
 8008e82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e86:	462f      	mov	r7, r5
 8008e88:	42bb      	cmp	r3, r7
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	d9f4      	bls.n	8008e78 <_printf_i+0x110>
 8008e8e:	2b08      	cmp	r3, #8
 8008e90:	d10b      	bne.n	8008eaa <_printf_i+0x142>
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	07df      	lsls	r7, r3, #31
 8008e96:	d508      	bpl.n	8008eaa <_printf_i+0x142>
 8008e98:	6923      	ldr	r3, [r4, #16]
 8008e9a:	6861      	ldr	r1, [r4, #4]
 8008e9c:	4299      	cmp	r1, r3
 8008e9e:	bfde      	ittt	le
 8008ea0:	2330      	movle	r3, #48	@ 0x30
 8008ea2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ea6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008eaa:	1b92      	subs	r2, r2, r6
 8008eac:	6122      	str	r2, [r4, #16]
 8008eae:	f8cd a000 	str.w	sl, [sp]
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	aa03      	add	r2, sp, #12
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	4640      	mov	r0, r8
 8008eba:	f7ff fee7 	bl	8008c8c <_printf_common>
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	d14a      	bne.n	8008f58 <_printf_i+0x1f0>
 8008ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec6:	b004      	add	sp, #16
 8008ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	f043 0320 	orr.w	r3, r3, #32
 8008ed2:	6023      	str	r3, [r4, #0]
 8008ed4:	4832      	ldr	r0, [pc, #200]	@ (8008fa0 <_printf_i+0x238>)
 8008ed6:	2778      	movs	r7, #120	@ 0x78
 8008ed8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008edc:	6823      	ldr	r3, [r4, #0]
 8008ede:	6831      	ldr	r1, [r6, #0]
 8008ee0:	061f      	lsls	r7, r3, #24
 8008ee2:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ee6:	d402      	bmi.n	8008eee <_printf_i+0x186>
 8008ee8:	065f      	lsls	r7, r3, #25
 8008eea:	bf48      	it	mi
 8008eec:	b2ad      	uxthmi	r5, r5
 8008eee:	6031      	str	r1, [r6, #0]
 8008ef0:	07d9      	lsls	r1, r3, #31
 8008ef2:	bf44      	itt	mi
 8008ef4:	f043 0320 	orrmi.w	r3, r3, #32
 8008ef8:	6023      	strmi	r3, [r4, #0]
 8008efa:	b11d      	cbz	r5, 8008f04 <_printf_i+0x19c>
 8008efc:	2310      	movs	r3, #16
 8008efe:	e7ad      	b.n	8008e5c <_printf_i+0xf4>
 8008f00:	4826      	ldr	r0, [pc, #152]	@ (8008f9c <_printf_i+0x234>)
 8008f02:	e7e9      	b.n	8008ed8 <_printf_i+0x170>
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	f023 0320 	bic.w	r3, r3, #32
 8008f0a:	6023      	str	r3, [r4, #0]
 8008f0c:	e7f6      	b.n	8008efc <_printf_i+0x194>
 8008f0e:	4616      	mov	r6, r2
 8008f10:	e7bd      	b.n	8008e8e <_printf_i+0x126>
 8008f12:	6833      	ldr	r3, [r6, #0]
 8008f14:	6825      	ldr	r5, [r4, #0]
 8008f16:	6961      	ldr	r1, [r4, #20]
 8008f18:	1d18      	adds	r0, r3, #4
 8008f1a:	6030      	str	r0, [r6, #0]
 8008f1c:	062e      	lsls	r6, r5, #24
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	d501      	bpl.n	8008f26 <_printf_i+0x1be>
 8008f22:	6019      	str	r1, [r3, #0]
 8008f24:	e002      	b.n	8008f2c <_printf_i+0x1c4>
 8008f26:	0668      	lsls	r0, r5, #25
 8008f28:	d5fb      	bpl.n	8008f22 <_printf_i+0x1ba>
 8008f2a:	8019      	strh	r1, [r3, #0]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	6123      	str	r3, [r4, #16]
 8008f30:	4616      	mov	r6, r2
 8008f32:	e7bc      	b.n	8008eae <_printf_i+0x146>
 8008f34:	6833      	ldr	r3, [r6, #0]
 8008f36:	1d1a      	adds	r2, r3, #4
 8008f38:	6032      	str	r2, [r6, #0]
 8008f3a:	681e      	ldr	r6, [r3, #0]
 8008f3c:	6862      	ldr	r2, [r4, #4]
 8008f3e:	2100      	movs	r1, #0
 8008f40:	4630      	mov	r0, r6
 8008f42:	f7f7 f965 	bl	8000210 <memchr>
 8008f46:	b108      	cbz	r0, 8008f4c <_printf_i+0x1e4>
 8008f48:	1b80      	subs	r0, r0, r6
 8008f4a:	6060      	str	r0, [r4, #4]
 8008f4c:	6863      	ldr	r3, [r4, #4]
 8008f4e:	6123      	str	r3, [r4, #16]
 8008f50:	2300      	movs	r3, #0
 8008f52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f56:	e7aa      	b.n	8008eae <_printf_i+0x146>
 8008f58:	6923      	ldr	r3, [r4, #16]
 8008f5a:	4632      	mov	r2, r6
 8008f5c:	4649      	mov	r1, r9
 8008f5e:	4640      	mov	r0, r8
 8008f60:	47d0      	blx	sl
 8008f62:	3001      	adds	r0, #1
 8008f64:	d0ad      	beq.n	8008ec2 <_printf_i+0x15a>
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	079b      	lsls	r3, r3, #30
 8008f6a:	d413      	bmi.n	8008f94 <_printf_i+0x22c>
 8008f6c:	68e0      	ldr	r0, [r4, #12]
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	4298      	cmp	r0, r3
 8008f72:	bfb8      	it	lt
 8008f74:	4618      	movlt	r0, r3
 8008f76:	e7a6      	b.n	8008ec6 <_printf_i+0x15e>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	4632      	mov	r2, r6
 8008f7c:	4649      	mov	r1, r9
 8008f7e:	4640      	mov	r0, r8
 8008f80:	47d0      	blx	sl
 8008f82:	3001      	adds	r0, #1
 8008f84:	d09d      	beq.n	8008ec2 <_printf_i+0x15a>
 8008f86:	3501      	adds	r5, #1
 8008f88:	68e3      	ldr	r3, [r4, #12]
 8008f8a:	9903      	ldr	r1, [sp, #12]
 8008f8c:	1a5b      	subs	r3, r3, r1
 8008f8e:	42ab      	cmp	r3, r5
 8008f90:	dcf2      	bgt.n	8008f78 <_printf_i+0x210>
 8008f92:	e7eb      	b.n	8008f6c <_printf_i+0x204>
 8008f94:	2500      	movs	r5, #0
 8008f96:	f104 0619 	add.w	r6, r4, #25
 8008f9a:	e7f5      	b.n	8008f88 <_printf_i+0x220>
 8008f9c:	08009b9a 	.word	0x08009b9a
 8008fa0:	08009bab 	.word	0x08009bab

08008fa4 <__sflush_r>:
 8008fa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fac:	0716      	lsls	r6, r2, #28
 8008fae:	4605      	mov	r5, r0
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	d454      	bmi.n	800905e <__sflush_r+0xba>
 8008fb4:	684b      	ldr	r3, [r1, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	dc02      	bgt.n	8008fc0 <__sflush_r+0x1c>
 8008fba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	dd48      	ble.n	8009052 <__sflush_r+0xae>
 8008fc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fc2:	2e00      	cmp	r6, #0
 8008fc4:	d045      	beq.n	8009052 <__sflush_r+0xae>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fcc:	682f      	ldr	r7, [r5, #0]
 8008fce:	6a21      	ldr	r1, [r4, #32]
 8008fd0:	602b      	str	r3, [r5, #0]
 8008fd2:	d030      	beq.n	8009036 <__sflush_r+0x92>
 8008fd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	0759      	lsls	r1, r3, #29
 8008fda:	d505      	bpl.n	8008fe8 <__sflush_r+0x44>
 8008fdc:	6863      	ldr	r3, [r4, #4]
 8008fde:	1ad2      	subs	r2, r2, r3
 8008fe0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fe2:	b10b      	cbz	r3, 8008fe8 <__sflush_r+0x44>
 8008fe4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fe6:	1ad2      	subs	r2, r2, r3
 8008fe8:	2300      	movs	r3, #0
 8008fea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fec:	6a21      	ldr	r1, [r4, #32]
 8008fee:	4628      	mov	r0, r5
 8008ff0:	47b0      	blx	r6
 8008ff2:	1c43      	adds	r3, r0, #1
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	d106      	bne.n	8009006 <__sflush_r+0x62>
 8008ff8:	6829      	ldr	r1, [r5, #0]
 8008ffa:	291d      	cmp	r1, #29
 8008ffc:	d82b      	bhi.n	8009056 <__sflush_r+0xb2>
 8008ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80090a8 <__sflush_r+0x104>)
 8009000:	40ca      	lsrs	r2, r1
 8009002:	07d6      	lsls	r6, r2, #31
 8009004:	d527      	bpl.n	8009056 <__sflush_r+0xb2>
 8009006:	2200      	movs	r2, #0
 8009008:	6062      	str	r2, [r4, #4]
 800900a:	04d9      	lsls	r1, r3, #19
 800900c:	6922      	ldr	r2, [r4, #16]
 800900e:	6022      	str	r2, [r4, #0]
 8009010:	d504      	bpl.n	800901c <__sflush_r+0x78>
 8009012:	1c42      	adds	r2, r0, #1
 8009014:	d101      	bne.n	800901a <__sflush_r+0x76>
 8009016:	682b      	ldr	r3, [r5, #0]
 8009018:	b903      	cbnz	r3, 800901c <__sflush_r+0x78>
 800901a:	6560      	str	r0, [r4, #84]	@ 0x54
 800901c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800901e:	602f      	str	r7, [r5, #0]
 8009020:	b1b9      	cbz	r1, 8009052 <__sflush_r+0xae>
 8009022:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009026:	4299      	cmp	r1, r3
 8009028:	d002      	beq.n	8009030 <__sflush_r+0x8c>
 800902a:	4628      	mov	r0, r5
 800902c:	f7ff fa94 	bl	8008558 <_free_r>
 8009030:	2300      	movs	r3, #0
 8009032:	6363      	str	r3, [r4, #52]	@ 0x34
 8009034:	e00d      	b.n	8009052 <__sflush_r+0xae>
 8009036:	2301      	movs	r3, #1
 8009038:	4628      	mov	r0, r5
 800903a:	47b0      	blx	r6
 800903c:	4602      	mov	r2, r0
 800903e:	1c50      	adds	r0, r2, #1
 8009040:	d1c9      	bne.n	8008fd6 <__sflush_r+0x32>
 8009042:	682b      	ldr	r3, [r5, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d0c6      	beq.n	8008fd6 <__sflush_r+0x32>
 8009048:	2b1d      	cmp	r3, #29
 800904a:	d001      	beq.n	8009050 <__sflush_r+0xac>
 800904c:	2b16      	cmp	r3, #22
 800904e:	d11e      	bne.n	800908e <__sflush_r+0xea>
 8009050:	602f      	str	r7, [r5, #0]
 8009052:	2000      	movs	r0, #0
 8009054:	e022      	b.n	800909c <__sflush_r+0xf8>
 8009056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800905a:	b21b      	sxth	r3, r3
 800905c:	e01b      	b.n	8009096 <__sflush_r+0xf2>
 800905e:	690f      	ldr	r7, [r1, #16]
 8009060:	2f00      	cmp	r7, #0
 8009062:	d0f6      	beq.n	8009052 <__sflush_r+0xae>
 8009064:	0793      	lsls	r3, r2, #30
 8009066:	680e      	ldr	r6, [r1, #0]
 8009068:	bf08      	it	eq
 800906a:	694b      	ldreq	r3, [r1, #20]
 800906c:	600f      	str	r7, [r1, #0]
 800906e:	bf18      	it	ne
 8009070:	2300      	movne	r3, #0
 8009072:	eba6 0807 	sub.w	r8, r6, r7
 8009076:	608b      	str	r3, [r1, #8]
 8009078:	f1b8 0f00 	cmp.w	r8, #0
 800907c:	dde9      	ble.n	8009052 <__sflush_r+0xae>
 800907e:	6a21      	ldr	r1, [r4, #32]
 8009080:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009082:	4643      	mov	r3, r8
 8009084:	463a      	mov	r2, r7
 8009086:	4628      	mov	r0, r5
 8009088:	47b0      	blx	r6
 800908a:	2800      	cmp	r0, #0
 800908c:	dc08      	bgt.n	80090a0 <__sflush_r+0xfc>
 800908e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009096:	81a3      	strh	r3, [r4, #12]
 8009098:	f04f 30ff 	mov.w	r0, #4294967295
 800909c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a0:	4407      	add	r7, r0
 80090a2:	eba8 0800 	sub.w	r8, r8, r0
 80090a6:	e7e7      	b.n	8009078 <__sflush_r+0xd4>
 80090a8:	20400001 	.word	0x20400001

080090ac <_fflush_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	690b      	ldr	r3, [r1, #16]
 80090b0:	4605      	mov	r5, r0
 80090b2:	460c      	mov	r4, r1
 80090b4:	b913      	cbnz	r3, 80090bc <_fflush_r+0x10>
 80090b6:	2500      	movs	r5, #0
 80090b8:	4628      	mov	r0, r5
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	b118      	cbz	r0, 80090c6 <_fflush_r+0x1a>
 80090be:	6a03      	ldr	r3, [r0, #32]
 80090c0:	b90b      	cbnz	r3, 80090c6 <_fflush_r+0x1a>
 80090c2:	f7fe ff5f 	bl	8007f84 <__sinit>
 80090c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d0f3      	beq.n	80090b6 <_fflush_r+0xa>
 80090ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090d0:	07d0      	lsls	r0, r2, #31
 80090d2:	d404      	bmi.n	80090de <_fflush_r+0x32>
 80090d4:	0599      	lsls	r1, r3, #22
 80090d6:	d402      	bmi.n	80090de <_fflush_r+0x32>
 80090d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090da:	f7ff fa06 	bl	80084ea <__retarget_lock_acquire_recursive>
 80090de:	4628      	mov	r0, r5
 80090e0:	4621      	mov	r1, r4
 80090e2:	f7ff ff5f 	bl	8008fa4 <__sflush_r>
 80090e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090e8:	07da      	lsls	r2, r3, #31
 80090ea:	4605      	mov	r5, r0
 80090ec:	d4e4      	bmi.n	80090b8 <_fflush_r+0xc>
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	059b      	lsls	r3, r3, #22
 80090f2:	d4e1      	bmi.n	80090b8 <_fflush_r+0xc>
 80090f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090f6:	f7ff f9f9 	bl	80084ec <__retarget_lock_release_recursive>
 80090fa:	e7dd      	b.n	80090b8 <_fflush_r+0xc>

080090fc <fiprintf>:
 80090fc:	b40e      	push	{r1, r2, r3}
 80090fe:	b503      	push	{r0, r1, lr}
 8009100:	4601      	mov	r1, r0
 8009102:	ab03      	add	r3, sp, #12
 8009104:	4805      	ldr	r0, [pc, #20]	@ (800911c <fiprintf+0x20>)
 8009106:	f853 2b04 	ldr.w	r2, [r3], #4
 800910a:	6800      	ldr	r0, [r0, #0]
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	f7ff fca5 	bl	8008a5c <_vfiprintf_r>
 8009112:	b002      	add	sp, #8
 8009114:	f85d eb04 	ldr.w	lr, [sp], #4
 8009118:	b003      	add	sp, #12
 800911a:	4770      	bx	lr
 800911c:	20000034 	.word	0x20000034

08009120 <__swhatbuf_r>:
 8009120:	b570      	push	{r4, r5, r6, lr}
 8009122:	460c      	mov	r4, r1
 8009124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009128:	2900      	cmp	r1, #0
 800912a:	b096      	sub	sp, #88	@ 0x58
 800912c:	4615      	mov	r5, r2
 800912e:	461e      	mov	r6, r3
 8009130:	da0d      	bge.n	800914e <__swhatbuf_r+0x2e>
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009138:	f04f 0100 	mov.w	r1, #0
 800913c:	bf14      	ite	ne
 800913e:	2340      	movne	r3, #64	@ 0x40
 8009140:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009144:	2000      	movs	r0, #0
 8009146:	6031      	str	r1, [r6, #0]
 8009148:	602b      	str	r3, [r5, #0]
 800914a:	b016      	add	sp, #88	@ 0x58
 800914c:	bd70      	pop	{r4, r5, r6, pc}
 800914e:	466a      	mov	r2, sp
 8009150:	f000 f896 	bl	8009280 <_fstat_r>
 8009154:	2800      	cmp	r0, #0
 8009156:	dbec      	blt.n	8009132 <__swhatbuf_r+0x12>
 8009158:	9901      	ldr	r1, [sp, #4]
 800915a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800915e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009162:	4259      	negs	r1, r3
 8009164:	4159      	adcs	r1, r3
 8009166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800916a:	e7eb      	b.n	8009144 <__swhatbuf_r+0x24>

0800916c <__smakebuf_r>:
 800916c:	898b      	ldrh	r3, [r1, #12]
 800916e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009170:	079d      	lsls	r5, r3, #30
 8009172:	4606      	mov	r6, r0
 8009174:	460c      	mov	r4, r1
 8009176:	d507      	bpl.n	8009188 <__smakebuf_r+0x1c>
 8009178:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	6123      	str	r3, [r4, #16]
 8009180:	2301      	movs	r3, #1
 8009182:	6163      	str	r3, [r4, #20]
 8009184:	b003      	add	sp, #12
 8009186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009188:	ab01      	add	r3, sp, #4
 800918a:	466a      	mov	r2, sp
 800918c:	f7ff ffc8 	bl	8009120 <__swhatbuf_r>
 8009190:	9f00      	ldr	r7, [sp, #0]
 8009192:	4605      	mov	r5, r0
 8009194:	4639      	mov	r1, r7
 8009196:	4630      	mov	r0, r6
 8009198:	f7ff fa52 	bl	8008640 <_malloc_r>
 800919c:	b948      	cbnz	r0, 80091b2 <__smakebuf_r+0x46>
 800919e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a2:	059a      	lsls	r2, r3, #22
 80091a4:	d4ee      	bmi.n	8009184 <__smakebuf_r+0x18>
 80091a6:	f023 0303 	bic.w	r3, r3, #3
 80091aa:	f043 0302 	orr.w	r3, r3, #2
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	e7e2      	b.n	8009178 <__smakebuf_r+0xc>
 80091b2:	89a3      	ldrh	r3, [r4, #12]
 80091b4:	6020      	str	r0, [r4, #0]
 80091b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ba:	81a3      	strh	r3, [r4, #12]
 80091bc:	9b01      	ldr	r3, [sp, #4]
 80091be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091c2:	b15b      	cbz	r3, 80091dc <__smakebuf_r+0x70>
 80091c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091c8:	4630      	mov	r0, r6
 80091ca:	f000 f86b 	bl	80092a4 <_isatty_r>
 80091ce:	b128      	cbz	r0, 80091dc <__smakebuf_r+0x70>
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	f023 0303 	bic.w	r3, r3, #3
 80091d6:	f043 0301 	orr.w	r3, r3, #1
 80091da:	81a3      	strh	r3, [r4, #12]
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	431d      	orrs	r5, r3
 80091e0:	81a5      	strh	r5, [r4, #12]
 80091e2:	e7cf      	b.n	8009184 <__smakebuf_r+0x18>

080091e4 <_putc_r>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	460d      	mov	r5, r1
 80091e8:	4614      	mov	r4, r2
 80091ea:	4606      	mov	r6, r0
 80091ec:	b118      	cbz	r0, 80091f6 <_putc_r+0x12>
 80091ee:	6a03      	ldr	r3, [r0, #32]
 80091f0:	b90b      	cbnz	r3, 80091f6 <_putc_r+0x12>
 80091f2:	f7fe fec7 	bl	8007f84 <__sinit>
 80091f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091f8:	07d8      	lsls	r0, r3, #31
 80091fa:	d405      	bmi.n	8009208 <_putc_r+0x24>
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	0599      	lsls	r1, r3, #22
 8009200:	d402      	bmi.n	8009208 <_putc_r+0x24>
 8009202:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009204:	f7ff f971 	bl	80084ea <__retarget_lock_acquire_recursive>
 8009208:	68a3      	ldr	r3, [r4, #8]
 800920a:	3b01      	subs	r3, #1
 800920c:	2b00      	cmp	r3, #0
 800920e:	60a3      	str	r3, [r4, #8]
 8009210:	da05      	bge.n	800921e <_putc_r+0x3a>
 8009212:	69a2      	ldr	r2, [r4, #24]
 8009214:	4293      	cmp	r3, r2
 8009216:	db12      	blt.n	800923e <_putc_r+0x5a>
 8009218:	b2eb      	uxtb	r3, r5
 800921a:	2b0a      	cmp	r3, #10
 800921c:	d00f      	beq.n	800923e <_putc_r+0x5a>
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	6022      	str	r2, [r4, #0]
 8009224:	701d      	strb	r5, [r3, #0]
 8009226:	b2ed      	uxtb	r5, r5
 8009228:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800922a:	07da      	lsls	r2, r3, #31
 800922c:	d405      	bmi.n	800923a <_putc_r+0x56>
 800922e:	89a3      	ldrh	r3, [r4, #12]
 8009230:	059b      	lsls	r3, r3, #22
 8009232:	d402      	bmi.n	800923a <_putc_r+0x56>
 8009234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009236:	f7ff f959 	bl	80084ec <__retarget_lock_release_recursive>
 800923a:	4628      	mov	r0, r5
 800923c:	bd70      	pop	{r4, r5, r6, pc}
 800923e:	4629      	mov	r1, r5
 8009240:	4622      	mov	r2, r4
 8009242:	4630      	mov	r0, r6
 8009244:	f7fe ffb1 	bl	80081aa <__swbuf_r>
 8009248:	4605      	mov	r5, r0
 800924a:	e7ed      	b.n	8009228 <_putc_r+0x44>

0800924c <memmove>:
 800924c:	4288      	cmp	r0, r1
 800924e:	b510      	push	{r4, lr}
 8009250:	eb01 0402 	add.w	r4, r1, r2
 8009254:	d902      	bls.n	800925c <memmove+0x10>
 8009256:	4284      	cmp	r4, r0
 8009258:	4623      	mov	r3, r4
 800925a:	d807      	bhi.n	800926c <memmove+0x20>
 800925c:	1e43      	subs	r3, r0, #1
 800925e:	42a1      	cmp	r1, r4
 8009260:	d008      	beq.n	8009274 <memmove+0x28>
 8009262:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009266:	f803 2f01 	strb.w	r2, [r3, #1]!
 800926a:	e7f8      	b.n	800925e <memmove+0x12>
 800926c:	4402      	add	r2, r0
 800926e:	4601      	mov	r1, r0
 8009270:	428a      	cmp	r2, r1
 8009272:	d100      	bne.n	8009276 <memmove+0x2a>
 8009274:	bd10      	pop	{r4, pc}
 8009276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800927a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800927e:	e7f7      	b.n	8009270 <memmove+0x24>

08009280 <_fstat_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4d07      	ldr	r5, [pc, #28]	@ (80092a0 <_fstat_r+0x20>)
 8009284:	2300      	movs	r3, #0
 8009286:	4604      	mov	r4, r0
 8009288:	4608      	mov	r0, r1
 800928a:	4611      	mov	r1, r2
 800928c:	602b      	str	r3, [r5, #0]
 800928e:	f7f9 fdc3 	bl	8002e18 <_fstat>
 8009292:	1c43      	adds	r3, r0, #1
 8009294:	d102      	bne.n	800929c <_fstat_r+0x1c>
 8009296:	682b      	ldr	r3, [r5, #0]
 8009298:	b103      	cbz	r3, 800929c <_fstat_r+0x1c>
 800929a:	6023      	str	r3, [r4, #0]
 800929c:	bd38      	pop	{r3, r4, r5, pc}
 800929e:	bf00      	nop
 80092a0:	20000dc0 	.word	0x20000dc0

080092a4 <_isatty_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	4d06      	ldr	r5, [pc, #24]	@ (80092c0 <_isatty_r+0x1c>)
 80092a8:	2300      	movs	r3, #0
 80092aa:	4604      	mov	r4, r0
 80092ac:	4608      	mov	r0, r1
 80092ae:	602b      	str	r3, [r5, #0]
 80092b0:	f7f9 fdc2 	bl	8002e38 <_isatty>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	d102      	bne.n	80092be <_isatty_r+0x1a>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	b103      	cbz	r3, 80092be <_isatty_r+0x1a>
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	20000dc0 	.word	0x20000dc0

080092c4 <_sbrk_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	4d06      	ldr	r5, [pc, #24]	@ (80092e0 <_sbrk_r+0x1c>)
 80092c8:	2300      	movs	r3, #0
 80092ca:	4604      	mov	r4, r0
 80092cc:	4608      	mov	r0, r1
 80092ce:	602b      	str	r3, [r5, #0]
 80092d0:	f7f9 fdca 	bl	8002e68 <_sbrk>
 80092d4:	1c43      	adds	r3, r0, #1
 80092d6:	d102      	bne.n	80092de <_sbrk_r+0x1a>
 80092d8:	682b      	ldr	r3, [r5, #0]
 80092da:	b103      	cbz	r3, 80092de <_sbrk_r+0x1a>
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	bd38      	pop	{r3, r4, r5, pc}
 80092e0:	20000dc0 	.word	0x20000dc0

080092e4 <abort>:
 80092e4:	b508      	push	{r3, lr}
 80092e6:	2006      	movs	r0, #6
 80092e8:	f000 f85a 	bl	80093a0 <raise>
 80092ec:	2001      	movs	r0, #1
 80092ee:	f7f9 fd43 	bl	8002d78 <_exit>

080092f2 <_realloc_r>:
 80092f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f6:	4607      	mov	r7, r0
 80092f8:	4614      	mov	r4, r2
 80092fa:	460d      	mov	r5, r1
 80092fc:	b921      	cbnz	r1, 8009308 <_realloc_r+0x16>
 80092fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009302:	4611      	mov	r1, r2
 8009304:	f7ff b99c 	b.w	8008640 <_malloc_r>
 8009308:	b92a      	cbnz	r2, 8009316 <_realloc_r+0x24>
 800930a:	f7ff f925 	bl	8008558 <_free_r>
 800930e:	4625      	mov	r5, r4
 8009310:	4628      	mov	r0, r5
 8009312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009316:	f000 f85f 	bl	80093d8 <_malloc_usable_size_r>
 800931a:	4284      	cmp	r4, r0
 800931c:	4606      	mov	r6, r0
 800931e:	d802      	bhi.n	8009326 <_realloc_r+0x34>
 8009320:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009324:	d8f4      	bhi.n	8009310 <_realloc_r+0x1e>
 8009326:	4621      	mov	r1, r4
 8009328:	4638      	mov	r0, r7
 800932a:	f7ff f989 	bl	8008640 <_malloc_r>
 800932e:	4680      	mov	r8, r0
 8009330:	b908      	cbnz	r0, 8009336 <_realloc_r+0x44>
 8009332:	4645      	mov	r5, r8
 8009334:	e7ec      	b.n	8009310 <_realloc_r+0x1e>
 8009336:	42b4      	cmp	r4, r6
 8009338:	4622      	mov	r2, r4
 800933a:	4629      	mov	r1, r5
 800933c:	bf28      	it	cs
 800933e:	4632      	movcs	r2, r6
 8009340:	f7ff f8dd 	bl	80084fe <memcpy>
 8009344:	4629      	mov	r1, r5
 8009346:	4638      	mov	r0, r7
 8009348:	f7ff f906 	bl	8008558 <_free_r>
 800934c:	e7f1      	b.n	8009332 <_realloc_r+0x40>

0800934e <_raise_r>:
 800934e:	291f      	cmp	r1, #31
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4605      	mov	r5, r0
 8009354:	460c      	mov	r4, r1
 8009356:	d904      	bls.n	8009362 <_raise_r+0x14>
 8009358:	2316      	movs	r3, #22
 800935a:	6003      	str	r3, [r0, #0]
 800935c:	f04f 30ff 	mov.w	r0, #4294967295
 8009360:	bd38      	pop	{r3, r4, r5, pc}
 8009362:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009364:	b112      	cbz	r2, 800936c <_raise_r+0x1e>
 8009366:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800936a:	b94b      	cbnz	r3, 8009380 <_raise_r+0x32>
 800936c:	4628      	mov	r0, r5
 800936e:	f000 f831 	bl	80093d4 <_getpid_r>
 8009372:	4622      	mov	r2, r4
 8009374:	4601      	mov	r1, r0
 8009376:	4628      	mov	r0, r5
 8009378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800937c:	f000 b818 	b.w	80093b0 <_kill_r>
 8009380:	2b01      	cmp	r3, #1
 8009382:	d00a      	beq.n	800939a <_raise_r+0x4c>
 8009384:	1c59      	adds	r1, r3, #1
 8009386:	d103      	bne.n	8009390 <_raise_r+0x42>
 8009388:	2316      	movs	r3, #22
 800938a:	6003      	str	r3, [r0, #0]
 800938c:	2001      	movs	r0, #1
 800938e:	e7e7      	b.n	8009360 <_raise_r+0x12>
 8009390:	2100      	movs	r1, #0
 8009392:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009396:	4620      	mov	r0, r4
 8009398:	4798      	blx	r3
 800939a:	2000      	movs	r0, #0
 800939c:	e7e0      	b.n	8009360 <_raise_r+0x12>
	...

080093a0 <raise>:
 80093a0:	4b02      	ldr	r3, [pc, #8]	@ (80093ac <raise+0xc>)
 80093a2:	4601      	mov	r1, r0
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	f7ff bfd2 	b.w	800934e <_raise_r>
 80093aa:	bf00      	nop
 80093ac:	20000034 	.word	0x20000034

080093b0 <_kill_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	4d07      	ldr	r5, [pc, #28]	@ (80093d0 <_kill_r+0x20>)
 80093b4:	2300      	movs	r3, #0
 80093b6:	4604      	mov	r4, r0
 80093b8:	4608      	mov	r0, r1
 80093ba:	4611      	mov	r1, r2
 80093bc:	602b      	str	r3, [r5, #0]
 80093be:	f7f9 fccb 	bl	8002d58 <_kill>
 80093c2:	1c43      	adds	r3, r0, #1
 80093c4:	d102      	bne.n	80093cc <_kill_r+0x1c>
 80093c6:	682b      	ldr	r3, [r5, #0]
 80093c8:	b103      	cbz	r3, 80093cc <_kill_r+0x1c>
 80093ca:	6023      	str	r3, [r4, #0]
 80093cc:	bd38      	pop	{r3, r4, r5, pc}
 80093ce:	bf00      	nop
 80093d0:	20000dc0 	.word	0x20000dc0

080093d4 <_getpid_r>:
 80093d4:	f7f9 bcb8 	b.w	8002d48 <_getpid>

080093d8 <_malloc_usable_size_r>:
 80093d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093dc:	1f18      	subs	r0, r3, #4
 80093de:	2b00      	cmp	r3, #0
 80093e0:	bfbc      	itt	lt
 80093e2:	580b      	ldrlt	r3, [r1, r0]
 80093e4:	18c0      	addlt	r0, r0, r3
 80093e6:	4770      	bx	lr

080093e8 <_init>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	bf00      	nop
 80093ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ee:	bc08      	pop	{r3}
 80093f0:	469e      	mov	lr, r3
 80093f2:	4770      	bx	lr

080093f4 <_fini>:
 80093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f6:	bf00      	nop
 80093f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fa:	bc08      	pop	{r3}
 80093fc:	469e      	mov	lr, r3
 80093fe:	4770      	bx	lr
