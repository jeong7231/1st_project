
1st_project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a70  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  08008c10  08008c10  00009c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009268  08009268  0000b080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009268  08009268  0000a268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009270  08009270  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009270  08009270  0000a270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009274  08009274  0000a274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009278  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d44  20000080  080092f8  0000b080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dc4  080092f8  0000bdc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016971  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003251  00000000  00000000  00021a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00024c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ed  00000000  00000000  00026208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5e4  00000000  00000000  000272f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a01  00000000  00000000  000418d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a13bf  00000000  00000000  0005b2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc699  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006864  00000000  00000000  000fc6dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00102f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008bf8 	.word	0x08008bf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08008bf8 	.word	0x08008bf8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <LCD_init>:
#include "clcd.h"

uint8_t lcdData = 0;
I2C_HandleTypeDef *phLcdI2C;

void LCD_init(I2C_HandleTypeDef *phI2C) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	phLcdI2C = phI2C;
 80005e4:	4a18      	ldr	r2, [pc, #96]	@ (8000648 <LCD_init+0x6c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6013      	str	r3, [r2, #0]

	HAL_Delay(50);
 80005ea:	2032      	movs	r0, #50	@ 0x32
 80005ec:	f002 fa62 	bl	8002ab4 <HAL_Delay>
	LCD_cmdMode();
 80005f0:	f000 f89a 	bl	8000728 <LCD_cmdMode>
	LCD_writeMode();
 80005f4:	f000 f8b8 	bl	8000768 <LCD_writeMode>
	LCD_sendData(0x30);
 80005f8:	2030      	movs	r0, #48	@ 0x30
 80005fa:	f000 f849 	bl	8000690 <LCD_sendData>
	HAL_Delay(5);
 80005fe:	2005      	movs	r0, #5
 8000600:	f002 fa58 	bl	8002ab4 <HAL_Delay>
	LCD_sendData(0x30);
 8000604:	2030      	movs	r0, #48	@ 0x30
 8000606:	f000 f843 	bl	8000690 <LCD_sendData>
	HAL_Delay(1);
 800060a:	2001      	movs	r0, #1
 800060c:	f002 fa52 	bl	8002ab4 <HAL_Delay>
	LCD_sendData(0x30);
 8000610:	2030      	movs	r0, #48	@ 0x30
 8000612:	f000 f83d 	bl	8000690 <LCD_sendData>
	LCD_sendData(0x20);
 8000616:	2020      	movs	r0, #32
 8000618:	f000 f83a 	bl	8000690 <LCD_sendData>
	LCD_sendByte(LCD_4BIT_FUNC_SET);
 800061c:	2028      	movs	r0, #40	@ 0x28
 800061e:	f000 f85f 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF);
 8000622:	2008      	movs	r0, #8
 8000624:	f000 f85c 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);
 8000628:	2001      	movs	r0, #1
 800062a:	f000 f859 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);
 800062e:	2006      	movs	r0, #6
 8000630:	f000 f856 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);
 8000634:	200c      	movs	r0, #12
 8000636:	f000 f853 	bl	80006e0 <LCD_sendByte>
	LCD_backLightOn();
 800063a:	f000 f865 	bl	8000708 <LCD_backLightOn>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000a0 	.word	0x200000a0

0800064c <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();			// RS pin Low
 8000656:	f000 f867 	bl	8000728 <LCD_cmdMode>
	LCD_writeMode();		// R/W pin Low
 800065a:	f000 f885 	bl	8000768 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f83d 	bl	80006e0 <LCD_sendByte>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	4603      	mov	r3, r0
 8000676:	71fb      	strb	r3, [r7, #7]
	LCD_charMode(); 		// RS pin High
 8000678:	f000 f866 	bl	8000748 <LCD_charMode>
	LCD_writeMode(); 		// R/W pin Low
 800067c:	f000 f874 	bl	8000768 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f82c 	bl	80006e0 <LCD_sendByte>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <LCD_sendData>:
void LCD_sendData(uint8_t data) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	LCD_enableHigh();		// E pin High
 800069a:	f000 f875 	bl	8000788 <LCD_enableHigh>
	HAL_Delay(2);			// LCD need delay
 800069e:	2002      	movs	r0, #2
 80006a0:	f002 fa08 	bl	8002ab4 <HAL_Delay>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);
 80006a4:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <LCD_sendData+0x4c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	b25a      	sxtb	r2, r3
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <LCD_sendData+0x4c>)
 80006c2:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80006c4:	f000 f880 	bl	80007c8 <LCD_sendDataToInterface>
	LCD_enableLow();		// E pin Low
 80006c8:	f000 f86e 	bl	80007a8 <LCD_enableLow>
	HAL_Delay(2);			// LCD delay
 80006cc:	2002      	movs	r0, #2
 80006ce:	f002 f9f1 	bl	8002ab4 <HAL_Delay>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000009c 	.word	0x2000009c

080006e0 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send upper data
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffcf 	bl	8000690 <LCD_sendData>
	data = data << 4;		// 4bit data shift (move to upper bit)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send lower data
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffc8 	bl	8000690 <LCD_sendData>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <LCD_backLightOn>:
void LCD_backLightOn() {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_BL);
 800070c:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <LCD_backLightOn+0x1c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f043 0308 	orr.w	r3, r3, #8
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b03      	ldr	r3, [pc, #12]	@ (8000724 <LCD_backLightOn+0x1c>)
 8000718:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800071a:	f000 f855 	bl	80007c8 <LCD_sendDataToInterface>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000009c 	.word	0x2000009c

08000728 <LCD_cmdMode>:
void LCD_backLightOff() {
	lcdData &= ~(1 << LCD_BL);
	LCD_sendDataToInterface();
}

void LCD_cmdMode() {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS); // 0 bit low
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <LCD_cmdMode+0x1c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b03      	ldr	r3, [pc, #12]	@ (8000744 <LCD_cmdMode+0x1c>)
 8000738:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800073a:	f000 f845 	bl	80007c8 <LCD_sendDataToInterface>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000009c 	.word	0x2000009c

08000748 <LCD_charMode>:

void LCD_charMode() {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS); // 0 bit high
 800074c:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <LCD_charMode+0x1c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <LCD_charMode+0x1c>)
 8000758:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800075a:	f000 f835 	bl	80007c8 <LCD_sendDataToInterface>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000009c 	.word	0x2000009c

08000768 <LCD_writeMode>:

void LCD_writeMode() {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW); // 1 bit low
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <LCD_writeMode+0x1c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	f023 0302 	bic.w	r3, r3, #2
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b03      	ldr	r3, [pc, #12]	@ (8000784 <LCD_writeMode+0x1c>)
 8000778:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800077a:	f000 f825 	bl	80007c8 <LCD_sendDataToInterface>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000009c 	.word	0x2000009c

08000788 <LCD_enableHigh>:

void LCD_enableHigh() {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E); // 2 bit high
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <LCD_enableHigh+0x1c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <LCD_enableHigh+0x1c>)
 8000798:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800079a:	f000 f815 	bl	80007c8 <LCD_sendDataToInterface>
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000009c 	.word	0x2000009c

080007a8 <LCD_enableLow>:

void LCD_enableLow() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E); // 2 bit low
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <LCD_enableLow+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	f023 0304 	bic.w	r3, r3, #4
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <LCD_enableLow+0x1c>)
 80007b8:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80007ba:	f000 f805 	bl	80007c8 <LCD_sendDataToInterface>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000009c 	.word	0x2000009c

080007c8 <LCD_sendDataToInterface>:


void LCD_sendDataToInterface() {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(phLcdI2C, LCD_DEV_ADDR << 1, &lcdData, 1, 100);
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <LCD_sendDataToInterface+0x20>)
 80007d0:	6818      	ldr	r0, [r3, #0]
 80007d2:	2364      	movs	r3, #100	@ 0x64
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2301      	movs	r3, #1
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <LCD_sendDataToInterface+0x24>)
 80007da:	214e      	movs	r1, #78	@ 0x4e
 80007dc:	f003 f9fa 	bl	8003bd4 <HAL_I2C_Master_Transmit>
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000a0 	.word	0x200000a0
 80007ec:	2000009c 	.word	0x2000009c

080007f0 <LCD_writeString>:

void LCD_writeString(char *str) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e009      	b.n	8000812 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff31 	bl	800066e <LCD_writeCharData>
	for (int i = 0; str[i]; i++) {
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3301      	adds	r3, #1
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1ef      	bne.n	80007fe <LCD_writeString+0xe>
	}
}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	460a      	mov	r2, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = ((0x40 * row) + col);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	019b      	lsls	r3, r3, #6
 800084c:	b2da      	uxtb	r2, r3
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	4413      	add	r3, r2
 8000852:	73fb      	strb	r3, [r7, #15]
	uint8_t command = (0x80 + lcdRegAddr);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	3b80      	subs	r3, #128	@ 0x80
 8000858:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fef5 	bl	800064c <LCD_writeCmdData>
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str) {
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	603a      	str	r2, [r7, #0]
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	460b      	mov	r3, r1
 8000878:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 800087a:	79ba      	ldrb	r2, [r7, #6]
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffd1 	bl	8000828 <LCD_gotoXY>
	LCD_writeString(str);
 8000886:	6838      	ldr	r0, [r7, #0]
 8000888:	f7ff ffb2 	bl	80007f0 <LCD_writeString>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <DWT_Delay_Init+0x58>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <DWT_Delay_Init+0x58>)
 800089e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80008a2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <DWT_Delay_Init+0x58>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <DWT_Delay_Init+0x58>)
 80008aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008ae:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008b6:	f023 0301 	bic.w	r3, r3, #1
 80008ba:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0b      	ldr	r2, [pc, #44]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80008ce:	bf00      	nop
  __ASM volatile ("NOP");
 80008d0:	bf00      	nop
  __ASM volatile ("NOP");
 80008d2:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 80008dc:	2300      	movs	r3, #0
 80008de:	e000      	b.n	80008e2 <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 80008e0:	2301      	movs	r3, #1
  }

}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000edf0 	.word	0xe000edf0
 80008f0:	e0001000 	.word	0xe0001000

080008f4 <Set_Pin_Output>:
  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
}

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000910:	887b      	ldrh	r3, [r7, #2]
 8000912:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	4619      	mov	r1, r3
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f002 fe38 	bl	8003598 <HAL_GPIO_Init>
}
 8000928:	bf00      	nop
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <DHT11_Init>:
}

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000934:	f7ff ffae 	bl	8000894 <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000938:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800093c:	4807      	ldr	r0, [pc, #28]	@ (800095c <DHT11_Init+0x2c>)
 800093e:	f7ff ffd9 	bl	80008f4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000942:	2201      	movs	r2, #1
 8000944:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000948:	4804      	ldr	r0, [pc, #16]	@ (800095c <DHT11_Init+0x2c>)
 800094a:	f002 ffc1 	bl	80038d0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800094e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000952:	f002 f8af 	bl	8002ab4 <HAL_Delay>
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40020800 	.word	0x40020800

08000960 <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	807b      	strh	r3, [r7, #2]
    *length = 0;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2200      	movs	r2, #0
 8000972:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8000974:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000978:	2100      	movs	r1, #0
 800097a:	68b8      	ldr	r0, [r7, #8]
 800097c:	f007 f8b2 	bl	8007ae4 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 8000980:	f240 4202 	movw	r2, #1026	@ 0x402
 8000984:	2100      	movs	r1, #0
 8000986:	4826      	ldr	r0, [pc, #152]	@ (8000a20 <esp_at_command+0xc0>)
 8000988:	f007 f8ac 	bl	8007ae4 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f7ff fc31 	bl	80001f4 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	b29a      	uxth	r2, r3
 8000996:	2364      	movs	r3, #100	@ 0x64
 8000998:	68f9      	ldr	r1, [r7, #12]
 800099a:	4822      	ldr	r0, [pc, #136]	@ (8000a24 <esp_at_command+0xc4>)
 800099c:	f005 fe52 	bl	8006644 <HAL_UART_Transmit>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d032      	beq.n	8000a0c <esp_at_command+0xac>
        return -1;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	e035      	b.n	8000a18 <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 80009ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <esp_at_command+0xc0>)
 80009ae:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80009b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009b6:	d302      	bcc.n	80009be <esp_at_command+0x5e>
            return -2;
 80009b8:	f06f 0301 	mvn.w	r3, #1
 80009bc:	e02c      	b.n	8000a18 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 80009be:	491a      	ldr	r1, [pc, #104]	@ (8000a28 <esp_at_command+0xc8>)
 80009c0:	4817      	ldr	r0, [pc, #92]	@ (8000a20 <esp_at_command+0xc0>)
 80009c2:	f007 f913 	bl	8007bec <strstr>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d002      	beq.n	80009d2 <esp_at_command+0x72>
            return -3;
 80009cc:	f06f 0302 	mvn.w	r3, #2
 80009d0:	e022      	b.n	8000a18 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 80009d2:	4916      	ldr	r1, [pc, #88]	@ (8000a2c <esp_at_command+0xcc>)
 80009d4:	4812      	ldr	r0, [pc, #72]	@ (8000a20 <esp_at_command+0xc0>)
 80009d6:	f007 f909 	bl	8007bec <strstr>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d00e      	beq.n	80009fe <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <esp_at_command+0xc0>)
 80009e2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80009e6:	461a      	mov	r2, r3
 80009e8:	490d      	ldr	r1, [pc, #52]	@ (8000a20 <esp_at_command+0xc0>)
 80009ea:	68b8      	ldr	r0, [r7, #8]
 80009ec:	f007 f98f 	bl	8007d0e <memcpy>
            *length = cb_data.length;
 80009f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <esp_at_command+0xc0>)
 80009f2:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	801a      	strh	r2, [r3, #0]
            return 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e00c      	b.n	8000a18 <esp_at_command+0xb8>
        }
        time_out -= 10;
 80009fe:	887b      	ldrh	r3, [r7, #2]
 8000a00:	3b0a      	subs	r3, #10
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8000a06:	200a      	movs	r0, #10
 8000a08:	f002 f854 	bl	8002ab4 <HAL_Delay>
    while(time_out > 0)
 8000a0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	dccb      	bgt.n	80009ac <esp_at_command+0x4c>
    }
    return -4;
 8000a14:	f06f 0303 	mvn.w	r3, #3
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200004ec 	.word	0x200004ec
 8000a24:	20000b08 	.word	0x20000b08
 8000a28:	08008c10 	.word	0x08008c10
 8000a2c:	08008c18 	.word	0x08008c18

08000a30 <esp_reset>:

static int esp_reset(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000a3a:	1dba      	adds	r2, r7, #6
 8000a3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a40:	4909      	ldr	r1, [pc, #36]	@ (8000a68 <esp_reset+0x38>)
 8000a42:	480a      	ldr	r0, [pc, #40]	@ (8000a6c <esp_reset+0x3c>)
 8000a44:	f7ff ff8c 	bl	8000960 <esp_at_command>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <esp_reset+0x24>
    {
    	return -1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	e004      	b.n	8000a5e <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8000a54:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a58:	f002 f82c 	bl	8002ab4 <HAL_Delay>
    return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000b4 	.word	0x200000b4
 8000a6c:	08008c1c 	.word	0x08008c1c

08000a70 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000a7e:	f107 020a 	add.w	r2, r7, #10
 8000a82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a86:	492d      	ldr	r1, [pc, #180]	@ (8000b3c <request_ip_addr+0xcc>)
 8000a88:	482d      	ldr	r0, [pc, #180]	@ (8000b40 <request_ip_addr+0xd0>)
 8000a8a:	f7ff ff69 	bl	8000960 <esp_at_command>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8000a94:	482b      	ldr	r0, [pc, #172]	@ (8000b44 <request_ip_addr+0xd4>)
 8000a96:	f006 ff23 	bl	80078e0 <puts>
 8000a9a:	e049      	b.n	8000b30 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8000a9c:	492a      	ldr	r1, [pc, #168]	@ (8000b48 <request_ip_addr+0xd8>)
 8000a9e:	4827      	ldr	r0, [pc, #156]	@ (8000b3c <request_ip_addr+0xcc>)
 8000aa0:	f007 f848 	bl	8007b34 <strtok>
 8000aa4:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d03e      	beq.n	8000b2a <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	e009      	b.n	8000ac6 <request_ip_addr+0x56>
                printf("%c", response[i]);
 8000ab2:	4a22      	ldr	r2, [pc, #136]	@ (8000b3c <request_ip_addr+0xcc>)
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f006 feb2 	bl	8007824 <putchar>
            for(int i = 0 ; i < length ; i++)
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	897b      	ldrh	r3, [r7, #10]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	4293      	cmp	r3, r2
 8000ace:	dbf0      	blt.n	8000ab2 <request_ip_addr+0x42>
        }

        while(line != NULL)
 8000ad0:	e02b      	b.n	8000b2a <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8000ad2:	491e      	ldr	r1, [pc, #120]	@ (8000b4c <request_ip_addr+0xdc>)
 8000ad4:	6978      	ldr	r0, [r7, #20]
 8000ad6:	f007 f889 	bl	8007bec <strstr>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d01f      	beq.n	8000b20 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8000ae0:	491b      	ldr	r1, [pc, #108]	@ (8000b50 <request_ip_addr+0xe0>)
 8000ae2:	6978      	ldr	r0, [r7, #20]
 8000ae4:	f007 f826 	bl	8007b34 <strtok>
                ip = strtok(NULL, "\"");
 8000ae8:	4919      	ldr	r1, [pc, #100]	@ (8000b50 <request_ip_addr+0xe0>)
 8000aea:	2000      	movs	r0, #0
 8000aec:	f007 f822 	bl	8007b34 <strtok>
 8000af0:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 8000af2:	4918      	ldr	r1, [pc, #96]	@ (8000b54 <request_ip_addr+0xe4>)
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f7ff fb73 	bl	80001e0 <strcmp>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00f      	beq.n	8000b20 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000b00:	2210      	movs	r2, #16
 8000b02:	2100      	movs	r1, #0
 8000b04:	4814      	ldr	r0, [pc, #80]	@ (8000b58 <request_ip_addr+0xe8>)
 8000b06:	f006 ffed 	bl	8007ae4 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f7ff fb72 	bl	80001f4 <strlen>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	68f9      	ldr	r1, [r7, #12]
 8000b16:	4810      	ldr	r0, [pc, #64]	@ (8000b58 <request_ip_addr+0xe8>)
 8000b18:	f007 f8f9 	bl	8007d0e <memcpy>
                    return 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e009      	b.n	8000b34 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8000b20:	4909      	ldr	r1, [pc, #36]	@ (8000b48 <request_ip_addr+0xd8>)
 8000b22:	2000      	movs	r0, #0
 8000b24:	f007 f806 	bl	8007b34 <strtok>
 8000b28:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1d0      	bne.n	8000ad2 <request_ip_addr+0x62>
        }
    }
    return -1;
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200000b4 	.word	0x200000b4
 8000b40:	08008c64 	.word	0x08008c64
 8000b44:	08008c70 	.word	0x08008c70
 8000b48:	08008c58 	.word	0x08008c58
 8000b4c:	08008c90 	.word	0x08008c90
 8000b50:	08008c60 	.word	0x08008c60
 8000b54:	08008c28 	.word	0x08008c28
 8000b58:	200000a4 	.word	0x200000a4

08000b5c <esp_client_conn>:
int esp_client_conn()
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b092      	sub	sp, #72	@ 0x48
 8000b60:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2240      	movs	r2, #64	@ 0x40
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f006 ffba 	bl	8007ae4 <memset>
  uint16_t length = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8000b74:	f107 0008 	add.w	r0, r7, #8
 8000b78:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b7c:	4a09      	ldr	r2, [pc, #36]	@ (8000ba4 <esp_client_conn+0x48>)
 8000b7e:	490a      	ldr	r1, [pc, #40]	@ (8000ba8 <esp_client_conn+0x4c>)
 8000b80:	f006 feb6 	bl	80078f0 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8000b84:	1dba      	adds	r2, r7, #6
 8000b86:	f107 0008 	add.w	r0, r7, #8
 8000b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8e:	4907      	ldr	r1, [pc, #28]	@ (8000bac <esp_client_conn+0x50>)
 8000b90:	f7ff fee6 	bl	8000960 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8000b94:	4806      	ldr	r0, [pc, #24]	@ (8000bb0 <esp_client_conn+0x54>)
 8000b96:	f000 f909 	bl	8000dac <esp_send_data>
	return 0;
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3748      	adds	r7, #72	@ 0x48
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	08008c9c 	.word	0x08008c9c
 8000ba8:	08008cac 	.word	0x08008cac
 8000bac:	200000b4 	.word	0x200000b4
 8000bb0:	08008cc8 	.word	0x08008cc8

08000bb4 <esp_get_status>:
int esp_get_status()
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 8000bbe:	1dba      	adds	r2, r7, #6
 8000bc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc4:	4909      	ldr	r1, [pc, #36]	@ (8000bec <esp_get_status+0x38>)
 8000bc6:	480a      	ldr	r0, [pc, #40]	@ (8000bf0 <esp_get_status+0x3c>)
 8000bc8:	f7ff feca 	bl	8000960 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8000bcc:	4909      	ldr	r1, [pc, #36]	@ (8000bf4 <esp_get_status+0x40>)
 8000bce:	4807      	ldr	r0, [pc, #28]	@ (8000bec <esp_get_status+0x38>)
 8000bd0:	f007 f80c 	bl	8007bec <strstr>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <esp_get_status+0x2a>
    {
    	return 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e001      	b.n	8000be2 <esp_get_status+0x2e>
    }
	return -1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000b4 	.word	0x200000b4
 8000bf0:	08008cdc 	.word	0x08008cdc
 8000bf4:	08008cec 	.word	0x08008cec

08000bf8 <drv_esp_init>:
int drv_esp_init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <drv_esp_init+0x24>)
 8000c02:	f006 ff6f 	bl	8007ae4 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8000c06:	2201      	movs	r2, #1
 8000c08:	4905      	ldr	r1, [pc, #20]	@ (8000c20 <drv_esp_init+0x28>)
 8000c0a:	4806      	ldr	r0, [pc, #24]	@ (8000c24 <drv_esp_init+0x2c>)
 8000c0c:	f005 fda5 	bl	800675a <HAL_UART_Receive_IT>

    return esp_reset();
 8000c10:	f7ff ff0e 	bl	8000a30 <esp_reset>
 8000c14:	4603      	mov	r3, r0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200000a4 	.word	0x200000a4
 8000c20:	200004eb 	.word	0x200004eb
 8000c24:	20000b08 	.word	0x20000b08

08000c28 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b094      	sub	sp, #80	@ 0x50
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	2240      	movs	r2, #64	@ 0x40
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f006 ff4f 	bl	8007ae4 <memset>
  if(ssid == NULL || passwd == NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d002      	beq.n	8000c52 <ap_conn_func+0x2a>
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d103      	bne.n	8000c5a <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8000c52:	4817      	ldr	r0, [pc, #92]	@ (8000cb0 <ap_conn_func+0x88>)
 8000c54:	f006 fe44 	bl	80078e0 <puts>
 8000c58:	e026      	b.n	8000ca8 <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000c5a:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c62:	4914      	ldr	r1, [pc, #80]	@ (8000cb4 <ap_conn_func+0x8c>)
 8000c64:	4814      	ldr	r0, [pc, #80]	@ (8000cb8 <ap_conn_func+0x90>)
 8000c66:	f7ff fe7b 	bl	8000960 <esp_at_command>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8000c70:	4812      	ldr	r0, [pc, #72]	@ (8000cbc <ap_conn_func+0x94>)
 8000c72:	f006 fe35 	bl	80078e0 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8000c76:	f107 000c 	add.w	r0, r7, #12
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	4910      	ldr	r1, [pc, #64]	@ (8000cc0 <ap_conn_func+0x98>)
 8000c80:	f006 fe36 	bl	80078f0 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000c84:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000c88:	f107 000c 	add.w	r0, r7, #12
 8000c8c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000c90:	4908      	ldr	r1, [pc, #32]	@ (8000cb4 <ap_conn_func+0x8c>)
 8000c92:	f7ff fe65 	bl	8000960 <esp_at_command>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d005      	beq.n	8000ca8 <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4808      	ldr	r0, [pc, #32]	@ (8000cc4 <ap_conn_func+0x9c>)
 8000ca4:	f006 fdac 	bl	8007800 <iprintf>
}
 8000ca8:	3750      	adds	r7, #80	@ 0x50
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	08008d50 	.word	0x08008d50
 8000cb4:	200000b4 	.word	0x200000b4
 8000cb8:	08008d7c 	.word	0x08008d7c
 8000cbc:	08008d8c 	.word	0x08008d8c
 8000cc0:	08008da0 	.word	0x08008da0
 8000cc4:	08008db8 	.word	0x08008db8

08000cc8 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a23      	ldr	r2, [pc, #140]	@ (8000d64 <HAL_UART_RxCpltCallback+0x9c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d117      	bne.n	8000d0a <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8000cda:	4b23      	ldr	r3, [pc, #140]	@ (8000d68 <HAL_UART_RxCpltCallback+0xa0>)
 8000cdc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ce4:	d20c      	bcs.n	8000d00 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 8000ce6:	4b20      	ldr	r3, [pc, #128]	@ (8000d68 <HAL_UART_RxCpltCallback+0xa0>)
 8000ce8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	b291      	uxth	r1, r2
 8000cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d68 <HAL_UART_RxCpltCallback+0xa0>)
 8000cf2:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <HAL_UART_RxCpltCallback+0xa4>)
 8000cfa:	7819      	ldrb	r1, [r3, #0]
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <HAL_UART_RxCpltCallback+0xa0>)
 8000cfe:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 8000d00:	2201      	movs	r2, #1
 8000d02:	491a      	ldr	r1, [pc, #104]	@ (8000d6c <HAL_UART_RxCpltCallback+0xa4>)
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f005 fd28 	bl	800675a <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a18      	ldr	r2, [pc, #96]	@ (8000d70 <HAL_UART_RxCpltCallback+0xa8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d122      	bne.n	8000d5a <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8000d14:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <HAL_UART_RxCpltCallback+0xac>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a17      	ldr	r2, [pc, #92]	@ (8000d78 <HAL_UART_RxCpltCallback+0xb0>)
 8000d1a:	7811      	ldrb	r1, [r2, #0]
 8000d1c:	4a17      	ldr	r2, [pc, #92]	@ (8000d7c <HAL_UART_RxCpltCallback+0xb4>)
 8000d1e:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8000d20:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <HAL_UART_RxCpltCallback+0xac>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a15      	ldr	r2, [pc, #84]	@ (8000d7c <HAL_UART_RxCpltCallback+0xb4>)
 8000d26:	5cd3      	ldrb	r3, [r2, r3]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b0d      	cmp	r3, #13
 8000d2c:	d10b      	bne.n	8000d46 <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <HAL_UART_RxCpltCallback+0xac>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <HAL_UART_RxCpltCallback+0xb4>)
 8000d34:	2100      	movs	r1, #0
 8000d36:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <HAL_UART_RxCpltCallback+0xb8>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <HAL_UART_RxCpltCallback+0xac>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	e004      	b.n	8000d50 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <HAL_UART_RxCpltCallback+0xac>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	4a09      	ldr	r2, [pc, #36]	@ (8000d74 <HAL_UART_RxCpltCallback+0xac>)
 8000d4e:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8000d50:	2201      	movs	r2, #1
 8000d52:	4909      	ldr	r1, [pc, #36]	@ (8000d78 <HAL_UART_RxCpltCallback+0xb0>)
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f005 fd00 	bl	800675a <HAL_UART_Receive_IT>
    }
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40011400 	.word	0x40011400
 8000d68:	200004ec 	.word	0x200004ec
 8000d6c:	200004eb 	.word	0x200004eb
 8000d70:	40004400 	.word	0x40004400
 8000d74:	200008f0 	.word	0x200008f0
 8000d78:	200004ea 	.word	0x200004ea
 8000d7c:	200004b8 	.word	0x200004b8
 8000d80:	200004b4 	.word	0x200004b4

08000d84 <AiotClient_Init>:


void AiotClient_Init()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 8000d88:	4906      	ldr	r1, [pc, #24]	@ (8000da4 <AiotClient_Init+0x20>)
 8000d8a:	4807      	ldr	r0, [pc, #28]	@ (8000da8 <AiotClient_Init+0x24>)
 8000d8c:	f7ff ff4c 	bl	8000c28 <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff fe6d 	bl	8000a70 <request_ip_addr>
	esp_client_conn();
 8000d96:	f7ff fee1 	bl	8000b5c <esp_client_conn>
	esp_get_status();
 8000d9a:	f7ff ff0b 	bl	8000bb4 <esp_get_status>
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	08008e18 	.word	0x08008e18
 8000da8:	08008e24 	.word	0x08008e24

08000dac <esp_send_data>:

void esp_send_data(char *data)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b094      	sub	sp, #80	@ 0x50
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	2240      	movs	r2, #64	@ 0x40
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f006 fe91 	bl	8007ae4 <memset>
	uint16_t length = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff fa14 	bl	80001f4 <strlen>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	490e      	ldr	r1, [pc, #56]	@ (8000e0c <esp_send_data+0x60>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f006 fd8b 	bl	80078f0 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 8000dda:	f107 020e 	add.w	r2, r7, #14
 8000dde:	f107 0010 	add.w	r0, r7, #16
 8000de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de6:	490a      	ldr	r1, [pc, #40]	@ (8000e10 <esp_send_data+0x64>)
 8000de8:	f7ff fdba 	bl	8000960 <esp_at_command>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d107      	bne.n	8000e02 <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8000df2:	f107 020e 	add.w	r2, r7, #14
 8000df6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dfa:	4905      	ldr	r1, [pc, #20]	@ (8000e10 <esp_send_data+0x64>)
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fdaf 	bl	8000960 <esp_at_command>
	}
}
 8000e02:	bf00      	nop
 8000e04:	3750      	adds	r7, #80	@ 0x50
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	08008e2c 	.word	0x08008e2c
 8000e10:	200000b4 	.word	0x200000b4

08000e14 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4903      	ldr	r1, [pc, #12]	@ (8000e28 <drv_uart_init+0x14>)
 8000e1c:	4803      	ldr	r0, [pc, #12]	@ (8000e2c <drv_uart_init+0x18>)
 8000e1e:	f005 fc9c 	bl	800675a <HAL_UART_Receive_IT>
    return 0;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200004ea 	.word	0x200004ea
 8000e2c:	20000ac0 	.word	0x20000ac0

08000e30 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8000e38:	1d39      	adds	r1, r7, #4
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4807      	ldr	r0, [pc, #28]	@ (8000e5c <__io_putchar+0x2c>)
 8000e40:	f005 fc00 	bl	8006644 <HAL_UART_Transmit>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <__io_putchar+0x1e>
        return ch;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	e001      	b.n	8000e52 <__io_putchar+0x22>
    return -1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000ac0 	.word	0x20000ac0

08000e60 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e66:	f001 fdb3 	bl	80029d0 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e6a:	f000 f8d3 	bl	8001014 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e6e:	f000 fb71 	bl	8001554 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000e72:	f000 fb1b 	bl	80014ac <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000e76:	f000 f937 	bl	80010e8 <MX_ADC1_Init>
	MX_TIM1_Init();
 8000e7a:	f000 f9eb 	bl	8001254 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000e7e:	f000 fa6d 	bl	800135c <MX_TIM3_Init>
	MX_USART6_UART_Init();
 8000e82:	f000 fb3d 	bl	8001500 <MX_USART6_UART_Init>
	MX_I2C1_Init();
 8000e86:	f000 f981 	bl	800118c <MX_I2C1_Init>
	MX_SPI1_Init();
 8000e8a:	f000 f9ad 	bl	80011e8 <MX_SPI1_Init>
	MX_TIM4_Init();
 8000e8e:	f000 fab3 	bl	80013f8 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	// ESP
	printf("Start main() - wifi\r\n");
 8000e92:	484b      	ldr	r0, [pc, #300]	@ (8000fc0 <main+0x160>)
 8000e94:	f006 fd24 	bl	80078e0 <puts>
	ret |= drv_uart_init();
 8000e98:	f7ff ffbc 	bl	8000e14 <drv_uart_init>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	4b49      	ldr	r3, [pc, #292]	@ (8000fc4 <main+0x164>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	4a47      	ldr	r2, [pc, #284]	@ (8000fc4 <main+0x164>)
 8000ea6:	6013      	str	r3, [r2, #0]
	ret |= drv_esp_init();
 8000ea8:	f7ff fea6 	bl	8000bf8 <drv_esp_init>
 8000eac:	4602      	mov	r2, r0
 8000eae:	4b45      	ldr	r3, [pc, #276]	@ (8000fc4 <main+0x164>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	4a43      	ldr	r2, [pc, #268]	@ (8000fc4 <main+0x164>)
 8000eb6:	6013      	str	r3, [r2, #0]
	if (ret != 0) {
 8000eb8:	4b42      	ldr	r3, [pc, #264]	@ (8000fc4 <main+0x164>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d004      	beq.n	8000eca <main+0x6a>
		printf("Esp response error\r\n");
 8000ec0:	4841      	ldr	r0, [pc, #260]	@ (8000fc8 <main+0x168>)
 8000ec2:	f006 fd0d 	bl	80078e0 <puts>
		Error_Handler();
 8000ec6:	f000 ffa3 	bl	8001e10 <Error_Handler>
	}

	AiotClient_Init();
 8000eca:	f7ff ff5b 	bl	8000d84 <AiotClient_Init>
	// DHT
	DHT11_Init();
 8000ece:	f7ff fd2f 	bl	8000930 <DHT11_Init>

	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000ed2:	483e      	ldr	r0, [pc, #248]	@ (8000fcc <main+0x16c>)
 8000ed4:	f004 fc92 	bl	80057fc <HAL_TIM_Base_Start_IT>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <main+0x82>
		Error_Handler();
 8000ede:	f000 ff97 	bl	8001e10 <Error_Handler>
	// LCD
	LCD_init(&hi2c1);
 8000ee2:	483b      	ldr	r0, [pc, #236]	@ (8000fd0 <main+0x170>)
 8000ee4:	f7ff fb7a 	bl	80005dc <LCD_init>
	LCD_writeStringXY(0, 0, "hello lcd");
 8000ee8:	4a3a      	ldr	r2, [pc, #232]	@ (8000fd4 <main+0x174>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	2000      	movs	r0, #0
 8000eee:	f7ff fcbc 	bl	800086a <LCD_writeStringXY>

	// RFID
	MFRC522_Init();                               // RC522 초기화
 8000ef2:	f001 f859 	bl	8001fa8 <MFRC522_Init>
	uint8_t version = MFRC522_ReadRegister(0x37); // VersionReg
 8000ef6:	2037      	movs	r0, #55	@ 0x37
 8000ef8:	f000 ffca 	bl	8001e90 <MFRC522_ReadRegister>
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
	printf("RC522 Version: 0x%02X\r\n", version);
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	4619      	mov	r1, r3
 8000f04:	4834      	ldr	r0, [pc, #208]	@ (8000fd8 <main+0x178>)
 8000f06:	f006 fc7b 	bl	8007800 <iprintf>
	printf("카드를 인식해주세요\r\n");
 8000f0a:	4834      	ldr	r0, [pc, #208]	@ (8000fdc <main+0x17c>)
 8000f0c:	f006 fce8 	bl	80078e0 <puts>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (strstr((char*) cb_data.buf, "+IPD")
 8000f10:	4933      	ldr	r1, [pc, #204]	@ (8000fe0 <main+0x180>)
 8000f12:	4834      	ldr	r0, [pc, #208]	@ (8000fe4 <main+0x184>)
 8000f14:	f006 fe6a 	bl	8007bec <strstr>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d01d      	beq.n	8000f5a <main+0xfa>
				&& cb_data.buf[cb_data.length - 1] == '\n') {
 8000f1e:	4b31      	ldr	r3, [pc, #196]	@ (8000fe4 <main+0x184>)
 8000f20:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000f24:	3b01      	subs	r3, #1
 8000f26:	4a2f      	ldr	r2, [pc, #188]	@ (8000fe4 <main+0x184>)
 8000f28:	5cd3      	ldrb	r3, [r2, r3]
 8000f2a:	2b0a      	cmp	r3, #10
 8000f2c:	d115      	bne.n	8000f5a <main+0xfa>
			//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff, strchr((char*) cb_data.buf, '['));
 8000f2e:	215b      	movs	r1, #91	@ 0x5b
 8000f30:	482c      	ldr	r0, [pc, #176]	@ (8000fe4 <main+0x184>)
 8000f32:	f006 fddf 	bl	8007af4 <strchr>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	482b      	ldr	r0, [pc, #172]	@ (8000fe8 <main+0x188>)
 8000f3c:	f006 fedf 	bl	8007cfe <strcpy>
			memset(cb_data.buf, 0x0, sizeof(cb_data.buf));
 8000f40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f44:	2100      	movs	r1, #0
 8000f46:	4827      	ldr	r0, [pc, #156]	@ (8000fe4 <main+0x184>)
 8000f48:	f006 fdcc 	bl	8007ae4 <memset>
			cb_data.length = 0;
 8000f4c:	4b25      	ldr	r3, [pc, #148]	@ (8000fe4 <main+0x184>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 8000f54:	4824      	ldr	r0, [pc, #144]	@ (8000fe8 <main+0x188>)
 8000f56:	f000 fd87 	bl	8001a68 <esp_event>
		}
		if (rx2Flag) {
 8000f5a:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <main+0x18c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d006      	beq.n	8000f72 <main+0x112>
			printf("recv2 : %s\r\n", rx2Data);
 8000f64:	4922      	ldr	r1, [pc, #136]	@ (8000ff0 <main+0x190>)
 8000f66:	4823      	ldr	r0, [pc, #140]	@ (8000ff4 <main+0x194>)
 8000f68:	f006 fc4a 	bl	8007800 <iprintf>
			rx2Flag = 0;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fec <main+0x18c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
		}
		room_status_display();
 8000f72:	f000 fce3 	bl	800193c <room_status_display>
		user_authentication();
 8000f76:	f000 fd07 	bl	8001988 <user_authentication>

		// 10초 경과 확인
		if (authentication_flag == 1 && (tim3Sec - auth_start_time >= 10)) {
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <main+0x198>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d11a      	bne.n	8000fb8 <main+0x158>
 8000f82:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <main+0x19c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a1e      	ldr	r2, [pc, #120]	@ (8001000 <main+0x1a0>)
 8000f88:	6812      	ldr	r2, [r2, #0]
 8000f8a:	1a9b      	subs	r3, r3, r2
 8000f8c:	2b09      	cmp	r3, #9
 8000f8e:	d913      	bls.n	8000fb8 <main+0x158>
			authentication_flag = 0;
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <main+0x198>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
			auth_start_time = -1;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <main+0x1a0>)
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	601a      	str	r2, [r3, #0]
			printf("인증시간 초과\r\n");
 8000f9e:	4819      	ldr	r0, [pc, #100]	@ (8001004 <main+0x1a4>)
 8000fa0:	f006 fc9e 	bl	80078e0 <puts>
			sprintf(line2, "%s", "Time Over");
 8000fa4:	4a18      	ldr	r2, [pc, #96]	@ (8001008 <main+0x1a8>)
 8000fa6:	4919      	ldr	r1, [pc, #100]	@ (800100c <main+0x1ac>)
 8000fa8:	4819      	ldr	r0, [pc, #100]	@ (8001010 <main+0x1b0>)
 8000faa:	f006 fca1 	bl	80078f0 <siprintf>
			LCD_writeStringXY(1, 0, line2);
 8000fae:	4a18      	ldr	r2, [pc, #96]	@ (8001010 <main+0x1b0>)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff fc59 	bl	800086a <LCD_writeStringXY>
		}

		room_status_set();
 8000fb8:	f000 fbbc 	bl	8001734 <room_status_set>
		if (strstr((char*) cb_data.buf, "+IPD")
 8000fbc:	e7a8      	b.n	8000f10 <main+0xb0>
 8000fbe:	bf00      	nop
 8000fc0:	08008e3c 	.word	0x08008e3c
 8000fc4:	20000b50 	.word	0x20000b50
 8000fc8:	08008e54 	.word	0x08008e54
 8000fcc:	20000a30 	.word	0x20000a30
 8000fd0:	2000093c 	.word	0x2000093c
 8000fd4:	08008e68 	.word	0x08008e68
 8000fd8:	08008e74 	.word	0x08008e74
 8000fdc:	08008e8c 	.word	0x08008e8c
 8000fe0:	08008eac 	.word	0x08008eac
 8000fe4:	200004ec 	.word	0x200004ec
 8000fe8:	20000c2c 	.word	0x20000c2c
 8000fec:	200004b4 	.word	0x200004b4
 8000ff0:	200004b8 	.word	0x200004b8
 8000ff4:	08008eb4 	.word	0x08008eb4
 8000ff8:	20000bcc 	.word	0x20000bcc
 8000ffc:	20000bb0 	.word	0x20000bb0
 8001000:	20000014 	.word	0x20000014
 8001004:	08008ec4 	.word	0x08008ec4
 8001008:	08008edc 	.word	0x08008edc
 800100c:	08008ee8 	.word	0x08008ee8
 8001010:	20000b98 	.word	0x20000b98

08001014 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b094      	sub	sp, #80	@ 0x50
 8001018:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	2230      	movs	r2, #48	@ 0x30
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f006 fd5e 	bl	8007ae4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	4b28      	ldr	r3, [pc, #160]	@ (80010e0 <SystemClock_Config+0xcc>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001040:	4a27      	ldr	r2, [pc, #156]	@ (80010e0 <SystemClock_Config+0xcc>)
 8001042:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001046:	6413      	str	r3, [r2, #64]	@ 0x40
 8001048:	4b25      	ldr	r3, [pc, #148]	@ (80010e0 <SystemClock_Config+0xcc>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <SystemClock_Config+0xd0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a21      	ldr	r2, [pc, #132]	@ (80010e4 <SystemClock_Config+0xd0>)
 800105e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <SystemClock_Config+0xd0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001070:	2302      	movs	r3, #2
 8001072:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001078:	2310      	movs	r3, #16
 800107a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107c:	2302      	movs	r3, #2
 800107e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001080:	2300      	movs	r3, #0
 8001082:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001084:	2310      	movs	r3, #16
 8001086:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001088:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800108c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800108e:	2304      	movs	r3, #4
 8001090:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001092:	2304      	movs	r3, #4
 8001094:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	4618      	mov	r0, r3
 800109c:	f003 f8f4 	bl	8004288 <HAL_RCC_OscConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x96>
		Error_Handler();
 80010a6:	f000 feb3 	bl	8001e10 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010aa:	230f      	movs	r3, #15
 80010ac:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ae:	2302      	movs	r3, #2
 80010b0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ba:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2102      	movs	r1, #2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f003 fb56 	bl	8004778 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0xc2>
		Error_Handler();
 80010d2:	f000 fe9d 	bl	8001e10 <Error_Handler>
	}
}
 80010d6:	bf00      	nop
 80010d8:	3750      	adds	r7, #80	@ 0x50
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40007000 	.word	0x40007000

080010e8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */
	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010ee:	463b      	mov	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */
	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80010fa:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <MX_ADC1_Init+0x98>)
 80010fc:	4a21      	ldr	r2, [pc, #132]	@ (8001184 <MX_ADC1_Init+0x9c>)
 80010fe:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001100:	4b1f      	ldr	r3, [pc, #124]	@ (8001180 <MX_ADC1_Init+0x98>)
 8001102:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001106:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001108:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <MX_ADC1_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800110e:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <MX_ADC1_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001114:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MX_ADC1_Init+0x98>)
 8001116:	2200      	movs	r2, #0
 8001118:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800111a:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <MX_ADC1_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <MX_ADC1_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <MX_ADC1_Init+0x98>)
 800112a:	4a17      	ldr	r2, [pc, #92]	@ (8001188 <MX_ADC1_Init+0xa0>)
 800112c:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_ADC1_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_ADC1_Init+0x98>)
 8001136:	2201      	movs	r2, #1
 8001138:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_ADC1_Init+0x98>)
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001142:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_ADC1_Init+0x98>)
 8001144:	2201      	movs	r2, #1
 8001146:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001148:	480d      	ldr	r0, [pc, #52]	@ (8001180 <MX_ADC1_Init+0x98>)
 800114a:	f001 fcd7 	bl	8002afc <HAL_ADC_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001154:	f000 fe5c 	bl	8001e10 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001158:	2300      	movs	r3, #0
 800115a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800115c:	2301      	movs	r3, #1
 800115e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001164:	463b      	mov	r3, r7
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	@ (8001180 <MX_ADC1_Init+0x98>)
 800116a:	f001 fe39 	bl	8002de0 <HAL_ADC_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001174:	f000 fe4c 	bl	8001e10 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	/* USER CODE END ADC1_Init 2 */
}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200008f4 	.word	0x200008f4
 8001184:	40012000 	.word	0x40012000
 8001188:	0f000001 	.word	0x0f000001

0800118c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_Init 0 */
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */
	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <MX_I2C1_Init+0x50>)
 8001192:	4a13      	ldr	r2, [pc, #76]	@ (80011e0 <MX_I2C1_Init+0x54>)
 8001194:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_I2C1_Init+0x50>)
 8001198:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <MX_I2C1_Init+0x58>)
 800119a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_I2C1_Init+0x50>)
 80011aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ae:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80011c8:	4804      	ldr	r0, [pc, #16]	@ (80011dc <MX_I2C1_Init+0x50>)
 80011ca:	f002 fbbf 	bl	800394c <HAL_I2C_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80011d4:	f000 fe1c 	bl	8001e10 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	/* USER CODE END I2C1_Init 2 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000093c 	.word	0x2000093c
 80011e0:	40005400 	.word	0x40005400
 80011e4:	000186a0 	.word	0x000186a0

080011e8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80011ec:	4b17      	ldr	r3, [pc, #92]	@ (800124c <MX_SPI1_Init+0x64>)
 80011ee:	4a18      	ldr	r2, [pc, #96]	@ (8001250 <MX_SPI1_Init+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80011f2:	4b16      	ldr	r3, [pc, #88]	@ (800124c <MX_SPI1_Init+0x64>)
 80011f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011f8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011fa:	4b14      	ldr	r3, [pc, #80]	@ (800124c <MX_SPI1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <MX_SPI1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001206:	4b11      	ldr	r3, [pc, #68]	@ (800124c <MX_SPI1_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800120c:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <MX_SPI1_Init+0x64>)
 8001214:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001218:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800121a:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <MX_SPI1_Init+0x64>)
 800121c:	2210      	movs	r2, #16
 800121e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001220:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <MX_SPI1_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <MX_SPI1_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	@ (800124c <MX_SPI1_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <MX_SPI1_Init+0x64>)
 8001234:	220a      	movs	r2, #10
 8001236:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001238:	4804      	ldr	r0, [pc, #16]	@ (800124c <MX_SPI1_Init+0x64>)
 800123a:	f003 fcbd 	bl	8004bb8 <HAL_SPI_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001244:	f000 fde4 	bl	8001e10 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000990 	.word	0x20000990
 8001250:	40013000 	.word	0x40013000

08001254 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b092      	sub	sp, #72	@ 0x48
 8001258:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */
	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800125a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	615a      	str	r2, [r3, #20]
 8001276:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2220      	movs	r2, #32
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f006 fc30 	bl	8007ae4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */
	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001284:	4b33      	ldr	r3, [pc, #204]	@ (8001354 <MX_TIM1_Init+0x100>)
 8001286:	4a34      	ldr	r2, [pc, #208]	@ (8001358 <MX_TIM1_Init+0x104>)
 8001288:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 84 - 1;
 800128a:	4b32      	ldr	r3, [pc, #200]	@ (8001354 <MX_TIM1_Init+0x100>)
 800128c:	2253      	movs	r2, #83	@ 0x53
 800128e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b30      	ldr	r3, [pc, #192]	@ (8001354 <MX_TIM1_Init+0x100>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 20000 - 1;
 8001296:	4b2f      	ldr	r3, [pc, #188]	@ (8001354 <MX_TIM1_Init+0x100>)
 8001298:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800129c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b2d      	ldr	r3, [pc, #180]	@ (8001354 <MX_TIM1_Init+0x100>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80012a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001354 <MX_TIM1_Init+0x100>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <MX_TIM1_Init+0x100>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80012b0:	4828      	ldr	r0, [pc, #160]	@ (8001354 <MX_TIM1_Init+0x100>)
 80012b2:	f004 fb05 	bl	80058c0 <HAL_TIM_PWM_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x6c>
		Error_Handler();
 80012bc:	f000 fda8 	bl	8001e10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80012c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012cc:	4619      	mov	r1, r3
 80012ce:	4821      	ldr	r0, [pc, #132]	@ (8001354 <MX_TIM1_Init+0x100>)
 80012d0:	f005 f894 	bl	80063fc <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80012da:	f000 fd99 	bl	8001e10 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012de:	2360      	movs	r3, #96	@ 0x60
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ea:	2300      	movs	r3, #0
 80012ec:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80012fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012fe:	2200      	movs	r2, #0
 8001300:	4619      	mov	r1, r3
 8001302:	4814      	ldr	r0, [pc, #80]	@ (8001354 <MX_TIM1_Init+0x100>)
 8001304:	f004 fc1c 	bl	8005b40 <HAL_TIM_PWM_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 800130e:	f000 fd7f 	bl	8001e10 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001326:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800132a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4619      	mov	r1, r3
 8001334:	4807      	ldr	r0, [pc, #28]	@ (8001354 <MX_TIM1_Init+0x100>)
 8001336:	f005 f8cf 	bl	80064d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8001340:	f000 fd66 	bl	8001e10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */
	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001344:	4803      	ldr	r0, [pc, #12]	@ (8001354 <MX_TIM1_Init+0x100>)
 8001346:	f001 f907 	bl	8002558 <HAL_TIM_MspPostInit>
}
 800134a:	bf00      	nop
 800134c:	3748      	adds	r7, #72	@ 0x48
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200009e8 	.word	0x200009e8
 8001358:	40010000 	.word	0x40010000

0800135c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */
	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001370:	463b      	mov	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */
	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001378:	4b1d      	ldr	r3, [pc, #116]	@ (80013f0 <MX_TIM3_Init+0x94>)
 800137a:	4a1e      	ldr	r2, [pc, #120]	@ (80013f4 <MX_TIM3_Init+0x98>)
 800137c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84 - 1;
 800137e:	4b1c      	ldr	r3, [pc, #112]	@ (80013f0 <MX_TIM3_Init+0x94>)
 8001380:	2253      	movs	r2, #83	@ 0x53
 8001382:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001384:	4b1a      	ldr	r3, [pc, #104]	@ (80013f0 <MX_TIM3_Init+0x94>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 800138a:	4b19      	ldr	r3, [pc, #100]	@ (80013f0 <MX_TIM3_Init+0x94>)
 800138c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001390:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001392:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <MX_TIM3_Init+0x94>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001398:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <MX_TIM3_Init+0x94>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800139e:	4814      	ldr	r0, [pc, #80]	@ (80013f0 <MX_TIM3_Init+0x94>)
 80013a0:	f004 f9dc 	bl	800575c <HAL_TIM_Base_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM3_Init+0x52>
		Error_Handler();
 80013aa:	f000 fd31 	bl	8001e10 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	4619      	mov	r1, r3
 80013ba:	480d      	ldr	r0, [pc, #52]	@ (80013f0 <MX_TIM3_Init+0x94>)
 80013bc:	f004 fc82 	bl	8005cc4 <HAL_TIM_ConfigClockSource>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM3_Init+0x6e>
		Error_Handler();
 80013c6:	f000 fd23 	bl	8001e10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80013d2:	463b      	mov	r3, r7
 80013d4:	4619      	mov	r1, r3
 80013d6:	4806      	ldr	r0, [pc, #24]	@ (80013f0 <MX_TIM3_Init+0x94>)
 80013d8:	f005 f810 	bl	80063fc <HAL_TIMEx_MasterConfigSynchronization>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80013e2:	f000 fd15 	bl	8001e10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	/* USER CODE END TIM3_Init 2 */
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000a30 	.word	0x20000a30
 80013f4:	40000400 	.word	0x40000400

080013f8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	@ 0x28
 80013fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]
 8001416:	615a      	str	r2, [r3, #20]
 8001418:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800141a:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <MX_TIM4_Init+0xac>)
 800141c:	4a22      	ldr	r2, [pc, #136]	@ (80014a8 <MX_TIM4_Init+0xb0>)
 800141e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 84 - 1;
 8001420:	4b20      	ldr	r3, [pc, #128]	@ (80014a4 <MX_TIM4_Init+0xac>)
 8001422:	2253      	movs	r2, #83	@ 0x53
 8001424:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001426:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <MX_TIM4_Init+0xac>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 20000 - 1;
 800142c:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <MX_TIM4_Init+0xac>)
 800142e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001432:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001434:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <MX_TIM4_Init+0xac>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_TIM4_Init+0xac>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001440:	4818      	ldr	r0, [pc, #96]	@ (80014a4 <MX_TIM4_Init+0xac>)
 8001442:	f004 fa3d 	bl	80058c0 <HAL_TIM_PWM_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM4_Init+0x58>
		Error_Handler();
 800144c:	f000 fce0 	bl	8001e10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	4619      	mov	r1, r3
 800145e:	4811      	ldr	r0, [pc, #68]	@ (80014a4 <MX_TIM4_Init+0xac>)
 8001460:	f004 ffcc 	bl	80063fc <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM4_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 800146a:	f000 fcd1 	bl	8001e10 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146e:	2360      	movs	r3, #96	@ 0x60
 8001470:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 500;
 8001472:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001476:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	4619      	mov	r1, r3
 8001486:	4807      	ldr	r0, [pc, #28]	@ (80014a4 <MX_TIM4_Init+0xac>)
 8001488:	f004 fb5a 	bl	8005b40 <HAL_TIM_PWM_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8001492:	f000 fcbd 	bl	8001e10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8001496:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <MX_TIM4_Init+0xac>)
 8001498:	f001 f85e 	bl	8002558 <HAL_TIM_MspPostInit>
}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	@ 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000a78 	.word	0x20000a78
 80014a8:	40000800 	.word	0x40000800

080014ac <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_Init 0 */
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */
	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <MX_USART2_UART_Init+0x50>)
 80014b4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014e4:	f005 f85e 	bl	80065a4 <HAL_UART_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80014ee:	f000 fc8f 	bl	8001e10 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
	/* USER CODE END USART2_Init 2 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000ac0 	.word	0x20000ac0
 80014fc:	40004400 	.word	0x40004400

08001500 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART6_Init 0 */
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */
	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <MX_USART6_UART_Init+0x4c>)
 8001506:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <MX_USART6_UART_Init+0x50>)
 8001508:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 38400;
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <MX_USART6_UART_Init+0x4c>)
 800150c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001510:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <MX_USART6_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <MX_USART6_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <MX_USART6_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b09      	ldr	r3, [pc, #36]	@ (800154c <MX_USART6_UART_Init+0x4c>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b08      	ldr	r3, [pc, #32]	@ (800154c <MX_USART6_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <MX_USART6_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8001536:	4805      	ldr	r0, [pc, #20]	@ (800154c <MX_USART6_UART_Init+0x4c>)
 8001538:	f005 f834 	bl	80065a4 <HAL_UART_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8001542:	f000 fc65 	bl	8001e10 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */
	/* USER CODE END USART6_Init 2 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000b08 	.word	0x20000b08
 8001550:	40011400 	.word	0x40011400

08001554 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b5a      	ldr	r3, [pc, #360]	@ (80016d8 <MX_GPIO_Init+0x184>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a59      	ldr	r2, [pc, #356]	@ (80016d8 <MX_GPIO_Init+0x184>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b57      	ldr	r3, [pc, #348]	@ (80016d8 <MX_GPIO_Init+0x184>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b53      	ldr	r3, [pc, #332]	@ (80016d8 <MX_GPIO_Init+0x184>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	4a52      	ldr	r2, [pc, #328]	@ (80016d8 <MX_GPIO_Init+0x184>)
 8001590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001594:	6313      	str	r3, [r2, #48]	@ 0x30
 8001596:	4b50      	ldr	r3, [pc, #320]	@ (80016d8 <MX_GPIO_Init+0x184>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b4c      	ldr	r3, [pc, #304]	@ (80016d8 <MX_GPIO_Init+0x184>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a4b      	ldr	r2, [pc, #300]	@ (80016d8 <MX_GPIO_Init+0x184>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b49      	ldr	r3, [pc, #292]	@ (80016d8 <MX_GPIO_Init+0x184>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b45      	ldr	r3, [pc, #276]	@ (80016d8 <MX_GPIO_Init+0x184>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a44      	ldr	r2, [pc, #272]	@ (80016d8 <MX_GPIO_Init+0x184>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b42      	ldr	r3, [pc, #264]	@ (80016d8 <MX_GPIO_Init+0x184>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	2110      	movs	r1, #16
 80015de:	483f      	ldr	r0, [pc, #252]	@ (80016dc <MX_GPIO_Init+0x188>)
 80015e0:	f002 f976 	bl	80038d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, ESP_RST_Pin | RC522_RST_Pin, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2105      	movs	r1, #5
 80015e8:	483d      	ldr	r0, [pc, #244]	@ (80016e0 <MX_GPIO_Init+0x18c>)
 80015ea:	f002 f971 	bl	80038d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2180      	movs	r1, #128	@ 0x80
 80015f2:	483c      	ldr	r0, [pc, #240]	@ (80016e4 <MX_GPIO_Init+0x190>)
 80015f4:	f002 f96c 	bl	80038d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80015f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001602:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4835      	ldr	r0, [pc, #212]	@ (80016e4 <MX_GPIO_Init+0x190>)
 8001610:	f001 ffc2 	bl	8003598 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin
	 BUTTON4_Pin BUTTON5_Pin BUTTON6_Pin DHT_Pin */
	GPIO_InitStruct.Pin = BUTTON0_Pin | BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin
 8001614:	f240 437f 	movw	r3, #1151	@ 0x47f
 8001618:	617b      	str	r3, [r7, #20]
			| BUTTON4_Pin | BUTTON5_Pin | BUTTON6_Pin | DHT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	482e      	ldr	r0, [pc, #184]	@ (80016e4 <MX_GPIO_Init+0x190>)
 800162a:	f001 ffb5 	bl	8003598 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800162e:	2310      	movs	r3, #16
 8001630:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	4825      	ldr	r0, [pc, #148]	@ (80016dc <MX_GPIO_Init+0x188>)
 8001646:	f001 ffa7 	bl	8003598 <HAL_GPIO_Init>

	/*Configure GPIO pins : ESP_RST_Pin RC522_RST_Pin */
	GPIO_InitStruct.Pin = ESP_RST_Pin | RC522_RST_Pin;
 800164a:	2305      	movs	r3, #5
 800164c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	481f      	ldr	r0, [pc, #124]	@ (80016e0 <MX_GPIO_Init+0x18c>)
 8001662:	f001 ff99 	bl	8003598 <HAL_GPIO_Init>

	/*Configure GPIO pin : PIR_Pin */
	GPIO_InitStruct.Pin = PIR_Pin;
 8001666:	2302      	movs	r3, #2
 8001668:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800166e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	4819      	ldr	r0, [pc, #100]	@ (80016e0 <MX_GPIO_Init+0x18c>)
 800167c:	f001 ff8c 	bl	8003598 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001680:	2380      	movs	r3, #128	@ 0x80
 8001682:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	4813      	ldr	r0, [pc, #76]	@ (80016e4 <MX_GPIO_Init+0x190>)
 8001698:	f001 ff7e 	bl	8003598 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 800169c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ae:	2307      	movs	r3, #7
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	4808      	ldr	r0, [pc, #32]	@ (80016dc <MX_GPIO_Init+0x188>)
 80016ba:	f001 ff6d 	bl	8003598 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2007      	movs	r0, #7
 80016c4:	f001 fe9f 	bl	8003406 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016c8:	2007      	movs	r0, #7
 80016ca:	f001 feb8 	bl	800343e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	@ 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40020800 	.word	0x40020800

080016e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 1ms 마다 호출
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 80016f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	3301      	adds	r3, #1
 80016f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80016f8:	6013      	str	r3, [r2, #0]
	if (tim3Cnt >= 1000) { // 1ms * 1000 = 1Sec
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001702:	db0a      	blt.n	800171a <HAL_TIM_PeriodElapsedCallback+0x32>
		tim3Flag1Sec = 1;
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a07      	ldr	r2, [pc, #28]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001712:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 8001714:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
	}
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000c6c 	.word	0x20000c6c
 800172c:	20000bac 	.word	0x20000bac
 8001730:	20000bb0 	.word	0x20000bb0

08001734 <room_status_set>:

void room_status_set() {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++) {
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	e0c8      	b.n	80018d2 <room_status_set+0x19e>
		button_state[i] = HAL_GPIO_ReadPin(GPIOC, button_pins[i]);
 8001740:	4a68      	ldr	r2, [pc, #416]	@ (80018e4 <room_status_set+0x1b0>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001748:	4619      	mov	r1, r3
 800174a:	4867      	ldr	r0, [pc, #412]	@ (80018e8 <room_status_set+0x1b4>)
 800174c:	f002 f8a8 	bl	80038a0 <HAL_GPIO_ReadPin>
 8001750:	4603      	mov	r3, r0
 8001752:	4619      	mov	r1, r3
 8001754:	4a65      	ldr	r2, [pc, #404]	@ (80018ec <room_status_set+0x1b8>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if (last_button_state[i] == 0 && button_state[i] == 1
 800175c:	4a64      	ldr	r2, [pc, #400]	@ (80018f0 <room_status_set+0x1bc>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001764:	2b00      	cmp	r3, #0
 8001766:	f040 80a9 	bne.w	80018bc <room_status_set+0x188>
 800176a:	4a60      	ldr	r2, [pc, #384]	@ (80018ec <room_status_set+0x1b8>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001772:	2b01      	cmp	r3, #1
 8001774:	f040 80a2 	bne.w	80018bc <room_status_set+0x188>
				&& authentication_flag == 1) {
 8001778:	4b5e      	ldr	r3, [pc, #376]	@ (80018f4 <room_status_set+0x1c0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	f040 809d 	bne.w	80018bc <room_status_set+0x188>
			switch (i) {
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b05      	cmp	r3, #5
 8001786:	f200 8099 	bhi.w	80018bc <room_status_set+0x188>
 800178a:	a201      	add	r2, pc, #4	@ (adr r2, 8001790 <room_status_set+0x5c>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	080017a9 	.word	0x080017a9
 8001794:	080017d7 	.word	0x080017d7
 8001798:	08001805 	.word	0x08001805
 800179c:	08001833 	.word	0x08001833
 80017a0:	08001861 	.word	0x08001861
 80017a4:	0800188f 	.word	0x0800188f
			case 0:
				printf("button : %d\r\n", i);
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4853      	ldr	r0, [pc, #332]	@ (80018f8 <room_status_set+0x1c4>)
 80017ac:	f006 f828 	bl	8007800 <iprintf>
				sprintf(current_room_status.room_status, "%s", "IN        ");
 80017b0:	4a52      	ldr	r2, [pc, #328]	@ (80018fc <room_status_set+0x1c8>)
 80017b2:	4953      	ldr	r1, [pc, #332]	@ (8001900 <room_status_set+0x1cc>)
 80017b4:	4853      	ldr	r0, [pc, #332]	@ (8001904 <room_status_set+0x1d0>)
 80017b6:	f006 f89b 	bl	80078f0 <siprintf>
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@IN\n", USER_ID);
 80017ba:	4a53      	ldr	r2, [pc, #332]	@ (8001908 <room_status_set+0x1d4>)
 80017bc:	4953      	ldr	r1, [pc, #332]	@ (800190c <room_status_set+0x1d8>)
 80017be:	4854      	ldr	r0, [pc, #336]	@ (8001910 <room_status_set+0x1dc>)
 80017c0:	f006 f896 	bl	80078f0 <siprintf>
				esp_send_data(sendBuf);
 80017c4:	4852      	ldr	r0, [pc, #328]	@ (8001910 <room_status_set+0x1dc>)
 80017c6:	f7ff faf1 	bl	8000dac <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2180      	movs	r1, #128	@ 0x80
 80017ce:	4846      	ldr	r0, [pc, #280]	@ (80018e8 <room_status_set+0x1b4>)
 80017d0:	f002 f87e 	bl	80038d0 <HAL_GPIO_WritePin>
				break;
 80017d4:	e072      	b.n	80018bc <room_status_set+0x188>
			case 1:
				printf("button : %d\r\n", i);
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4847      	ldr	r0, [pc, #284]	@ (80018f8 <room_status_set+0x1c4>)
 80017da:	f006 f811 	bl	8007800 <iprintf>
				sprintf(current_room_status.room_status, "%s", "LEC       ");
 80017de:	4a4d      	ldr	r2, [pc, #308]	@ (8001914 <room_status_set+0x1e0>)
 80017e0:	4947      	ldr	r1, [pc, #284]	@ (8001900 <room_status_set+0x1cc>)
 80017e2:	4848      	ldr	r0, [pc, #288]	@ (8001904 <room_status_set+0x1d0>)
 80017e4:	f006 f884 	bl	80078f0 <siprintf>
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@LEC\n", USER_ID);
 80017e8:	4a47      	ldr	r2, [pc, #284]	@ (8001908 <room_status_set+0x1d4>)
 80017ea:	494b      	ldr	r1, [pc, #300]	@ (8001918 <room_status_set+0x1e4>)
 80017ec:	4848      	ldr	r0, [pc, #288]	@ (8001910 <room_status_set+0x1dc>)
 80017ee:	f006 f87f 	bl	80078f0 <siprintf>
				esp_send_data(sendBuf);
 80017f2:	4847      	ldr	r0, [pc, #284]	@ (8001910 <room_status_set+0x1dc>)
 80017f4:	f7ff fada 	bl	8000dac <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2180      	movs	r1, #128	@ 0x80
 80017fc:	483a      	ldr	r0, [pc, #232]	@ (80018e8 <room_status_set+0x1b4>)
 80017fe:	f002 f867 	bl	80038d0 <HAL_GPIO_WritePin>
				break;
 8001802:	e05b      	b.n	80018bc <room_status_set+0x188>
			case 2:
				printf("button : %d\r\n", i);
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	483c      	ldr	r0, [pc, #240]	@ (80018f8 <room_status_set+0x1c4>)
 8001808:	f005 fffa 	bl	8007800 <iprintf>
				sprintf(current_room_status.room_status, "%s", "VAC       ");
 800180c:	4a43      	ldr	r2, [pc, #268]	@ (800191c <room_status_set+0x1e8>)
 800180e:	493c      	ldr	r1, [pc, #240]	@ (8001900 <room_status_set+0x1cc>)
 8001810:	483c      	ldr	r0, [pc, #240]	@ (8001904 <room_status_set+0x1d0>)
 8001812:	f006 f86d 	bl	80078f0 <siprintf>
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@VAC\n", USER_ID);
 8001816:	4a3c      	ldr	r2, [pc, #240]	@ (8001908 <room_status_set+0x1d4>)
 8001818:	4941      	ldr	r1, [pc, #260]	@ (8001920 <room_status_set+0x1ec>)
 800181a:	483d      	ldr	r0, [pc, #244]	@ (8001910 <room_status_set+0x1dc>)
 800181c:	f006 f868 	bl	80078f0 <siprintf>
				esp_send_data(sendBuf);
 8001820:	483b      	ldr	r0, [pc, #236]	@ (8001910 <room_status_set+0x1dc>)
 8001822:	f7ff fac3 	bl	8000dac <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	2180      	movs	r1, #128	@ 0x80
 800182a:	482f      	ldr	r0, [pc, #188]	@ (80018e8 <room_status_set+0x1b4>)
 800182c:	f002 f850 	bl	80038d0 <HAL_GPIO_WritePin>
				break;
 8001830:	e044      	b.n	80018bc <room_status_set+0x188>
			case 3:
				printf("button : %d\r\n", i);
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4830      	ldr	r0, [pc, #192]	@ (80018f8 <room_status_set+0x1c4>)
 8001836:	f005 ffe3 	bl	8007800 <iprintf>
				sprintf(current_room_status.room_status, "%s", "MTG       ");
 800183a:	4a3a      	ldr	r2, [pc, #232]	@ (8001924 <room_status_set+0x1f0>)
 800183c:	4930      	ldr	r1, [pc, #192]	@ (8001900 <room_status_set+0x1cc>)
 800183e:	4831      	ldr	r0, [pc, #196]	@ (8001904 <room_status_set+0x1d0>)
 8001840:	f006 f856 	bl	80078f0 <siprintf>
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@MTG\n", USER_ID);
 8001844:	4a30      	ldr	r2, [pc, #192]	@ (8001908 <room_status_set+0x1d4>)
 8001846:	4938      	ldr	r1, [pc, #224]	@ (8001928 <room_status_set+0x1f4>)
 8001848:	4831      	ldr	r0, [pc, #196]	@ (8001910 <room_status_set+0x1dc>)
 800184a:	f006 f851 	bl	80078f0 <siprintf>
				esp_send_data(sendBuf);
 800184e:	4830      	ldr	r0, [pc, #192]	@ (8001910 <room_status_set+0x1dc>)
 8001850:	f7ff faac 	bl	8000dac <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	2180      	movs	r1, #128	@ 0x80
 8001858:	4823      	ldr	r0, [pc, #140]	@ (80018e8 <room_status_set+0x1b4>)
 800185a:	f002 f839 	bl	80038d0 <HAL_GPIO_WritePin>
				break;
 800185e:	e02d      	b.n	80018bc <room_status_set+0x188>
			case 4:
				printf("button : %d\r\n", i);
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4825      	ldr	r0, [pc, #148]	@ (80018f8 <room_status_set+0x1c4>)
 8001864:	f005 ffcc 	bl	8007800 <iprintf>
				sprintf(current_room_status.room_status, "%s", "BRK       ");
 8001868:	4a30      	ldr	r2, [pc, #192]	@ (800192c <room_status_set+0x1f8>)
 800186a:	4925      	ldr	r1, [pc, #148]	@ (8001900 <room_status_set+0x1cc>)
 800186c:	4825      	ldr	r0, [pc, #148]	@ (8001904 <room_status_set+0x1d0>)
 800186e:	f006 f83f 	bl	80078f0 <siprintf>
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@BRK\n", USER_ID);
 8001872:	4a25      	ldr	r2, [pc, #148]	@ (8001908 <room_status_set+0x1d4>)
 8001874:	492e      	ldr	r1, [pc, #184]	@ (8001930 <room_status_set+0x1fc>)
 8001876:	4826      	ldr	r0, [pc, #152]	@ (8001910 <room_status_set+0x1dc>)
 8001878:	f006 f83a 	bl	80078f0 <siprintf>
				esp_send_data(sendBuf);
 800187c:	4824      	ldr	r0, [pc, #144]	@ (8001910 <room_status_set+0x1dc>)
 800187e:	f7ff fa95 	bl	8000dac <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	2180      	movs	r1, #128	@ 0x80
 8001886:	4818      	ldr	r0, [pc, #96]	@ (80018e8 <room_status_set+0x1b4>)
 8001888:	f002 f822 	bl	80038d0 <HAL_GPIO_WritePin>
				break;
 800188c:	e016      	b.n	80018bc <room_status_set+0x188>
			case 5:
				printf("button : %d\r\n", i);
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4819      	ldr	r0, [pc, #100]	@ (80018f8 <room_status_set+0x1c4>)
 8001892:	f005 ffb5 	bl	8007800 <iprintf>
				sprintf(current_room_status.room_status, "%s", "OUT       ");
 8001896:	4a27      	ldr	r2, [pc, #156]	@ (8001934 <room_status_set+0x200>)
 8001898:	4919      	ldr	r1, [pc, #100]	@ (8001900 <room_status_set+0x1cc>)
 800189a:	481a      	ldr	r0, [pc, #104]	@ (8001904 <room_status_set+0x1d0>)
 800189c:	f006 f828 	bl	80078f0 <siprintf>
				sprintf(sendBuf, "[PRJ_SQL]SETROOM@%s@OUT\n", USER_ID);
 80018a0:	4a19      	ldr	r2, [pc, #100]	@ (8001908 <room_status_set+0x1d4>)
 80018a2:	4925      	ldr	r1, [pc, #148]	@ (8001938 <room_status_set+0x204>)
 80018a4:	481a      	ldr	r0, [pc, #104]	@ (8001910 <room_status_set+0x1dc>)
 80018a6:	f006 f823 	bl	80078f0 <siprintf>
				esp_send_data(sendBuf);
 80018aa:	4819      	ldr	r0, [pc, #100]	@ (8001910 <room_status_set+0x1dc>)
 80018ac:	f7ff fa7e 	bl	8000dac <esp_send_data>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2180      	movs	r1, #128	@ 0x80
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <room_status_set+0x1b4>)
 80018b6:	f002 f80b 	bl	80038d0 <HAL_GPIO_WritePin>
				break;
 80018ba:	bf00      	nop
			}
		}

		last_button_state[i] = button_state[i];
 80018bc:	4a0b      	ldr	r2, [pc, #44]	@ (80018ec <room_status_set+0x1b8>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018c4:	490a      	ldr	r1, [pc, #40]	@ (80018f0 <room_status_set+0x1bc>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 6; i++) {
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3301      	adds	r3, #1
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	f77f af33 	ble.w	8001740 <room_status_set+0xc>
	}
}
 80018da:	bf00      	nop
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	08009164 	.word	0x08009164
 80018e8:	40020800 	.word	0x40020800
 80018ec:	20000b54 	.word	0x20000b54
 80018f0:	20000b6c 	.word	0x20000b6c
 80018f4:	20000bcc 	.word	0x20000bcc
 80018f8:	08008eec 	.word	0x08008eec
 80018fc:	08008efc 	.word	0x08008efc
 8001900:	08008ee8 	.word	0x08008ee8
 8001904:	20000000 	.word	0x20000000
 8001908:	08008f08 	.word	0x08008f08
 800190c:	08008f0c 	.word	0x08008f0c
 8001910:	20000bd0 	.word	0x20000bd0
 8001914:	08008f24 	.word	0x08008f24
 8001918:	08008f30 	.word	0x08008f30
 800191c:	08008f4c 	.word	0x08008f4c
 8001920:	08008f58 	.word	0x08008f58
 8001924:	08008f74 	.word	0x08008f74
 8001928:	08008f80 	.word	0x08008f80
 800192c:	08008f9c 	.word	0x08008f9c
 8001930:	08008fa8 	.word	0x08008fa8
 8001934:	08008fc4 	.word	0x08008fc4
 8001938:	08008fd0 	.word	0x08008fd0

0800193c <room_status_display>:

void room_status_display() {
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0

	sprintf(line1, "%d - %s", ROOM_NUMBER, USER_NAME);
 8001940:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <room_status_display+0x34>)
 8001942:	2265      	movs	r2, #101	@ 0x65
 8001944:	490b      	ldr	r1, [pc, #44]	@ (8001974 <room_status_display+0x38>)
 8001946:	480c      	ldr	r0, [pc, #48]	@ (8001978 <room_status_display+0x3c>)
 8001948:	f005 ffd2 	bl	80078f0 <siprintf>
	// sprintf(line2, "%s", "LEC");
	sprintf(line2, "%s", current_room_status.room_status);
 800194c:	4a0b      	ldr	r2, [pc, #44]	@ (800197c <room_status_display+0x40>)
 800194e:	490c      	ldr	r1, [pc, #48]	@ (8001980 <room_status_display+0x44>)
 8001950:	480c      	ldr	r0, [pc, #48]	@ (8001984 <room_status_display+0x48>)
 8001952:	f005 ffcd 	bl	80078f0 <siprintf>

	LCD_writeStringXY(0, 0, line1);
 8001956:	4a08      	ldr	r2, [pc, #32]	@ (8001978 <room_status_display+0x3c>)
 8001958:	2100      	movs	r1, #0
 800195a:	2000      	movs	r0, #0
 800195c:	f7fe ff85 	bl	800086a <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, line2);
 8001960:	4a08      	ldr	r2, [pc, #32]	@ (8001984 <room_status_display+0x48>)
 8001962:	2100      	movs	r1, #0
 8001964:	2001      	movs	r0, #1
 8001966:	f7fe ff80 	bl	800086a <LCD_writeStringXY>
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	08008fec 	.word	0x08008fec
 8001974:	08008ff4 	.word	0x08008ff4
 8001978:	20000b84 	.word	0x20000b84
 800197c:	20000000 	.word	0x20000000
 8001980:	08008ee8 	.word	0x08008ee8
 8001984:	20000b98 	.word	0x20000b98

08001988 <user_authentication>:

void user_authentication() {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af02      	add	r7, sp, #8
	if (MFRC522_Check(cardID) == MI_OK) {
 800198e:	4828      	ldr	r0, [pc, #160]	@ (8001a30 <user_authentication+0xa8>)
 8001990:	f000 fc5e 	bl	8002250 <MFRC522_Check>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d147      	bne.n	8001a2a <user_authentication+0xa2>
		sprintf(uid_str, "%02X%02X%02X%02X", cardID[0], cardID[1], cardID[2],
 800199a:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <user_authentication+0xa8>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	4619      	mov	r1, r3
 80019a0:	4b23      	ldr	r3, [pc, #140]	@ (8001a30 <user_authentication+0xa8>)
 80019a2:	785b      	ldrb	r3, [r3, #1]
 80019a4:	4618      	mov	r0, r3
 80019a6:	4b22      	ldr	r3, [pc, #136]	@ (8001a30 <user_authentication+0xa8>)
 80019a8:	789b      	ldrb	r3, [r3, #2]
 80019aa:	461a      	mov	r2, r3
				cardID[3]);
 80019ac:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <user_authentication+0xa8>)
 80019ae:	78db      	ldrb	r3, [r3, #3]
		sprintf(uid_str, "%02X%02X%02X%02X", cardID[0], cardID[1], cardID[2],
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	9200      	str	r2, [sp, #0]
 80019b4:	4603      	mov	r3, r0
 80019b6:	460a      	mov	r2, r1
 80019b8:	491e      	ldr	r1, [pc, #120]	@ (8001a34 <user_authentication+0xac>)
 80019ba:	481f      	ldr	r0, [pc, #124]	@ (8001a38 <user_authentication+0xb0>)
 80019bc:	f005 ff98 	bl	80078f0 <siprintf>
		printf("Card UID: %s\r\n", uid_str);
 80019c0:	491d      	ldr	r1, [pc, #116]	@ (8001a38 <user_authentication+0xb0>)
 80019c2:	481e      	ldr	r0, [pc, #120]	@ (8001a3c <user_authentication+0xb4>)
 80019c4:	f005 ff1c 	bl	8007800 <iprintf>

		if (strcmp(uid_str, USER_CODE) == 0) {
 80019c8:	491d      	ldr	r1, [pc, #116]	@ (8001a40 <user_authentication+0xb8>)
 80019ca:	481b      	ldr	r0, [pc, #108]	@ (8001a38 <user_authentication+0xb0>)
 80019cc:	f7fe fc08 	bl	80001e0 <strcmp>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d115      	bne.n	8001a02 <user_authentication+0x7a>
			authentication_flag = 1;
 80019d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a44 <user_authentication+0xbc>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]
			auth_start_time = tim3Sec; // 현재 시간을 저장
 80019dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <user_authentication+0xc0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a4c <user_authentication+0xc4>)
 80019e4:	601a      	str	r2, [r3, #0]
			printf("인증성공!\r\n");
 80019e6:	481a      	ldr	r0, [pc, #104]	@ (8001a50 <user_authentication+0xc8>)
 80019e8:	f005 ff7a 	bl	80078e0 <puts>
			sprintf(line2, "%s", "Success!!");
 80019ec:	4a19      	ldr	r2, [pc, #100]	@ (8001a54 <user_authentication+0xcc>)
 80019ee:	491a      	ldr	r1, [pc, #104]	@ (8001a58 <user_authentication+0xd0>)
 80019f0:	481a      	ldr	r0, [pc, #104]	@ (8001a5c <user_authentication+0xd4>)
 80019f2:	f005 ff7d 	bl	80078f0 <siprintf>
			LCD_writeStringXY(1, 0, line2);
 80019f6:	4a19      	ldr	r2, [pc, #100]	@ (8001a5c <user_authentication+0xd4>)
 80019f8:	2100      	movs	r1, #0
 80019fa:	2001      	movs	r0, #1
 80019fc:	f7fe ff35 	bl	800086a <LCD_writeStringXY>
			printf("인증실패!\r\n");
			sprintf(line2, "%s", "Failed!!");
			LCD_writeStringXY(1, 0, line2);
		}
	}
}
 8001a00:	e013      	b.n	8001a2a <user_authentication+0xa2>
			authentication_flag = 0;
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <user_authentication+0xbc>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
			auth_start_time = -1;
 8001a08:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <user_authentication+0xc4>)
 8001a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0e:	601a      	str	r2, [r3, #0]
			printf("인증실패!\r\n");
 8001a10:	4813      	ldr	r0, [pc, #76]	@ (8001a60 <user_authentication+0xd8>)
 8001a12:	f005 ff65 	bl	80078e0 <puts>
			sprintf(line2, "%s", "Failed!!");
 8001a16:	4a13      	ldr	r2, [pc, #76]	@ (8001a64 <user_authentication+0xdc>)
 8001a18:	490f      	ldr	r1, [pc, #60]	@ (8001a58 <user_authentication+0xd0>)
 8001a1a:	4810      	ldr	r0, [pc, #64]	@ (8001a5c <user_authentication+0xd4>)
 8001a1c:	f005 ff68 	bl	80078f0 <siprintf>
			LCD_writeStringXY(1, 0, line2);
 8001a20:	4a0e      	ldr	r2, [pc, #56]	@ (8001a5c <user_authentication+0xd4>)
 8001a22:	2100      	movs	r1, #0
 8001a24:	2001      	movs	r0, #1
 8001a26:	f7fe ff20 	bl	800086a <LCD_writeStringXY>
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000bb4 	.word	0x20000bb4
 8001a34:	08008ffc 	.word	0x08008ffc
 8001a38:	20000bbc 	.word	0x20000bbc
 8001a3c:	08009010 	.word	0x08009010
 8001a40:	08009020 	.word	0x08009020
 8001a44:	20000bcc 	.word	0x20000bcc
 8001a48:	20000bb0 	.word	0x20000bb0
 8001a4c:	20000014 	.word	0x20000014
 8001a50:	0800902c 	.word	0x0800902c
 8001a54:	0800903c 	.word	0x0800903c
 8001a58:	08008ee8 	.word	0x08008ee8
 8001a5c:	20000b98 	.word	0x20000b98
 8001a60:	08009048 	.word	0x08009048
 8001a64:	08009058 	.word	0x08009058

08001a68 <esp_event>:

void esp_event(char *recvBuf) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b09e      	sub	sp, #120	@ 0x78
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	66fb      	str	r3, [r7, #108]	@ 0x6c
	char *pToken;
	char *pArray[ARR_CNT] = { 0 };
 8001a74:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
	char sendBuf[MAX_UART_COMMAND_LEN] = { 0 };
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2240      	movs	r2, #64	@ 0x40
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f006 f829 	bl	8007ae4 <memset>

	strBuff[strlen(recvBuf) - 1] = '\0'; //'\n' cut
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7fe fbae 	bl	80001f4 <strlen>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	4aa4      	ldr	r2, [pc, #656]	@ (8001d30 <esp_event+0x2c8>)
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	54d1      	strb	r1, [r2, r3]
	printf("\r\nDebug recv : %s\r\n", recvBuf);
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	48a3      	ldr	r0, [pc, #652]	@ (8001d34 <esp_event+0x2cc>)
 8001aa6:	f005 feab 	bl	8007800 <iprintf>

	pToken = strtok(recvBuf, "[@]");
 8001aaa:	49a3      	ldr	r1, [pc, #652]	@ (8001d38 <esp_event+0x2d0>)
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f006 f841 	bl	8007b34 <strtok>
 8001ab2:	66b8      	str	r0, [r7, #104]	@ 0x68
	while (pToken != NULL) {
 8001ab4:	e015      	b.n	8001ae2 <esp_event+0x7a>
		pArray[i] = pToken;
 8001ab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	3370      	adds	r3, #112	@ 0x70
 8001abc:	443b      	add	r3, r7
 8001abe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001ac0:	f843 2c24 	str.w	r2, [r3, #-36]
		printf("[%s]", pToken);
 8001ac4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001ac6:	489d      	ldr	r0, [pc, #628]	@ (8001d3c <esp_event+0x2d4>)
 8001ac8:	f005 fe9a 	bl	8007800 <iprintf>
		if (++i >= ARR_CNT)
 8001acc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ace:	3301      	adds	r3, #1
 8001ad0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	dc08      	bgt.n	8001aea <esp_event+0x82>
			break;
		pToken = strtok(NULL, "[@]");
 8001ad8:	4997      	ldr	r1, [pc, #604]	@ (8001d38 <esp_event+0x2d0>)
 8001ada:	2000      	movs	r0, #0
 8001adc:	f006 f82a 	bl	8007b34 <strtok>
 8001ae0:	66b8      	str	r0, [r7, #104]	@ 0x68
	while (pToken != NULL) {
 8001ae2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1e6      	bne.n	8001ab6 <esp_event+0x4e>
 8001ae8:	e000      	b.n	8001aec <esp_event+0x84>
			break;
 8001aea:	bf00      	nop
	}
	printf("\r\n");
 8001aec:	4894      	ldr	r0, [pc, #592]	@ (8001d40 <esp_event+0x2d8>)
 8001aee:	f005 fef7 	bl	80078e0 <puts>

	for (int i = 0; i < 3; i++) {
 8001af2:	2300      	movs	r3, #0
 8001af4:	667b      	str	r3, [r7, #100]	@ 0x64
 8001af6:	e00f      	b.n	8001b18 <esp_event+0xb0>
		printf("[%s]", pArray[i]);
 8001af8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	3370      	adds	r3, #112	@ 0x70
 8001afe:	443b      	add	r3, r7
 8001b00:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001b04:	4619      	mov	r1, r3
 8001b06:	488d      	ldr	r0, [pc, #564]	@ (8001d3c <esp_event+0x2d4>)
 8001b08:	f005 fe7a 	bl	8007800 <iprintf>
		printf("\r\n");
 8001b0c:	488c      	ldr	r0, [pc, #560]	@ (8001d40 <esp_event+0x2d8>)
 8001b0e:	f005 fee7 	bl	80078e0 <puts>
	for (int i = 0; i < 3; i++) {
 8001b12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b14:	3301      	adds	r3, #1
 8001b16:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	ddec      	ble.n	8001af8 <esp_event+0x90>
	}

	if (!strcmp(pArray[1], "LED")) {
 8001b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b20:	4988      	ldr	r1, [pc, #544]	@ (8001d44 <esp_event+0x2dc>)
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fb5c 	bl	80001e0 <strcmp>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d137      	bne.n	8001b9e <esp_event+0x136>
		ppAArray.client = pArray[0];
 8001b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b30:	4a85      	ldr	r2, [pc, #532]	@ (8001d48 <esp_event+0x2e0>)
 8001b32:	6013      	str	r3, [r2, #0]
		ppAArray.led = pArray[1];
 8001b34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b36:	4a84      	ldr	r2, [pc, #528]	@ (8001d48 <esp_event+0x2e0>)
 8001b38:	6053      	str	r3, [r2, #4]
		ppAArray.on_off = pArray[2];
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b3c:	4a82      	ldr	r2, [pc, #520]	@ (8001d48 <esp_event+0x2e0>)
 8001b3e:	6093      	str	r3, [r2, #8]

		if (!strcmp(pArray[2], "ON")) {
 8001b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b42:	4982      	ldr	r1, [pc, #520]	@ (8001d4c <esp_event+0x2e4>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fb4b 	bl	80001e0 <strcmp>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d108      	bne.n	8001b62 <esp_event+0xfa>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001b50:	2201      	movs	r2, #1
 8001b52:	2180      	movs	r1, #128	@ 0x80
 8001b54:	487e      	ldr	r0, [pc, #504]	@ (8001d50 <esp_event+0x2e8>)
 8001b56:	f001 febb 	bl	80038d0 <HAL_GPIO_WritePin>
			printf("led on!!\r\n");
 8001b5a:	487e      	ldr	r0, [pc, #504]	@ (8001d54 <esp_event+0x2ec>)
 8001b5c:	f005 fec0 	bl	80078e0 <puts>
 8001b60:	e00f      	b.n	8001b82 <esp_event+0x11a>
		} else if (!strcmp(pArray[2], "OFF")) {
 8001b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b64:	497c      	ldr	r1, [pc, #496]	@ (8001d58 <esp_event+0x2f0>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fb3a 	bl	80001e0 <strcmp>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d107      	bne.n	8001b82 <esp_event+0x11a>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2180      	movs	r1, #128	@ 0x80
 8001b76:	4876      	ldr	r0, [pc, #472]	@ (8001d50 <esp_event+0x2e8>)
 8001b78:	f001 feaa 	bl	80038d0 <HAL_GPIO_WritePin>
			printf("led off!!\r\n");
 8001b7c:	4877      	ldr	r0, [pc, #476]	@ (8001d5c <esp_event+0x2f4>)
 8001b7e:	f005 feaf 	bl	80078e0 <puts>
		}
		sprintf(sendBuf, "[%s]%s@%s\n", ppAArray.client, ppAArray.led,
 8001b82:	4b71      	ldr	r3, [pc, #452]	@ (8001d48 <esp_event+0x2e0>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4b70      	ldr	r3, [pc, #448]	@ (8001d48 <esp_event+0x2e0>)
 8001b88:	6859      	ldr	r1, [r3, #4]
 8001b8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001d48 <esp_event+0x2e0>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f107 000c 	add.w	r0, r7, #12
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	460b      	mov	r3, r1
 8001b96:	4972      	ldr	r1, [pc, #456]	@ (8001d60 <esp_event+0x2f8>)
 8001b98:	f005 feaa 	bl	80078f0 <siprintf>
 8001b9c:	e11d      	b.n	8001dda <esp_event+0x372>
				ppAArray.on_off);
	}

	else if (i >= 4) {
 8001b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	f340 8105 	ble.w	8001db0 <esp_event+0x348>
		for(int j=0; j<i; j++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	663b      	str	r3, [r7, #96]	@ 0x60
 8001baa:	e00c      	b.n	8001bc6 <esp_event+0x15e>
		{
			printf("[%s]", pArray[j]);
 8001bac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	3370      	adds	r3, #112	@ 0x70
 8001bb2:	443b      	add	r3, r7
 8001bb4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4860      	ldr	r0, [pc, #384]	@ (8001d3c <esp_event+0x2d4>)
 8001bbc:	f005 fe20 	bl	8007800 <iprintf>
		for(int j=0; j<i; j++)
 8001bc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8001bc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001bc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dbee      	blt.n	8001bac <esp_event+0x144>
		}
		printf("\r\n");
 8001bce:	485c      	ldr	r0, [pc, #368]	@ (8001d40 <esp_event+0x2d8>)
 8001bd0:	f005 fe86 	bl	80078e0 <puts>

		pppAAArray.cclient = pArray[0];
 8001bd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bd6:	4a63      	ldr	r2, [pc, #396]	@ (8001d64 <esp_event+0x2fc>)
 8001bd8:	6013      	str	r3, [r2, #0]
		pppAAArray.ssetroom = pArray[1];
 8001bda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bdc:	4a61      	ldr	r2, [pc, #388]	@ (8001d64 <esp_event+0x2fc>)
 8001bde:	6053      	str	r3, [r2, #4]
		pppAAArray.nname = pArray[2];
 8001be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be2:	4a60      	ldr	r2, [pc, #384]	@ (8001d64 <esp_event+0x2fc>)
 8001be4:	6093      	str	r3, [r2, #8]
		pppAAArray.sstatus = pArray[3];
 8001be6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001be8:	4a5e      	ldr	r2, [pc, #376]	@ (8001d64 <esp_event+0x2fc>)
 8001bea:	60d3      	str	r3, [r2, #12]


		if (!strcmp(pppAAArray.ssetroom, "SETROOM") && !strcmp(pppAAArray.nname, "JTY")) {
 8001bec:	4b5d      	ldr	r3, [pc, #372]	@ (8001d64 <esp_event+0x2fc>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	495d      	ldr	r1, [pc, #372]	@ (8001d68 <esp_event+0x300>)
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe faf4 	bl	80001e0 <strcmp>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 80ed 	bne.w	8001dda <esp_event+0x372>
 8001c00:	4b58      	ldr	r3, [pc, #352]	@ (8001d64 <esp_event+0x2fc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4959      	ldr	r1, [pc, #356]	@ (8001d6c <esp_event+0x304>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe faea 	bl	80001e0 <strcmp>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f040 80e3 	bne.w	8001dda <esp_event+0x372>

		    if (!strcmp(pppAAArray.sstatus, "IN")) {
 8001c14:	4b53      	ldr	r3, [pc, #332]	@ (8001d64 <esp_event+0x2fc>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4955      	ldr	r1, [pc, #340]	@ (8001d70 <esp_event+0x308>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fae0 	bl	80001e0 <strcmp>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10a      	bne.n	8001c3c <esp_event+0x1d4>
		        sprintf(current_room_status.room_status, "%s", "IN        ");
 8001c26:	4a53      	ldr	r2, [pc, #332]	@ (8001d74 <esp_event+0x30c>)
 8001c28:	4953      	ldr	r1, [pc, #332]	@ (8001d78 <esp_event+0x310>)
 8001c2a:	4854      	ldr	r0, [pc, #336]	@ (8001d7c <esp_event+0x314>)
 8001c2c:	f005 fe60 	bl	80078f0 <siprintf>
		        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001c30:	2201      	movs	r2, #1
 8001c32:	2180      	movs	r1, #128	@ 0x80
 8001c34:	4846      	ldr	r0, [pc, #280]	@ (8001d50 <esp_event+0x2e8>)
 8001c36:	f001 fe4b 	bl	80038d0 <HAL_GPIO_WritePin>
 8001c3a:	e066      	b.n	8001d0a <esp_event+0x2a2>

		    } else if (!strcmp(pppAAArray.sstatus, "LEC")) {
 8001c3c:	4b49      	ldr	r3, [pc, #292]	@ (8001d64 <esp_event+0x2fc>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	494f      	ldr	r1, [pc, #316]	@ (8001d80 <esp_event+0x318>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe facc 	bl	80001e0 <strcmp>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10a      	bne.n	8001c64 <esp_event+0x1fc>
		        sprintf(current_room_status.room_status, "%s", "LEC        ");
 8001c4e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d84 <esp_event+0x31c>)
 8001c50:	4949      	ldr	r1, [pc, #292]	@ (8001d78 <esp_event+0x310>)
 8001c52:	484a      	ldr	r0, [pc, #296]	@ (8001d7c <esp_event+0x314>)
 8001c54:	f005 fe4c 	bl	80078f0 <siprintf>
		        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2180      	movs	r1, #128	@ 0x80
 8001c5c:	483c      	ldr	r0, [pc, #240]	@ (8001d50 <esp_event+0x2e8>)
 8001c5e:	f001 fe37 	bl	80038d0 <HAL_GPIO_WritePin>
 8001c62:	e052      	b.n	8001d0a <esp_event+0x2a2>

		    } else if (!strcmp(pppAAArray.sstatus, "VAC")) {
 8001c64:	4b3f      	ldr	r3, [pc, #252]	@ (8001d64 <esp_event+0x2fc>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4947      	ldr	r1, [pc, #284]	@ (8001d88 <esp_event+0x320>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fab8 	bl	80001e0 <strcmp>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10a      	bne.n	8001c8c <esp_event+0x224>
		        sprintf(current_room_status.room_status, "%s", "VAC        ");
 8001c76:	4a45      	ldr	r2, [pc, #276]	@ (8001d8c <esp_event+0x324>)
 8001c78:	493f      	ldr	r1, [pc, #252]	@ (8001d78 <esp_event+0x310>)
 8001c7a:	4840      	ldr	r0, [pc, #256]	@ (8001d7c <esp_event+0x314>)
 8001c7c:	f005 fe38 	bl	80078f0 <siprintf>
		        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2180      	movs	r1, #128	@ 0x80
 8001c84:	4832      	ldr	r0, [pc, #200]	@ (8001d50 <esp_event+0x2e8>)
 8001c86:	f001 fe23 	bl	80038d0 <HAL_GPIO_WritePin>
 8001c8a:	e03e      	b.n	8001d0a <esp_event+0x2a2>

		    } else if (!strcmp(pppAAArray.sstatus, "MTG")) {
 8001c8c:	4b35      	ldr	r3, [pc, #212]	@ (8001d64 <esp_event+0x2fc>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	493f      	ldr	r1, [pc, #252]	@ (8001d90 <esp_event+0x328>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe faa4 	bl	80001e0 <strcmp>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10a      	bne.n	8001cb4 <esp_event+0x24c>
		        sprintf(current_room_status.room_status, "%s", "MTG        ");
 8001c9e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d94 <esp_event+0x32c>)
 8001ca0:	4935      	ldr	r1, [pc, #212]	@ (8001d78 <esp_event+0x310>)
 8001ca2:	4836      	ldr	r0, [pc, #216]	@ (8001d7c <esp_event+0x314>)
 8001ca4:	f005 fe24 	bl	80078f0 <siprintf>
		        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2180      	movs	r1, #128	@ 0x80
 8001cac:	4828      	ldr	r0, [pc, #160]	@ (8001d50 <esp_event+0x2e8>)
 8001cae:	f001 fe0f 	bl	80038d0 <HAL_GPIO_WritePin>
 8001cb2:	e02a      	b.n	8001d0a <esp_event+0x2a2>

		    } else if (!strcmp(pppAAArray.sstatus, "BRK")) {
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d64 <esp_event+0x2fc>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4937      	ldr	r1, [pc, #220]	@ (8001d98 <esp_event+0x330>)
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fa90 	bl	80001e0 <strcmp>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10a      	bne.n	8001cdc <esp_event+0x274>
		        sprintf(current_room_status.room_status, "%s", "BRK        ");
 8001cc6:	4a35      	ldr	r2, [pc, #212]	@ (8001d9c <esp_event+0x334>)
 8001cc8:	492b      	ldr	r1, [pc, #172]	@ (8001d78 <esp_event+0x310>)
 8001cca:	482c      	ldr	r0, [pc, #176]	@ (8001d7c <esp_event+0x314>)
 8001ccc:	f005 fe10 	bl	80078f0 <siprintf>
		        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2180      	movs	r1, #128	@ 0x80
 8001cd4:	481e      	ldr	r0, [pc, #120]	@ (8001d50 <esp_event+0x2e8>)
 8001cd6:	f001 fdfb 	bl	80038d0 <HAL_GPIO_WritePin>
 8001cda:	e016      	b.n	8001d0a <esp_event+0x2a2>

		    } else if (!strcmp(pppAAArray.sstatus, "OUT")) {
 8001cdc:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <esp_event+0x2fc>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	492f      	ldr	r1, [pc, #188]	@ (8001da0 <esp_event+0x338>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fa7c 	bl	80001e0 <strcmp>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 8081 	bne.w	8001df2 <esp_event+0x38a>
		        printf("out!!!!!!!\r\n");
 8001cf0:	482c      	ldr	r0, [pc, #176]	@ (8001da4 <esp_event+0x33c>)
 8001cf2:	f005 fdf5 	bl	80078e0 <puts>
		        sprintf(current_room_status.room_status, "%s", "OUT        ");
 8001cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8001da8 <esp_event+0x340>)
 8001cf8:	491f      	ldr	r1, [pc, #124]	@ (8001d78 <esp_event+0x310>)
 8001cfa:	4820      	ldr	r0, [pc, #128]	@ (8001d7c <esp_event+0x314>)
 8001cfc:	f005 fdf8 	bl	80078f0 <siprintf>
		        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2180      	movs	r1, #128	@ 0x80
 8001d04:	4812      	ldr	r0, [pc, #72]	@ (8001d50 <esp_event+0x2e8>)
 8001d06:	f001 fde3 	bl	80038d0 <HAL_GPIO_WritePin>
		        // 처리할 수 없는 상태일 경우 무시
		        return;
		    }

		    // 공통 동작
		    sprintf(sendBuf, "[PRJ_SQL]%s@%s@%s\r\n",
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <esp_event+0x2fc>)
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <esp_event+0x2fc>)
 8001d10:	6899      	ldr	r1, [r3, #8]
 8001d12:	4b14      	ldr	r3, [pc, #80]	@ (8001d64 <esp_event+0x2fc>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f107 000c 	add.w	r0, r7, #12
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4923      	ldr	r1, [pc, #140]	@ (8001dac <esp_event+0x344>)
 8001d20:	f005 fde6 	bl	80078f0 <siprintf>
		            pppAAArray.ssetroom, pppAAArray.nname, pppAAArray.sstatus);
		    esp_send_data(sendBuf);
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f83f 	bl	8000dac <esp_send_data>
 8001d2e:	e054      	b.n	8001dda <esp_event+0x372>
 8001d30:	20000c2c 	.word	0x20000c2c
 8001d34:	08009064 	.word	0x08009064
 8001d38:	08009078 	.word	0x08009078
 8001d3c:	0800907c 	.word	0x0800907c
 8001d40:	08009084 	.word	0x08009084
 8001d44:	08009088 	.word	0x08009088
 8001d48:	20000c10 	.word	0x20000c10
 8001d4c:	0800908c 	.word	0x0800908c
 8001d50:	40020800 	.word	0x40020800
 8001d54:	08009090 	.word	0x08009090
 8001d58:	0800909c 	.word	0x0800909c
 8001d5c:	080090a0 	.word	0x080090a0
 8001d60:	080090ac 	.word	0x080090ac
 8001d64:	20000c1c 	.word	0x20000c1c
 8001d68:	080090b8 	.word	0x080090b8
 8001d6c:	08008f08 	.word	0x08008f08
 8001d70:	080090c0 	.word	0x080090c0
 8001d74:	08008efc 	.word	0x08008efc
 8001d78:	08008ee8 	.word	0x08008ee8
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	080090c4 	.word	0x080090c4
 8001d84:	080090c8 	.word	0x080090c8
 8001d88:	080090d4 	.word	0x080090d4
 8001d8c:	080090d8 	.word	0x080090d8
 8001d90:	080090e4 	.word	0x080090e4
 8001d94:	080090e8 	.word	0x080090e8
 8001d98:	080090f4 	.word	0x080090f4
 8001d9c:	080090f8 	.word	0x080090f8
 8001da0:	08009104 	.word	0x08009104
 8001da4:	08009108 	.word	0x08009108
 8001da8:	08009114 	.word	0x08009114
 8001dac:	08009120 	.word	0x08009120
		}

	}

	else if (!strncmp(pArray[1], " New conn", 8)) {
 8001db0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001db2:	2208      	movs	r2, #8
 8001db4:	4913      	ldr	r1, [pc, #76]	@ (8001e04 <esp_event+0x39c>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f005 fea9 	bl	8007b0e <strncmp>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d019      	beq.n	8001df6 <esp_event+0x38e>
		//	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
		return;
	} else if (!strncmp(pArray[1], " Already log", 8)) {
 8001dc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	4910      	ldr	r1, [pc, #64]	@ (8001e08 <esp_event+0x3a0>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f005 fea0 	bl	8007b0e <strncmp>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d112      	bne.n	8001dfa <esp_event+0x392>
		// 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
		esp_client_conn();
 8001dd4:	f7fe fec2 	bl	8000b5c <esp_client_conn>
		return;
 8001dd8:	e010      	b.n	8001dfc <esp_event+0x394>
	} else
		return;

	esp_send_data(sendBuf);
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe ffe4 	bl	8000dac <esp_send_data>
	printf("Debug send : %s\r\n", sendBuf);
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	4619      	mov	r1, r3
 8001dea:	4808      	ldr	r0, [pc, #32]	@ (8001e0c <esp_event+0x3a4>)
 8001dec:	f005 fd08 	bl	8007800 <iprintf>
 8001df0:	e004      	b.n	8001dfc <esp_event+0x394>
		        return;
 8001df2:	bf00      	nop
 8001df4:	e002      	b.n	8001dfc <esp_event+0x394>
		return;
 8001df6:	bf00      	nop
 8001df8:	e000      	b.n	8001dfc <esp_event+0x394>
		return;
 8001dfa:	bf00      	nop
}
 8001dfc:	3770      	adds	r7, #112	@ 0x70
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	08009134 	.word	0x08009134
 8001e08:	08009140 	.word	0x08009140
 8001e0c:	08009150 	.word	0x08009150

08001e10 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* USER CODE END Error_Handler_Debug */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <MFRC522_WriteRegister>:
#include "string.h"
#include "stm32f4xx_hal.h"

extern SPI_HandleTypeDef hspi1;

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	460a      	mov	r2, r1
 8001e2a:	71fb      	strb	r3, [r7, #7]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = (addr << 1) & 0x7E;
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	733b      	strb	r3, [r7, #12]
	data[1] = val;
 8001e3e:	79bb      	ldrb	r3, [r7, #6]
 8001e40:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2104      	movs	r1, #4
 8001e46:	480f      	ldr	r0, [pc, #60]	@ (8001e84 <MFRC522_WriteRegister+0x64>)
 8001e48:	f001 fd42 	bl	80038d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2104      	movs	r1, #4
 8001e50:	480c      	ldr	r0, [pc, #48]	@ (8001e84 <MFRC522_WriteRegister+0x64>)
 8001e52:	f001 fd3d 	bl	80038d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // NSS = LOW
 8001e56:	2200      	movs	r2, #0
 8001e58:	2110      	movs	r1, #16
 8001e5a:	480b      	ldr	r0, [pc, #44]	@ (8001e88 <MFRC522_WriteRegister+0x68>)
 8001e5c:	f001 fd38 	bl	80038d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 8001e60:	f107 010c 	add.w	r1, r7, #12
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295
 8001e68:	2202      	movs	r2, #2
 8001e6a:	4808      	ldr	r0, [pc, #32]	@ (8001e8c <MFRC522_WriteRegister+0x6c>)
 8001e6c:	f002 ff2d 	bl	8004cca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // NSS = HIGH
 8001e70:	2201      	movs	r2, #1
 8001e72:	2110      	movs	r1, #16
 8001e74:	4804      	ldr	r0, [pc, #16]	@ (8001e88 <MFRC522_WriteRegister+0x68>)
 8001e76:	f001 fd2b 	bl	80038d0 <HAL_GPIO_WritePin>
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40020400 	.word	0x40020400
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	20000990 	.word	0x20000990

08001e90 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
	uint8_t tx = ((addr << 1) & 0x7E) | 0x80;
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	b25b      	sxtb	r3, r3
 8001ea2:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001ea6:	b25b      	sxtb	r3, r3
 8001ea8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001eac:	b25b      	sxtb	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	73fb      	strb	r3, [r7, #15]
	uint8_t rx;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2110      	movs	r1, #16
 8001eb6:	480e      	ldr	r0, [pc, #56]	@ (8001ef0 <MFRC522_ReadRegister+0x60>)
 8001eb8:	f001 fd0a 	bl	80038d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 8001ebc:	f107 010f 	add.w	r1, r7, #15
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	480b      	ldr	r0, [pc, #44]	@ (8001ef4 <MFRC522_ReadRegister+0x64>)
 8001ec8:	f002 feff 	bl	8004cca <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 8001ecc:	f107 010e 	add.w	r1, r7, #14
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4807      	ldr	r0, [pc, #28]	@ (8001ef4 <MFRC522_ReadRegister+0x64>)
 8001ed8:	f003 f83b 	bl	8004f52 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001edc:	2201      	movs	r2, #1
 8001ede:	2110      	movs	r1, #16
 8001ee0:	4803      	ldr	r0, [pc, #12]	@ (8001ef0 <MFRC522_ReadRegister+0x60>)
 8001ee2:	f001 fcf5 	bl	80038d0 <HAL_GPIO_WritePin>
	return rx;
 8001ee6:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	20000990 	.word	0x20000990

08001ef8 <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	460a      	mov	r2, r1
 8001f02:	71fb      	strb	r3, [r7, #7]
 8001f04:	4613      	mov	r3, r2
 8001f06:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = MFRC522_ReadRegister(reg);
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ffc0 	bl	8001e90 <MFRC522_ReadRegister>
 8001f10:	4603      	mov	r3, r0
 8001f12:	73fb      	strb	r3, [r7, #15]
	MFRC522_WriteRegister(reg, tmp | mask);
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	79bb      	ldrb	r3, [r7, #6]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff7d 	bl	8001e20 <MFRC522_WriteRegister>
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask) {
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	460a      	mov	r2, r1
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = MFRC522_ReadRegister(reg);
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ffa5 	bl	8001e90 <MFRC522_ReadRegister>
 8001f46:	4603      	mov	r3, r0
 8001f48:	73fb      	strb	r3, [r7, #15]
	MFRC522_WriteRegister(reg, tmp & (~mask));
 8001f4a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	b25a      	sxtb	r2, r3
 8001f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f56:	4013      	ands	r3, r2
 8001f58:	b25b      	sxtb	r3, r3
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff5d 	bl	8001e20 <MFRC522_WriteRegister>
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
	uint8_t temp = MFRC522_ReadRegister(TxControlReg);
 8001f74:	2014      	movs	r0, #20
 8001f76:	f7ff ff8b 	bl	8001e90 <MFRC522_ReadRegister>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d103      	bne.n	8001f90 <MFRC522_AntennaOn+0x22>
		MFRC522_SetBitMask(TxControlReg, 0x03);
 8001f88:	2103      	movs	r1, #3
 8001f8a:	2014      	movs	r0, #20
 8001f8c:	f7ff ffb4 	bl	8001ef8 <MFRC522_SetBitMask>
	}
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(CommandReg, PCD_RESETPHASE);
 8001f9c:	210f      	movs	r1, #15
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f7ff ff3e 	bl	8001e20 <MFRC522_WriteRegister>
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <MFRC522_Init>:

void MFRC522_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
    // ① RST 핀으로 리셋 신호 제공
    HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2104      	movs	r1, #4
 8001fb0:	4815      	ldr	r0, [pc, #84]	@ (8002008 <MFRC522_Init+0x60>)
 8001fb2:	f001 fc8d 	bl	80038d0 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001fb6:	2032      	movs	r0, #50	@ 0x32
 8001fb8:	f000 fd7c 	bl	8002ab4 <HAL_Delay>
    HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	4811      	ldr	r0, [pc, #68]	@ (8002008 <MFRC522_Init+0x60>)
 8001fc2:	f001 fc85 	bl	80038d0 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001fc6:	2032      	movs	r0, #50	@ 0x32
 8001fc8:	f000 fd74 	bl	8002ab4 <HAL_Delay>

    // ② 소프트웨어 초기화
    MFRC522_Reset();
 8001fcc:	f7ff ffe4 	bl	8001f98 <MFRC522_Reset>

    MFRC522_WriteRegister(TModeReg, 0x8D);
 8001fd0:	218d      	movs	r1, #141	@ 0x8d
 8001fd2:	202a      	movs	r0, #42	@ 0x2a
 8001fd4:	f7ff ff24 	bl	8001e20 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(TPrescalerReg, 0x3E);
 8001fd8:	213e      	movs	r1, #62	@ 0x3e
 8001fda:	202b      	movs	r0, #43	@ 0x2b
 8001fdc:	f7ff ff20 	bl	8001e20 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(TReloadRegL, 30);
 8001fe0:	211e      	movs	r1, #30
 8001fe2:	202d      	movs	r0, #45	@ 0x2d
 8001fe4:	f7ff ff1c 	bl	8001e20 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(TReloadRegH, 0);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	202c      	movs	r0, #44	@ 0x2c
 8001fec:	f7ff ff18 	bl	8001e20 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(TxASKReg, 0x40);
 8001ff0:	2140      	movs	r1, #64	@ 0x40
 8001ff2:	2015      	movs	r0, #21
 8001ff4:	f7ff ff14 	bl	8001e20 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(ModeReg, 0x3D);
 8001ff8:	213d      	movs	r1, #61	@ 0x3d
 8001ffa:	2011      	movs	r0, #17
 8001ffc:	f7ff ff10 	bl	8001e20 <MFRC522_WriteRegister>

    // ③ 안테나 켜기
    MFRC522_AntennaOn();
 8002000:	f7ff ffb5 	bl	8001f6e <MFRC522_AntennaOn>
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40020400 	.word	0x40020400

0800200c <MFRC522_Request>:


char MFRC522_Request(uint8_t reqMode, uint8_t *TagType) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af02      	add	r7, sp, #8
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
	char status;
	uint16_t backBits;

	MFRC522_WriteRegister(BitFramingReg, 0x07);
 8002018:	2107      	movs	r1, #7
 800201a:	200d      	movs	r0, #13
 800201c:	f7ff ff00 	bl	8001e20 <MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	79fa      	ldrb	r2, [r7, #7]
 8002024:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002026:	f107 030c 	add.w	r3, r7, #12
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	2201      	movs	r2, #1
 8002030:	6839      	ldr	r1, [r7, #0]
 8002032:	200c      	movs	r0, #12
 8002034:	f000 f80f 	bl	8002056 <MFRC522_ToCard>
 8002038:	4603      	mov	r3, r0
 800203a:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <MFRC522_Request+0x3c>
 8002042:	89bb      	ldrh	r3, [r7, #12]
 8002044:	2b10      	cmp	r3, #16
 8002046:	d001      	beq.n	800204c <MFRC522_Request+0x40>
		status = MI_ERR;
 8002048:	2302      	movs	r3, #2
 800204a:	73fb      	strb	r3, [r7, #15]

	return status;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <MFRC522_ToCard>:

char MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen,
					uint8_t *backData, uint16_t *backLen) {
 8002056:	b590      	push	{r4, r7, lr}
 8002058:	b087      	sub	sp, #28
 800205a:	af00      	add	r7, sp, #0
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	4613      	mov	r3, r2
 8002066:	73bb      	strb	r3, [r7, #14]
	char status = MI_ERR;
 8002068:	2302      	movs	r3, #2
 800206a:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800206c:	2300      	movs	r3, #0
 800206e:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8002070:	2300      	movs	r3, #0
 8002072:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d006      	beq.n	8002088 <MFRC522_ToCard+0x32>
 800207a:	2b0e      	cmp	r3, #14
 800207c:	d109      	bne.n	8002092 <MFRC522_ToCard+0x3c>
	case PCD_AUTHENT:
		irqEn = 0x12;
 800207e:	2312      	movs	r3, #18
 8002080:	75bb      	strb	r3, [r7, #22]
		waitIRq = 0x10;
 8002082:	2310      	movs	r3, #16
 8002084:	757b      	strb	r3, [r7, #21]
		break;
 8002086:	e004      	b.n	8002092 <MFRC522_ToCard+0x3c>
	case PCD_TRANSCEIVE:
		irqEn = 0x77;
 8002088:	2377      	movs	r3, #119	@ 0x77
 800208a:	75bb      	strb	r3, [r7, #22]
		waitIRq = 0x30;
 800208c:	2330      	movs	r3, #48	@ 0x30
 800208e:	757b      	strb	r3, [r7, #21]
		break;
 8002090:	bf00      	nop
	}

	MFRC522_WriteRegister(CommIEnReg, irqEn | 0x80);
 8002092:	7dbb      	ldrb	r3, [r7, #22]
 8002094:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002098:	b2db      	uxtb	r3, r3
 800209a:	4619      	mov	r1, r3
 800209c:	2002      	movs	r0, #2
 800209e:	f7ff febf 	bl	8001e20 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(CommIrqReg, 0x80);
 80020a2:	2180      	movs	r1, #128	@ 0x80
 80020a4:	2004      	movs	r0, #4
 80020a6:	f7ff ff42 	bl	8001f2e <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(FIFOLevelReg, 0x80);
 80020aa:	2180      	movs	r1, #128	@ 0x80
 80020ac:	200a      	movs	r0, #10
 80020ae:	f7ff ff23 	bl	8001ef8 <MFRC522_SetBitMask>

	MFRC522_WriteRegister(CommandReg, PCD_IDLE);
 80020b2:	2100      	movs	r1, #0
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7ff feb3 	bl	8001e20 <MFRC522_WriteRegister>

	for (i = 0; i < sendLen; i++) {
 80020ba:	2300      	movs	r3, #0
 80020bc:	827b      	strh	r3, [r7, #18]
 80020be:	e00a      	b.n	80020d6 <MFRC522_ToCard+0x80>
		MFRC522_WriteRegister(FIFODataReg, sendData[i]);
 80020c0:	8a7b      	ldrh	r3, [r7, #18]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	4413      	add	r3, r2
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	2009      	movs	r0, #9
 80020cc:	f7ff fea8 	bl	8001e20 <MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 80020d0:	8a7b      	ldrh	r3, [r7, #18]
 80020d2:	3301      	adds	r3, #1
 80020d4:	827b      	strh	r3, [r7, #18]
 80020d6:	7bbb      	ldrb	r3, [r7, #14]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	8a7a      	ldrh	r2, [r7, #18]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d3ef      	bcc.n	80020c0 <MFRC522_ToCard+0x6a>
	}
	MFRC522_WriteRegister(CommandReg, command);
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	4619      	mov	r1, r3
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7ff fe9b 	bl	8001e20 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	2b0c      	cmp	r3, #12
 80020ee:	d103      	bne.n	80020f8 <MFRC522_ToCard+0xa2>
		MFRC522_SetBitMask(BitFramingReg, 0x80);
 80020f0:	2180      	movs	r1, #128	@ 0x80
 80020f2:	200d      	movs	r0, #13
 80020f4:	f7ff ff00 	bl	8001ef8 <MFRC522_SetBitMask>
	}

	i = 2000;
 80020f8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80020fc:	827b      	strh	r3, [r7, #18]
	do {
		n = MFRC522_ReadRegister(CommIrqReg);
 80020fe:	2004      	movs	r0, #4
 8002100:	f7ff fec6 	bl	8001e90 <MFRC522_ReadRegister>
 8002104:	4603      	mov	r3, r0
 8002106:	747b      	strb	r3, [r7, #17]
		i--;
 8002108:	8a7b      	ldrh	r3, [r7, #18]
 800210a:	3b01      	subs	r3, #1
 800210c:	827b      	strh	r3, [r7, #18]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 800210e:	8a7b      	ldrh	r3, [r7, #18]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <MFRC522_ToCard+0xd4>
 8002114:	7c7b      	ldrb	r3, [r7, #17]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d105      	bne.n	800212a <MFRC522_ToCard+0xd4>
 800211e:	7c7a      	ldrb	r2, [r7, #17]
 8002120:	7d7b      	ldrb	r3, [r7, #21]
 8002122:	4013      	ands	r3, r2
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0e9      	beq.n	80020fe <MFRC522_ToCard+0xa8>

	MFRC522_ClearBitMask(BitFramingReg, 0x80);
 800212a:	2180      	movs	r1, #128	@ 0x80
 800212c:	200d      	movs	r0, #13
 800212e:	f7ff fefe 	bl	8001f2e <MFRC522_ClearBitMask>

	if (i != 0) {
 8002132:	8a7b      	ldrh	r3, [r7, #18]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d04a      	beq.n	80021ce <MFRC522_ToCard+0x178>
		if (!(MFRC522_ReadRegister(ErrorReg) & 0x1B)) {
 8002138:	2006      	movs	r0, #6
 800213a:	f7ff fea9 	bl	8001e90 <MFRC522_ReadRegister>
 800213e:	4603      	mov	r3, r0
 8002140:	f003 031b 	and.w	r3, r3, #27
 8002144:	2b00      	cmp	r3, #0
 8002146:	d142      	bne.n	80021ce <MFRC522_ToCard+0x178>
			status = MI_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01)
 800214c:	7c7a      	ldrb	r2, [r7, #17]
 800214e:	7dbb      	ldrb	r3, [r7, #22]
 8002150:	4013      	ands	r3, r2
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MFRC522_ToCard+0x10a>
				status = MI_NOTAGERR;
 800215c:	2301      	movs	r3, #1
 800215e:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d133      	bne.n	80021ce <MFRC522_ToCard+0x178>
				n = MFRC522_ReadRegister(FIFOLevelReg);
 8002166:	200a      	movs	r0, #10
 8002168:	f7ff fe92 	bl	8001e90 <MFRC522_ReadRegister>
 800216c:	4603      	mov	r3, r0
 800216e:	747b      	strb	r3, [r7, #17]
				lastBits = MFRC522_ReadRegister(ControlReg) & 0x07;
 8002170:	200c      	movs	r0, #12
 8002172:	f7ff fe8d 	bl	8001e90 <MFRC522_ReadRegister>
 8002176:	4603      	mov	r3, r0
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	743b      	strb	r3, [r7, #16]
				if (lastBits)
 800217e:	7c3b      	ldrb	r3, [r7, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00b      	beq.n	800219c <MFRC522_ToCard+0x146>
					*backLen = (n - 1) * 8 + lastBits;
 8002184:	7c7b      	ldrb	r3, [r7, #17]
 8002186:	3b01      	subs	r3, #1
 8002188:	b29b      	uxth	r3, r3
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	b29a      	uxth	r2, r3
 800218e:	7c3b      	ldrb	r3, [r7, #16]
 8002190:	b29b      	uxth	r3, r3
 8002192:	4413      	add	r3, r2
 8002194:	b29a      	uxth	r2, r3
 8002196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	e005      	b.n	80021a8 <MFRC522_ToCard+0x152>
				else
					*backLen = n * 8;
 800219c:	7c7b      	ldrb	r3, [r7, #17]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a6:	801a      	strh	r2, [r3, #0]
				for (i = 0; i < n; i++) {
 80021a8:	2300      	movs	r3, #0
 80021aa:	827b      	strh	r3, [r7, #18]
 80021ac:	e00a      	b.n	80021c4 <MFRC522_ToCard+0x16e>
					backData[i] = MFRC522_ReadRegister(FIFODataReg);
 80021ae:	8a7b      	ldrh	r3, [r7, #18]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	18d4      	adds	r4, r2, r3
 80021b4:	2009      	movs	r0, #9
 80021b6:	f7ff fe6b 	bl	8001e90 <MFRC522_ReadRegister>
 80021ba:	4603      	mov	r3, r0
 80021bc:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 80021be:	8a7b      	ldrh	r3, [r7, #18]
 80021c0:	3301      	adds	r3, #1
 80021c2:	827b      	strh	r3, [r7, #18]
 80021c4:	7c7b      	ldrb	r3, [r7, #17]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	8a7a      	ldrh	r2, [r7, #18]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d3ef      	bcc.n	80021ae <MFRC522_ToCard+0x158>
				}
			}
		}
	}
	return status;
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}

080021d8 <MFRC522_Anticoll>:

char MFRC522_Anticoll(uint8_t *serNum) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af02      	add	r7, sp, #8
 80021de:	6078      	str	r0, [r7, #4]
	char status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(BitFramingReg, 0x00);
 80021e4:	2100      	movs	r1, #0
 80021e6:	200d      	movs	r0, #13
 80021e8:	f7ff fe1a 	bl	8001e20 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2293      	movs	r2, #147	@ 0x93
 80021f0:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3301      	adds	r3, #1
 80021f6:	2220      	movs	r2, #32
 80021f8:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80021fa:	f107 030a 	add.w	r3, r7, #10
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	200c      	movs	r0, #12
 8002208:	f7ff ff25 	bl	8002056 <MFRC522_ToCard>
 800220c:	4603      	mov	r3, r0
 800220e:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d117      	bne.n	8002246 <MFRC522_Anticoll+0x6e>
		for (i = 0; i < 4; i++) {
 8002216:	2300      	movs	r3, #0
 8002218:	73bb      	strb	r3, [r7, #14]
 800221a:	e009      	b.n	8002230 <MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 800221c:	7bbb      	ldrb	r3, [r7, #14]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	7b7b      	ldrb	r3, [r7, #13]
 8002226:	4053      	eors	r3, r2
 8002228:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 800222a:	7bbb      	ldrb	r3, [r7, #14]
 800222c:	3301      	adds	r3, #1
 800222e:	73bb      	strb	r3, [r7, #14]
 8002230:	7bbb      	ldrb	r3, [r7, #14]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d9f2      	bls.n	800221c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[4])
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3304      	adds	r3, #4
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	7b7a      	ldrb	r2, [r7, #13]
 800223e:	429a      	cmp	r2, r3
 8002240:	d001      	beq.n	8002246 <MFRC522_Anticoll+0x6e>
			status = MI_ERR;
 8002242:	2302      	movs	r3, #2
 8002244:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8002246:	7bfb      	ldrb	r3, [r7, #15]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <MFRC522_Check>:

char MFRC522_Check(uint8_t *id)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    char status;
    uint8_t type[2];

    // ① 카드가 감지되는지 먼저 확인 (Request)
    status = MFRC522_Request(PICC_REQIDL, type);
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	4619      	mov	r1, r3
 800225e:	2026      	movs	r0, #38	@ 0x26
 8002260:	f7ff fed4 	bl	800200c <MFRC522_Request>
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]
    if (status != MI_OK)
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MFRC522_Check+0x22>
        return MI_ERR; // 카드 없음
 800226e:	2302      	movs	r3, #2
 8002270:	e00a      	b.n	8002288 <MFRC522_Check+0x38>

    // ② UID 읽기 (Anti-collision)
    status = MFRC522_Anticoll(id);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ffb0 	bl	80021d8 <MFRC522_Anticoll>
 8002278:	4603      	mov	r3, r0
 800227a:	73fb      	strb	r3, [r7, #15]
    if (status != MI_OK)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MFRC522_Check+0x36>
        return MI_ERR; // UID 읽기 실패
 8002282:	2302      	movs	r3, #2
 8002284:	e000      	b.n	8002288 <MFRC522_Check+0x38>

    return MI_OK; // 성공
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	4b10      	ldr	r3, [pc, #64]	@ (80022dc <HAL_MspInit+0x4c>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	4a0f      	ldr	r2, [pc, #60]	@ (80022dc <HAL_MspInit+0x4c>)
 80022a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022a6:	4b0d      	ldr	r3, [pc, #52]	@ (80022dc <HAL_MspInit+0x4c>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	603b      	str	r3, [r7, #0]
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_MspInit+0x4c>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	4a08      	ldr	r2, [pc, #32]	@ (80022dc <HAL_MspInit+0x4c>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_MspInit+0x4c>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022ce:	2007      	movs	r0, #7
 80022d0:	f001 f88e 	bl	80033f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40023800 	.word	0x40023800

080022e0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	@ 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1b      	ldr	r2, [pc, #108]	@ (800236c <HAL_ADC_MspInit+0x8c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d12f      	bne.n	8002362 <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <HAL_ADC_MspInit+0x90>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	4a19      	ldr	r2, [pc, #100]	@ (8002370 <HAL_ADC_MspInit+0x90>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002310:	6453      	str	r3, [r2, #68]	@ 0x44
 8002312:	4b17      	ldr	r3, [pc, #92]	@ (8002370 <HAL_ADC_MspInit+0x90>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b13      	ldr	r3, [pc, #76]	@ (8002370 <HAL_ADC_MspInit+0x90>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	4a12      	ldr	r2, [pc, #72]	@ (8002370 <HAL_ADC_MspInit+0x90>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6313      	str	r3, [r2, #48]	@ 0x30
 800232e:	4b10      	ldr	r3, [pc, #64]	@ (8002370 <HAL_ADC_MspInit+0x90>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800233a:	2301      	movs	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800233e:	2303      	movs	r3, #3
 8002340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	4619      	mov	r1, r3
 800234c:	4809      	ldr	r0, [pc, #36]	@ (8002374 <HAL_ADC_MspInit+0x94>)
 800234e:	f001 f923 	bl	8003598 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	2012      	movs	r0, #18
 8002358:	f001 f855 	bl	8003406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800235c:	2012      	movs	r0, #18
 800235e:	f001 f86e 	bl	800343e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	@ 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40012000 	.word	0x40012000
 8002370:	40023800 	.word	0x40023800
 8002374:	40020000 	.word	0x40020000

08002378 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	@ 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a19      	ldr	r2, [pc, #100]	@ (80023fc <HAL_I2C_MspInit+0x84>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d12c      	bne.n	80023f4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	4b18      	ldr	r3, [pc, #96]	@ (8002400 <HAL_I2C_MspInit+0x88>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a17      	ldr	r2, [pc, #92]	@ (8002400 <HAL_I2C_MspInit+0x88>)
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b15      	ldr	r3, [pc, #84]	@ (8002400 <HAL_I2C_MspInit+0x88>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023bc:	2312      	movs	r3, #18
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023c8:	2304      	movs	r3, #4
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	480c      	ldr	r0, [pc, #48]	@ (8002404 <HAL_I2C_MspInit+0x8c>)
 80023d4:	f001 f8e0 	bl	8003598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <HAL_I2C_MspInit+0x88>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	4a07      	ldr	r2, [pc, #28]	@ (8002400 <HAL_I2C_MspInit+0x88>)
 80023e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <HAL_I2C_MspInit+0x88>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80023f4:	bf00      	nop
 80023f6:	3728      	adds	r7, #40	@ 0x28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40005400 	.word	0x40005400
 8002400:	40023800 	.word	0x40023800
 8002404:	40020400 	.word	0x40020400

08002408 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	@ 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a19      	ldr	r2, [pc, #100]	@ (800248c <HAL_SPI_MspInit+0x84>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d12b      	bne.n	8002482 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	4b18      	ldr	r3, [pc, #96]	@ (8002490 <HAL_SPI_MspInit+0x88>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	4a17      	ldr	r2, [pc, #92]	@ (8002490 <HAL_SPI_MspInit+0x88>)
 8002434:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002438:	6453      	str	r3, [r2, #68]	@ 0x44
 800243a:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <HAL_SPI_MspInit+0x88>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <HAL_SPI_MspInit+0x88>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	4a10      	ldr	r2, [pc, #64]	@ (8002490 <HAL_SPI_MspInit+0x88>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6313      	str	r3, [r2, #48]	@ 0x30
 8002456:	4b0e      	ldr	r3, [pc, #56]	@ (8002490 <HAL_SPI_MspInit+0x88>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002462:	23e0      	movs	r3, #224	@ 0xe0
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002472:	2305      	movs	r3, #5
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	4805      	ldr	r0, [pc, #20]	@ (8002494 <HAL_SPI_MspInit+0x8c>)
 800247e:	f001 f88b 	bl	8003598 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002482:	bf00      	nop
 8002484:	3728      	adds	r7, #40	@ 0x28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40013000 	.word	0x40013000
 8002490:	40023800 	.word	0x40023800
 8002494:	40020000 	.word	0x40020000

08002498 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a15      	ldr	r2, [pc, #84]	@ (80024fc <HAL_TIM_PWM_MspInit+0x64>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d10e      	bne.n	80024c8 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b14      	ldr	r3, [pc, #80]	@ (8002500 <HAL_TIM_PWM_MspInit+0x68>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b2:	4a13      	ldr	r2, [pc, #76]	@ (8002500 <HAL_TIM_PWM_MspInit+0x68>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ba:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_TIM_PWM_MspInit+0x68>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024c6:	e012      	b.n	80024ee <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002504 <HAL_TIM_PWM_MspInit+0x6c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d10d      	bne.n	80024ee <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002500 <HAL_TIM_PWM_MspInit+0x68>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	4a09      	ldr	r2, [pc, #36]	@ (8002500 <HAL_TIM_PWM_MspInit+0x68>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024e2:	4b07      	ldr	r3, [pc, #28]	@ (8002500 <HAL_TIM_PWM_MspInit+0x68>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
}
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40010000 	.word	0x40010000
 8002500:	40023800 	.word	0x40023800
 8002504:	40000800 	.word	0x40000800

08002508 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0e      	ldr	r2, [pc, #56]	@ (8002550 <HAL_TIM_Base_MspInit+0x48>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d115      	bne.n	8002546 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4b0d      	ldr	r3, [pc, #52]	@ (8002554 <HAL_TIM_Base_MspInit+0x4c>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	4a0c      	ldr	r2, [pc, #48]	@ (8002554 <HAL_TIM_Base_MspInit+0x4c>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6413      	str	r3, [r2, #64]	@ 0x40
 800252a:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <HAL_TIM_Base_MspInit+0x4c>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	201d      	movs	r0, #29
 800253c:	f000 ff63 	bl	8003406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002540:	201d      	movs	r0, #29
 8002542:	f000 ff7c 	bl	800343e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40000400 	.word	0x40000400
 8002554:	40023800 	.word	0x40023800

08002558 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	@ 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a24      	ldr	r2, [pc, #144]	@ (8002608 <HAL_TIM_MspPostInit+0xb0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d11f      	bne.n	80025ba <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b23      	ldr	r3, [pc, #140]	@ (800260c <HAL_TIM_MspPostInit+0xb4>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	4a22      	ldr	r2, [pc, #136]	@ (800260c <HAL_TIM_MspPostInit+0xb4>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6313      	str	r3, [r2, #48]	@ 0x30
 800258a:	4b20      	ldr	r3, [pc, #128]	@ (800260c <HAL_TIM_MspPostInit+0xb4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 8002596:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800259a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025a8:	2301      	movs	r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	4817      	ldr	r0, [pc, #92]	@ (8002610 <HAL_TIM_MspPostInit+0xb8>)
 80025b4:	f000 fff0 	bl	8003598 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80025b8:	e022      	b.n	8002600 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a15      	ldr	r2, [pc, #84]	@ (8002614 <HAL_TIM_MspPostInit+0xbc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d11d      	bne.n	8002600 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	4b10      	ldr	r3, [pc, #64]	@ (800260c <HAL_TIM_MspPostInit+0xb4>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	4a0f      	ldr	r2, [pc, #60]	@ (800260c <HAL_TIM_MspPostInit+0xb4>)
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d4:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <HAL_TIM_MspPostInit+0xb4>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025e0:	2340      	movs	r3, #64	@ 0x40
 80025e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025f0:	2302      	movs	r3, #2
 80025f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	4619      	mov	r1, r3
 80025fa:	4807      	ldr	r0, [pc, #28]	@ (8002618 <HAL_TIM_MspPostInit+0xc0>)
 80025fc:	f000 ffcc 	bl	8003598 <HAL_GPIO_Init>
}
 8002600:	bf00      	nop
 8002602:	3728      	adds	r7, #40	@ 0x28
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40010000 	.word	0x40010000
 800260c:	40023800 	.word	0x40023800
 8002610:	40020000 	.word	0x40020000
 8002614:	40000800 	.word	0x40000800
 8002618:	40020400 	.word	0x40020400

0800261c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08c      	sub	sp, #48	@ 0x30
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a36      	ldr	r2, [pc, #216]	@ (8002714 <HAL_UART_MspInit+0xf8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d12c      	bne.n	8002698 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	4b35      	ldr	r3, [pc, #212]	@ (8002718 <HAL_UART_MspInit+0xfc>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	4a34      	ldr	r2, [pc, #208]	@ (8002718 <HAL_UART_MspInit+0xfc>)
 8002648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800264c:	6413      	str	r3, [r2, #64]	@ 0x40
 800264e:	4b32      	ldr	r3, [pc, #200]	@ (8002718 <HAL_UART_MspInit+0xfc>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	4b2e      	ldr	r3, [pc, #184]	@ (8002718 <HAL_UART_MspInit+0xfc>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	4a2d      	ldr	r2, [pc, #180]	@ (8002718 <HAL_UART_MspInit+0xfc>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6313      	str	r3, [r2, #48]	@ 0x30
 800266a:	4b2b      	ldr	r3, [pc, #172]	@ (8002718 <HAL_UART_MspInit+0xfc>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002676:	230c      	movs	r3, #12
 8002678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002686:	2307      	movs	r3, #7
 8002688:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268a:	f107 031c 	add.w	r3, r7, #28
 800268e:	4619      	mov	r1, r3
 8002690:	4822      	ldr	r0, [pc, #136]	@ (800271c <HAL_UART_MspInit+0x100>)
 8002692:	f000 ff81 	bl	8003598 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002696:	e039      	b.n	800270c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a20      	ldr	r2, [pc, #128]	@ (8002720 <HAL_UART_MspInit+0x104>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d134      	bne.n	800270c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002718 <HAL_UART_MspInit+0xfc>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002718 <HAL_UART_MspInit+0xfc>)
 80026ac:	f043 0320 	orr.w	r3, r3, #32
 80026b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026b2:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <HAL_UART_MspInit+0xfc>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <HAL_UART_MspInit+0xfc>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	4a14      	ldr	r2, [pc, #80]	@ (8002718 <HAL_UART_MspInit+0xfc>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ce:	4b12      	ldr	r3, [pc, #72]	@ (8002718 <HAL_UART_MspInit+0xfc>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026da:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80026de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80026ec:	2308      	movs	r3, #8
 80026ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f0:	f107 031c 	add.w	r3, r7, #28
 80026f4:	4619      	mov	r1, r3
 80026f6:	4809      	ldr	r0, [pc, #36]	@ (800271c <HAL_UART_MspInit+0x100>)
 80026f8:	f000 ff4e 	bl	8003598 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80026fc:	2200      	movs	r2, #0
 80026fe:	2100      	movs	r1, #0
 8002700:	2047      	movs	r0, #71	@ 0x47
 8002702:	f000 fe80 	bl	8003406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002706:	2047      	movs	r0, #71	@ 0x47
 8002708:	f000 fe99 	bl	800343e <HAL_NVIC_EnableIRQ>
}
 800270c:	bf00      	nop
 800270e:	3730      	adds	r7, #48	@ 0x30
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40004400 	.word	0x40004400
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000
 8002720:	40011400 	.word	0x40011400

08002724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <NMI_Handler+0x4>

0800272c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <HardFault_Handler+0x4>

08002734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <MemManage_Handler+0x4>

0800273c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <BusFault_Handler+0x4>

08002744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <UsageFault_Handler+0x4>

0800274c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800277a:	f000 f97b 	bl	8002a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}

08002782 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_Pin);
 8002786:	2002      	movs	r0, #2
 8002788:	f001 f8bc 	bl	8003904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}

08002790 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <ADC_IRQHandler+0x10>)
 8002796:	f000 f9f4 	bl	8002b82 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200008f4 	.word	0x200008f4

080027a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027a8:	4802      	ldr	r0, [pc, #8]	@ (80027b4 <TIM3_IRQHandler+0x10>)
 80027aa:	f003 f8d8 	bl	800595e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000a30 	.word	0x20000a30

080027b8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80027bc:	4802      	ldr	r0, [pc, #8]	@ (80027c8 <USART6_IRQHandler+0x10>)
 80027be:	f003 fff1 	bl	80067a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000b08 	.word	0x20000b08

080027cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return 1;
 80027d0:	2301      	movs	r3, #1
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_kill>:

int _kill(int pid, int sig)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027e6:	f005 fa5d 	bl	8007ca4 <__errno>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2216      	movs	r2, #22
 80027ee:	601a      	str	r2, [r3, #0]
  return -1;
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <_exit>:

void _exit (int status)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002804:	f04f 31ff 	mov.w	r1, #4294967295
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ffe7 	bl	80027dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800280e:	bf00      	nop
 8002810:	e7fd      	b.n	800280e <_exit+0x12>

08002812 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b086      	sub	sp, #24
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e00a      	b.n	800283a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002824:	f3af 8000 	nop.w
 8002828:	4601      	mov	r1, r0
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	60ba      	str	r2, [r7, #8]
 8002830:	b2ca      	uxtb	r2, r1
 8002832:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	3301      	adds	r3, #1
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	429a      	cmp	r2, r3
 8002840:	dbf0      	blt.n	8002824 <_read+0x12>
  }

  return len;
 8002842:	687b      	ldr	r3, [r7, #4]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e009      	b.n	8002872 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	60ba      	str	r2, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fae2 	bl	8000e30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	3301      	adds	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	dbf1      	blt.n	800285e <_write+0x12>
  }
  return len;
 800287a:	687b      	ldr	r3, [r7, #4]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <_close>:

int _close(int file)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800288c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028ac:	605a      	str	r2, [r3, #4]
  return 0;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <_isatty>:

int _isatty(int file)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028c4:	2301      	movs	r3, #1
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f4:	4a14      	ldr	r2, [pc, #80]	@ (8002948 <_sbrk+0x5c>)
 80028f6:	4b15      	ldr	r3, [pc, #84]	@ (800294c <_sbrk+0x60>)
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002900:	4b13      	ldr	r3, [pc, #76]	@ (8002950 <_sbrk+0x64>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002908:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <_sbrk+0x64>)
 800290a:	4a12      	ldr	r2, [pc, #72]	@ (8002954 <_sbrk+0x68>)
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800290e:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <_sbrk+0x64>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	429a      	cmp	r2, r3
 800291a:	d207      	bcs.n	800292c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800291c:	f005 f9c2 	bl	8007ca4 <__errno>
 8002920:	4603      	mov	r3, r0
 8002922:	220c      	movs	r2, #12
 8002924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	e009      	b.n	8002940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800292c:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <_sbrk+0x64>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002932:	4b07      	ldr	r3, [pc, #28]	@ (8002950 <_sbrk+0x64>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	4a05      	ldr	r2, [pc, #20]	@ (8002950 <_sbrk+0x64>)
 800293c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800293e:	68fb      	ldr	r3, [r7, #12]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20020000 	.word	0x20020000
 800294c:	00000400 	.word	0x00000400
 8002950:	20000c70 	.word	0x20000c70
 8002954:	20000dc8 	.word	0x20000dc8

08002958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <SystemInit+0x20>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002962:	4a05      	ldr	r2, [pc, #20]	@ (8002978 <SystemInit+0x20>)
 8002964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800297c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002980:	f7ff ffea 	bl	8002958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002984:	480c      	ldr	r0, [pc, #48]	@ (80029b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002986:	490d      	ldr	r1, [pc, #52]	@ (80029bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002988:	4a0d      	ldr	r2, [pc, #52]	@ (80029c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800298c:	e002      	b.n	8002994 <LoopCopyDataInit>

0800298e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002992:	3304      	adds	r3, #4

08002994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002998:	d3f9      	bcc.n	800298e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299a:	4a0a      	ldr	r2, [pc, #40]	@ (80029c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800299c:	4c0a      	ldr	r4, [pc, #40]	@ (80029c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800299e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a0:	e001      	b.n	80029a6 <LoopFillZerobss>

080029a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a4:	3204      	adds	r2, #4

080029a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a8:	d3fb      	bcc.n	80029a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029aa:	f005 f981 	bl	8007cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ae:	f7fe fa57 	bl	8000e60 <main>
  bx  lr    
 80029b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029bc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80029c0:	08009278 	.word	0x08009278
  ldr r2, =_sbss
 80029c4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80029c8:	20000dc4 	.word	0x20000dc4

080029cc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029cc:	e7fe      	b.n	80029cc <DMA1_Stream0_IRQHandler>
	...

080029d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <HAL_Init+0x40>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a10 <HAL_Init+0x40>)
 80029da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a10 <HAL_Init+0x40>)
 80029e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ec:	4b08      	ldr	r3, [pc, #32]	@ (8002a10 <HAL_Init+0x40>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a07      	ldr	r2, [pc, #28]	@ (8002a10 <HAL_Init+0x40>)
 80029f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f8:	2003      	movs	r0, #3
 80029fa:	f000 fcf9 	bl	80033f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f000 f808 	bl	8002a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a04:	f7ff fc44 	bl	8002290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023c00 	.word	0x40023c00

08002a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a1c:	4b12      	ldr	r3, [pc, #72]	@ (8002a68 <HAL_InitTick+0x54>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <HAL_InitTick+0x58>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fd11 	bl	800345a <HAL_SYSTICK_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00e      	b.n	8002a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d80a      	bhi.n	8002a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f000 fcd9 	bl	8003406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a54:	4a06      	ldr	r2, [pc, #24]	@ (8002a70 <HAL_InitTick+0x5c>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000018 	.word	0x20000018
 8002a6c:	20000020 	.word	0x20000020
 8002a70:	2000001c 	.word	0x2000001c

08002a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a78:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <HAL_IncTick+0x20>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_IncTick+0x24>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a04      	ldr	r2, [pc, #16]	@ (8002a98 <HAL_IncTick+0x24>)
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000020 	.word	0x20000020
 8002a98:	20000c74 	.word	0x20000c74

08002a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	@ (8002ab0 <HAL_GetTick+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000c74 	.word	0x20000c74

08002ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff ffee 	bl	8002a9c <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d005      	beq.n	8002ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ace:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <HAL_Delay+0x44>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ada:	bf00      	nop
 8002adc:	f7ff ffde 	bl	8002a9c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d8f7      	bhi.n	8002adc <HAL_Delay+0x28>
  {
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000020 	.word	0x20000020

08002afc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e033      	b.n	8002b7a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff fbe0 	bl	80022e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d118      	bne.n	8002b6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b42:	f023 0302 	bic.w	r3, r3, #2
 8002b46:	f043 0202 	orr.w	r2, r3, #2
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fa78 	bl	8003044 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	f023 0303 	bic.w	r3, r3, #3
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b6a:	e001      	b.n	8002b70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d049      	beq.n	8002c4c <HAL_ADC_IRQHandler+0xca>
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d046      	beq.n	8002c4c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d105      	bne.n	8002bd6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d12b      	bne.n	8002c3c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d127      	bne.n	8002c3c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d119      	bne.n	8002c3c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0220 	bic.w	r2, r2, #32
 8002c16:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f043 0201 	orr.w	r2, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f8b0 	bl	8002da2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f06f 0212 	mvn.w	r2, #18
 8002c4a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d057      	beq.n	8002d12 <HAL_ADC_IRQHandler+0x190>
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d054      	beq.n	8002d12 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c78:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d139      	bne.n	8002d02 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c94:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d12b      	bne.n	8002d02 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d124      	bne.n	8002d02 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d11d      	bne.n	8002d02 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d119      	bne.n	8002d02 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cdc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d105      	bne.n	8002d02 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fa9a 	bl	800323c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 020c 	mvn.w	r2, #12
 8002d10:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d20:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d017      	beq.n	8002d58 <HAL_ADC_IRQHandler+0x1d6>
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d014      	beq.n	8002d58 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d10d      	bne.n	8002d58 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f834 	bl	8002db6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f06f 0201 	mvn.w	r2, #1
 8002d56:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d66:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d015      	beq.n	8002d9a <HAL_ADC_IRQHandler+0x218>
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d012      	beq.n	8002d9a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d78:	f043 0202 	orr.w	r2, r3, #2
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0220 	mvn.w	r2, #32
 8002d88:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f81d 	bl	8002dca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0220 	mvn.w	r2, #32
 8002d98:	601a      	str	r2, [r3, #0]
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x1c>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e113      	b.n	8003024 <HAL_ADC_ConfigChannel+0x244>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b09      	cmp	r3, #9
 8002e0a:	d925      	bls.n	8002e58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68d9      	ldr	r1, [r3, #12]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	3b1e      	subs	r3, #30
 8002e22:	2207      	movs	r2, #7
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43da      	mvns	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	400a      	ands	r2, r1
 8002e30:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68d9      	ldr	r1, [r3, #12]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	4618      	mov	r0, r3
 8002e44:	4603      	mov	r3, r0
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4403      	add	r3, r0
 8002e4a:	3b1e      	subs	r3, #30
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	e022      	b.n	8002e9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6919      	ldr	r1, [r3, #16]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43da      	mvns	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	400a      	ands	r2, r1
 8002e7a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6919      	ldr	r1, [r3, #16]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	4603      	mov	r3, r0
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4403      	add	r3, r0
 8002e94:	409a      	lsls	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d824      	bhi.n	8002ef0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3b05      	subs	r3, #5
 8002eb8:	221f      	movs	r2, #31
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	3b05      	subs	r3, #5
 8002ee2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	635a      	str	r2, [r3, #52]	@ 0x34
 8002eee:	e04c      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	d824      	bhi.n	8002f42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	3b23      	subs	r3, #35	@ 0x23
 8002f0a:	221f      	movs	r2, #31
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43da      	mvns	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	400a      	ands	r2, r1
 8002f18:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	4618      	mov	r0, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	3b23      	subs	r3, #35	@ 0x23
 8002f34:	fa00 f203 	lsl.w	r2, r0, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f40:	e023      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	3b41      	subs	r3, #65	@ 0x41
 8002f54:	221f      	movs	r2, #31
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	400a      	ands	r2, r1
 8002f62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	4618      	mov	r0, r3
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3b41      	subs	r3, #65	@ 0x41
 8002f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f8a:	4b29      	ldr	r3, [pc, #164]	@ (8003030 <HAL_ADC_ConfigChannel+0x250>)
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a28      	ldr	r2, [pc, #160]	@ (8003034 <HAL_ADC_ConfigChannel+0x254>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d10f      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x1d8>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b12      	cmp	r3, #18
 8002f9e:	d10b      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8003034 <HAL_ADC_ConfigChannel+0x254>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d12b      	bne.n	800301a <HAL_ADC_ConfigChannel+0x23a>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8003038 <HAL_ADC_ConfigChannel+0x258>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d003      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0x1f4>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b11      	cmp	r3, #17
 8002fd2:	d122      	bne.n	800301a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a11      	ldr	r2, [pc, #68]	@ (8003038 <HAL_ADC_ConfigChannel+0x258>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d111      	bne.n	800301a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ff6:	4b11      	ldr	r3, [pc, #68]	@ (800303c <HAL_ADC_ConfigChannel+0x25c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a11      	ldr	r2, [pc, #68]	@ (8003040 <HAL_ADC_ConfigChannel+0x260>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	0c9a      	lsrs	r2, r3, #18
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800300c:	e002      	b.n	8003014 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	3b01      	subs	r3, #1
 8003012:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f9      	bne.n	800300e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	40012300 	.word	0x40012300
 8003034:	40012000 	.word	0x40012000
 8003038:	10000012 	.word	0x10000012
 800303c:	20000018 	.word	0x20000018
 8003040:	431bde83 	.word	0x431bde83

08003044 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800304c:	4b79      	ldr	r3, [pc, #484]	@ (8003234 <ADC_Init+0x1f0>)
 800304e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	431a      	orrs	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003078:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	021a      	lsls	r2, r3, #8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800309c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6899      	ldr	r1, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	4a58      	ldr	r2, [pc, #352]	@ (8003238 <ADC_Init+0x1f4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d022      	beq.n	8003122 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6899      	ldr	r1, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800310c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6899      	ldr	r1, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	e00f      	b.n	8003142 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003130:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003140:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0202 	bic.w	r2, r2, #2
 8003150:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6899      	ldr	r1, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	7e1b      	ldrb	r3, [r3, #24]
 800315c:	005a      	lsls	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01b      	beq.n	80031a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800317e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800318e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6859      	ldr	r1, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	3b01      	subs	r3, #1
 800319c:	035a      	lsls	r2, r3, #13
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	e007      	b.n	80031b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80031c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	051a      	lsls	r2, r3, #20
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6899      	ldr	r1, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031fa:	025a      	lsls	r2, r3, #9
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6899      	ldr	r1, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	029a      	lsls	r2, r3, #10
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	609a      	str	r2, [r3, #8]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40012300 	.word	0x40012300
 8003238:	0f000001 	.word	0x0f000001

0800323c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003260:	4b0c      	ldr	r3, [pc, #48]	@ (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800326c:	4013      	ands	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003278:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800327c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003282:	4a04      	ldr	r2, [pc, #16]	@ (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	60d3      	str	r3, [r2, #12]
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800329c:	4b04      	ldr	r3, [pc, #16]	@ (80032b0 <__NVIC_GetPriorityGrouping+0x18>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	f003 0307 	and.w	r3, r3, #7
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	db0b      	blt.n	80032de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	4907      	ldr	r1, [pc, #28]	@ (80032ec <__NVIC_EnableIRQ+0x38>)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2001      	movs	r0, #1
 80032d6:	fa00 f202 	lsl.w	r2, r0, r2
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	e000e100 	.word	0xe000e100

080032f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	2b00      	cmp	r3, #0
 8003302:	db0a      	blt.n	800331a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	490c      	ldr	r1, [pc, #48]	@ (800333c <__NVIC_SetPriority+0x4c>)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	0112      	lsls	r2, r2, #4
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	440b      	add	r3, r1
 8003314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003318:	e00a      	b.n	8003330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4908      	ldr	r1, [pc, #32]	@ (8003340 <__NVIC_SetPriority+0x50>)
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	3b04      	subs	r3, #4
 8003328:	0112      	lsls	r2, r2, #4
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	440b      	add	r3, r1
 800332e:	761a      	strb	r2, [r3, #24]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000e100 	.word	0xe000e100
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	@ 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f1c3 0307 	rsb	r3, r3, #7
 800335e:	2b04      	cmp	r3, #4
 8003360:	bf28      	it	cs
 8003362:	2304      	movcs	r3, #4
 8003364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3304      	adds	r3, #4
 800336a:	2b06      	cmp	r3, #6
 800336c:	d902      	bls.n	8003374 <NVIC_EncodePriority+0x30>
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3b03      	subs	r3, #3
 8003372:	e000      	b.n	8003376 <NVIC_EncodePriority+0x32>
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	f04f 32ff 	mov.w	r2, #4294967295
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	401a      	ands	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800338c:	f04f 31ff 	mov.w	r1, #4294967295
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	43d9      	mvns	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800339c:	4313      	orrs	r3, r2
         );
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3724      	adds	r7, #36	@ 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033bc:	d301      	bcc.n	80033c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033be:	2301      	movs	r3, #1
 80033c0:	e00f      	b.n	80033e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033c2:	4a0a      	ldr	r2, [pc, #40]	@ (80033ec <SysTick_Config+0x40>)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ca:	210f      	movs	r1, #15
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	f7ff ff8e 	bl	80032f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d4:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <SysTick_Config+0x40>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033da:	4b04      	ldr	r3, [pc, #16]	@ (80033ec <SysTick_Config+0x40>)
 80033dc:	2207      	movs	r2, #7
 80033de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	e000e010 	.word	0xe000e010

080033f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff ff29 	bl	8003250 <__NVIC_SetPriorityGrouping>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003418:	f7ff ff3e 	bl	8003298 <__NVIC_GetPriorityGrouping>
 800341c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	6978      	ldr	r0, [r7, #20]
 8003424:	f7ff ff8e 	bl	8003344 <NVIC_EncodePriority>
 8003428:	4602      	mov	r2, r0
 800342a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff5d 	bl	80032f0 <__NVIC_SetPriority>
}
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	4603      	mov	r3, r0
 8003446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ff31 	bl	80032b4 <__NVIC_EnableIRQ>
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff ffa2 	bl	80033ac <SysTick_Config>
 8003468:	4603      	mov	r3, r0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003480:	f7ff fb0c 	bl	8002a9c <HAL_GetTick>
 8003484:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d008      	beq.n	80034a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2280      	movs	r2, #128	@ 0x80
 8003496:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e052      	b.n	800354a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0216 	bic.w	r2, r2, #22
 80034b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d103      	bne.n	80034d4 <HAL_DMA_Abort+0x62>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d007      	beq.n	80034e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0208 	bic.w	r2, r2, #8
 80034e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f4:	e013      	b.n	800351e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034f6:	f7ff fad1 	bl	8002a9c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b05      	cmp	r3, #5
 8003502:	d90c      	bls.n	800351e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2203      	movs	r2, #3
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e015      	b.n	800354a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e4      	bne.n	80034f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003530:	223f      	movs	r2, #63	@ 0x3f
 8003532:	409a      	lsls	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d004      	beq.n	8003570 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2280      	movs	r2, #128	@ 0x80
 800356a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e00c      	b.n	800358a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2205      	movs	r2, #5
 8003574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003598:	b480      	push	{r7}
 800359a:	b089      	sub	sp, #36	@ 0x24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	e159      	b.n	8003868 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035b4:	2201      	movs	r2, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	f040 8148 	bne.w	8003862 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d005      	beq.n	80035ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d130      	bne.n	800364c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	2203      	movs	r2, #3
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003620:	2201      	movs	r2, #1
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 0201 	and.w	r2, r3, #1
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	2b03      	cmp	r3, #3
 8003656:	d017      	beq.n	8003688 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	2203      	movs	r2, #3
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d123      	bne.n	80036dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	08da      	lsrs	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3208      	adds	r2, #8
 800369c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	220f      	movs	r2, #15
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	08da      	lsrs	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3208      	adds	r2, #8
 80036d6:	69b9      	ldr	r1, [r7, #24]
 80036d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	2203      	movs	r2, #3
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0203 	and.w	r2, r3, #3
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a2 	beq.w	8003862 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	4b57      	ldr	r3, [pc, #348]	@ (8003880 <HAL_GPIO_Init+0x2e8>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003726:	4a56      	ldr	r2, [pc, #344]	@ (8003880 <HAL_GPIO_Init+0x2e8>)
 8003728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800372c:	6453      	str	r3, [r2, #68]	@ 0x44
 800372e:	4b54      	ldr	r3, [pc, #336]	@ (8003880 <HAL_GPIO_Init+0x2e8>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800373a:	4a52      	ldr	r2, [pc, #328]	@ (8003884 <HAL_GPIO_Init+0x2ec>)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	089b      	lsrs	r3, r3, #2
 8003740:	3302      	adds	r3, #2
 8003742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	220f      	movs	r2, #15
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a49      	ldr	r2, [pc, #292]	@ (8003888 <HAL_GPIO_Init+0x2f0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d019      	beq.n	800379a <HAL_GPIO_Init+0x202>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a48      	ldr	r2, [pc, #288]	@ (800388c <HAL_GPIO_Init+0x2f4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d013      	beq.n	8003796 <HAL_GPIO_Init+0x1fe>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a47      	ldr	r2, [pc, #284]	@ (8003890 <HAL_GPIO_Init+0x2f8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00d      	beq.n	8003792 <HAL_GPIO_Init+0x1fa>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a46      	ldr	r2, [pc, #280]	@ (8003894 <HAL_GPIO_Init+0x2fc>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d007      	beq.n	800378e <HAL_GPIO_Init+0x1f6>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a45      	ldr	r2, [pc, #276]	@ (8003898 <HAL_GPIO_Init+0x300>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <HAL_GPIO_Init+0x1f2>
 8003786:	2304      	movs	r3, #4
 8003788:	e008      	b.n	800379c <HAL_GPIO_Init+0x204>
 800378a:	2307      	movs	r3, #7
 800378c:	e006      	b.n	800379c <HAL_GPIO_Init+0x204>
 800378e:	2303      	movs	r3, #3
 8003790:	e004      	b.n	800379c <HAL_GPIO_Init+0x204>
 8003792:	2302      	movs	r3, #2
 8003794:	e002      	b.n	800379c <HAL_GPIO_Init+0x204>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <HAL_GPIO_Init+0x204>
 800379a:	2300      	movs	r3, #0
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	f002 0203 	and.w	r2, r2, #3
 80037a2:	0092      	lsls	r2, r2, #2
 80037a4:	4093      	lsls	r3, r2
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037ac:	4935      	ldr	r1, [pc, #212]	@ (8003884 <HAL_GPIO_Init+0x2ec>)
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	089b      	lsrs	r3, r3, #2
 80037b2:	3302      	adds	r3, #2
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ba:	4b38      	ldr	r3, [pc, #224]	@ (800389c <HAL_GPIO_Init+0x304>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037de:	4a2f      	ldr	r2, [pc, #188]	@ (800389c <HAL_GPIO_Init+0x304>)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037e4:	4b2d      	ldr	r3, [pc, #180]	@ (800389c <HAL_GPIO_Init+0x304>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003808:	4a24      	ldr	r2, [pc, #144]	@ (800389c <HAL_GPIO_Init+0x304>)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800380e:	4b23      	ldr	r3, [pc, #140]	@ (800389c <HAL_GPIO_Init+0x304>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	43db      	mvns	r3, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4013      	ands	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003832:	4a1a      	ldr	r2, [pc, #104]	@ (800389c <HAL_GPIO_Init+0x304>)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003838:	4b18      	ldr	r3, [pc, #96]	@ (800389c <HAL_GPIO_Init+0x304>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800385c:	4a0f      	ldr	r2, [pc, #60]	@ (800389c <HAL_GPIO_Init+0x304>)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	3301      	adds	r3, #1
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	2b0f      	cmp	r3, #15
 800386c:	f67f aea2 	bls.w	80035b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	3724      	adds	r7, #36	@ 0x24
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800
 8003884:	40013800 	.word	0x40013800
 8003888:	40020000 	.word	0x40020000
 800388c:	40020400 	.word	0x40020400
 8003890:	40020800 	.word	0x40020800
 8003894:	40020c00 	.word	0x40020c00
 8003898:	40021000 	.word	0x40021000
 800389c:	40013c00 	.word	0x40013c00

080038a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	887b      	ldrh	r3, [r7, #2]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
 80038bc:	e001      	b.n	80038c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038be:	2300      	movs	r3, #0
 80038c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	807b      	strh	r3, [r7, #2]
 80038dc:	4613      	mov	r3, r2
 80038de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038e0:	787b      	ldrb	r3, [r7, #1]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038e6:	887a      	ldrh	r2, [r7, #2]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038ec:	e003      	b.n	80038f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038ee:	887b      	ldrh	r3, [r7, #2]
 80038f0:	041a      	lsls	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	619a      	str	r2, [r3, #24]
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800390e:	4b08      	ldr	r3, [pc, #32]	@ (8003930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d006      	beq.n	8003928 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800391a:	4a05      	ldr	r2, [pc, #20]	@ (8003930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f806 	bl	8003934 <HAL_GPIO_EXTI_Callback>
  }
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40013c00 	.word	0x40013c00

08003934 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e12b      	b.n	8003bb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fe fd00 	bl	8002378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2224      	movs	r2, #36	@ 0x24
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800399e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039b0:	f001 f8da 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 80039b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4a81      	ldr	r2, [pc, #516]	@ (8003bc0 <HAL_I2C_Init+0x274>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d807      	bhi.n	80039d0 <HAL_I2C_Init+0x84>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a80      	ldr	r2, [pc, #512]	@ (8003bc4 <HAL_I2C_Init+0x278>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	bf94      	ite	ls
 80039c8:	2301      	movls	r3, #1
 80039ca:	2300      	movhi	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	e006      	b.n	80039de <HAL_I2C_Init+0x92>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4a7d      	ldr	r2, [pc, #500]	@ (8003bc8 <HAL_I2C_Init+0x27c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	bf94      	ite	ls
 80039d8:	2301      	movls	r3, #1
 80039da:	2300      	movhi	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0e7      	b.n	8003bb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4a78      	ldr	r2, [pc, #480]	@ (8003bcc <HAL_I2C_Init+0x280>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	0c9b      	lsrs	r3, r3, #18
 80039f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4a6a      	ldr	r2, [pc, #424]	@ (8003bc0 <HAL_I2C_Init+0x274>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d802      	bhi.n	8003a20 <HAL_I2C_Init+0xd4>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	e009      	b.n	8003a34 <HAL_I2C_Init+0xe8>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
 8003a2a:	4a69      	ldr	r2, [pc, #420]	@ (8003bd0 <HAL_I2C_Init+0x284>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	099b      	lsrs	r3, r3, #6
 8003a32:	3301      	adds	r3, #1
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	495c      	ldr	r1, [pc, #368]	@ (8003bc0 <HAL_I2C_Init+0x274>)
 8003a50:	428b      	cmp	r3, r1
 8003a52:	d819      	bhi.n	8003a88 <HAL_I2C_Init+0x13c>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1e59      	subs	r1, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a62:	1c59      	adds	r1, r3, #1
 8003a64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a68:	400b      	ands	r3, r1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_I2C_Init+0x138>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1e59      	subs	r1, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a82:	e051      	b.n	8003b28 <HAL_I2C_Init+0x1dc>
 8003a84:	2304      	movs	r3, #4
 8003a86:	e04f      	b.n	8003b28 <HAL_I2C_Init+0x1dc>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d111      	bne.n	8003ab4 <HAL_I2C_Init+0x168>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1e58      	subs	r0, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	440b      	add	r3, r1
 8003a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
 8003aae:	2300      	movne	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e012      	b.n	8003ada <HAL_I2C_Init+0x18e>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1e58      	subs	r0, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	0099      	lsls	r1, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Init+0x196>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e022      	b.n	8003b28 <HAL_I2C_Init+0x1dc>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10e      	bne.n	8003b08 <HAL_I2C_Init+0x1bc>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1e58      	subs	r0, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6859      	ldr	r1, [r3, #4]
 8003af2:	460b      	mov	r3, r1
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	440b      	add	r3, r1
 8003af8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afc:	3301      	adds	r3, #1
 8003afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b06:	e00f      	b.n	8003b28 <HAL_I2C_Init+0x1dc>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1e58      	subs	r0, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6859      	ldr	r1, [r3, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	0099      	lsls	r1, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	6809      	ldr	r1, [r1, #0]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69da      	ldr	r2, [r3, #28]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6911      	ldr	r1, [r2, #16]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68d2      	ldr	r2, [r2, #12]
 8003b62:	4311      	orrs	r1, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	000186a0 	.word	0x000186a0
 8003bc4:	001e847f 	.word	0x001e847f
 8003bc8:	003d08ff 	.word	0x003d08ff
 8003bcc:	431bde83 	.word	0x431bde83
 8003bd0:	10624dd3 	.word	0x10624dd3

08003bd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	461a      	mov	r2, r3
 8003be0:	460b      	mov	r3, r1
 8003be2:	817b      	strh	r3, [r7, #10]
 8003be4:	4613      	mov	r3, r2
 8003be6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003be8:	f7fe ff58 	bl	8002a9c <HAL_GetTick>
 8003bec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	f040 80e0 	bne.w	8003dbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2319      	movs	r3, #25
 8003c02:	2201      	movs	r2, #1
 8003c04:	4970      	ldr	r1, [pc, #448]	@ (8003dc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f964 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c12:	2302      	movs	r3, #2
 8003c14:	e0d3      	b.n	8003dbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_I2C_Master_Transmit+0x50>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e0cc      	b.n	8003dbe <HAL_I2C_Master_Transmit+0x1ea>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d007      	beq.n	8003c4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2221      	movs	r2, #33	@ 0x21
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2210      	movs	r2, #16
 8003c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	893a      	ldrh	r2, [r7, #8]
 8003c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4a50      	ldr	r2, [pc, #320]	@ (8003dcc <HAL_I2C_Master_Transmit+0x1f8>)
 8003c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c8c:	8979      	ldrh	r1, [r7, #10]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	6a3a      	ldr	r2, [r7, #32]
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f89c 	bl	8003dd0 <I2C_MasterRequestWrite>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e08d      	b.n	8003dbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003cb8:	e066      	b.n	8003d88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	6a39      	ldr	r1, [r7, #32]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fa22 	bl	8004108 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d107      	bne.n	8003ce2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e06b      	b.n	8003dbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d11b      	bne.n	8003d5c <HAL_I2C_Master_Transmit+0x188>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d017      	beq.n	8003d5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	781a      	ldrb	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	6a39      	ldr	r1, [r7, #32]
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fa19 	bl	8004198 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00d      	beq.n	8003d88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d107      	bne.n	8003d84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e01a      	b.n	8003dbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d194      	bne.n	8003cba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	00100002 	.word	0x00100002
 8003dcc:	ffff0000 	.word	0xffff0000

08003dd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d006      	beq.n	8003dfa <I2C_MasterRequestWrite+0x2a>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d003      	beq.n	8003dfa <I2C_MasterRequestWrite+0x2a>
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003df8:	d108      	bne.n	8003e0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	e00b      	b.n	8003e24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e10:	2b12      	cmp	r3, #18
 8003e12:	d107      	bne.n	8003e24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f84f 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00d      	beq.n	8003e58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e4a:	d103      	bne.n	8003e54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e035      	b.n	8003ec4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e60:	d108      	bne.n	8003e74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e62:	897b      	ldrh	r3, [r7, #10]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e70:	611a      	str	r2, [r3, #16]
 8003e72:	e01b      	b.n	8003eac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e74:	897b      	ldrh	r3, [r7, #10]
 8003e76:	11db      	asrs	r3, r3, #7
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	f003 0306 	and.w	r3, r3, #6
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	f063 030f 	orn	r3, r3, #15
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	490e      	ldr	r1, [pc, #56]	@ (8003ecc <I2C_MasterRequestWrite+0xfc>)
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f898 	bl	8003fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e010      	b.n	8003ec4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ea2:	897b      	ldrh	r3, [r7, #10]
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	4907      	ldr	r1, [pc, #28]	@ (8003ed0 <I2C_MasterRequestWrite+0x100>)
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f888 	bl	8003fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	00010008 	.word	0x00010008
 8003ed0:	00010002 	.word	0x00010002

08003ed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee4:	e048      	b.n	8003f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d044      	beq.n	8003f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fe fdd5 	bl	8002a9c <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d139      	bne.n	8003f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	0c1b      	lsrs	r3, r3, #16
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d10d      	bne.n	8003f2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	43da      	mvns	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf0c      	ite	eq
 8003f20:	2301      	moveq	r3, #1
 8003f22:	2300      	movne	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	e00c      	b.n	8003f44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	43da      	mvns	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4013      	ands	r3, r2
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d116      	bne.n	8003f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e023      	b.n	8003fc0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	0c1b      	lsrs	r3, r3, #16
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d10d      	bne.n	8003f9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	e00c      	b.n	8003fb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	43da      	mvns	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d093      	beq.n	8003ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fd6:	e071      	b.n	80040bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fe6:	d123      	bne.n	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004000:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401c:	f043 0204 	orr.w	r2, r3, #4
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e067      	b.n	8004100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004036:	d041      	beq.n	80040bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004038:	f7fe fd30 	bl	8002a9c <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d302      	bcc.n	800404e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d136      	bne.n	80040bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d10c      	bne.n	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	43da      	mvns	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4013      	ands	r3, r2
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	e00b      	b.n	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	43da      	mvns	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4013      	ands	r3, r2
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf14      	ite	ne
 8004084:	2301      	movne	r3, #1
 8004086:	2300      	moveq	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d016      	beq.n	80040bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	f043 0220 	orr.w	r2, r3, #32
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e021      	b.n	8004100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	0c1b      	lsrs	r3, r3, #16
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d10c      	bne.n	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	43da      	mvns	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4013      	ands	r3, r2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf14      	ite	ne
 80040d8:	2301      	movne	r3, #1
 80040da:	2300      	moveq	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	e00b      	b.n	80040f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	43da      	mvns	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4013      	ands	r3, r2
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf14      	ite	ne
 80040f2:	2301      	movne	r3, #1
 80040f4:	2300      	moveq	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f47f af6d 	bne.w	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004114:	e034      	b.n	8004180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f886 	bl	8004228 <I2C_IsAcknowledgeFailed>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e034      	b.n	8004190 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d028      	beq.n	8004180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412e:	f7fe fcb5 	bl	8002a9c <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	429a      	cmp	r2, r3
 800413c:	d302      	bcc.n	8004144 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d11d      	bne.n	8004180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800414e:	2b80      	cmp	r3, #128	@ 0x80
 8004150:	d016      	beq.n	8004180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	f043 0220 	orr.w	r2, r3, #32
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e007      	b.n	8004190 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418a:	2b80      	cmp	r3, #128	@ 0x80
 800418c:	d1c3      	bne.n	8004116 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041a4:	e034      	b.n	8004210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f83e 	bl	8004228 <I2C_IsAcknowledgeFailed>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e034      	b.n	8004220 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d028      	beq.n	8004210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041be:	f7fe fc6d 	bl	8002a9c <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d302      	bcc.n	80041d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d11d      	bne.n	8004210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d016      	beq.n	8004210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fc:	f043 0220 	orr.w	r2, r3, #32
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e007      	b.n	8004220 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b04      	cmp	r3, #4
 800421c:	d1c3      	bne.n	80041a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800423a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423e:	d11b      	bne.n	8004278 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004248:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004264:	f043 0204 	orr.w	r2, r3, #4
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e267      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d075      	beq.n	8004392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042a6:	4b88      	ldr	r3, [pc, #544]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d00c      	beq.n	80042cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b2:	4b85      	ldr	r3, [pc, #532]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d112      	bne.n	80042e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042be:	4b82      	ldr	r3, [pc, #520]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ca:	d10b      	bne.n	80042e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	4b7e      	ldr	r3, [pc, #504]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d05b      	beq.n	8004390 <HAL_RCC_OscConfig+0x108>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d157      	bne.n	8004390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e242      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ec:	d106      	bne.n	80042fc <HAL_RCC_OscConfig+0x74>
 80042ee:	4b76      	ldr	r3, [pc, #472]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a75      	ldr	r2, [pc, #468]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e01d      	b.n	8004338 <HAL_RCC_OscConfig+0xb0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x98>
 8004306:	4b70      	ldr	r3, [pc, #448]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a6f      	ldr	r2, [pc, #444]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800430c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b6d      	ldr	r3, [pc, #436]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a6c      	ldr	r2, [pc, #432]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0xb0>
 8004320:	4b69      	ldr	r3, [pc, #420]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a68      	ldr	r2, [pc, #416]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b66      	ldr	r3, [pc, #408]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a65      	ldr	r2, [pc, #404]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fe fbac 	bl	8002a9c <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004348:	f7fe fba8 	bl	8002a9c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	@ 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e207      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	4b5b      	ldr	r3, [pc, #364]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0xc0>
 8004366:	e014      	b.n	8004392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fe fb98 	bl	8002a9c <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004370:	f7fe fb94 	bl	8002a9c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	@ 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e1f3      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	4b51      	ldr	r3, [pc, #324]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0xe8>
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d063      	beq.n	8004466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800439e:	4b4a      	ldr	r3, [pc, #296]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043aa:	4b47      	ldr	r3, [pc, #284]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d11c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b6:	4b44      	ldr	r3, [pc, #272]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d116      	bne.n	80043f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	4b41      	ldr	r3, [pc, #260]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_RCC_OscConfig+0x152>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e1c7      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043da:	4b3b      	ldr	r3, [pc, #236]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4937      	ldr	r1, [pc, #220]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	e03a      	b.n	8004466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d020      	beq.n	800443a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f8:	4b34      	ldr	r3, [pc, #208]	@ (80044cc <HAL_RCC_OscConfig+0x244>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7fe fb4d 	bl	8002a9c <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004406:	f7fe fb49 	bl	8002a9c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e1a8      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004418:	4b2b      	ldr	r3, [pc, #172]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004424:	4b28      	ldr	r3, [pc, #160]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4925      	ldr	r1, [pc, #148]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004434:	4313      	orrs	r3, r2
 8004436:	600b      	str	r3, [r1, #0]
 8004438:	e015      	b.n	8004466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443a:	4b24      	ldr	r3, [pc, #144]	@ (80044cc <HAL_RCC_OscConfig+0x244>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fe fb2c 	bl	8002a9c <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004448:	f7fe fb28 	bl	8002a9c <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e187      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	4b1b      	ldr	r3, [pc, #108]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d036      	beq.n	80044e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447a:	4b15      	ldr	r3, [pc, #84]	@ (80044d0 <HAL_RCC_OscConfig+0x248>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fe fb0c 	bl	8002a9c <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004488:	f7fe fb08 	bl	8002a9c <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e167      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449a:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800449c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x200>
 80044a6:	e01b      	b.n	80044e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a8:	4b09      	ldr	r3, [pc, #36]	@ (80044d0 <HAL_RCC_OscConfig+0x248>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ae:	f7fe faf5 	bl	8002a9c <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b4:	e00e      	b.n	80044d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b6:	f7fe faf1 	bl	8002a9c <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d907      	bls.n	80044d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e150      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
 80044c8:	40023800 	.word	0x40023800
 80044cc:	42470000 	.word	0x42470000
 80044d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d4:	4b88      	ldr	r3, [pc, #544]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80044d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1ea      	bne.n	80044b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8097 	beq.w	800461c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ee:	2300      	movs	r3, #0
 80044f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f2:	4b81      	ldr	r3, [pc, #516]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10f      	bne.n	800451e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fe:	2300      	movs	r3, #0
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	4b7d      	ldr	r3, [pc, #500]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	4a7c      	ldr	r2, [pc, #496]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800450c:	6413      	str	r3, [r2, #64]	@ 0x40
 800450e:	4b7a      	ldr	r3, [pc, #488]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451a:	2301      	movs	r3, #1
 800451c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451e:	4b77      	ldr	r3, [pc, #476]	@ (80046fc <HAL_RCC_OscConfig+0x474>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004526:	2b00      	cmp	r3, #0
 8004528:	d118      	bne.n	800455c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452a:	4b74      	ldr	r3, [pc, #464]	@ (80046fc <HAL_RCC_OscConfig+0x474>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a73      	ldr	r2, [pc, #460]	@ (80046fc <HAL_RCC_OscConfig+0x474>)
 8004530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004536:	f7fe fab1 	bl	8002a9c <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453e:	f7fe faad 	bl	8002a9c <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e10c      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004550:	4b6a      	ldr	r3, [pc, #424]	@ (80046fc <HAL_RCC_OscConfig+0x474>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d106      	bne.n	8004572 <HAL_RCC_OscConfig+0x2ea>
 8004564:	4b64      	ldr	r3, [pc, #400]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004568:	4a63      	ldr	r2, [pc, #396]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004570:	e01c      	b.n	80045ac <HAL_RCC_OscConfig+0x324>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b05      	cmp	r3, #5
 8004578:	d10c      	bne.n	8004594 <HAL_RCC_OscConfig+0x30c>
 800457a:	4b5f      	ldr	r3, [pc, #380]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457e:	4a5e      	ldr	r2, [pc, #376]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004580:	f043 0304 	orr.w	r3, r3, #4
 8004584:	6713      	str	r3, [r2, #112]	@ 0x70
 8004586:	4b5c      	ldr	r3, [pc, #368]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458a:	4a5b      	ldr	r2, [pc, #364]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	6713      	str	r3, [r2, #112]	@ 0x70
 8004592:	e00b      	b.n	80045ac <HAL_RCC_OscConfig+0x324>
 8004594:	4b58      	ldr	r3, [pc, #352]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004598:	4a57      	ldr	r2, [pc, #348]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a0:	4b55      	ldr	r3, [pc, #340]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a4:	4a54      	ldr	r2, [pc, #336]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80045a6:	f023 0304 	bic.w	r3, r3, #4
 80045aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d015      	beq.n	80045e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b4:	f7fe fa72 	bl	8002a9c <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045bc:	f7fe fa6e 	bl	8002a9c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e0cb      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d2:	4b49      	ldr	r3, [pc, #292]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0ee      	beq.n	80045bc <HAL_RCC_OscConfig+0x334>
 80045de:	e014      	b.n	800460a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e0:	f7fe fa5c 	bl	8002a9c <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fe fa58 	bl	8002a9c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e0b5      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fe:	4b3e      	ldr	r3, [pc, #248]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1ee      	bne.n	80045e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d105      	bne.n	800461c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004610:	4b39      	ldr	r3, [pc, #228]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004614:	4a38      	ldr	r2, [pc, #224]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800461a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80a1 	beq.w	8004768 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004626:	4b34      	ldr	r3, [pc, #208]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
 800462e:	2b08      	cmp	r3, #8
 8004630:	d05c      	beq.n	80046ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d141      	bne.n	80046be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463a:	4b31      	ldr	r3, [pc, #196]	@ (8004700 <HAL_RCC_OscConfig+0x478>)
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7fe fa2c 	bl	8002a9c <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004648:	f7fe fa28 	bl	8002a9c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e087      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465a:	4b27      	ldr	r3, [pc, #156]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69da      	ldr	r2, [r3, #28]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	019b      	lsls	r3, r3, #6
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	3b01      	subs	r3, #1
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	491b      	ldr	r1, [pc, #108]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004690:	4b1b      	ldr	r3, [pc, #108]	@ (8004700 <HAL_RCC_OscConfig+0x478>)
 8004692:	2201      	movs	r2, #1
 8004694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004696:	f7fe fa01 	bl	8002a9c <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469e:	f7fe f9fd 	bl	8002a9c <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e05c      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b0:	4b11      	ldr	r3, [pc, #68]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <HAL_RCC_OscConfig+0x416>
 80046bc:	e054      	b.n	8004768 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046be:	4b10      	ldr	r3, [pc, #64]	@ (8004700 <HAL_RCC_OscConfig+0x478>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c4:	f7fe f9ea 	bl	8002a9c <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046cc:	f7fe f9e6 	bl	8002a9c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e045      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046de:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0x444>
 80046ea:	e03d      	b.n	8004768 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d107      	bne.n	8004704 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e038      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40007000 	.word	0x40007000
 8004700:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004704:	4b1b      	ldr	r3, [pc, #108]	@ (8004774 <HAL_RCC_OscConfig+0x4ec>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d028      	beq.n	8004764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800471c:	429a      	cmp	r2, r3
 800471e:	d121      	bne.n	8004764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472a:	429a      	cmp	r2, r3
 800472c:	d11a      	bne.n	8004764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004734:	4013      	ands	r3, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800473a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800473c:	4293      	cmp	r3, r2
 800473e:	d111      	bne.n	8004764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474a:	085b      	lsrs	r3, r3, #1
 800474c:	3b01      	subs	r3, #1
 800474e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d107      	bne.n	8004764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d001      	beq.n	8004768 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800

08004778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0cc      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800478c:	4b68      	ldr	r3, [pc, #416]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d90c      	bls.n	80047b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479a:	4b65      	ldr	r3, [pc, #404]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b63      	ldr	r3, [pc, #396]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d001      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0b8      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d020      	beq.n	8004802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047cc:	4b59      	ldr	r3, [pc, #356]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a58      	ldr	r2, [pc, #352]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e4:	4b53      	ldr	r3, [pc, #332]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a52      	ldr	r2, [pc, #328]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f0:	4b50      	ldr	r3, [pc, #320]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	494d      	ldr	r1, [pc, #308]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d044      	beq.n	8004898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d107      	bne.n	8004826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004816:	4b47      	ldr	r3, [pc, #284]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d119      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e07f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d003      	beq.n	8004836 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004832:	2b03      	cmp	r3, #3
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004836:	4b3f      	ldr	r3, [pc, #252]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e06f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004846:	4b3b      	ldr	r3, [pc, #236]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e067      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004856:	4b37      	ldr	r3, [pc, #220]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 0203 	bic.w	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	4934      	ldr	r1, [pc, #208]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	4313      	orrs	r3, r2
 8004866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004868:	f7fe f918 	bl	8002a9c <HAL_GetTick>
 800486c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486e:	e00a      	b.n	8004886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004870:	f7fe f914 	bl	8002a9c <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e04f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004886:	4b2b      	ldr	r3, [pc, #172]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 020c 	and.w	r2, r3, #12
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	429a      	cmp	r2, r3
 8004896:	d1eb      	bne.n	8004870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004898:	4b25      	ldr	r3, [pc, #148]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d20c      	bcs.n	80048c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	4b22      	ldr	r3, [pc, #136]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b20      	ldr	r3, [pc, #128]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e032      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048cc:	4b19      	ldr	r3, [pc, #100]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4916      	ldr	r1, [pc, #88]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ea:	4b12      	ldr	r3, [pc, #72]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	490e      	ldr	r1, [pc, #56]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048fe:	f000 f821 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 8004902:	4602      	mov	r2, r0
 8004904:	4b0b      	ldr	r3, [pc, #44]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	490a      	ldr	r1, [pc, #40]	@ (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 8004910:	5ccb      	ldrb	r3, [r1, r3]
 8004912:	fa22 f303 	lsr.w	r3, r2, r3
 8004916:	4a09      	ldr	r2, [pc, #36]	@ (800493c <HAL_RCC_ClockConfig+0x1c4>)
 8004918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800491a:	4b09      	ldr	r3, [pc, #36]	@ (8004940 <HAL_RCC_ClockConfig+0x1c8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe f878 	bl	8002a14 <HAL_InitTick>

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40023c00 	.word	0x40023c00
 8004934:	40023800 	.word	0x40023800
 8004938:	08009170 	.word	0x08009170
 800493c:	20000018 	.word	0x20000018
 8004940:	2000001c 	.word	0x2000001c

08004944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004948:	b094      	sub	sp, #80	@ 0x50
 800494a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800495c:	4b79      	ldr	r3, [pc, #484]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 030c 	and.w	r3, r3, #12
 8004964:	2b08      	cmp	r3, #8
 8004966:	d00d      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0x40>
 8004968:	2b08      	cmp	r3, #8
 800496a:	f200 80e1 	bhi.w	8004b30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x34>
 8004972:	2b04      	cmp	r3, #4
 8004974:	d003      	beq.n	800497e <HAL_RCC_GetSysClockFreq+0x3a>
 8004976:	e0db      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004978:	4b73      	ldr	r3, [pc, #460]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x204>)
 800497a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800497c:	e0db      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800497e:	4b73      	ldr	r3, [pc, #460]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x208>)
 8004980:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004982:	e0d8      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004984:	4b6f      	ldr	r3, [pc, #444]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800498c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800498e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d063      	beq.n	8004a62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	099b      	lsrs	r3, r3, #6
 80049a0:	2200      	movs	r2, #0
 80049a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ae:	2300      	movs	r3, #0
 80049b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049b6:	4622      	mov	r2, r4
 80049b8:	462b      	mov	r3, r5
 80049ba:	f04f 0000 	mov.w	r0, #0
 80049be:	f04f 0100 	mov.w	r1, #0
 80049c2:	0159      	lsls	r1, r3, #5
 80049c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c8:	0150      	lsls	r0, r2, #5
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4621      	mov	r1, r4
 80049d0:	1a51      	subs	r1, r2, r1
 80049d2:	6139      	str	r1, [r7, #16]
 80049d4:	4629      	mov	r1, r5
 80049d6:	eb63 0301 	sbc.w	r3, r3, r1
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049e8:	4659      	mov	r1, fp
 80049ea:	018b      	lsls	r3, r1, #6
 80049ec:	4651      	mov	r1, sl
 80049ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049f2:	4651      	mov	r1, sl
 80049f4:	018a      	lsls	r2, r1, #6
 80049f6:	4651      	mov	r1, sl
 80049f8:	ebb2 0801 	subs.w	r8, r2, r1
 80049fc:	4659      	mov	r1, fp
 80049fe:	eb63 0901 	sbc.w	r9, r3, r1
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a16:	4690      	mov	r8, r2
 8004a18:	4699      	mov	r9, r3
 8004a1a:	4623      	mov	r3, r4
 8004a1c:	eb18 0303 	adds.w	r3, r8, r3
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	462b      	mov	r3, r5
 8004a24:	eb49 0303 	adc.w	r3, r9, r3
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a36:	4629      	mov	r1, r5
 8004a38:	024b      	lsls	r3, r1, #9
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a40:	4621      	mov	r1, r4
 8004a42:	024a      	lsls	r2, r1, #9
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a54:	f7fb fc2c 	bl	80002b0 <__aeabi_uldivmod>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a60:	e058      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a62:	4b38      	ldr	r3, [pc, #224]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	099b      	lsrs	r3, r3, #6
 8004a68:	2200      	movs	r2, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a72:	623b      	str	r3, [r7, #32]
 8004a74:	2300      	movs	r3, #0
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a7c:	4642      	mov	r2, r8
 8004a7e:	464b      	mov	r3, r9
 8004a80:	f04f 0000 	mov.w	r0, #0
 8004a84:	f04f 0100 	mov.w	r1, #0
 8004a88:	0159      	lsls	r1, r3, #5
 8004a8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a8e:	0150      	lsls	r0, r2, #5
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4641      	mov	r1, r8
 8004a96:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004aac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ab0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ab4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ab8:	eb63 050b 	sbc.w	r5, r3, fp
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	00eb      	lsls	r3, r5, #3
 8004ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aca:	00e2      	lsls	r2, r4, #3
 8004acc:	4614      	mov	r4, r2
 8004ace:	461d      	mov	r5, r3
 8004ad0:	4643      	mov	r3, r8
 8004ad2:	18e3      	adds	r3, r4, r3
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	eb45 0303 	adc.w	r3, r5, r3
 8004adc:	607b      	str	r3, [r7, #4]
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aea:	4629      	mov	r1, r5
 8004aec:	028b      	lsls	r3, r1, #10
 8004aee:	4621      	mov	r1, r4
 8004af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004af4:	4621      	mov	r1, r4
 8004af6:	028a      	lsls	r2, r1, #10
 8004af8:	4610      	mov	r0, r2
 8004afa:	4619      	mov	r1, r3
 8004afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004afe:	2200      	movs	r2, #0
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	61fa      	str	r2, [r7, #28]
 8004b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b08:	f7fb fbd2 	bl	80002b0 <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4613      	mov	r3, r2
 8004b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b14:	4b0b      	ldr	r3, [pc, #44]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	0c1b      	lsrs	r3, r3, #16
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	3301      	adds	r3, #1
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b2e:	e002      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b30:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3750      	adds	r7, #80	@ 0x50
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	00f42400 	.word	0x00f42400
 8004b4c:	007a1200 	.word	0x007a1200

08004b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b54:	4b03      	ldr	r3, [pc, #12]	@ (8004b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b56:	681b      	ldr	r3, [r3, #0]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000018 	.word	0x20000018

08004b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b6c:	f7ff fff0 	bl	8004b50 <HAL_RCC_GetHCLKFreq>
 8004b70:	4602      	mov	r2, r0
 8004b72:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	0a9b      	lsrs	r3, r3, #10
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	4903      	ldr	r1, [pc, #12]	@ (8004b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b7e:	5ccb      	ldrb	r3, [r1, r3]
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	08009180 	.word	0x08009180

08004b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b94:	f7ff ffdc 	bl	8004b50 <HAL_RCC_GetHCLKFreq>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	4b05      	ldr	r3, [pc, #20]	@ (8004bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	0b5b      	lsrs	r3, r3, #13
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	4903      	ldr	r1, [pc, #12]	@ (8004bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ba6:	5ccb      	ldrb	r3, [r1, r3]
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	08009180 	.word	0x08009180

08004bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e07b      	b.n	8004cc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d108      	bne.n	8004be4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bda:	d009      	beq.n	8004bf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	61da      	str	r2, [r3, #28]
 8004be2:	e005      	b.n	8004bf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fd fbfc 	bl	8002408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c74:	ea42 0103 	orr.w	r1, r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	f003 0104 	and.w	r1, r3, #4
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	f003 0210 	and.w	r2, r3, #16
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b088      	sub	sp, #32
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cda:	f7fd fedf 	bl	8002a9c <HAL_GetTick>
 8004cde:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004ce0:	88fb      	ldrh	r3, [r7, #6]
 8004ce2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d001      	beq.n	8004cf4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e12a      	b.n	8004f4a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_SPI_Transmit+0x36>
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e122      	b.n	8004f4a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_SPI_Transmit+0x48>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e11b      	b.n	8004f4a <HAL_SPI_Transmit+0x280>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	88fa      	ldrh	r2, [r7, #6]
 8004d32:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	88fa      	ldrh	r2, [r7, #6]
 8004d38:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d60:	d10f      	bne.n	8004d82 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8c:	2b40      	cmp	r3, #64	@ 0x40
 8004d8e:	d007      	beq.n	8004da0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004da8:	d152      	bne.n	8004e50 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_SPI_Transmit+0xee>
 8004db2:	8b7b      	ldrh	r3, [r7, #26]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d145      	bne.n	8004e44 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dbc:	881a      	ldrh	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc8:	1c9a      	adds	r2, r3, #2
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ddc:	e032      	b.n	8004e44 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d112      	bne.n	8004e12 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df0:	881a      	ldrh	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfc:	1c9a      	adds	r2, r3, #2
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e10:	e018      	b.n	8004e44 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e12:	f7fd fe43 	bl	8002a9c <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d803      	bhi.n	8004e2a <HAL_SPI_Transmit+0x160>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d102      	bne.n	8004e30 <HAL_SPI_Transmit+0x166>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d109      	bne.n	8004e44 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e082      	b.n	8004f4a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1c7      	bne.n	8004dde <HAL_SPI_Transmit+0x114>
 8004e4e:	e053      	b.n	8004ef8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <HAL_SPI_Transmit+0x194>
 8004e58:	8b7b      	ldrh	r3, [r7, #26]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d147      	bne.n	8004eee <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	330c      	adds	r3, #12
 8004e68:	7812      	ldrb	r2, [r2, #0]
 8004e6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e84:	e033      	b.n	8004eee <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d113      	bne.n	8004ebc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	7812      	ldrb	r2, [r2, #0]
 8004ea0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004eba:	e018      	b.n	8004eee <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ebc:	f7fd fdee 	bl	8002a9c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d803      	bhi.n	8004ed4 <HAL_SPI_Transmit+0x20a>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d102      	bne.n	8004eda <HAL_SPI_Transmit+0x210>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e02d      	b.n	8004f4a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1c6      	bne.n	8004e86 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	6839      	ldr	r1, [r7, #0]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fbd9 	bl	80056b4 <SPI_EndRxTxTransaction>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10a      	bne.n	8004f2c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004f48:	2300      	movs	r3, #0
  }
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b088      	sub	sp, #32
 8004f56:	af02      	add	r7, sp, #8
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d001      	beq.n	8004f72 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e104      	b.n	800517c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_SPI_Receive+0x2c>
 8004f78:	88fb      	ldrh	r3, [r7, #6]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e0fc      	b.n	800517c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f8a:	d112      	bne.n	8004fb2 <HAL_SPI_Receive+0x60>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10e      	bne.n	8004fb2 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2204      	movs	r2, #4
 8004f98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f9c:	88fa      	ldrh	r2, [r7, #6]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f8eb 	bl	8005184 <HAL_SPI_TransmitReceive>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	e0e4      	b.n	800517c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fb2:	f7fd fd73 	bl	8002a9c <HAL_GetTick>
 8004fb6:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_SPI_Receive+0x74>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e0da      	b.n	800517c <HAL_SPI_Receive+0x22a>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	88fa      	ldrh	r2, [r7, #6]
 8004fe6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	88fa      	ldrh	r2, [r7, #6]
 8004fec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005014:	d10f      	bne.n	8005036 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005024:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005034:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005040:	2b40      	cmp	r3, #64	@ 0x40
 8005042:	d007      	beq.n	8005054 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005052:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d170      	bne.n	800513e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800505c:	e035      	b.n	80050ca <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b01      	cmp	r3, #1
 800506a:	d115      	bne.n	8005098 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f103 020c 	add.w	r2, r3, #12
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005078:	7812      	ldrb	r2, [r2, #0]
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005096:	e018      	b.n	80050ca <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005098:	f7fd fd00 	bl	8002a9c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d803      	bhi.n	80050b0 <HAL_SPI_Receive+0x15e>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d102      	bne.n	80050b6 <HAL_SPI_Receive+0x164>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e058      	b.n	800517c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1c4      	bne.n	800505e <HAL_SPI_Receive+0x10c>
 80050d4:	e038      	b.n	8005148 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d113      	bne.n	800510c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ee:	b292      	uxth	r2, r2
 80050f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f6:	1c9a      	adds	r2, r3, #2
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800510a:	e018      	b.n	800513e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800510c:	f7fd fcc6 	bl	8002a9c <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d803      	bhi.n	8005124 <HAL_SPI_Receive+0x1d2>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005122:	d102      	bne.n	800512a <HAL_SPI_Receive+0x1d8>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d109      	bne.n	800513e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e01e      	b.n	800517c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005142:	b29b      	uxth	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1c6      	bne.n	80050d6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	6839      	ldr	r1, [r7, #0]
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 fa4b 	bl	80055e8 <SPI_EndRxTransaction>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800517a:	2300      	movs	r3, #0
  }
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08a      	sub	sp, #40	@ 0x28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005192:	2301      	movs	r3, #1
 8005194:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005196:	f7fd fc81 	bl	8002a9c <HAL_GetTick>
 800519a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051a2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80051aa:	887b      	ldrh	r3, [r7, #2]
 80051ac:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80051ae:	7ffb      	ldrb	r3, [r7, #31]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d00c      	beq.n	80051ce <HAL_SPI_TransmitReceive+0x4a>
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051ba:	d106      	bne.n	80051ca <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <HAL_SPI_TransmitReceive+0x46>
 80051c4:	7ffb      	ldrb	r3, [r7, #31]
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d001      	beq.n	80051ce <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80051ca:	2302      	movs	r3, #2
 80051cc:	e17f      	b.n	80054ce <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d005      	beq.n	80051e0 <HAL_SPI_TransmitReceive+0x5c>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <HAL_SPI_TransmitReceive+0x5c>
 80051da:	887b      	ldrh	r3, [r7, #2]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e174      	b.n	80054ce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_SPI_TransmitReceive+0x6e>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e16d      	b.n	80054ce <HAL_SPI_TransmitReceive+0x34a>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b04      	cmp	r3, #4
 8005204:	d003      	beq.n	800520e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2205      	movs	r2, #5
 800520a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	887a      	ldrh	r2, [r7, #2]
 800521e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	887a      	ldrh	r2, [r7, #2]
 8005224:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	887a      	ldrh	r2, [r7, #2]
 8005230:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	887a      	ldrh	r2, [r7, #2]
 8005236:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800524e:	2b40      	cmp	r3, #64	@ 0x40
 8005250:	d007      	beq.n	8005262 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005260:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800526a:	d17e      	bne.n	800536a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <HAL_SPI_TransmitReceive+0xf6>
 8005274:	8afb      	ldrh	r3, [r7, #22]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d16c      	bne.n	8005354 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527e:	881a      	ldrh	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528a:	1c9a      	adds	r2, r3, #2
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800529e:	e059      	b.n	8005354 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d11b      	bne.n	80052e6 <HAL_SPI_TransmitReceive+0x162>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d016      	beq.n	80052e6 <HAL_SPI_TransmitReceive+0x162>
 80052b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d113      	bne.n	80052e6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c2:	881a      	ldrh	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ce:	1c9a      	adds	r2, r3, #2
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d119      	bne.n	8005328 <HAL_SPI_TransmitReceive+0x1a4>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d014      	beq.n	8005328 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005308:	b292      	uxth	r2, r2
 800530a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005310:	1c9a      	adds	r2, r3, #2
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005324:	2301      	movs	r3, #1
 8005326:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005328:	f7fd fbb8 	bl	8002a9c <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005334:	429a      	cmp	r2, r3
 8005336:	d80d      	bhi.n	8005354 <HAL_SPI_TransmitReceive+0x1d0>
 8005338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	d009      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e0bc      	b.n	80054ce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1a0      	bne.n	80052a0 <HAL_SPI_TransmitReceive+0x11c>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d19b      	bne.n	80052a0 <HAL_SPI_TransmitReceive+0x11c>
 8005368:	e082      	b.n	8005470 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_SPI_TransmitReceive+0x1f4>
 8005372:	8afb      	ldrh	r3, [r7, #22]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d171      	bne.n	800545c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	7812      	ldrb	r2, [r2, #0]
 8005384:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800539e:	e05d      	b.n	800545c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d11c      	bne.n	80053e8 <HAL_SPI_TransmitReceive+0x264>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d017      	beq.n	80053e8 <HAL_SPI_TransmitReceive+0x264>
 80053b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d114      	bne.n	80053e8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	330c      	adds	r3, #12
 80053c8:	7812      	ldrb	r2, [r2, #0]
 80053ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d119      	bne.n	800542a <HAL_SPI_TransmitReceive+0x2a6>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d014      	beq.n	800542a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005426:	2301      	movs	r3, #1
 8005428:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800542a:	f7fd fb37 	bl	8002a9c <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005436:	429a      	cmp	r2, r3
 8005438:	d803      	bhi.n	8005442 <HAL_SPI_TransmitReceive+0x2be>
 800543a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d102      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x2c4>
 8005442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005444:	2b00      	cmp	r3, #0
 8005446:	d109      	bne.n	800545c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e038      	b.n	80054ce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d19c      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x21c>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d197      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005470:	6a3a      	ldr	r2, [r7, #32]
 8005472:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f91d 	bl	80056b4 <SPI_EndRxTxTransaction>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d008      	beq.n	8005492 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e01d      	b.n	80054ce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10a      	bne.n	80054b0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800549a:	2300      	movs	r3, #0
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80054cc:	2300      	movs	r3, #0
  }
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3728      	adds	r7, #40	@ 0x28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	4613      	mov	r3, r2
 80054e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054e8:	f7fd fad8 	bl	8002a9c <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	4413      	add	r3, r2
 80054f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054f8:	f7fd fad0 	bl	8002a9c <HAL_GetTick>
 80054fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054fe:	4b39      	ldr	r3, [pc, #228]	@ (80055e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	015b      	lsls	r3, r3, #5
 8005504:	0d1b      	lsrs	r3, r3, #20
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	fb02 f303 	mul.w	r3, r2, r3
 800550c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800550e:	e055      	b.n	80055bc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005516:	d051      	beq.n	80055bc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005518:	f7fd fac0 	bl	8002a9c <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	69fa      	ldr	r2, [r7, #28]
 8005524:	429a      	cmp	r2, r3
 8005526:	d902      	bls.n	800552e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d13d      	bne.n	80055aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800553c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005546:	d111      	bne.n	800556c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005550:	d004      	beq.n	800555c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800555a:	d107      	bne.n	800556c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800556a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005574:	d10f      	bne.n	8005596 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005594:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e018      	b.n	80055dc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61fb      	str	r3, [r7, #28]
 80055b4:	e002      	b.n	80055bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4013      	ands	r3, r2
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	bf0c      	ite	eq
 80055cc:	2301      	moveq	r3, #1
 80055ce:	2300      	movne	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d19a      	bne.n	8005510 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000018 	.word	0x20000018

080055e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055fc:	d111      	bne.n	8005622 <SPI_EndRxTransaction+0x3a>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005606:	d004      	beq.n	8005612 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005610:	d107      	bne.n	8005622 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005620:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800562a:	d12a      	bne.n	8005682 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005634:	d012      	beq.n	800565c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2200      	movs	r2, #0
 800563e:	2180      	movs	r1, #128	@ 0x80
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f7ff ff49 	bl	80054d8 <SPI_WaitFlagStateUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d02d      	beq.n	80056a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005650:	f043 0220 	orr.w	r2, r3, #32
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e026      	b.n	80056aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2200      	movs	r2, #0
 8005664:	2101      	movs	r1, #1
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f7ff ff36 	bl	80054d8 <SPI_WaitFlagStateUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01a      	beq.n	80056a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005676:	f043 0220 	orr.w	r2, r3, #32
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e013      	b.n	80056aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2200      	movs	r2, #0
 800568a:	2101      	movs	r1, #1
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f7ff ff23 	bl	80054d8 <SPI_WaitFlagStateUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800569c:	f043 0220 	orr.w	r2, r3, #32
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e000      	b.n	80056aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2201      	movs	r2, #1
 80056c8:	2102      	movs	r1, #2
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f7ff ff04 	bl	80054d8 <SPI_WaitFlagStateUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056da:	f043 0220 	orr.w	r2, r3, #32
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e032      	b.n	800574c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005754 <SPI_EndRxTxTransaction+0xa0>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005758 <SPI_EndRxTxTransaction+0xa4>)
 80056ec:	fba2 2303 	umull	r2, r3, r2, r3
 80056f0:	0d5b      	lsrs	r3, r3, #21
 80056f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056f6:	fb02 f303 	mul.w	r3, r2, r3
 80056fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005704:	d112      	bne.n	800572c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2200      	movs	r2, #0
 800570e:	2180      	movs	r1, #128	@ 0x80
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff fee1 	bl	80054d8 <SPI_WaitFlagStateUntilTimeout>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d016      	beq.n	800574a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005720:	f043 0220 	orr.w	r2, r3, #32
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e00f      	b.n	800574c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	3b01      	subs	r3, #1
 8005736:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005742:	2b80      	cmp	r3, #128	@ 0x80
 8005744:	d0f2      	beq.n	800572c <SPI_EndRxTxTransaction+0x78>
 8005746:	e000      	b.n	800574a <SPI_EndRxTxTransaction+0x96>
        break;
 8005748:	bf00      	nop
  }

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000018 	.word	0x20000018
 8005758:	165e9f81 	.word	0x165e9f81

0800575c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e041      	b.n	80057f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fc fec0 	bl	8002508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3304      	adds	r3, #4
 8005798:	4619      	mov	r1, r3
 800579a:	4610      	mov	r0, r2
 800579c:	f000 fb82 	bl	8005ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b01      	cmp	r3, #1
 800580e:	d001      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e044      	b.n	800589e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0201 	orr.w	r2, r2, #1
 800582a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1e      	ldr	r2, [pc, #120]	@ (80058ac <HAL_TIM_Base_Start_IT+0xb0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d018      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x6c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583e:	d013      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x6c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1a      	ldr	r2, [pc, #104]	@ (80058b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d00e      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x6c>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a19      	ldr	r2, [pc, #100]	@ (80058b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d009      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x6c>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a17      	ldr	r2, [pc, #92]	@ (80058b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d004      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x6c>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a16      	ldr	r2, [pc, #88]	@ (80058bc <HAL_TIM_Base_Start_IT+0xc0>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d111      	bne.n	800588c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b06      	cmp	r3, #6
 8005878:	d010      	beq.n	800589c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588a:	e007      	b.n	800589c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40000400 	.word	0x40000400
 80058b4:	40000800 	.word	0x40000800
 80058b8:	40000c00 	.word	0x40000c00
 80058bc:	40014000 	.word	0x40014000

080058c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e041      	b.n	8005956 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fc fdd6 	bl	8002498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f000 fad0 	bl	8005ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d020      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d01b      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f06f 0202 	mvn.w	r2, #2
 8005992:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fa5c 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 80059ae:	e005      	b.n	80059bc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fa4e 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fa5f 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d020      	beq.n	8005a0e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f003 0304 	and.w	r3, r3, #4
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d01b      	beq.n	8005a0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f06f 0204 	mvn.w	r2, #4
 80059de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fa36 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 80059fa:	e005      	b.n	8005a08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fa28 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fa39 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d020      	beq.n	8005a5a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d01b      	beq.n	8005a5a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f06f 0208 	mvn.w	r2, #8
 8005a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2204      	movs	r2, #4
 8005a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fa10 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 8005a46:	e005      	b.n	8005a54 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fa02 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fa13 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d020      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 0310 	and.w	r3, r3, #16
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d01b      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f06f 0210 	mvn.w	r2, #16
 8005a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2208      	movs	r2, #8
 8005a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f9ea 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 8005a92:	e005      	b.n	8005aa0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f9dc 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f9ed 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00c      	beq.n	8005aca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f06f 0201 	mvn.w	r2, #1
 8005ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7fb fe0f 	bl	80016e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00c      	beq.n	8005aee <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fd51 	bl	8006590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00c      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f9be 	bl	8005e8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00c      	beq.n	8005b36 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d007      	beq.n	8005b36 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f06f 0220 	mvn.w	r2, #32
 8005b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fd23 	bl	800657c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b36:	bf00      	nop
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d101      	bne.n	8005b5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e0ae      	b.n	8005cbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b0c      	cmp	r3, #12
 8005b6a:	f200 809f 	bhi.w	8005cac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005ba9 	.word	0x08005ba9
 8005b78:	08005cad 	.word	0x08005cad
 8005b7c:	08005cad 	.word	0x08005cad
 8005b80:	08005cad 	.word	0x08005cad
 8005b84:	08005be9 	.word	0x08005be9
 8005b88:	08005cad 	.word	0x08005cad
 8005b8c:	08005cad 	.word	0x08005cad
 8005b90:	08005cad 	.word	0x08005cad
 8005b94:	08005c2b 	.word	0x08005c2b
 8005b98:	08005cad 	.word	0x08005cad
 8005b9c:	08005cad 	.word	0x08005cad
 8005ba0:	08005cad 	.word	0x08005cad
 8005ba4:	08005c6b 	.word	0x08005c6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 f9fe 	bl	8005fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699a      	ldr	r2, [r3, #24]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0208 	orr.w	r2, r2, #8
 8005bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0204 	bic.w	r2, r2, #4
 8005bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6999      	ldr	r1, [r3, #24]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	619a      	str	r2, [r3, #24]
      break;
 8005be6:	e064      	b.n	8005cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fa44 	bl	800607c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6999      	ldr	r1, [r3, #24]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	021a      	lsls	r2, r3, #8
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	619a      	str	r2, [r3, #24]
      break;
 8005c28:	e043      	b.n	8005cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68b9      	ldr	r1, [r7, #8]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fa8f 	bl	8006154 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69da      	ldr	r2, [r3, #28]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0208 	orr.w	r2, r2, #8
 8005c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0204 	bic.w	r2, r2, #4
 8005c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69d9      	ldr	r1, [r3, #28]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	691a      	ldr	r2, [r3, #16]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	61da      	str	r2, [r3, #28]
      break;
 8005c68:	e023      	b.n	8005cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fad9 	bl	8006228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69d9      	ldr	r1, [r3, #28]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	021a      	lsls	r2, r3, #8
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	61da      	str	r2, [r3, #28]
      break;
 8005caa:	e002      	b.n	8005cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_TIM_ConfigClockSource+0x1c>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e0b4      	b.n	8005e4a <HAL_TIM_ConfigClockSource+0x186>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d18:	d03e      	beq.n	8005d98 <HAL_TIM_ConfigClockSource+0xd4>
 8005d1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d1e:	f200 8087 	bhi.w	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d26:	f000 8086 	beq.w	8005e36 <HAL_TIM_ConfigClockSource+0x172>
 8005d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d2e:	d87f      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d30:	2b70      	cmp	r3, #112	@ 0x70
 8005d32:	d01a      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0xa6>
 8005d34:	2b70      	cmp	r3, #112	@ 0x70
 8005d36:	d87b      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d38:	2b60      	cmp	r3, #96	@ 0x60
 8005d3a:	d050      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x11a>
 8005d3c:	2b60      	cmp	r3, #96	@ 0x60
 8005d3e:	d877      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d40:	2b50      	cmp	r3, #80	@ 0x50
 8005d42:	d03c      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0xfa>
 8005d44:	2b50      	cmp	r3, #80	@ 0x50
 8005d46:	d873      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d48:	2b40      	cmp	r3, #64	@ 0x40
 8005d4a:	d058      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0x13a>
 8005d4c:	2b40      	cmp	r3, #64	@ 0x40
 8005d4e:	d86f      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d50:	2b30      	cmp	r3, #48	@ 0x30
 8005d52:	d064      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x15a>
 8005d54:	2b30      	cmp	r3, #48	@ 0x30
 8005d56:	d86b      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d060      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x15a>
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d867      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d05c      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x15a>
 8005d64:	2b10      	cmp	r3, #16
 8005d66:	d05a      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x15a>
 8005d68:	e062      	b.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d7a:	f000 fb1f 	bl	80063bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	609a      	str	r2, [r3, #8]
      break;
 8005d96:	e04f      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005da8:	f000 fb08 	bl	80063bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dba:	609a      	str	r2, [r3, #8]
      break;
 8005dbc:	e03c      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f000 fa7c 	bl	80062c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2150      	movs	r1, #80	@ 0x50
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fad5 	bl	8006386 <TIM_ITRx_SetConfig>
      break;
 8005ddc:	e02c      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dea:	461a      	mov	r2, r3
 8005dec:	f000 fa9b 	bl	8006326 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2160      	movs	r1, #96	@ 0x60
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fac5 	bl	8006386 <TIM_ITRx_SetConfig>
      break;
 8005dfc:	e01c      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f000 fa5c 	bl	80062c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2140      	movs	r1, #64	@ 0x40
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fab5 	bl	8006386 <TIM_ITRx_SetConfig>
      break;
 8005e1c:	e00c      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4619      	mov	r1, r3
 8005e28:	4610      	mov	r0, r2
 8005e2a:	f000 faac 	bl	8006386 <TIM_ITRx_SetConfig>
      break;
 8005e2e:	e003      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
      break;
 8005e34:	e000      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
	...

08005ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a37      	ldr	r2, [pc, #220]	@ (8005f94 <TIM_Base_SetConfig+0xf0>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00f      	beq.n	8005edc <TIM_Base_SetConfig+0x38>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec2:	d00b      	beq.n	8005edc <TIM_Base_SetConfig+0x38>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a34      	ldr	r2, [pc, #208]	@ (8005f98 <TIM_Base_SetConfig+0xf4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d007      	beq.n	8005edc <TIM_Base_SetConfig+0x38>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a33      	ldr	r2, [pc, #204]	@ (8005f9c <TIM_Base_SetConfig+0xf8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d003      	beq.n	8005edc <TIM_Base_SetConfig+0x38>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a32      	ldr	r2, [pc, #200]	@ (8005fa0 <TIM_Base_SetConfig+0xfc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d108      	bne.n	8005eee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a28      	ldr	r2, [pc, #160]	@ (8005f94 <TIM_Base_SetConfig+0xf0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d01b      	beq.n	8005f2e <TIM_Base_SetConfig+0x8a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005efc:	d017      	beq.n	8005f2e <TIM_Base_SetConfig+0x8a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a25      	ldr	r2, [pc, #148]	@ (8005f98 <TIM_Base_SetConfig+0xf4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d013      	beq.n	8005f2e <TIM_Base_SetConfig+0x8a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a24      	ldr	r2, [pc, #144]	@ (8005f9c <TIM_Base_SetConfig+0xf8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00f      	beq.n	8005f2e <TIM_Base_SetConfig+0x8a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a23      	ldr	r2, [pc, #140]	@ (8005fa0 <TIM_Base_SetConfig+0xfc>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00b      	beq.n	8005f2e <TIM_Base_SetConfig+0x8a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a22      	ldr	r2, [pc, #136]	@ (8005fa4 <TIM_Base_SetConfig+0x100>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d007      	beq.n	8005f2e <TIM_Base_SetConfig+0x8a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a21      	ldr	r2, [pc, #132]	@ (8005fa8 <TIM_Base_SetConfig+0x104>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d003      	beq.n	8005f2e <TIM_Base_SetConfig+0x8a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a20      	ldr	r2, [pc, #128]	@ (8005fac <TIM_Base_SetConfig+0x108>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d108      	bne.n	8005f40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a0c      	ldr	r2, [pc, #48]	@ (8005f94 <TIM_Base_SetConfig+0xf0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d103      	bne.n	8005f6e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	691a      	ldr	r2, [r3, #16]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f043 0204 	orr.w	r2, r3, #4
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	601a      	str	r2, [r3, #0]
}
 8005f86:	bf00      	nop
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40000800 	.word	0x40000800
 8005fa0:	40000c00 	.word	0x40000c00
 8005fa4:	40014000 	.word	0x40014000
 8005fa8:	40014400 	.word	0x40014400
 8005fac:	40014800 	.word	0x40014800

08005fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	f023 0201 	bic.w	r2, r3, #1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0303 	bic.w	r3, r3, #3
 8005fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f023 0302 	bic.w	r3, r3, #2
 8005ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a1c      	ldr	r2, [pc, #112]	@ (8006078 <TIM_OC1_SetConfig+0xc8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d10c      	bne.n	8006026 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f023 0308 	bic.w	r3, r3, #8
 8006012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f023 0304 	bic.w	r3, r3, #4
 8006024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a13      	ldr	r2, [pc, #76]	@ (8006078 <TIM_OC1_SetConfig+0xc8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d111      	bne.n	8006052 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800603c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	621a      	str	r2, [r3, #32]
}
 800606c:	bf00      	nop
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	40010000 	.word	0x40010000

0800607c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f023 0210 	bic.w	r2, r3, #16
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	021b      	lsls	r3, r3, #8
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f023 0320 	bic.w	r3, r3, #32
 80060c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006150 <TIM_OC2_SetConfig+0xd4>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d10d      	bne.n	80060f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a15      	ldr	r2, [pc, #84]	@ (8006150 <TIM_OC2_SetConfig+0xd4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d113      	bne.n	8006128 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800610e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40010000 	.word	0x40010000

08006154 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0303 	bic.w	r3, r3, #3
 800618a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800619c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006224 <TIM_OC3_SetConfig+0xd0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d10d      	bne.n	80061ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a14      	ldr	r2, [pc, #80]	@ (8006224 <TIM_OC3_SetConfig+0xd0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d113      	bne.n	80061fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	621a      	str	r2, [r3, #32]
}
 8006218:	bf00      	nop
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	40010000 	.word	0x40010000

08006228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800625e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	021b      	lsls	r3, r3, #8
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	031b      	lsls	r3, r3, #12
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a10      	ldr	r2, [pc, #64]	@ (80062c4 <TIM_OC4_SetConfig+0x9c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d109      	bne.n	800629c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800628e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	019b      	lsls	r3, r3, #6
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	4313      	orrs	r3, r2
 800629a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	621a      	str	r2, [r3, #32]
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	40010000 	.word	0x40010000

080062c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	f023 0201 	bic.w	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f023 030a 	bic.w	r3, r3, #10
 8006304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006326:	b480      	push	{r7}
 8006328:	b087      	sub	sp, #28
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	f023 0210 	bic.w	r2, r3, #16
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006350:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	031b      	lsls	r3, r3, #12
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006362:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	621a      	str	r2, [r3, #32]
}
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006386:	b480      	push	{r7}
 8006388:	b085      	sub	sp, #20
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f043 0307 	orr.w	r3, r3, #7
 80063a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	609a      	str	r2, [r3, #8]
}
 80063b0:	bf00      	nop
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	021a      	lsls	r2, r3, #8
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	431a      	orrs	r2, r3
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	609a      	str	r2, [r3, #8]
}
 80063f0:	bf00      	nop
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006410:	2302      	movs	r3, #2
 8006412:	e050      	b.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800643a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a1c      	ldr	r2, [pc, #112]	@ (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d018      	beq.n	800648a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006460:	d013      	beq.n	800648a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a18      	ldr	r2, [pc, #96]	@ (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00e      	beq.n	800648a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a16      	ldr	r2, [pc, #88]	@ (80064cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d009      	beq.n	800648a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a15      	ldr	r2, [pc, #84]	@ (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d004      	beq.n	800648a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a13      	ldr	r2, [pc, #76]	@ (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d10c      	bne.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	4313      	orrs	r3, r2
 800649a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	40010000 	.word	0x40010000
 80064c8:	40000400 	.word	0x40000400
 80064cc:	40000800 	.word	0x40000800
 80064d0:	40000c00 	.word	0x40000c00
 80064d4:	40014000 	.word	0x40014000

080064d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e03d      	b.n	8006570 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	4313      	orrs	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	4313      	orrs	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e042      	b.n	800663c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fc f826 	bl	800261c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2224      	movs	r2, #36	@ 0x24
 80065d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fdd3 	bl	8007194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695a      	ldr	r2, [r3, #20]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800660c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800661c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2220      	movs	r2, #32
 8006628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	@ 0x28
 8006648:	af02      	add	r7, sp, #8
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	603b      	str	r3, [r7, #0]
 8006650:	4613      	mov	r3, r2
 8006652:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b20      	cmp	r3, #32
 8006662:	d175      	bne.n	8006750 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <HAL_UART_Transmit+0x2c>
 800666a:	88fb      	ldrh	r3, [r7, #6]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e06e      	b.n	8006752 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2221      	movs	r2, #33	@ 0x21
 800667e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006682:	f7fc fa0b 	bl	8002a9c <HAL_GetTick>
 8006686:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	88fa      	ldrh	r2, [r7, #6]
 800668c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	88fa      	ldrh	r2, [r7, #6]
 8006692:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800669c:	d108      	bne.n	80066b0 <HAL_UART_Transmit+0x6c>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d104      	bne.n	80066b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	e003      	b.n	80066b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066b4:	2300      	movs	r3, #0
 80066b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066b8:	e02e      	b.n	8006718 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2200      	movs	r2, #0
 80066c2:	2180      	movs	r1, #128	@ 0x80
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 fb37 	bl	8006d38 <UART_WaitOnFlagUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d005      	beq.n	80066dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e03a      	b.n	8006752 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10b      	bne.n	80066fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	3302      	adds	r3, #2
 80066f6:	61bb      	str	r3, [r7, #24]
 80066f8:	e007      	b.n	800670a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	781a      	ldrb	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	3301      	adds	r3, #1
 8006708:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800670e:	b29b      	uxth	r3, r3
 8006710:	3b01      	subs	r3, #1
 8006712:	b29a      	uxth	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800671c:	b29b      	uxth	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1cb      	bne.n	80066ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2200      	movs	r2, #0
 800672a:	2140      	movs	r1, #64	@ 0x40
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 fb03 	bl	8006d38 <UART_WaitOnFlagUntilTimeout>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e006      	b.n	8006752 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	e000      	b.n	8006752 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006750:	2302      	movs	r3, #2
  }
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	4613      	mov	r3, r2
 8006766:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b20      	cmp	r3, #32
 8006772:	d112      	bne.n	800679a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <HAL_UART_Receive_IT+0x26>
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e00b      	b.n	800679c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	461a      	mov	r2, r3
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 fb2a 	bl	8006dea <UART_Start_Receive_IT>
 8006796:	4603      	mov	r3, r0
 8006798:	e000      	b.n	800679c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800679a:	2302      	movs	r3, #2
  }
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b0ba      	sub	sp, #232	@ 0xe8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80067e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10f      	bne.n	800680a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ee:	f003 0320 	and.w	r3, r3, #32
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d009      	beq.n	800680a <HAL_UART_IRQHandler+0x66>
 80067f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fc07 	bl	8007016 <UART_Receive_IT>
      return;
 8006808:	e273      	b.n	8006cf2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800680a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 80de 	beq.w	80069d0 <HAL_UART_IRQHandler+0x22c>
 8006814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d106      	bne.n	800682e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006824:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 80d1 	beq.w	80069d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00b      	beq.n	8006852 <HAL_UART_IRQHandler+0xae>
 800683a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800683e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006842:	2b00      	cmp	r3, #0
 8006844:	d005      	beq.n	8006852 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800684a:	f043 0201 	orr.w	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00b      	beq.n	8006876 <HAL_UART_IRQHandler+0xd2>
 800685e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800686e:	f043 0202 	orr.w	r2, r3, #2
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00b      	beq.n	800689a <HAL_UART_IRQHandler+0xf6>
 8006882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d005      	beq.n	800689a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	f043 0204 	orr.w	r2, r3, #4
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800689a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d011      	beq.n	80068ca <HAL_UART_IRQHandler+0x126>
 80068a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068aa:	f003 0320 	and.w	r3, r3, #32
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d105      	bne.n	80068be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d005      	beq.n	80068ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c2:	f043 0208 	orr.w	r2, r3, #8
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 820a 	beq.w	8006ce8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d8:	f003 0320 	and.w	r3, r3, #32
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d008      	beq.n	80068f2 <HAL_UART_IRQHandler+0x14e>
 80068e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d002      	beq.n	80068f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fb92 	bl	8007016 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fc:	2b40      	cmp	r3, #64	@ 0x40
 80068fe:	bf0c      	ite	eq
 8006900:	2301      	moveq	r3, #1
 8006902:	2300      	movne	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800690e:	f003 0308 	and.w	r3, r3, #8
 8006912:	2b00      	cmp	r3, #0
 8006914:	d103      	bne.n	800691e <HAL_UART_IRQHandler+0x17a>
 8006916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800691a:	2b00      	cmp	r3, #0
 800691c:	d04f      	beq.n	80069be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fa9d 	bl	8006e5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692e:	2b40      	cmp	r3, #64	@ 0x40
 8006930:	d141      	bne.n	80069b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3314      	adds	r3, #20
 8006938:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006948:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800694c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006950:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3314      	adds	r3, #20
 800695a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800695e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800696a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1d9      	bne.n	8006932 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006982:	2b00      	cmp	r3, #0
 8006984:	d013      	beq.n	80069ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800698a:	4a8a      	ldr	r2, [pc, #552]	@ (8006bb4 <HAL_UART_IRQHandler+0x410>)
 800698c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006992:	4618      	mov	r0, r3
 8006994:	f7fc fddd 	bl	8003552 <HAL_DMA_Abort_IT>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d016      	beq.n	80069cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80069a8:	4610      	mov	r0, r2
 80069aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ac:	e00e      	b.n	80069cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f9ac 	bl	8006d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b4:	e00a      	b.n	80069cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f9a8 	bl	8006d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069bc:	e006      	b.n	80069cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f9a4 	bl	8006d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80069ca:	e18d      	b.n	8006ce8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069cc:	bf00      	nop
    return;
 80069ce:	e18b      	b.n	8006ce8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	f040 8167 	bne.w	8006ca8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80069da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069de:	f003 0310 	and.w	r3, r3, #16
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 8160 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80069e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 8159 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069f6:	2300      	movs	r3, #0
 80069f8:	60bb      	str	r3, [r7, #8]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	60bb      	str	r3, [r7, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	60bb      	str	r3, [r7, #8]
 8006a0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a16:	2b40      	cmp	r3, #64	@ 0x40
 8006a18:	f040 80ce 	bne.w	8006bb8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80a9 	beq.w	8006b84 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	f080 80a2 	bcs.w	8006b84 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a46:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a52:	f000 8088 	beq.w	8006b66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006a82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1d9      	bne.n	8006a56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3314      	adds	r3, #20
 8006aa8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006ab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3314      	adds	r3, #20
 8006ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006ac6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006aca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006ace:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e1      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3314      	adds	r3, #20
 8006ae4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006af4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3314      	adds	r3, #20
 8006afe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e3      	bne.n	8006ade <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b36:	f023 0310 	bic.w	r3, r3, #16
 8006b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	330c      	adds	r3, #12
 8006b44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006b48:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b4a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e3      	bne.n	8006b24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fc fc86 	bl	8003472 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f8cf 	bl	8006d20 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006b82:	e0b3      	b.n	8006cec <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	f040 80ad 	bne.w	8006cec <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b9c:	f040 80a6 	bne.w	8006cec <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f8b7 	bl	8006d20 <HAL_UARTEx_RxEventCallback>
      return;
 8006bb2:	e09b      	b.n	8006cec <HAL_UART_IRQHandler+0x548>
 8006bb4:	08006f25 	.word	0x08006f25
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 808e 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 8089 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c02:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e3      	bne.n	8006bde <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3314      	adds	r3, #20
 8006c1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	623b      	str	r3, [r7, #32]
   return(result);
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	f023 0301 	bic.w	r3, r3, #1
 8006c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3314      	adds	r3, #20
 8006c36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e3      	bne.n	8006c16 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	330c      	adds	r3, #12
 8006c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	e853 3f00 	ldrex	r3, [r3]
 8006c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0310 	bic.w	r3, r3, #16
 8006c72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	330c      	adds	r3, #12
 8006c7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006c80:	61fa      	str	r2, [r7, #28]
 8006c82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	69b9      	ldr	r1, [r7, #24]
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e3      	bne.n	8006c5c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f83d 	bl	8006d20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ca6:	e023      	b.n	8006cf0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d009      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x524>
 8006cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f940 	bl	8006f46 <UART_Transmit_IT>
    return;
 8006cc6:	e014      	b.n	8006cf2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00e      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x54e>
 8006cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d008      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f980 	bl	8006fe6 <UART_EndTransmit_IT>
    return;
 8006ce6:	e004      	b.n	8006cf2 <HAL_UART_IRQHandler+0x54e>
    return;
 8006ce8:	bf00      	nop
 8006cea:	e002      	b.n	8006cf2 <HAL_UART_IRQHandler+0x54e>
      return;
 8006cec:	bf00      	nop
 8006cee:	e000      	b.n	8006cf2 <HAL_UART_IRQHandler+0x54e>
      return;
 8006cf0:	bf00      	nop
  }
}
 8006cf2:	37e8      	adds	r7, #232	@ 0xe8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	4613      	mov	r3, r2
 8006d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d48:	e03b      	b.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d50:	d037      	beq.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d52:	f7fb fea3 	bl	8002a9c <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	6a3a      	ldr	r2, [r7, #32]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d302      	bcc.n	8006d68 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e03a      	b.n	8006de2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f003 0304 	and.w	r3, r3, #4
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d023      	beq.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b80      	cmp	r3, #128	@ 0x80
 8006d7e:	d020      	beq.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b40      	cmp	r3, #64	@ 0x40
 8006d84:	d01d      	beq.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0308 	and.w	r3, r3, #8
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d116      	bne.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 f857 	bl	8006e5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2208      	movs	r2, #8
 8006db4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e00f      	b.n	8006de2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	bf0c      	ite	eq
 8006dd2:	2301      	moveq	r3, #1
 8006dd4:	2300      	movne	r3, #0
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	461a      	mov	r2, r3
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d0b4      	beq.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b085      	sub	sp, #20
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	4613      	mov	r3, r2
 8006df6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	88fa      	ldrh	r2, [r7, #6]
 8006e02:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	88fa      	ldrh	r2, [r7, #6]
 8006e08:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2222      	movs	r2, #34	@ 0x22
 8006e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d007      	beq.n	8006e30 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e2e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0220 	orr.w	r2, r2, #32
 8006e4e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b095      	sub	sp, #84	@ 0x54
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	330c      	adds	r3, #12
 8006e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	330c      	adds	r3, #12
 8006e84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e86:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e5      	bne.n	8006e66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3314      	adds	r3, #20
 8006ea0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	f023 0301 	bic.w	r3, r3, #1
 8006eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3314      	adds	r3, #20
 8006eb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ec0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e5      	bne.n	8006e9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d119      	bne.n	8006f0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	330c      	adds	r3, #12
 8006edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f023 0310 	bic.w	r3, r3, #16
 8006eec:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	330c      	adds	r3, #12
 8006ef4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ef6:	61ba      	str	r2, [r7, #24]
 8006ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6979      	ldr	r1, [r7, #20]
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	613b      	str	r3, [r7, #16]
   return(result);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e5      	bne.n	8006ed6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f18:	bf00      	nop
 8006f1a:	3754      	adds	r7, #84	@ 0x54
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f7ff fee7 	bl	8006d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f3e:	bf00      	nop
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b085      	sub	sp, #20
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b21      	cmp	r3, #33	@ 0x21
 8006f58:	d13e      	bne.n	8006fd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f62:	d114      	bne.n	8006f8e <UART_Transmit_IT+0x48>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d110      	bne.n	8006f8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	1c9a      	adds	r2, r3, #2
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	621a      	str	r2, [r3, #32]
 8006f8c:	e008      	b.n	8006fa0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	1c59      	adds	r1, r3, #1
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6211      	str	r1, [r2, #32]
 8006f98:	781a      	ldrb	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	4619      	mov	r1, r3
 8006fae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10f      	bne.n	8006fd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e000      	b.n	8006fda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fd8:	2302      	movs	r3, #2
  }
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ffc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff fe76 	bl	8006cf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b08c      	sub	sp, #48	@ 0x30
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800701e:	2300      	movs	r3, #0
 8007020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007022:	2300      	movs	r3, #0
 8007024:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b22      	cmp	r3, #34	@ 0x22
 8007030:	f040 80aa 	bne.w	8007188 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800703c:	d115      	bne.n	800706a <UART_Receive_IT+0x54>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d111      	bne.n	800706a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007058:	b29a      	uxth	r2, r3
 800705a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007062:	1c9a      	adds	r2, r3, #2
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	629a      	str	r2, [r3, #40]	@ 0x28
 8007068:	e024      	b.n	80070b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007078:	d007      	beq.n	800708a <UART_Receive_IT+0x74>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10a      	bne.n	8007098 <UART_Receive_IT+0x82>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	b2da      	uxtb	r2, r3
 8007092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	e008      	b.n	80070aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29b      	uxth	r3, r3
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	4619      	mov	r1, r3
 80070c2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d15d      	bne.n	8007184 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0220 	bic.w	r2, r2, #32
 80070d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	695a      	ldr	r2, [r3, #20]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0201 	bic.w	r2, r2, #1
 80070f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710a:	2b01      	cmp	r3, #1
 800710c:	d135      	bne.n	800717a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	330c      	adds	r3, #12
 800711a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	613b      	str	r3, [r7, #16]
   return(result);
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f023 0310 	bic.w	r3, r3, #16
 800712a:	627b      	str	r3, [r7, #36]	@ 0x24
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	330c      	adds	r3, #12
 8007132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007134:	623a      	str	r2, [r7, #32]
 8007136:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	69f9      	ldr	r1, [r7, #28]
 800713a:	6a3a      	ldr	r2, [r7, #32]
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	61bb      	str	r3, [r7, #24]
   return(result);
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e5      	bne.n	8007114 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0310 	and.w	r3, r3, #16
 8007152:	2b10      	cmp	r3, #16
 8007154:	d10a      	bne.n	800716c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	60fb      	str	r3, [r7, #12]
 800716a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7ff fdd4 	bl	8006d20 <HAL_UARTEx_RxEventCallback>
 8007178:	e002      	b.n	8007180 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7f9 fda4 	bl	8000cc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	e002      	b.n	800718a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	e000      	b.n	800718a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007188:	2302      	movs	r3, #2
  }
}
 800718a:	4618      	mov	r0, r3
 800718c:	3730      	adds	r7, #48	@ 0x30
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007198:	b0c0      	sub	sp, #256	@ 0x100
 800719a:	af00      	add	r7, sp, #0
 800719c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80071ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b0:	68d9      	ldr	r1, [r3, #12]
 80071b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	ea40 0301 	orr.w	r3, r0, r1
 80071bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	431a      	orrs	r2, r3
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	431a      	orrs	r2, r3
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	4313      	orrs	r3, r2
 80071dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071ec:	f021 010c 	bic.w	r1, r1, #12
 80071f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071fa:	430b      	orrs	r3, r1
 80071fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800720a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720e:	6999      	ldr	r1, [r3, #24]
 8007210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	ea40 0301 	orr.w	r3, r0, r1
 800721a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	4b8f      	ldr	r3, [pc, #572]	@ (8007460 <UART_SetConfig+0x2cc>)
 8007224:	429a      	cmp	r2, r3
 8007226:	d005      	beq.n	8007234 <UART_SetConfig+0xa0>
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	4b8d      	ldr	r3, [pc, #564]	@ (8007464 <UART_SetConfig+0x2d0>)
 8007230:	429a      	cmp	r2, r3
 8007232:	d104      	bne.n	800723e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007234:	f7fd fcac 	bl	8004b90 <HAL_RCC_GetPCLK2Freq>
 8007238:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800723c:	e003      	b.n	8007246 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800723e:	f7fd fc93 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 8007242:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007250:	f040 810c 	bne.w	800746c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007258:	2200      	movs	r2, #0
 800725a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800725e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007262:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007266:	4622      	mov	r2, r4
 8007268:	462b      	mov	r3, r5
 800726a:	1891      	adds	r1, r2, r2
 800726c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800726e:	415b      	adcs	r3, r3
 8007270:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007272:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007276:	4621      	mov	r1, r4
 8007278:	eb12 0801 	adds.w	r8, r2, r1
 800727c:	4629      	mov	r1, r5
 800727e:	eb43 0901 	adc.w	r9, r3, r1
 8007282:	f04f 0200 	mov.w	r2, #0
 8007286:	f04f 0300 	mov.w	r3, #0
 800728a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800728e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007296:	4690      	mov	r8, r2
 8007298:	4699      	mov	r9, r3
 800729a:	4623      	mov	r3, r4
 800729c:	eb18 0303 	adds.w	r3, r8, r3
 80072a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072a4:	462b      	mov	r3, r5
 80072a6:	eb49 0303 	adc.w	r3, r9, r3
 80072aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80072be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072c2:	460b      	mov	r3, r1
 80072c4:	18db      	adds	r3, r3, r3
 80072c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80072c8:	4613      	mov	r3, r2
 80072ca:	eb42 0303 	adc.w	r3, r2, r3
 80072ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80072d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80072d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80072d8:	f7f8 ffea 	bl	80002b0 <__aeabi_uldivmod>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4b61      	ldr	r3, [pc, #388]	@ (8007468 <UART_SetConfig+0x2d4>)
 80072e2:	fba3 2302 	umull	r2, r3, r3, r2
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	011c      	lsls	r4, r3, #4
 80072ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072fc:	4642      	mov	r2, r8
 80072fe:	464b      	mov	r3, r9
 8007300:	1891      	adds	r1, r2, r2
 8007302:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007304:	415b      	adcs	r3, r3
 8007306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007308:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800730c:	4641      	mov	r1, r8
 800730e:	eb12 0a01 	adds.w	sl, r2, r1
 8007312:	4649      	mov	r1, r9
 8007314:	eb43 0b01 	adc.w	fp, r3, r1
 8007318:	f04f 0200 	mov.w	r2, #0
 800731c:	f04f 0300 	mov.w	r3, #0
 8007320:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007324:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007328:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800732c:	4692      	mov	sl, r2
 800732e:	469b      	mov	fp, r3
 8007330:	4643      	mov	r3, r8
 8007332:	eb1a 0303 	adds.w	r3, sl, r3
 8007336:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800733a:	464b      	mov	r3, r9
 800733c:	eb4b 0303 	adc.w	r3, fp, r3
 8007340:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007350:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007354:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007358:	460b      	mov	r3, r1
 800735a:	18db      	adds	r3, r3, r3
 800735c:	643b      	str	r3, [r7, #64]	@ 0x40
 800735e:	4613      	mov	r3, r2
 8007360:	eb42 0303 	adc.w	r3, r2, r3
 8007364:	647b      	str	r3, [r7, #68]	@ 0x44
 8007366:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800736a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800736e:	f7f8 ff9f 	bl	80002b0 <__aeabi_uldivmod>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	4611      	mov	r1, r2
 8007378:	4b3b      	ldr	r3, [pc, #236]	@ (8007468 <UART_SetConfig+0x2d4>)
 800737a:	fba3 2301 	umull	r2, r3, r3, r1
 800737e:	095b      	lsrs	r3, r3, #5
 8007380:	2264      	movs	r2, #100	@ 0x64
 8007382:	fb02 f303 	mul.w	r3, r2, r3
 8007386:	1acb      	subs	r3, r1, r3
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800738e:	4b36      	ldr	r3, [pc, #216]	@ (8007468 <UART_SetConfig+0x2d4>)
 8007390:	fba3 2302 	umull	r2, r3, r3, r2
 8007394:	095b      	lsrs	r3, r3, #5
 8007396:	005b      	lsls	r3, r3, #1
 8007398:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800739c:	441c      	add	r4, r3
 800739e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073a2:	2200      	movs	r2, #0
 80073a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80073ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80073b0:	4642      	mov	r2, r8
 80073b2:	464b      	mov	r3, r9
 80073b4:	1891      	adds	r1, r2, r2
 80073b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80073b8:	415b      	adcs	r3, r3
 80073ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80073c0:	4641      	mov	r1, r8
 80073c2:	1851      	adds	r1, r2, r1
 80073c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80073c6:	4649      	mov	r1, r9
 80073c8:	414b      	adcs	r3, r1
 80073ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80073cc:	f04f 0200 	mov.w	r2, #0
 80073d0:	f04f 0300 	mov.w	r3, #0
 80073d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80073d8:	4659      	mov	r1, fp
 80073da:	00cb      	lsls	r3, r1, #3
 80073dc:	4651      	mov	r1, sl
 80073de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073e2:	4651      	mov	r1, sl
 80073e4:	00ca      	lsls	r2, r1, #3
 80073e6:	4610      	mov	r0, r2
 80073e8:	4619      	mov	r1, r3
 80073ea:	4603      	mov	r3, r0
 80073ec:	4642      	mov	r2, r8
 80073ee:	189b      	adds	r3, r3, r2
 80073f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073f4:	464b      	mov	r3, r9
 80073f6:	460a      	mov	r2, r1
 80073f8:	eb42 0303 	adc.w	r3, r2, r3
 80073fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800740c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007410:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007414:	460b      	mov	r3, r1
 8007416:	18db      	adds	r3, r3, r3
 8007418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800741a:	4613      	mov	r3, r2
 800741c:	eb42 0303 	adc.w	r3, r2, r3
 8007420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007426:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800742a:	f7f8 ff41 	bl	80002b0 <__aeabi_uldivmod>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4b0d      	ldr	r3, [pc, #52]	@ (8007468 <UART_SetConfig+0x2d4>)
 8007434:	fba3 1302 	umull	r1, r3, r3, r2
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	2164      	movs	r1, #100	@ 0x64
 800743c:	fb01 f303 	mul.w	r3, r1, r3
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	3332      	adds	r3, #50	@ 0x32
 8007446:	4a08      	ldr	r2, [pc, #32]	@ (8007468 <UART_SetConfig+0x2d4>)
 8007448:	fba2 2303 	umull	r2, r3, r2, r3
 800744c:	095b      	lsrs	r3, r3, #5
 800744e:	f003 0207 	and.w	r2, r3, #7
 8007452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4422      	add	r2, r4
 800745a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800745c:	e106      	b.n	800766c <UART_SetConfig+0x4d8>
 800745e:	bf00      	nop
 8007460:	40011000 	.word	0x40011000
 8007464:	40011400 	.word	0x40011400
 8007468:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800746c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007470:	2200      	movs	r2, #0
 8007472:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007476:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800747a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800747e:	4642      	mov	r2, r8
 8007480:	464b      	mov	r3, r9
 8007482:	1891      	adds	r1, r2, r2
 8007484:	6239      	str	r1, [r7, #32]
 8007486:	415b      	adcs	r3, r3
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24
 800748a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800748e:	4641      	mov	r1, r8
 8007490:	1854      	adds	r4, r2, r1
 8007492:	4649      	mov	r1, r9
 8007494:	eb43 0501 	adc.w	r5, r3, r1
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	00eb      	lsls	r3, r5, #3
 80074a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074a6:	00e2      	lsls	r2, r4, #3
 80074a8:	4614      	mov	r4, r2
 80074aa:	461d      	mov	r5, r3
 80074ac:	4643      	mov	r3, r8
 80074ae:	18e3      	adds	r3, r4, r3
 80074b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074b4:	464b      	mov	r3, r9
 80074b6:	eb45 0303 	adc.w	r3, r5, r3
 80074ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80074ce:	f04f 0200 	mov.w	r2, #0
 80074d2:	f04f 0300 	mov.w	r3, #0
 80074d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80074da:	4629      	mov	r1, r5
 80074dc:	008b      	lsls	r3, r1, #2
 80074de:	4621      	mov	r1, r4
 80074e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074e4:	4621      	mov	r1, r4
 80074e6:	008a      	lsls	r2, r1, #2
 80074e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074ec:	f7f8 fee0 	bl	80002b0 <__aeabi_uldivmod>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4b60      	ldr	r3, [pc, #384]	@ (8007678 <UART_SetConfig+0x4e4>)
 80074f6:	fba3 2302 	umull	r2, r3, r3, r2
 80074fa:	095b      	lsrs	r3, r3, #5
 80074fc:	011c      	lsls	r4, r3, #4
 80074fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007502:	2200      	movs	r2, #0
 8007504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007508:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800750c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007510:	4642      	mov	r2, r8
 8007512:	464b      	mov	r3, r9
 8007514:	1891      	adds	r1, r2, r2
 8007516:	61b9      	str	r1, [r7, #24]
 8007518:	415b      	adcs	r3, r3
 800751a:	61fb      	str	r3, [r7, #28]
 800751c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007520:	4641      	mov	r1, r8
 8007522:	1851      	adds	r1, r2, r1
 8007524:	6139      	str	r1, [r7, #16]
 8007526:	4649      	mov	r1, r9
 8007528:	414b      	adcs	r3, r1
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	f04f 0200 	mov.w	r2, #0
 8007530:	f04f 0300 	mov.w	r3, #0
 8007534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007538:	4659      	mov	r1, fp
 800753a:	00cb      	lsls	r3, r1, #3
 800753c:	4651      	mov	r1, sl
 800753e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007542:	4651      	mov	r1, sl
 8007544:	00ca      	lsls	r2, r1, #3
 8007546:	4610      	mov	r0, r2
 8007548:	4619      	mov	r1, r3
 800754a:	4603      	mov	r3, r0
 800754c:	4642      	mov	r2, r8
 800754e:	189b      	adds	r3, r3, r2
 8007550:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007554:	464b      	mov	r3, r9
 8007556:	460a      	mov	r2, r1
 8007558:	eb42 0303 	adc.w	r3, r2, r3
 800755c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	67bb      	str	r3, [r7, #120]	@ 0x78
 800756a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800756c:	f04f 0200 	mov.w	r2, #0
 8007570:	f04f 0300 	mov.w	r3, #0
 8007574:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007578:	4649      	mov	r1, r9
 800757a:	008b      	lsls	r3, r1, #2
 800757c:	4641      	mov	r1, r8
 800757e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007582:	4641      	mov	r1, r8
 8007584:	008a      	lsls	r2, r1, #2
 8007586:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800758a:	f7f8 fe91 	bl	80002b0 <__aeabi_uldivmod>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4611      	mov	r1, r2
 8007594:	4b38      	ldr	r3, [pc, #224]	@ (8007678 <UART_SetConfig+0x4e4>)
 8007596:	fba3 2301 	umull	r2, r3, r3, r1
 800759a:	095b      	lsrs	r3, r3, #5
 800759c:	2264      	movs	r2, #100	@ 0x64
 800759e:	fb02 f303 	mul.w	r3, r2, r3
 80075a2:	1acb      	subs	r3, r1, r3
 80075a4:	011b      	lsls	r3, r3, #4
 80075a6:	3332      	adds	r3, #50	@ 0x32
 80075a8:	4a33      	ldr	r2, [pc, #204]	@ (8007678 <UART_SetConfig+0x4e4>)
 80075aa:	fba2 2303 	umull	r2, r3, r2, r3
 80075ae:	095b      	lsrs	r3, r3, #5
 80075b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075b4:	441c      	add	r4, r3
 80075b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075ba:	2200      	movs	r2, #0
 80075bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80075be:	677a      	str	r2, [r7, #116]	@ 0x74
 80075c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80075c4:	4642      	mov	r2, r8
 80075c6:	464b      	mov	r3, r9
 80075c8:	1891      	adds	r1, r2, r2
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	415b      	adcs	r3, r3
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075d4:	4641      	mov	r1, r8
 80075d6:	1851      	adds	r1, r2, r1
 80075d8:	6039      	str	r1, [r7, #0]
 80075da:	4649      	mov	r1, r9
 80075dc:	414b      	adcs	r3, r1
 80075de:	607b      	str	r3, [r7, #4]
 80075e0:	f04f 0200 	mov.w	r2, #0
 80075e4:	f04f 0300 	mov.w	r3, #0
 80075e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075ec:	4659      	mov	r1, fp
 80075ee:	00cb      	lsls	r3, r1, #3
 80075f0:	4651      	mov	r1, sl
 80075f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075f6:	4651      	mov	r1, sl
 80075f8:	00ca      	lsls	r2, r1, #3
 80075fa:	4610      	mov	r0, r2
 80075fc:	4619      	mov	r1, r3
 80075fe:	4603      	mov	r3, r0
 8007600:	4642      	mov	r2, r8
 8007602:	189b      	adds	r3, r3, r2
 8007604:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007606:	464b      	mov	r3, r9
 8007608:	460a      	mov	r2, r1
 800760a:	eb42 0303 	adc.w	r3, r2, r3
 800760e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	663b      	str	r3, [r7, #96]	@ 0x60
 800761a:	667a      	str	r2, [r7, #100]	@ 0x64
 800761c:	f04f 0200 	mov.w	r2, #0
 8007620:	f04f 0300 	mov.w	r3, #0
 8007624:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007628:	4649      	mov	r1, r9
 800762a:	008b      	lsls	r3, r1, #2
 800762c:	4641      	mov	r1, r8
 800762e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007632:	4641      	mov	r1, r8
 8007634:	008a      	lsls	r2, r1, #2
 8007636:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800763a:	f7f8 fe39 	bl	80002b0 <__aeabi_uldivmod>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	4b0d      	ldr	r3, [pc, #52]	@ (8007678 <UART_SetConfig+0x4e4>)
 8007644:	fba3 1302 	umull	r1, r3, r3, r2
 8007648:	095b      	lsrs	r3, r3, #5
 800764a:	2164      	movs	r1, #100	@ 0x64
 800764c:	fb01 f303 	mul.w	r3, r1, r3
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	3332      	adds	r3, #50	@ 0x32
 8007656:	4a08      	ldr	r2, [pc, #32]	@ (8007678 <UART_SetConfig+0x4e4>)
 8007658:	fba2 2303 	umull	r2, r3, r2, r3
 800765c:	095b      	lsrs	r3, r3, #5
 800765e:	f003 020f 	and.w	r2, r3, #15
 8007662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4422      	add	r2, r4
 800766a:	609a      	str	r2, [r3, #8]
}
 800766c:	bf00      	nop
 800766e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007672:	46bd      	mov	sp, r7
 8007674:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007678:	51eb851f 	.word	0x51eb851f

0800767c <std>:
 800767c:	2300      	movs	r3, #0
 800767e:	b510      	push	{r4, lr}
 8007680:	4604      	mov	r4, r0
 8007682:	e9c0 3300 	strd	r3, r3, [r0]
 8007686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800768a:	6083      	str	r3, [r0, #8]
 800768c:	8181      	strh	r1, [r0, #12]
 800768e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007690:	81c2      	strh	r2, [r0, #14]
 8007692:	6183      	str	r3, [r0, #24]
 8007694:	4619      	mov	r1, r3
 8007696:	2208      	movs	r2, #8
 8007698:	305c      	adds	r0, #92	@ 0x5c
 800769a:	f000 fa23 	bl	8007ae4 <memset>
 800769e:	4b0d      	ldr	r3, [pc, #52]	@ (80076d4 <std+0x58>)
 80076a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80076a2:	4b0d      	ldr	r3, [pc, #52]	@ (80076d8 <std+0x5c>)
 80076a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076a6:	4b0d      	ldr	r3, [pc, #52]	@ (80076dc <std+0x60>)
 80076a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076aa:	4b0d      	ldr	r3, [pc, #52]	@ (80076e0 <std+0x64>)
 80076ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80076ae:	4b0d      	ldr	r3, [pc, #52]	@ (80076e4 <std+0x68>)
 80076b0:	6224      	str	r4, [r4, #32]
 80076b2:	429c      	cmp	r4, r3
 80076b4:	d006      	beq.n	80076c4 <std+0x48>
 80076b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076ba:	4294      	cmp	r4, r2
 80076bc:	d002      	beq.n	80076c4 <std+0x48>
 80076be:	33d0      	adds	r3, #208	@ 0xd0
 80076c0:	429c      	cmp	r4, r3
 80076c2:	d105      	bne.n	80076d0 <std+0x54>
 80076c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076cc:	f000 bb14 	b.w	8007cf8 <__retarget_lock_init_recursive>
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	bf00      	nop
 80076d4:	08007935 	.word	0x08007935
 80076d8:	08007957 	.word	0x08007957
 80076dc:	0800798f 	.word	0x0800798f
 80076e0:	080079b3 	.word	0x080079b3
 80076e4:	20000c78 	.word	0x20000c78

080076e8 <stdio_exit_handler>:
 80076e8:	4a02      	ldr	r2, [pc, #8]	@ (80076f4 <stdio_exit_handler+0xc>)
 80076ea:	4903      	ldr	r1, [pc, #12]	@ (80076f8 <stdio_exit_handler+0x10>)
 80076ec:	4803      	ldr	r0, [pc, #12]	@ (80076fc <stdio_exit_handler+0x14>)
 80076ee:	f000 b869 	b.w	80077c4 <_fwalk_sglue>
 80076f2:	bf00      	nop
 80076f4:	20000024 	.word	0x20000024
 80076f8:	080088bd 	.word	0x080088bd
 80076fc:	20000034 	.word	0x20000034

08007700 <cleanup_stdio>:
 8007700:	6841      	ldr	r1, [r0, #4]
 8007702:	4b0c      	ldr	r3, [pc, #48]	@ (8007734 <cleanup_stdio+0x34>)
 8007704:	4299      	cmp	r1, r3
 8007706:	b510      	push	{r4, lr}
 8007708:	4604      	mov	r4, r0
 800770a:	d001      	beq.n	8007710 <cleanup_stdio+0x10>
 800770c:	f001 f8d6 	bl	80088bc <_fflush_r>
 8007710:	68a1      	ldr	r1, [r4, #8]
 8007712:	4b09      	ldr	r3, [pc, #36]	@ (8007738 <cleanup_stdio+0x38>)
 8007714:	4299      	cmp	r1, r3
 8007716:	d002      	beq.n	800771e <cleanup_stdio+0x1e>
 8007718:	4620      	mov	r0, r4
 800771a:	f001 f8cf 	bl	80088bc <_fflush_r>
 800771e:	68e1      	ldr	r1, [r4, #12]
 8007720:	4b06      	ldr	r3, [pc, #24]	@ (800773c <cleanup_stdio+0x3c>)
 8007722:	4299      	cmp	r1, r3
 8007724:	d004      	beq.n	8007730 <cleanup_stdio+0x30>
 8007726:	4620      	mov	r0, r4
 8007728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800772c:	f001 b8c6 	b.w	80088bc <_fflush_r>
 8007730:	bd10      	pop	{r4, pc}
 8007732:	bf00      	nop
 8007734:	20000c78 	.word	0x20000c78
 8007738:	20000ce0 	.word	0x20000ce0
 800773c:	20000d48 	.word	0x20000d48

08007740 <global_stdio_init.part.0>:
 8007740:	b510      	push	{r4, lr}
 8007742:	4b0b      	ldr	r3, [pc, #44]	@ (8007770 <global_stdio_init.part.0+0x30>)
 8007744:	4c0b      	ldr	r4, [pc, #44]	@ (8007774 <global_stdio_init.part.0+0x34>)
 8007746:	4a0c      	ldr	r2, [pc, #48]	@ (8007778 <global_stdio_init.part.0+0x38>)
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	4620      	mov	r0, r4
 800774c:	2200      	movs	r2, #0
 800774e:	2104      	movs	r1, #4
 8007750:	f7ff ff94 	bl	800767c <std>
 8007754:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007758:	2201      	movs	r2, #1
 800775a:	2109      	movs	r1, #9
 800775c:	f7ff ff8e 	bl	800767c <std>
 8007760:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007764:	2202      	movs	r2, #2
 8007766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800776a:	2112      	movs	r1, #18
 800776c:	f7ff bf86 	b.w	800767c <std>
 8007770:	20000db0 	.word	0x20000db0
 8007774:	20000c78 	.word	0x20000c78
 8007778:	080076e9 	.word	0x080076e9

0800777c <__sfp_lock_acquire>:
 800777c:	4801      	ldr	r0, [pc, #4]	@ (8007784 <__sfp_lock_acquire+0x8>)
 800777e:	f000 babc 	b.w	8007cfa <__retarget_lock_acquire_recursive>
 8007782:	bf00      	nop
 8007784:	20000db9 	.word	0x20000db9

08007788 <__sfp_lock_release>:
 8007788:	4801      	ldr	r0, [pc, #4]	@ (8007790 <__sfp_lock_release+0x8>)
 800778a:	f000 bab7 	b.w	8007cfc <__retarget_lock_release_recursive>
 800778e:	bf00      	nop
 8007790:	20000db9 	.word	0x20000db9

08007794 <__sinit>:
 8007794:	b510      	push	{r4, lr}
 8007796:	4604      	mov	r4, r0
 8007798:	f7ff fff0 	bl	800777c <__sfp_lock_acquire>
 800779c:	6a23      	ldr	r3, [r4, #32]
 800779e:	b11b      	cbz	r3, 80077a8 <__sinit+0x14>
 80077a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a4:	f7ff bff0 	b.w	8007788 <__sfp_lock_release>
 80077a8:	4b04      	ldr	r3, [pc, #16]	@ (80077bc <__sinit+0x28>)
 80077aa:	6223      	str	r3, [r4, #32]
 80077ac:	4b04      	ldr	r3, [pc, #16]	@ (80077c0 <__sinit+0x2c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1f5      	bne.n	80077a0 <__sinit+0xc>
 80077b4:	f7ff ffc4 	bl	8007740 <global_stdio_init.part.0>
 80077b8:	e7f2      	b.n	80077a0 <__sinit+0xc>
 80077ba:	bf00      	nop
 80077bc:	08007701 	.word	0x08007701
 80077c0:	20000db0 	.word	0x20000db0

080077c4 <_fwalk_sglue>:
 80077c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077c8:	4607      	mov	r7, r0
 80077ca:	4688      	mov	r8, r1
 80077cc:	4614      	mov	r4, r2
 80077ce:	2600      	movs	r6, #0
 80077d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077d4:	f1b9 0901 	subs.w	r9, r9, #1
 80077d8:	d505      	bpl.n	80077e6 <_fwalk_sglue+0x22>
 80077da:	6824      	ldr	r4, [r4, #0]
 80077dc:	2c00      	cmp	r4, #0
 80077de:	d1f7      	bne.n	80077d0 <_fwalk_sglue+0xc>
 80077e0:	4630      	mov	r0, r6
 80077e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077e6:	89ab      	ldrh	r3, [r5, #12]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d907      	bls.n	80077fc <_fwalk_sglue+0x38>
 80077ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077f0:	3301      	adds	r3, #1
 80077f2:	d003      	beq.n	80077fc <_fwalk_sglue+0x38>
 80077f4:	4629      	mov	r1, r5
 80077f6:	4638      	mov	r0, r7
 80077f8:	47c0      	blx	r8
 80077fa:	4306      	orrs	r6, r0
 80077fc:	3568      	adds	r5, #104	@ 0x68
 80077fe:	e7e9      	b.n	80077d4 <_fwalk_sglue+0x10>

08007800 <iprintf>:
 8007800:	b40f      	push	{r0, r1, r2, r3}
 8007802:	b507      	push	{r0, r1, r2, lr}
 8007804:	4906      	ldr	r1, [pc, #24]	@ (8007820 <iprintf+0x20>)
 8007806:	ab04      	add	r3, sp, #16
 8007808:	6808      	ldr	r0, [r1, #0]
 800780a:	f853 2b04 	ldr.w	r2, [r3], #4
 800780e:	6881      	ldr	r1, [r0, #8]
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	f000 fd2b 	bl	800826c <_vfiprintf_r>
 8007816:	b003      	add	sp, #12
 8007818:	f85d eb04 	ldr.w	lr, [sp], #4
 800781c:	b004      	add	sp, #16
 800781e:	4770      	bx	lr
 8007820:	20000030 	.word	0x20000030

08007824 <putchar>:
 8007824:	4b02      	ldr	r3, [pc, #8]	@ (8007830 <putchar+0xc>)
 8007826:	4601      	mov	r1, r0
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	6882      	ldr	r2, [r0, #8]
 800782c:	f001 b8e2 	b.w	80089f4 <_putc_r>
 8007830:	20000030 	.word	0x20000030

08007834 <_puts_r>:
 8007834:	6a03      	ldr	r3, [r0, #32]
 8007836:	b570      	push	{r4, r5, r6, lr}
 8007838:	6884      	ldr	r4, [r0, #8]
 800783a:	4605      	mov	r5, r0
 800783c:	460e      	mov	r6, r1
 800783e:	b90b      	cbnz	r3, 8007844 <_puts_r+0x10>
 8007840:	f7ff ffa8 	bl	8007794 <__sinit>
 8007844:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007846:	07db      	lsls	r3, r3, #31
 8007848:	d405      	bmi.n	8007856 <_puts_r+0x22>
 800784a:	89a3      	ldrh	r3, [r4, #12]
 800784c:	0598      	lsls	r0, r3, #22
 800784e:	d402      	bmi.n	8007856 <_puts_r+0x22>
 8007850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007852:	f000 fa52 	bl	8007cfa <__retarget_lock_acquire_recursive>
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	0719      	lsls	r1, r3, #28
 800785a:	d502      	bpl.n	8007862 <_puts_r+0x2e>
 800785c:	6923      	ldr	r3, [r4, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d135      	bne.n	80078ce <_puts_r+0x9a>
 8007862:	4621      	mov	r1, r4
 8007864:	4628      	mov	r0, r5
 8007866:	f000 f8e7 	bl	8007a38 <__swsetup_r>
 800786a:	b380      	cbz	r0, 80078ce <_puts_r+0x9a>
 800786c:	f04f 35ff 	mov.w	r5, #4294967295
 8007870:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007872:	07da      	lsls	r2, r3, #31
 8007874:	d405      	bmi.n	8007882 <_puts_r+0x4e>
 8007876:	89a3      	ldrh	r3, [r4, #12]
 8007878:	059b      	lsls	r3, r3, #22
 800787a:	d402      	bmi.n	8007882 <_puts_r+0x4e>
 800787c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800787e:	f000 fa3d 	bl	8007cfc <__retarget_lock_release_recursive>
 8007882:	4628      	mov	r0, r5
 8007884:	bd70      	pop	{r4, r5, r6, pc}
 8007886:	2b00      	cmp	r3, #0
 8007888:	da04      	bge.n	8007894 <_puts_r+0x60>
 800788a:	69a2      	ldr	r2, [r4, #24]
 800788c:	429a      	cmp	r2, r3
 800788e:	dc17      	bgt.n	80078c0 <_puts_r+0x8c>
 8007890:	290a      	cmp	r1, #10
 8007892:	d015      	beq.n	80078c0 <_puts_r+0x8c>
 8007894:	6823      	ldr	r3, [r4, #0]
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	6022      	str	r2, [r4, #0]
 800789a:	7019      	strb	r1, [r3, #0]
 800789c:	68a3      	ldr	r3, [r4, #8]
 800789e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078a2:	3b01      	subs	r3, #1
 80078a4:	60a3      	str	r3, [r4, #8]
 80078a6:	2900      	cmp	r1, #0
 80078a8:	d1ed      	bne.n	8007886 <_puts_r+0x52>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	da11      	bge.n	80078d2 <_puts_r+0x9e>
 80078ae:	4622      	mov	r2, r4
 80078b0:	210a      	movs	r1, #10
 80078b2:	4628      	mov	r0, r5
 80078b4:	f000 f881 	bl	80079ba <__swbuf_r>
 80078b8:	3001      	adds	r0, #1
 80078ba:	d0d7      	beq.n	800786c <_puts_r+0x38>
 80078bc:	250a      	movs	r5, #10
 80078be:	e7d7      	b.n	8007870 <_puts_r+0x3c>
 80078c0:	4622      	mov	r2, r4
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f879 	bl	80079ba <__swbuf_r>
 80078c8:	3001      	adds	r0, #1
 80078ca:	d1e7      	bne.n	800789c <_puts_r+0x68>
 80078cc:	e7ce      	b.n	800786c <_puts_r+0x38>
 80078ce:	3e01      	subs	r6, #1
 80078d0:	e7e4      	b.n	800789c <_puts_r+0x68>
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	6022      	str	r2, [r4, #0]
 80078d8:	220a      	movs	r2, #10
 80078da:	701a      	strb	r2, [r3, #0]
 80078dc:	e7ee      	b.n	80078bc <_puts_r+0x88>
	...

080078e0 <puts>:
 80078e0:	4b02      	ldr	r3, [pc, #8]	@ (80078ec <puts+0xc>)
 80078e2:	4601      	mov	r1, r0
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	f7ff bfa5 	b.w	8007834 <_puts_r>
 80078ea:	bf00      	nop
 80078ec:	20000030 	.word	0x20000030

080078f0 <siprintf>:
 80078f0:	b40e      	push	{r1, r2, r3}
 80078f2:	b510      	push	{r4, lr}
 80078f4:	b09d      	sub	sp, #116	@ 0x74
 80078f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80078f8:	9002      	str	r0, [sp, #8]
 80078fa:	9006      	str	r0, [sp, #24]
 80078fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007900:	480a      	ldr	r0, [pc, #40]	@ (800792c <siprintf+0x3c>)
 8007902:	9107      	str	r1, [sp, #28]
 8007904:	9104      	str	r1, [sp, #16]
 8007906:	490a      	ldr	r1, [pc, #40]	@ (8007930 <siprintf+0x40>)
 8007908:	f853 2b04 	ldr.w	r2, [r3], #4
 800790c:	9105      	str	r1, [sp, #20]
 800790e:	2400      	movs	r4, #0
 8007910:	a902      	add	r1, sp, #8
 8007912:	6800      	ldr	r0, [r0, #0]
 8007914:	9301      	str	r3, [sp, #4]
 8007916:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007918:	f000 fb82 	bl	8008020 <_svfiprintf_r>
 800791c:	9b02      	ldr	r3, [sp, #8]
 800791e:	701c      	strb	r4, [r3, #0]
 8007920:	b01d      	add	sp, #116	@ 0x74
 8007922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007926:	b003      	add	sp, #12
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	20000030 	.word	0x20000030
 8007930:	ffff0208 	.word	0xffff0208

08007934 <__sread>:
 8007934:	b510      	push	{r4, lr}
 8007936:	460c      	mov	r4, r1
 8007938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800793c:	f000 f98e 	bl	8007c5c <_read_r>
 8007940:	2800      	cmp	r0, #0
 8007942:	bfab      	itete	ge
 8007944:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007946:	89a3      	ldrhlt	r3, [r4, #12]
 8007948:	181b      	addge	r3, r3, r0
 800794a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800794e:	bfac      	ite	ge
 8007950:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007952:	81a3      	strhlt	r3, [r4, #12]
 8007954:	bd10      	pop	{r4, pc}

08007956 <__swrite>:
 8007956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800795a:	461f      	mov	r7, r3
 800795c:	898b      	ldrh	r3, [r1, #12]
 800795e:	05db      	lsls	r3, r3, #23
 8007960:	4605      	mov	r5, r0
 8007962:	460c      	mov	r4, r1
 8007964:	4616      	mov	r6, r2
 8007966:	d505      	bpl.n	8007974 <__swrite+0x1e>
 8007968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796c:	2302      	movs	r3, #2
 800796e:	2200      	movs	r2, #0
 8007970:	f000 f962 	bl	8007c38 <_lseek_r>
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800797a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800797e:	81a3      	strh	r3, [r4, #12]
 8007980:	4632      	mov	r2, r6
 8007982:	463b      	mov	r3, r7
 8007984:	4628      	mov	r0, r5
 8007986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800798a:	f000 b979 	b.w	8007c80 <_write_r>

0800798e <__sseek>:
 800798e:	b510      	push	{r4, lr}
 8007990:	460c      	mov	r4, r1
 8007992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007996:	f000 f94f 	bl	8007c38 <_lseek_r>
 800799a:	1c43      	adds	r3, r0, #1
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	bf15      	itete	ne
 80079a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079aa:	81a3      	strheq	r3, [r4, #12]
 80079ac:	bf18      	it	ne
 80079ae:	81a3      	strhne	r3, [r4, #12]
 80079b0:	bd10      	pop	{r4, pc}

080079b2 <__sclose>:
 80079b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b6:	f000 b92f 	b.w	8007c18 <_close_r>

080079ba <__swbuf_r>:
 80079ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079bc:	460e      	mov	r6, r1
 80079be:	4614      	mov	r4, r2
 80079c0:	4605      	mov	r5, r0
 80079c2:	b118      	cbz	r0, 80079cc <__swbuf_r+0x12>
 80079c4:	6a03      	ldr	r3, [r0, #32]
 80079c6:	b90b      	cbnz	r3, 80079cc <__swbuf_r+0x12>
 80079c8:	f7ff fee4 	bl	8007794 <__sinit>
 80079cc:	69a3      	ldr	r3, [r4, #24]
 80079ce:	60a3      	str	r3, [r4, #8]
 80079d0:	89a3      	ldrh	r3, [r4, #12]
 80079d2:	071a      	lsls	r2, r3, #28
 80079d4:	d501      	bpl.n	80079da <__swbuf_r+0x20>
 80079d6:	6923      	ldr	r3, [r4, #16]
 80079d8:	b943      	cbnz	r3, 80079ec <__swbuf_r+0x32>
 80079da:	4621      	mov	r1, r4
 80079dc:	4628      	mov	r0, r5
 80079de:	f000 f82b 	bl	8007a38 <__swsetup_r>
 80079e2:	b118      	cbz	r0, 80079ec <__swbuf_r+0x32>
 80079e4:	f04f 37ff 	mov.w	r7, #4294967295
 80079e8:	4638      	mov	r0, r7
 80079ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	6922      	ldr	r2, [r4, #16]
 80079f0:	1a98      	subs	r0, r3, r2
 80079f2:	6963      	ldr	r3, [r4, #20]
 80079f4:	b2f6      	uxtb	r6, r6
 80079f6:	4283      	cmp	r3, r0
 80079f8:	4637      	mov	r7, r6
 80079fa:	dc05      	bgt.n	8007a08 <__swbuf_r+0x4e>
 80079fc:	4621      	mov	r1, r4
 80079fe:	4628      	mov	r0, r5
 8007a00:	f000 ff5c 	bl	80088bc <_fflush_r>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d1ed      	bne.n	80079e4 <__swbuf_r+0x2a>
 8007a08:	68a3      	ldr	r3, [r4, #8]
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	60a3      	str	r3, [r4, #8]
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	6022      	str	r2, [r4, #0]
 8007a14:	701e      	strb	r6, [r3, #0]
 8007a16:	6962      	ldr	r2, [r4, #20]
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d004      	beq.n	8007a28 <__swbuf_r+0x6e>
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	07db      	lsls	r3, r3, #31
 8007a22:	d5e1      	bpl.n	80079e8 <__swbuf_r+0x2e>
 8007a24:	2e0a      	cmp	r6, #10
 8007a26:	d1df      	bne.n	80079e8 <__swbuf_r+0x2e>
 8007a28:	4621      	mov	r1, r4
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f000 ff46 	bl	80088bc <_fflush_r>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d0d9      	beq.n	80079e8 <__swbuf_r+0x2e>
 8007a34:	e7d6      	b.n	80079e4 <__swbuf_r+0x2a>
	...

08007a38 <__swsetup_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4b29      	ldr	r3, [pc, #164]	@ (8007ae0 <__swsetup_r+0xa8>)
 8007a3c:	4605      	mov	r5, r0
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	460c      	mov	r4, r1
 8007a42:	b118      	cbz	r0, 8007a4c <__swsetup_r+0x14>
 8007a44:	6a03      	ldr	r3, [r0, #32]
 8007a46:	b90b      	cbnz	r3, 8007a4c <__swsetup_r+0x14>
 8007a48:	f7ff fea4 	bl	8007794 <__sinit>
 8007a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a50:	0719      	lsls	r1, r3, #28
 8007a52:	d422      	bmi.n	8007a9a <__swsetup_r+0x62>
 8007a54:	06da      	lsls	r2, r3, #27
 8007a56:	d407      	bmi.n	8007a68 <__swsetup_r+0x30>
 8007a58:	2209      	movs	r2, #9
 8007a5a:	602a      	str	r2, [r5, #0]
 8007a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a60:	81a3      	strh	r3, [r4, #12]
 8007a62:	f04f 30ff 	mov.w	r0, #4294967295
 8007a66:	e033      	b.n	8007ad0 <__swsetup_r+0x98>
 8007a68:	0758      	lsls	r0, r3, #29
 8007a6a:	d512      	bpl.n	8007a92 <__swsetup_r+0x5a>
 8007a6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a6e:	b141      	cbz	r1, 8007a82 <__swsetup_r+0x4a>
 8007a70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a74:	4299      	cmp	r1, r3
 8007a76:	d002      	beq.n	8007a7e <__swsetup_r+0x46>
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f000 f975 	bl	8007d68 <_free_r>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a82:	89a3      	ldrh	r3, [r4, #12]
 8007a84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a88:	81a3      	strh	r3, [r4, #12]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	6063      	str	r3, [r4, #4]
 8007a8e:	6923      	ldr	r3, [r4, #16]
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	f043 0308 	orr.w	r3, r3, #8
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	6923      	ldr	r3, [r4, #16]
 8007a9c:	b94b      	cbnz	r3, 8007ab2 <__swsetup_r+0x7a>
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aa8:	d003      	beq.n	8007ab2 <__swsetup_r+0x7a>
 8007aaa:	4621      	mov	r1, r4
 8007aac:	4628      	mov	r0, r5
 8007aae:	f000 ff65 	bl	800897c <__smakebuf_r>
 8007ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab6:	f013 0201 	ands.w	r2, r3, #1
 8007aba:	d00a      	beq.n	8007ad2 <__swsetup_r+0x9a>
 8007abc:	2200      	movs	r2, #0
 8007abe:	60a2      	str	r2, [r4, #8]
 8007ac0:	6962      	ldr	r2, [r4, #20]
 8007ac2:	4252      	negs	r2, r2
 8007ac4:	61a2      	str	r2, [r4, #24]
 8007ac6:	6922      	ldr	r2, [r4, #16]
 8007ac8:	b942      	cbnz	r2, 8007adc <__swsetup_r+0xa4>
 8007aca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ace:	d1c5      	bne.n	8007a5c <__swsetup_r+0x24>
 8007ad0:	bd38      	pop	{r3, r4, r5, pc}
 8007ad2:	0799      	lsls	r1, r3, #30
 8007ad4:	bf58      	it	pl
 8007ad6:	6962      	ldrpl	r2, [r4, #20]
 8007ad8:	60a2      	str	r2, [r4, #8]
 8007ada:	e7f4      	b.n	8007ac6 <__swsetup_r+0x8e>
 8007adc:	2000      	movs	r0, #0
 8007ade:	e7f7      	b.n	8007ad0 <__swsetup_r+0x98>
 8007ae0:	20000030 	.word	0x20000030

08007ae4 <memset>:
 8007ae4:	4402      	add	r2, r0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d100      	bne.n	8007aee <memset+0xa>
 8007aec:	4770      	bx	lr
 8007aee:	f803 1b01 	strb.w	r1, [r3], #1
 8007af2:	e7f9      	b.n	8007ae8 <memset+0x4>

08007af4 <strchr>:
 8007af4:	b2c9      	uxtb	r1, r1
 8007af6:	4603      	mov	r3, r0
 8007af8:	4618      	mov	r0, r3
 8007afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007afe:	b112      	cbz	r2, 8007b06 <strchr+0x12>
 8007b00:	428a      	cmp	r2, r1
 8007b02:	d1f9      	bne.n	8007af8 <strchr+0x4>
 8007b04:	4770      	bx	lr
 8007b06:	2900      	cmp	r1, #0
 8007b08:	bf18      	it	ne
 8007b0a:	2000      	movne	r0, #0
 8007b0c:	4770      	bx	lr

08007b0e <strncmp>:
 8007b0e:	b510      	push	{r4, lr}
 8007b10:	b16a      	cbz	r2, 8007b2e <strncmp+0x20>
 8007b12:	3901      	subs	r1, #1
 8007b14:	1884      	adds	r4, r0, r2
 8007b16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b1a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d103      	bne.n	8007b2a <strncmp+0x1c>
 8007b22:	42a0      	cmp	r0, r4
 8007b24:	d001      	beq.n	8007b2a <strncmp+0x1c>
 8007b26:	2a00      	cmp	r2, #0
 8007b28:	d1f5      	bne.n	8007b16 <strncmp+0x8>
 8007b2a:	1ad0      	subs	r0, r2, r3
 8007b2c:	bd10      	pop	{r4, pc}
 8007b2e:	4610      	mov	r0, r2
 8007b30:	e7fc      	b.n	8007b2c <strncmp+0x1e>
	...

08007b34 <strtok>:
 8007b34:	4b16      	ldr	r3, [pc, #88]	@ (8007b90 <strtok+0x5c>)
 8007b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3a:	681f      	ldr	r7, [r3, #0]
 8007b3c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007b3e:	4605      	mov	r5, r0
 8007b40:	460e      	mov	r6, r1
 8007b42:	b9ec      	cbnz	r4, 8007b80 <strtok+0x4c>
 8007b44:	2050      	movs	r0, #80	@ 0x50
 8007b46:	f000 f959 	bl	8007dfc <malloc>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	6478      	str	r0, [r7, #68]	@ 0x44
 8007b4e:	b920      	cbnz	r0, 8007b5a <strtok+0x26>
 8007b50:	4b10      	ldr	r3, [pc, #64]	@ (8007b94 <strtok+0x60>)
 8007b52:	4811      	ldr	r0, [pc, #68]	@ (8007b98 <strtok+0x64>)
 8007b54:	215b      	movs	r1, #91	@ 0x5b
 8007b56:	f000 f8e9 	bl	8007d2c <__assert_func>
 8007b5a:	e9c0 4400 	strd	r4, r4, [r0]
 8007b5e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007b62:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007b66:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007b6a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007b6e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007b72:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007b76:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007b7a:	6184      	str	r4, [r0, #24]
 8007b7c:	7704      	strb	r4, [r0, #28]
 8007b7e:	6244      	str	r4, [r0, #36]	@ 0x24
 8007b80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b82:	4631      	mov	r1, r6
 8007b84:	4628      	mov	r0, r5
 8007b86:	2301      	movs	r3, #1
 8007b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8c:	f000 b806 	b.w	8007b9c <__strtok_r>
 8007b90:	20000030 	.word	0x20000030
 8007b94:	08009188 	.word	0x08009188
 8007b98:	0800919f 	.word	0x0800919f

08007b9c <__strtok_r>:
 8007b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	b908      	cbnz	r0, 8007ba6 <__strtok_r+0xa>
 8007ba2:	6814      	ldr	r4, [r2, #0]
 8007ba4:	b144      	cbz	r4, 8007bb8 <__strtok_r+0x1c>
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007bac:	460f      	mov	r7, r1
 8007bae:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007bb2:	b91e      	cbnz	r6, 8007bbc <__strtok_r+0x20>
 8007bb4:	b965      	cbnz	r5, 8007bd0 <__strtok_r+0x34>
 8007bb6:	6015      	str	r5, [r2, #0]
 8007bb8:	2000      	movs	r0, #0
 8007bba:	e005      	b.n	8007bc8 <__strtok_r+0x2c>
 8007bbc:	42b5      	cmp	r5, r6
 8007bbe:	d1f6      	bne.n	8007bae <__strtok_r+0x12>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1f0      	bne.n	8007ba6 <__strtok_r+0xa>
 8007bc4:	6014      	str	r4, [r2, #0]
 8007bc6:	7003      	strb	r3, [r0, #0]
 8007bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bca:	461c      	mov	r4, r3
 8007bcc:	e00c      	b.n	8007be8 <__strtok_r+0x4c>
 8007bce:	b91d      	cbnz	r5, 8007bd8 <__strtok_r+0x3c>
 8007bd0:	4627      	mov	r7, r4
 8007bd2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007bd6:	460e      	mov	r6, r1
 8007bd8:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007bdc:	42ab      	cmp	r3, r5
 8007bde:	d1f6      	bne.n	8007bce <__strtok_r+0x32>
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d0f2      	beq.n	8007bca <__strtok_r+0x2e>
 8007be4:	2300      	movs	r3, #0
 8007be6:	703b      	strb	r3, [r7, #0]
 8007be8:	6014      	str	r4, [r2, #0]
 8007bea:	e7ed      	b.n	8007bc8 <__strtok_r+0x2c>

08007bec <strstr>:
 8007bec:	780a      	ldrb	r2, [r1, #0]
 8007bee:	b570      	push	{r4, r5, r6, lr}
 8007bf0:	b96a      	cbnz	r2, 8007c0e <strstr+0x22>
 8007bf2:	bd70      	pop	{r4, r5, r6, pc}
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d109      	bne.n	8007c0c <strstr+0x20>
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0f6      	beq.n	8007bf2 <strstr+0x6>
 8007c04:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007c08:	429e      	cmp	r6, r3
 8007c0a:	d0f7      	beq.n	8007bfc <strstr+0x10>
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	7803      	ldrb	r3, [r0, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1ef      	bne.n	8007bf4 <strstr+0x8>
 8007c14:	4618      	mov	r0, r3
 8007c16:	e7ec      	b.n	8007bf2 <strstr+0x6>

08007c18 <_close_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d06      	ldr	r5, [pc, #24]	@ (8007c34 <_close_r+0x1c>)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	602b      	str	r3, [r5, #0]
 8007c24:	f7fa fe2e 	bl	8002884 <_close>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_close_r+0x1a>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_close_r+0x1a>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	20000db4 	.word	0x20000db4

08007c38 <_lseek_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	4d07      	ldr	r5, [pc, #28]	@ (8007c58 <_lseek_r+0x20>)
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	4608      	mov	r0, r1
 8007c40:	4611      	mov	r1, r2
 8007c42:	2200      	movs	r2, #0
 8007c44:	602a      	str	r2, [r5, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	f7fa fe43 	bl	80028d2 <_lseek>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_lseek_r+0x1e>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_lseek_r+0x1e>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	20000db4 	.word	0x20000db4

08007c5c <_read_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4d07      	ldr	r5, [pc, #28]	@ (8007c7c <_read_r+0x20>)
 8007c60:	4604      	mov	r4, r0
 8007c62:	4608      	mov	r0, r1
 8007c64:	4611      	mov	r1, r2
 8007c66:	2200      	movs	r2, #0
 8007c68:	602a      	str	r2, [r5, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f7fa fdd1 	bl	8002812 <_read>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_read_r+0x1e>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_read_r+0x1e>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	20000db4 	.word	0x20000db4

08007c80 <_write_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d07      	ldr	r5, [pc, #28]	@ (8007ca0 <_write_r+0x20>)
 8007c84:	4604      	mov	r4, r0
 8007c86:	4608      	mov	r0, r1
 8007c88:	4611      	mov	r1, r2
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	602a      	str	r2, [r5, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f7fa fddc 	bl	800284c <_write>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_write_r+0x1e>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_write_r+0x1e>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	20000db4 	.word	0x20000db4

08007ca4 <__errno>:
 8007ca4:	4b01      	ldr	r3, [pc, #4]	@ (8007cac <__errno+0x8>)
 8007ca6:	6818      	ldr	r0, [r3, #0]
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	20000030 	.word	0x20000030

08007cb0 <__libc_init_array>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	4d0d      	ldr	r5, [pc, #52]	@ (8007ce8 <__libc_init_array+0x38>)
 8007cb4:	4c0d      	ldr	r4, [pc, #52]	@ (8007cec <__libc_init_array+0x3c>)
 8007cb6:	1b64      	subs	r4, r4, r5
 8007cb8:	10a4      	asrs	r4, r4, #2
 8007cba:	2600      	movs	r6, #0
 8007cbc:	42a6      	cmp	r6, r4
 8007cbe:	d109      	bne.n	8007cd4 <__libc_init_array+0x24>
 8007cc0:	4d0b      	ldr	r5, [pc, #44]	@ (8007cf0 <__libc_init_array+0x40>)
 8007cc2:	4c0c      	ldr	r4, [pc, #48]	@ (8007cf4 <__libc_init_array+0x44>)
 8007cc4:	f000 ff98 	bl	8008bf8 <_init>
 8007cc8:	1b64      	subs	r4, r4, r5
 8007cca:	10a4      	asrs	r4, r4, #2
 8007ccc:	2600      	movs	r6, #0
 8007cce:	42a6      	cmp	r6, r4
 8007cd0:	d105      	bne.n	8007cde <__libc_init_array+0x2e>
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd8:	4798      	blx	r3
 8007cda:	3601      	adds	r6, #1
 8007cdc:	e7ee      	b.n	8007cbc <__libc_init_array+0xc>
 8007cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ce2:	4798      	blx	r3
 8007ce4:	3601      	adds	r6, #1
 8007ce6:	e7f2      	b.n	8007cce <__libc_init_array+0x1e>
 8007ce8:	08009270 	.word	0x08009270
 8007cec:	08009270 	.word	0x08009270
 8007cf0:	08009270 	.word	0x08009270
 8007cf4:	08009274 	.word	0x08009274

08007cf8 <__retarget_lock_init_recursive>:
 8007cf8:	4770      	bx	lr

08007cfa <__retarget_lock_acquire_recursive>:
 8007cfa:	4770      	bx	lr

08007cfc <__retarget_lock_release_recursive>:
 8007cfc:	4770      	bx	lr

08007cfe <strcpy>:
 8007cfe:	4603      	mov	r3, r0
 8007d00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d04:	f803 2b01 	strb.w	r2, [r3], #1
 8007d08:	2a00      	cmp	r2, #0
 8007d0a:	d1f9      	bne.n	8007d00 <strcpy+0x2>
 8007d0c:	4770      	bx	lr

08007d0e <memcpy>:
 8007d0e:	440a      	add	r2, r1
 8007d10:	4291      	cmp	r1, r2
 8007d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d16:	d100      	bne.n	8007d1a <memcpy+0xc>
 8007d18:	4770      	bx	lr
 8007d1a:	b510      	push	{r4, lr}
 8007d1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d24:	4291      	cmp	r1, r2
 8007d26:	d1f9      	bne.n	8007d1c <memcpy+0xe>
 8007d28:	bd10      	pop	{r4, pc}
	...

08007d2c <__assert_func>:
 8007d2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d2e:	4614      	mov	r4, r2
 8007d30:	461a      	mov	r2, r3
 8007d32:	4b09      	ldr	r3, [pc, #36]	@ (8007d58 <__assert_func+0x2c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4605      	mov	r5, r0
 8007d38:	68d8      	ldr	r0, [r3, #12]
 8007d3a:	b14c      	cbz	r4, 8007d50 <__assert_func+0x24>
 8007d3c:	4b07      	ldr	r3, [pc, #28]	@ (8007d5c <__assert_func+0x30>)
 8007d3e:	9100      	str	r1, [sp, #0]
 8007d40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d44:	4906      	ldr	r1, [pc, #24]	@ (8007d60 <__assert_func+0x34>)
 8007d46:	462b      	mov	r3, r5
 8007d48:	f000 fde0 	bl	800890c <fiprintf>
 8007d4c:	f000 fed2 	bl	8008af4 <abort>
 8007d50:	4b04      	ldr	r3, [pc, #16]	@ (8007d64 <__assert_func+0x38>)
 8007d52:	461c      	mov	r4, r3
 8007d54:	e7f3      	b.n	8007d3e <__assert_func+0x12>
 8007d56:	bf00      	nop
 8007d58:	20000030 	.word	0x20000030
 8007d5c:	080091f9 	.word	0x080091f9
 8007d60:	08009206 	.word	0x08009206
 8007d64:	08009234 	.word	0x08009234

08007d68 <_free_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	d041      	beq.n	8007df4 <_free_r+0x8c>
 8007d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d74:	1f0c      	subs	r4, r1, #4
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bfb8      	it	lt
 8007d7a:	18e4      	addlt	r4, r4, r3
 8007d7c:	f000 f8e8 	bl	8007f50 <__malloc_lock>
 8007d80:	4a1d      	ldr	r2, [pc, #116]	@ (8007df8 <_free_r+0x90>)
 8007d82:	6813      	ldr	r3, [r2, #0]
 8007d84:	b933      	cbnz	r3, 8007d94 <_free_r+0x2c>
 8007d86:	6063      	str	r3, [r4, #4]
 8007d88:	6014      	str	r4, [r2, #0]
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d90:	f000 b8e4 	b.w	8007f5c <__malloc_unlock>
 8007d94:	42a3      	cmp	r3, r4
 8007d96:	d908      	bls.n	8007daa <_free_r+0x42>
 8007d98:	6820      	ldr	r0, [r4, #0]
 8007d9a:	1821      	adds	r1, r4, r0
 8007d9c:	428b      	cmp	r3, r1
 8007d9e:	bf01      	itttt	eq
 8007da0:	6819      	ldreq	r1, [r3, #0]
 8007da2:	685b      	ldreq	r3, [r3, #4]
 8007da4:	1809      	addeq	r1, r1, r0
 8007da6:	6021      	streq	r1, [r4, #0]
 8007da8:	e7ed      	b.n	8007d86 <_free_r+0x1e>
 8007daa:	461a      	mov	r2, r3
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	b10b      	cbz	r3, 8007db4 <_free_r+0x4c>
 8007db0:	42a3      	cmp	r3, r4
 8007db2:	d9fa      	bls.n	8007daa <_free_r+0x42>
 8007db4:	6811      	ldr	r1, [r2, #0]
 8007db6:	1850      	adds	r0, r2, r1
 8007db8:	42a0      	cmp	r0, r4
 8007dba:	d10b      	bne.n	8007dd4 <_free_r+0x6c>
 8007dbc:	6820      	ldr	r0, [r4, #0]
 8007dbe:	4401      	add	r1, r0
 8007dc0:	1850      	adds	r0, r2, r1
 8007dc2:	4283      	cmp	r3, r0
 8007dc4:	6011      	str	r1, [r2, #0]
 8007dc6:	d1e0      	bne.n	8007d8a <_free_r+0x22>
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	6053      	str	r3, [r2, #4]
 8007dce:	4408      	add	r0, r1
 8007dd0:	6010      	str	r0, [r2, #0]
 8007dd2:	e7da      	b.n	8007d8a <_free_r+0x22>
 8007dd4:	d902      	bls.n	8007ddc <_free_r+0x74>
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	602b      	str	r3, [r5, #0]
 8007dda:	e7d6      	b.n	8007d8a <_free_r+0x22>
 8007ddc:	6820      	ldr	r0, [r4, #0]
 8007dde:	1821      	adds	r1, r4, r0
 8007de0:	428b      	cmp	r3, r1
 8007de2:	bf04      	itt	eq
 8007de4:	6819      	ldreq	r1, [r3, #0]
 8007de6:	685b      	ldreq	r3, [r3, #4]
 8007de8:	6063      	str	r3, [r4, #4]
 8007dea:	bf04      	itt	eq
 8007dec:	1809      	addeq	r1, r1, r0
 8007dee:	6021      	streq	r1, [r4, #0]
 8007df0:	6054      	str	r4, [r2, #4]
 8007df2:	e7ca      	b.n	8007d8a <_free_r+0x22>
 8007df4:	bd38      	pop	{r3, r4, r5, pc}
 8007df6:	bf00      	nop
 8007df8:	20000dc0 	.word	0x20000dc0

08007dfc <malloc>:
 8007dfc:	4b02      	ldr	r3, [pc, #8]	@ (8007e08 <malloc+0xc>)
 8007dfe:	4601      	mov	r1, r0
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	f000 b825 	b.w	8007e50 <_malloc_r>
 8007e06:	bf00      	nop
 8007e08:	20000030 	.word	0x20000030

08007e0c <sbrk_aligned>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	4e0f      	ldr	r6, [pc, #60]	@ (8007e4c <sbrk_aligned+0x40>)
 8007e10:	460c      	mov	r4, r1
 8007e12:	6831      	ldr	r1, [r6, #0]
 8007e14:	4605      	mov	r5, r0
 8007e16:	b911      	cbnz	r1, 8007e1e <sbrk_aligned+0x12>
 8007e18:	f000 fe5c 	bl	8008ad4 <_sbrk_r>
 8007e1c:	6030      	str	r0, [r6, #0]
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4628      	mov	r0, r5
 8007e22:	f000 fe57 	bl	8008ad4 <_sbrk_r>
 8007e26:	1c43      	adds	r3, r0, #1
 8007e28:	d103      	bne.n	8007e32 <sbrk_aligned+0x26>
 8007e2a:	f04f 34ff 	mov.w	r4, #4294967295
 8007e2e:	4620      	mov	r0, r4
 8007e30:	bd70      	pop	{r4, r5, r6, pc}
 8007e32:	1cc4      	adds	r4, r0, #3
 8007e34:	f024 0403 	bic.w	r4, r4, #3
 8007e38:	42a0      	cmp	r0, r4
 8007e3a:	d0f8      	beq.n	8007e2e <sbrk_aligned+0x22>
 8007e3c:	1a21      	subs	r1, r4, r0
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f000 fe48 	bl	8008ad4 <_sbrk_r>
 8007e44:	3001      	adds	r0, #1
 8007e46:	d1f2      	bne.n	8007e2e <sbrk_aligned+0x22>
 8007e48:	e7ef      	b.n	8007e2a <sbrk_aligned+0x1e>
 8007e4a:	bf00      	nop
 8007e4c:	20000dbc 	.word	0x20000dbc

08007e50 <_malloc_r>:
 8007e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e54:	1ccd      	adds	r5, r1, #3
 8007e56:	f025 0503 	bic.w	r5, r5, #3
 8007e5a:	3508      	adds	r5, #8
 8007e5c:	2d0c      	cmp	r5, #12
 8007e5e:	bf38      	it	cc
 8007e60:	250c      	movcc	r5, #12
 8007e62:	2d00      	cmp	r5, #0
 8007e64:	4606      	mov	r6, r0
 8007e66:	db01      	blt.n	8007e6c <_malloc_r+0x1c>
 8007e68:	42a9      	cmp	r1, r5
 8007e6a:	d904      	bls.n	8007e76 <_malloc_r+0x26>
 8007e6c:	230c      	movs	r3, #12
 8007e6e:	6033      	str	r3, [r6, #0]
 8007e70:	2000      	movs	r0, #0
 8007e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f4c <_malloc_r+0xfc>
 8007e7a:	f000 f869 	bl	8007f50 <__malloc_lock>
 8007e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e82:	461c      	mov	r4, r3
 8007e84:	bb44      	cbnz	r4, 8007ed8 <_malloc_r+0x88>
 8007e86:	4629      	mov	r1, r5
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f7ff ffbf 	bl	8007e0c <sbrk_aligned>
 8007e8e:	1c43      	adds	r3, r0, #1
 8007e90:	4604      	mov	r4, r0
 8007e92:	d158      	bne.n	8007f46 <_malloc_r+0xf6>
 8007e94:	f8d8 4000 	ldr.w	r4, [r8]
 8007e98:	4627      	mov	r7, r4
 8007e9a:	2f00      	cmp	r7, #0
 8007e9c:	d143      	bne.n	8007f26 <_malloc_r+0xd6>
 8007e9e:	2c00      	cmp	r4, #0
 8007ea0:	d04b      	beq.n	8007f3a <_malloc_r+0xea>
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	4639      	mov	r1, r7
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	eb04 0903 	add.w	r9, r4, r3
 8007eac:	f000 fe12 	bl	8008ad4 <_sbrk_r>
 8007eb0:	4581      	cmp	r9, r0
 8007eb2:	d142      	bne.n	8007f3a <_malloc_r+0xea>
 8007eb4:	6821      	ldr	r1, [r4, #0]
 8007eb6:	1a6d      	subs	r5, r5, r1
 8007eb8:	4629      	mov	r1, r5
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f7ff ffa6 	bl	8007e0c <sbrk_aligned>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d03a      	beq.n	8007f3a <_malloc_r+0xea>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	442b      	add	r3, r5
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	f8d8 3000 	ldr.w	r3, [r8]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	bb62      	cbnz	r2, 8007f2c <_malloc_r+0xdc>
 8007ed2:	f8c8 7000 	str.w	r7, [r8]
 8007ed6:	e00f      	b.n	8007ef8 <_malloc_r+0xa8>
 8007ed8:	6822      	ldr	r2, [r4, #0]
 8007eda:	1b52      	subs	r2, r2, r5
 8007edc:	d420      	bmi.n	8007f20 <_malloc_r+0xd0>
 8007ede:	2a0b      	cmp	r2, #11
 8007ee0:	d917      	bls.n	8007f12 <_malloc_r+0xc2>
 8007ee2:	1961      	adds	r1, r4, r5
 8007ee4:	42a3      	cmp	r3, r4
 8007ee6:	6025      	str	r5, [r4, #0]
 8007ee8:	bf18      	it	ne
 8007eea:	6059      	strne	r1, [r3, #4]
 8007eec:	6863      	ldr	r3, [r4, #4]
 8007eee:	bf08      	it	eq
 8007ef0:	f8c8 1000 	streq.w	r1, [r8]
 8007ef4:	5162      	str	r2, [r4, r5]
 8007ef6:	604b      	str	r3, [r1, #4]
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f000 f82f 	bl	8007f5c <__malloc_unlock>
 8007efe:	f104 000b 	add.w	r0, r4, #11
 8007f02:	1d23      	adds	r3, r4, #4
 8007f04:	f020 0007 	bic.w	r0, r0, #7
 8007f08:	1ac2      	subs	r2, r0, r3
 8007f0a:	bf1c      	itt	ne
 8007f0c:	1a1b      	subne	r3, r3, r0
 8007f0e:	50a3      	strne	r3, [r4, r2]
 8007f10:	e7af      	b.n	8007e72 <_malloc_r+0x22>
 8007f12:	6862      	ldr	r2, [r4, #4]
 8007f14:	42a3      	cmp	r3, r4
 8007f16:	bf0c      	ite	eq
 8007f18:	f8c8 2000 	streq.w	r2, [r8]
 8007f1c:	605a      	strne	r2, [r3, #4]
 8007f1e:	e7eb      	b.n	8007ef8 <_malloc_r+0xa8>
 8007f20:	4623      	mov	r3, r4
 8007f22:	6864      	ldr	r4, [r4, #4]
 8007f24:	e7ae      	b.n	8007e84 <_malloc_r+0x34>
 8007f26:	463c      	mov	r4, r7
 8007f28:	687f      	ldr	r7, [r7, #4]
 8007f2a:	e7b6      	b.n	8007e9a <_malloc_r+0x4a>
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	42a3      	cmp	r3, r4
 8007f32:	d1fb      	bne.n	8007f2c <_malloc_r+0xdc>
 8007f34:	2300      	movs	r3, #0
 8007f36:	6053      	str	r3, [r2, #4]
 8007f38:	e7de      	b.n	8007ef8 <_malloc_r+0xa8>
 8007f3a:	230c      	movs	r3, #12
 8007f3c:	6033      	str	r3, [r6, #0]
 8007f3e:	4630      	mov	r0, r6
 8007f40:	f000 f80c 	bl	8007f5c <__malloc_unlock>
 8007f44:	e794      	b.n	8007e70 <_malloc_r+0x20>
 8007f46:	6005      	str	r5, [r0, #0]
 8007f48:	e7d6      	b.n	8007ef8 <_malloc_r+0xa8>
 8007f4a:	bf00      	nop
 8007f4c:	20000dc0 	.word	0x20000dc0

08007f50 <__malloc_lock>:
 8007f50:	4801      	ldr	r0, [pc, #4]	@ (8007f58 <__malloc_lock+0x8>)
 8007f52:	f7ff bed2 	b.w	8007cfa <__retarget_lock_acquire_recursive>
 8007f56:	bf00      	nop
 8007f58:	20000db8 	.word	0x20000db8

08007f5c <__malloc_unlock>:
 8007f5c:	4801      	ldr	r0, [pc, #4]	@ (8007f64 <__malloc_unlock+0x8>)
 8007f5e:	f7ff becd 	b.w	8007cfc <__retarget_lock_release_recursive>
 8007f62:	bf00      	nop
 8007f64:	20000db8 	.word	0x20000db8

08007f68 <__ssputs_r>:
 8007f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6c:	688e      	ldr	r6, [r1, #8]
 8007f6e:	461f      	mov	r7, r3
 8007f70:	42be      	cmp	r6, r7
 8007f72:	680b      	ldr	r3, [r1, #0]
 8007f74:	4682      	mov	sl, r0
 8007f76:	460c      	mov	r4, r1
 8007f78:	4690      	mov	r8, r2
 8007f7a:	d82d      	bhi.n	8007fd8 <__ssputs_r+0x70>
 8007f7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f84:	d026      	beq.n	8007fd4 <__ssputs_r+0x6c>
 8007f86:	6965      	ldr	r5, [r4, #20]
 8007f88:	6909      	ldr	r1, [r1, #16]
 8007f8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f8e:	eba3 0901 	sub.w	r9, r3, r1
 8007f92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f96:	1c7b      	adds	r3, r7, #1
 8007f98:	444b      	add	r3, r9
 8007f9a:	106d      	asrs	r5, r5, #1
 8007f9c:	429d      	cmp	r5, r3
 8007f9e:	bf38      	it	cc
 8007fa0:	461d      	movcc	r5, r3
 8007fa2:	0553      	lsls	r3, r2, #21
 8007fa4:	d527      	bpl.n	8007ff6 <__ssputs_r+0x8e>
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	f7ff ff52 	bl	8007e50 <_malloc_r>
 8007fac:	4606      	mov	r6, r0
 8007fae:	b360      	cbz	r0, 800800a <__ssputs_r+0xa2>
 8007fb0:	6921      	ldr	r1, [r4, #16]
 8007fb2:	464a      	mov	r2, r9
 8007fb4:	f7ff feab 	bl	8007d0e <memcpy>
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fc2:	81a3      	strh	r3, [r4, #12]
 8007fc4:	6126      	str	r6, [r4, #16]
 8007fc6:	6165      	str	r5, [r4, #20]
 8007fc8:	444e      	add	r6, r9
 8007fca:	eba5 0509 	sub.w	r5, r5, r9
 8007fce:	6026      	str	r6, [r4, #0]
 8007fd0:	60a5      	str	r5, [r4, #8]
 8007fd2:	463e      	mov	r6, r7
 8007fd4:	42be      	cmp	r6, r7
 8007fd6:	d900      	bls.n	8007fda <__ssputs_r+0x72>
 8007fd8:	463e      	mov	r6, r7
 8007fda:	6820      	ldr	r0, [r4, #0]
 8007fdc:	4632      	mov	r2, r6
 8007fde:	4641      	mov	r1, r8
 8007fe0:	f000 fd3c 	bl	8008a5c <memmove>
 8007fe4:	68a3      	ldr	r3, [r4, #8]
 8007fe6:	1b9b      	subs	r3, r3, r6
 8007fe8:	60a3      	str	r3, [r4, #8]
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	4433      	add	r3, r6
 8007fee:	6023      	str	r3, [r4, #0]
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff6:	462a      	mov	r2, r5
 8007ff8:	f000 fd83 	bl	8008b02 <_realloc_r>
 8007ffc:	4606      	mov	r6, r0
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d1e0      	bne.n	8007fc4 <__ssputs_r+0x5c>
 8008002:	6921      	ldr	r1, [r4, #16]
 8008004:	4650      	mov	r0, sl
 8008006:	f7ff feaf 	bl	8007d68 <_free_r>
 800800a:	230c      	movs	r3, #12
 800800c:	f8ca 3000 	str.w	r3, [sl]
 8008010:	89a3      	ldrh	r3, [r4, #12]
 8008012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008016:	81a3      	strh	r3, [r4, #12]
 8008018:	f04f 30ff 	mov.w	r0, #4294967295
 800801c:	e7e9      	b.n	8007ff2 <__ssputs_r+0x8a>
	...

08008020 <_svfiprintf_r>:
 8008020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008024:	4698      	mov	r8, r3
 8008026:	898b      	ldrh	r3, [r1, #12]
 8008028:	061b      	lsls	r3, r3, #24
 800802a:	b09d      	sub	sp, #116	@ 0x74
 800802c:	4607      	mov	r7, r0
 800802e:	460d      	mov	r5, r1
 8008030:	4614      	mov	r4, r2
 8008032:	d510      	bpl.n	8008056 <_svfiprintf_r+0x36>
 8008034:	690b      	ldr	r3, [r1, #16]
 8008036:	b973      	cbnz	r3, 8008056 <_svfiprintf_r+0x36>
 8008038:	2140      	movs	r1, #64	@ 0x40
 800803a:	f7ff ff09 	bl	8007e50 <_malloc_r>
 800803e:	6028      	str	r0, [r5, #0]
 8008040:	6128      	str	r0, [r5, #16]
 8008042:	b930      	cbnz	r0, 8008052 <_svfiprintf_r+0x32>
 8008044:	230c      	movs	r3, #12
 8008046:	603b      	str	r3, [r7, #0]
 8008048:	f04f 30ff 	mov.w	r0, #4294967295
 800804c:	b01d      	add	sp, #116	@ 0x74
 800804e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008052:	2340      	movs	r3, #64	@ 0x40
 8008054:	616b      	str	r3, [r5, #20]
 8008056:	2300      	movs	r3, #0
 8008058:	9309      	str	r3, [sp, #36]	@ 0x24
 800805a:	2320      	movs	r3, #32
 800805c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008060:	f8cd 800c 	str.w	r8, [sp, #12]
 8008064:	2330      	movs	r3, #48	@ 0x30
 8008066:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008204 <_svfiprintf_r+0x1e4>
 800806a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800806e:	f04f 0901 	mov.w	r9, #1
 8008072:	4623      	mov	r3, r4
 8008074:	469a      	mov	sl, r3
 8008076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800807a:	b10a      	cbz	r2, 8008080 <_svfiprintf_r+0x60>
 800807c:	2a25      	cmp	r2, #37	@ 0x25
 800807e:	d1f9      	bne.n	8008074 <_svfiprintf_r+0x54>
 8008080:	ebba 0b04 	subs.w	fp, sl, r4
 8008084:	d00b      	beq.n	800809e <_svfiprintf_r+0x7e>
 8008086:	465b      	mov	r3, fp
 8008088:	4622      	mov	r2, r4
 800808a:	4629      	mov	r1, r5
 800808c:	4638      	mov	r0, r7
 800808e:	f7ff ff6b 	bl	8007f68 <__ssputs_r>
 8008092:	3001      	adds	r0, #1
 8008094:	f000 80a7 	beq.w	80081e6 <_svfiprintf_r+0x1c6>
 8008098:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800809a:	445a      	add	r2, fp
 800809c:	9209      	str	r2, [sp, #36]	@ 0x24
 800809e:	f89a 3000 	ldrb.w	r3, [sl]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 809f 	beq.w	80081e6 <_svfiprintf_r+0x1c6>
 80080a8:	2300      	movs	r3, #0
 80080aa:	f04f 32ff 	mov.w	r2, #4294967295
 80080ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080b2:	f10a 0a01 	add.w	sl, sl, #1
 80080b6:	9304      	str	r3, [sp, #16]
 80080b8:	9307      	str	r3, [sp, #28]
 80080ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080be:	931a      	str	r3, [sp, #104]	@ 0x68
 80080c0:	4654      	mov	r4, sl
 80080c2:	2205      	movs	r2, #5
 80080c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c8:	484e      	ldr	r0, [pc, #312]	@ (8008204 <_svfiprintf_r+0x1e4>)
 80080ca:	f7f8 f8a1 	bl	8000210 <memchr>
 80080ce:	9a04      	ldr	r2, [sp, #16]
 80080d0:	b9d8      	cbnz	r0, 800810a <_svfiprintf_r+0xea>
 80080d2:	06d0      	lsls	r0, r2, #27
 80080d4:	bf44      	itt	mi
 80080d6:	2320      	movmi	r3, #32
 80080d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080dc:	0711      	lsls	r1, r2, #28
 80080de:	bf44      	itt	mi
 80080e0:	232b      	movmi	r3, #43	@ 0x2b
 80080e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080e6:	f89a 3000 	ldrb.w	r3, [sl]
 80080ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80080ec:	d015      	beq.n	800811a <_svfiprintf_r+0xfa>
 80080ee:	9a07      	ldr	r2, [sp, #28]
 80080f0:	4654      	mov	r4, sl
 80080f2:	2000      	movs	r0, #0
 80080f4:	f04f 0c0a 	mov.w	ip, #10
 80080f8:	4621      	mov	r1, r4
 80080fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080fe:	3b30      	subs	r3, #48	@ 0x30
 8008100:	2b09      	cmp	r3, #9
 8008102:	d94b      	bls.n	800819c <_svfiprintf_r+0x17c>
 8008104:	b1b0      	cbz	r0, 8008134 <_svfiprintf_r+0x114>
 8008106:	9207      	str	r2, [sp, #28]
 8008108:	e014      	b.n	8008134 <_svfiprintf_r+0x114>
 800810a:	eba0 0308 	sub.w	r3, r0, r8
 800810e:	fa09 f303 	lsl.w	r3, r9, r3
 8008112:	4313      	orrs	r3, r2
 8008114:	9304      	str	r3, [sp, #16]
 8008116:	46a2      	mov	sl, r4
 8008118:	e7d2      	b.n	80080c0 <_svfiprintf_r+0xa0>
 800811a:	9b03      	ldr	r3, [sp, #12]
 800811c:	1d19      	adds	r1, r3, #4
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	9103      	str	r1, [sp, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	bfbb      	ittet	lt
 8008126:	425b      	neglt	r3, r3
 8008128:	f042 0202 	orrlt.w	r2, r2, #2
 800812c:	9307      	strge	r3, [sp, #28]
 800812e:	9307      	strlt	r3, [sp, #28]
 8008130:	bfb8      	it	lt
 8008132:	9204      	strlt	r2, [sp, #16]
 8008134:	7823      	ldrb	r3, [r4, #0]
 8008136:	2b2e      	cmp	r3, #46	@ 0x2e
 8008138:	d10a      	bne.n	8008150 <_svfiprintf_r+0x130>
 800813a:	7863      	ldrb	r3, [r4, #1]
 800813c:	2b2a      	cmp	r3, #42	@ 0x2a
 800813e:	d132      	bne.n	80081a6 <_svfiprintf_r+0x186>
 8008140:	9b03      	ldr	r3, [sp, #12]
 8008142:	1d1a      	adds	r2, r3, #4
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	9203      	str	r2, [sp, #12]
 8008148:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800814c:	3402      	adds	r4, #2
 800814e:	9305      	str	r3, [sp, #20]
 8008150:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008214 <_svfiprintf_r+0x1f4>
 8008154:	7821      	ldrb	r1, [r4, #0]
 8008156:	2203      	movs	r2, #3
 8008158:	4650      	mov	r0, sl
 800815a:	f7f8 f859 	bl	8000210 <memchr>
 800815e:	b138      	cbz	r0, 8008170 <_svfiprintf_r+0x150>
 8008160:	9b04      	ldr	r3, [sp, #16]
 8008162:	eba0 000a 	sub.w	r0, r0, sl
 8008166:	2240      	movs	r2, #64	@ 0x40
 8008168:	4082      	lsls	r2, r0
 800816a:	4313      	orrs	r3, r2
 800816c:	3401      	adds	r4, #1
 800816e:	9304      	str	r3, [sp, #16]
 8008170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008174:	4824      	ldr	r0, [pc, #144]	@ (8008208 <_svfiprintf_r+0x1e8>)
 8008176:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800817a:	2206      	movs	r2, #6
 800817c:	f7f8 f848 	bl	8000210 <memchr>
 8008180:	2800      	cmp	r0, #0
 8008182:	d036      	beq.n	80081f2 <_svfiprintf_r+0x1d2>
 8008184:	4b21      	ldr	r3, [pc, #132]	@ (800820c <_svfiprintf_r+0x1ec>)
 8008186:	bb1b      	cbnz	r3, 80081d0 <_svfiprintf_r+0x1b0>
 8008188:	9b03      	ldr	r3, [sp, #12]
 800818a:	3307      	adds	r3, #7
 800818c:	f023 0307 	bic.w	r3, r3, #7
 8008190:	3308      	adds	r3, #8
 8008192:	9303      	str	r3, [sp, #12]
 8008194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008196:	4433      	add	r3, r6
 8008198:	9309      	str	r3, [sp, #36]	@ 0x24
 800819a:	e76a      	b.n	8008072 <_svfiprintf_r+0x52>
 800819c:	fb0c 3202 	mla	r2, ip, r2, r3
 80081a0:	460c      	mov	r4, r1
 80081a2:	2001      	movs	r0, #1
 80081a4:	e7a8      	b.n	80080f8 <_svfiprintf_r+0xd8>
 80081a6:	2300      	movs	r3, #0
 80081a8:	3401      	adds	r4, #1
 80081aa:	9305      	str	r3, [sp, #20]
 80081ac:	4619      	mov	r1, r3
 80081ae:	f04f 0c0a 	mov.w	ip, #10
 80081b2:	4620      	mov	r0, r4
 80081b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081b8:	3a30      	subs	r2, #48	@ 0x30
 80081ba:	2a09      	cmp	r2, #9
 80081bc:	d903      	bls.n	80081c6 <_svfiprintf_r+0x1a6>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0c6      	beq.n	8008150 <_svfiprintf_r+0x130>
 80081c2:	9105      	str	r1, [sp, #20]
 80081c4:	e7c4      	b.n	8008150 <_svfiprintf_r+0x130>
 80081c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80081ca:	4604      	mov	r4, r0
 80081cc:	2301      	movs	r3, #1
 80081ce:	e7f0      	b.n	80081b2 <_svfiprintf_r+0x192>
 80081d0:	ab03      	add	r3, sp, #12
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	462a      	mov	r2, r5
 80081d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008210 <_svfiprintf_r+0x1f0>)
 80081d8:	a904      	add	r1, sp, #16
 80081da:	4638      	mov	r0, r7
 80081dc:	f3af 8000 	nop.w
 80081e0:	1c42      	adds	r2, r0, #1
 80081e2:	4606      	mov	r6, r0
 80081e4:	d1d6      	bne.n	8008194 <_svfiprintf_r+0x174>
 80081e6:	89ab      	ldrh	r3, [r5, #12]
 80081e8:	065b      	lsls	r3, r3, #25
 80081ea:	f53f af2d 	bmi.w	8008048 <_svfiprintf_r+0x28>
 80081ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081f0:	e72c      	b.n	800804c <_svfiprintf_r+0x2c>
 80081f2:	ab03      	add	r3, sp, #12
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	462a      	mov	r2, r5
 80081f8:	4b05      	ldr	r3, [pc, #20]	@ (8008210 <_svfiprintf_r+0x1f0>)
 80081fa:	a904      	add	r1, sp, #16
 80081fc:	4638      	mov	r0, r7
 80081fe:	f000 f9bb 	bl	8008578 <_printf_i>
 8008202:	e7ed      	b.n	80081e0 <_svfiprintf_r+0x1c0>
 8008204:	08009235 	.word	0x08009235
 8008208:	0800923f 	.word	0x0800923f
 800820c:	00000000 	.word	0x00000000
 8008210:	08007f69 	.word	0x08007f69
 8008214:	0800923b 	.word	0x0800923b

08008218 <__sfputc_r>:
 8008218:	6893      	ldr	r3, [r2, #8]
 800821a:	3b01      	subs	r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	b410      	push	{r4}
 8008220:	6093      	str	r3, [r2, #8]
 8008222:	da08      	bge.n	8008236 <__sfputc_r+0x1e>
 8008224:	6994      	ldr	r4, [r2, #24]
 8008226:	42a3      	cmp	r3, r4
 8008228:	db01      	blt.n	800822e <__sfputc_r+0x16>
 800822a:	290a      	cmp	r1, #10
 800822c:	d103      	bne.n	8008236 <__sfputc_r+0x1e>
 800822e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008232:	f7ff bbc2 	b.w	80079ba <__swbuf_r>
 8008236:	6813      	ldr	r3, [r2, #0]
 8008238:	1c58      	adds	r0, r3, #1
 800823a:	6010      	str	r0, [r2, #0]
 800823c:	7019      	strb	r1, [r3, #0]
 800823e:	4608      	mov	r0, r1
 8008240:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008244:	4770      	bx	lr

08008246 <__sfputs_r>:
 8008246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008248:	4606      	mov	r6, r0
 800824a:	460f      	mov	r7, r1
 800824c:	4614      	mov	r4, r2
 800824e:	18d5      	adds	r5, r2, r3
 8008250:	42ac      	cmp	r4, r5
 8008252:	d101      	bne.n	8008258 <__sfputs_r+0x12>
 8008254:	2000      	movs	r0, #0
 8008256:	e007      	b.n	8008268 <__sfputs_r+0x22>
 8008258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800825c:	463a      	mov	r2, r7
 800825e:	4630      	mov	r0, r6
 8008260:	f7ff ffda 	bl	8008218 <__sfputc_r>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d1f3      	bne.n	8008250 <__sfputs_r+0xa>
 8008268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800826c <_vfiprintf_r>:
 800826c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008270:	460d      	mov	r5, r1
 8008272:	b09d      	sub	sp, #116	@ 0x74
 8008274:	4614      	mov	r4, r2
 8008276:	4698      	mov	r8, r3
 8008278:	4606      	mov	r6, r0
 800827a:	b118      	cbz	r0, 8008284 <_vfiprintf_r+0x18>
 800827c:	6a03      	ldr	r3, [r0, #32]
 800827e:	b90b      	cbnz	r3, 8008284 <_vfiprintf_r+0x18>
 8008280:	f7ff fa88 	bl	8007794 <__sinit>
 8008284:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008286:	07d9      	lsls	r1, r3, #31
 8008288:	d405      	bmi.n	8008296 <_vfiprintf_r+0x2a>
 800828a:	89ab      	ldrh	r3, [r5, #12]
 800828c:	059a      	lsls	r2, r3, #22
 800828e:	d402      	bmi.n	8008296 <_vfiprintf_r+0x2a>
 8008290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008292:	f7ff fd32 	bl	8007cfa <__retarget_lock_acquire_recursive>
 8008296:	89ab      	ldrh	r3, [r5, #12]
 8008298:	071b      	lsls	r3, r3, #28
 800829a:	d501      	bpl.n	80082a0 <_vfiprintf_r+0x34>
 800829c:	692b      	ldr	r3, [r5, #16]
 800829e:	b99b      	cbnz	r3, 80082c8 <_vfiprintf_r+0x5c>
 80082a0:	4629      	mov	r1, r5
 80082a2:	4630      	mov	r0, r6
 80082a4:	f7ff fbc8 	bl	8007a38 <__swsetup_r>
 80082a8:	b170      	cbz	r0, 80082c8 <_vfiprintf_r+0x5c>
 80082aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082ac:	07dc      	lsls	r4, r3, #31
 80082ae:	d504      	bpl.n	80082ba <_vfiprintf_r+0x4e>
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295
 80082b4:	b01d      	add	sp, #116	@ 0x74
 80082b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ba:	89ab      	ldrh	r3, [r5, #12]
 80082bc:	0598      	lsls	r0, r3, #22
 80082be:	d4f7      	bmi.n	80082b0 <_vfiprintf_r+0x44>
 80082c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082c2:	f7ff fd1b 	bl	8007cfc <__retarget_lock_release_recursive>
 80082c6:	e7f3      	b.n	80082b0 <_vfiprintf_r+0x44>
 80082c8:	2300      	movs	r3, #0
 80082ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80082cc:	2320      	movs	r3, #32
 80082ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80082d6:	2330      	movs	r3, #48	@ 0x30
 80082d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008488 <_vfiprintf_r+0x21c>
 80082dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082e0:	f04f 0901 	mov.w	r9, #1
 80082e4:	4623      	mov	r3, r4
 80082e6:	469a      	mov	sl, r3
 80082e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082ec:	b10a      	cbz	r2, 80082f2 <_vfiprintf_r+0x86>
 80082ee:	2a25      	cmp	r2, #37	@ 0x25
 80082f0:	d1f9      	bne.n	80082e6 <_vfiprintf_r+0x7a>
 80082f2:	ebba 0b04 	subs.w	fp, sl, r4
 80082f6:	d00b      	beq.n	8008310 <_vfiprintf_r+0xa4>
 80082f8:	465b      	mov	r3, fp
 80082fa:	4622      	mov	r2, r4
 80082fc:	4629      	mov	r1, r5
 80082fe:	4630      	mov	r0, r6
 8008300:	f7ff ffa1 	bl	8008246 <__sfputs_r>
 8008304:	3001      	adds	r0, #1
 8008306:	f000 80a7 	beq.w	8008458 <_vfiprintf_r+0x1ec>
 800830a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800830c:	445a      	add	r2, fp
 800830e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008310:	f89a 3000 	ldrb.w	r3, [sl]
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 809f 	beq.w	8008458 <_vfiprintf_r+0x1ec>
 800831a:	2300      	movs	r3, #0
 800831c:	f04f 32ff 	mov.w	r2, #4294967295
 8008320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008324:	f10a 0a01 	add.w	sl, sl, #1
 8008328:	9304      	str	r3, [sp, #16]
 800832a:	9307      	str	r3, [sp, #28]
 800832c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008330:	931a      	str	r3, [sp, #104]	@ 0x68
 8008332:	4654      	mov	r4, sl
 8008334:	2205      	movs	r2, #5
 8008336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800833a:	4853      	ldr	r0, [pc, #332]	@ (8008488 <_vfiprintf_r+0x21c>)
 800833c:	f7f7 ff68 	bl	8000210 <memchr>
 8008340:	9a04      	ldr	r2, [sp, #16]
 8008342:	b9d8      	cbnz	r0, 800837c <_vfiprintf_r+0x110>
 8008344:	06d1      	lsls	r1, r2, #27
 8008346:	bf44      	itt	mi
 8008348:	2320      	movmi	r3, #32
 800834a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800834e:	0713      	lsls	r3, r2, #28
 8008350:	bf44      	itt	mi
 8008352:	232b      	movmi	r3, #43	@ 0x2b
 8008354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008358:	f89a 3000 	ldrb.w	r3, [sl]
 800835c:	2b2a      	cmp	r3, #42	@ 0x2a
 800835e:	d015      	beq.n	800838c <_vfiprintf_r+0x120>
 8008360:	9a07      	ldr	r2, [sp, #28]
 8008362:	4654      	mov	r4, sl
 8008364:	2000      	movs	r0, #0
 8008366:	f04f 0c0a 	mov.w	ip, #10
 800836a:	4621      	mov	r1, r4
 800836c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008370:	3b30      	subs	r3, #48	@ 0x30
 8008372:	2b09      	cmp	r3, #9
 8008374:	d94b      	bls.n	800840e <_vfiprintf_r+0x1a2>
 8008376:	b1b0      	cbz	r0, 80083a6 <_vfiprintf_r+0x13a>
 8008378:	9207      	str	r2, [sp, #28]
 800837a:	e014      	b.n	80083a6 <_vfiprintf_r+0x13a>
 800837c:	eba0 0308 	sub.w	r3, r0, r8
 8008380:	fa09 f303 	lsl.w	r3, r9, r3
 8008384:	4313      	orrs	r3, r2
 8008386:	9304      	str	r3, [sp, #16]
 8008388:	46a2      	mov	sl, r4
 800838a:	e7d2      	b.n	8008332 <_vfiprintf_r+0xc6>
 800838c:	9b03      	ldr	r3, [sp, #12]
 800838e:	1d19      	adds	r1, r3, #4
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	9103      	str	r1, [sp, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	bfbb      	ittet	lt
 8008398:	425b      	neglt	r3, r3
 800839a:	f042 0202 	orrlt.w	r2, r2, #2
 800839e:	9307      	strge	r3, [sp, #28]
 80083a0:	9307      	strlt	r3, [sp, #28]
 80083a2:	bfb8      	it	lt
 80083a4:	9204      	strlt	r2, [sp, #16]
 80083a6:	7823      	ldrb	r3, [r4, #0]
 80083a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80083aa:	d10a      	bne.n	80083c2 <_vfiprintf_r+0x156>
 80083ac:	7863      	ldrb	r3, [r4, #1]
 80083ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80083b0:	d132      	bne.n	8008418 <_vfiprintf_r+0x1ac>
 80083b2:	9b03      	ldr	r3, [sp, #12]
 80083b4:	1d1a      	adds	r2, r3, #4
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	9203      	str	r2, [sp, #12]
 80083ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083be:	3402      	adds	r4, #2
 80083c0:	9305      	str	r3, [sp, #20]
 80083c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008498 <_vfiprintf_r+0x22c>
 80083c6:	7821      	ldrb	r1, [r4, #0]
 80083c8:	2203      	movs	r2, #3
 80083ca:	4650      	mov	r0, sl
 80083cc:	f7f7 ff20 	bl	8000210 <memchr>
 80083d0:	b138      	cbz	r0, 80083e2 <_vfiprintf_r+0x176>
 80083d2:	9b04      	ldr	r3, [sp, #16]
 80083d4:	eba0 000a 	sub.w	r0, r0, sl
 80083d8:	2240      	movs	r2, #64	@ 0x40
 80083da:	4082      	lsls	r2, r0
 80083dc:	4313      	orrs	r3, r2
 80083de:	3401      	adds	r4, #1
 80083e0:	9304      	str	r3, [sp, #16]
 80083e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e6:	4829      	ldr	r0, [pc, #164]	@ (800848c <_vfiprintf_r+0x220>)
 80083e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083ec:	2206      	movs	r2, #6
 80083ee:	f7f7 ff0f 	bl	8000210 <memchr>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d03f      	beq.n	8008476 <_vfiprintf_r+0x20a>
 80083f6:	4b26      	ldr	r3, [pc, #152]	@ (8008490 <_vfiprintf_r+0x224>)
 80083f8:	bb1b      	cbnz	r3, 8008442 <_vfiprintf_r+0x1d6>
 80083fa:	9b03      	ldr	r3, [sp, #12]
 80083fc:	3307      	adds	r3, #7
 80083fe:	f023 0307 	bic.w	r3, r3, #7
 8008402:	3308      	adds	r3, #8
 8008404:	9303      	str	r3, [sp, #12]
 8008406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008408:	443b      	add	r3, r7
 800840a:	9309      	str	r3, [sp, #36]	@ 0x24
 800840c:	e76a      	b.n	80082e4 <_vfiprintf_r+0x78>
 800840e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008412:	460c      	mov	r4, r1
 8008414:	2001      	movs	r0, #1
 8008416:	e7a8      	b.n	800836a <_vfiprintf_r+0xfe>
 8008418:	2300      	movs	r3, #0
 800841a:	3401      	adds	r4, #1
 800841c:	9305      	str	r3, [sp, #20]
 800841e:	4619      	mov	r1, r3
 8008420:	f04f 0c0a 	mov.w	ip, #10
 8008424:	4620      	mov	r0, r4
 8008426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800842a:	3a30      	subs	r2, #48	@ 0x30
 800842c:	2a09      	cmp	r2, #9
 800842e:	d903      	bls.n	8008438 <_vfiprintf_r+0x1cc>
 8008430:	2b00      	cmp	r3, #0
 8008432:	d0c6      	beq.n	80083c2 <_vfiprintf_r+0x156>
 8008434:	9105      	str	r1, [sp, #20]
 8008436:	e7c4      	b.n	80083c2 <_vfiprintf_r+0x156>
 8008438:	fb0c 2101 	mla	r1, ip, r1, r2
 800843c:	4604      	mov	r4, r0
 800843e:	2301      	movs	r3, #1
 8008440:	e7f0      	b.n	8008424 <_vfiprintf_r+0x1b8>
 8008442:	ab03      	add	r3, sp, #12
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	462a      	mov	r2, r5
 8008448:	4b12      	ldr	r3, [pc, #72]	@ (8008494 <_vfiprintf_r+0x228>)
 800844a:	a904      	add	r1, sp, #16
 800844c:	4630      	mov	r0, r6
 800844e:	f3af 8000 	nop.w
 8008452:	4607      	mov	r7, r0
 8008454:	1c78      	adds	r0, r7, #1
 8008456:	d1d6      	bne.n	8008406 <_vfiprintf_r+0x19a>
 8008458:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800845a:	07d9      	lsls	r1, r3, #31
 800845c:	d405      	bmi.n	800846a <_vfiprintf_r+0x1fe>
 800845e:	89ab      	ldrh	r3, [r5, #12]
 8008460:	059a      	lsls	r2, r3, #22
 8008462:	d402      	bmi.n	800846a <_vfiprintf_r+0x1fe>
 8008464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008466:	f7ff fc49 	bl	8007cfc <__retarget_lock_release_recursive>
 800846a:	89ab      	ldrh	r3, [r5, #12]
 800846c:	065b      	lsls	r3, r3, #25
 800846e:	f53f af1f 	bmi.w	80082b0 <_vfiprintf_r+0x44>
 8008472:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008474:	e71e      	b.n	80082b4 <_vfiprintf_r+0x48>
 8008476:	ab03      	add	r3, sp, #12
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	462a      	mov	r2, r5
 800847c:	4b05      	ldr	r3, [pc, #20]	@ (8008494 <_vfiprintf_r+0x228>)
 800847e:	a904      	add	r1, sp, #16
 8008480:	4630      	mov	r0, r6
 8008482:	f000 f879 	bl	8008578 <_printf_i>
 8008486:	e7e4      	b.n	8008452 <_vfiprintf_r+0x1e6>
 8008488:	08009235 	.word	0x08009235
 800848c:	0800923f 	.word	0x0800923f
 8008490:	00000000 	.word	0x00000000
 8008494:	08008247 	.word	0x08008247
 8008498:	0800923b 	.word	0x0800923b

0800849c <_printf_common>:
 800849c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a0:	4616      	mov	r6, r2
 80084a2:	4698      	mov	r8, r3
 80084a4:	688a      	ldr	r2, [r1, #8]
 80084a6:	690b      	ldr	r3, [r1, #16]
 80084a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084ac:	4293      	cmp	r3, r2
 80084ae:	bfb8      	it	lt
 80084b0:	4613      	movlt	r3, r2
 80084b2:	6033      	str	r3, [r6, #0]
 80084b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084b8:	4607      	mov	r7, r0
 80084ba:	460c      	mov	r4, r1
 80084bc:	b10a      	cbz	r2, 80084c2 <_printf_common+0x26>
 80084be:	3301      	adds	r3, #1
 80084c0:	6033      	str	r3, [r6, #0]
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	0699      	lsls	r1, r3, #26
 80084c6:	bf42      	ittt	mi
 80084c8:	6833      	ldrmi	r3, [r6, #0]
 80084ca:	3302      	addmi	r3, #2
 80084cc:	6033      	strmi	r3, [r6, #0]
 80084ce:	6825      	ldr	r5, [r4, #0]
 80084d0:	f015 0506 	ands.w	r5, r5, #6
 80084d4:	d106      	bne.n	80084e4 <_printf_common+0x48>
 80084d6:	f104 0a19 	add.w	sl, r4, #25
 80084da:	68e3      	ldr	r3, [r4, #12]
 80084dc:	6832      	ldr	r2, [r6, #0]
 80084de:	1a9b      	subs	r3, r3, r2
 80084e0:	42ab      	cmp	r3, r5
 80084e2:	dc26      	bgt.n	8008532 <_printf_common+0x96>
 80084e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084e8:	6822      	ldr	r2, [r4, #0]
 80084ea:	3b00      	subs	r3, #0
 80084ec:	bf18      	it	ne
 80084ee:	2301      	movne	r3, #1
 80084f0:	0692      	lsls	r2, r2, #26
 80084f2:	d42b      	bmi.n	800854c <_printf_common+0xb0>
 80084f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80084f8:	4641      	mov	r1, r8
 80084fa:	4638      	mov	r0, r7
 80084fc:	47c8      	blx	r9
 80084fe:	3001      	adds	r0, #1
 8008500:	d01e      	beq.n	8008540 <_printf_common+0xa4>
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	6922      	ldr	r2, [r4, #16]
 8008506:	f003 0306 	and.w	r3, r3, #6
 800850a:	2b04      	cmp	r3, #4
 800850c:	bf02      	ittt	eq
 800850e:	68e5      	ldreq	r5, [r4, #12]
 8008510:	6833      	ldreq	r3, [r6, #0]
 8008512:	1aed      	subeq	r5, r5, r3
 8008514:	68a3      	ldr	r3, [r4, #8]
 8008516:	bf0c      	ite	eq
 8008518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800851c:	2500      	movne	r5, #0
 800851e:	4293      	cmp	r3, r2
 8008520:	bfc4      	itt	gt
 8008522:	1a9b      	subgt	r3, r3, r2
 8008524:	18ed      	addgt	r5, r5, r3
 8008526:	2600      	movs	r6, #0
 8008528:	341a      	adds	r4, #26
 800852a:	42b5      	cmp	r5, r6
 800852c:	d11a      	bne.n	8008564 <_printf_common+0xc8>
 800852e:	2000      	movs	r0, #0
 8008530:	e008      	b.n	8008544 <_printf_common+0xa8>
 8008532:	2301      	movs	r3, #1
 8008534:	4652      	mov	r2, sl
 8008536:	4641      	mov	r1, r8
 8008538:	4638      	mov	r0, r7
 800853a:	47c8      	blx	r9
 800853c:	3001      	adds	r0, #1
 800853e:	d103      	bne.n	8008548 <_printf_common+0xac>
 8008540:	f04f 30ff 	mov.w	r0, #4294967295
 8008544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008548:	3501      	adds	r5, #1
 800854a:	e7c6      	b.n	80084da <_printf_common+0x3e>
 800854c:	18e1      	adds	r1, r4, r3
 800854e:	1c5a      	adds	r2, r3, #1
 8008550:	2030      	movs	r0, #48	@ 0x30
 8008552:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008556:	4422      	add	r2, r4
 8008558:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800855c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008560:	3302      	adds	r3, #2
 8008562:	e7c7      	b.n	80084f4 <_printf_common+0x58>
 8008564:	2301      	movs	r3, #1
 8008566:	4622      	mov	r2, r4
 8008568:	4641      	mov	r1, r8
 800856a:	4638      	mov	r0, r7
 800856c:	47c8      	blx	r9
 800856e:	3001      	adds	r0, #1
 8008570:	d0e6      	beq.n	8008540 <_printf_common+0xa4>
 8008572:	3601      	adds	r6, #1
 8008574:	e7d9      	b.n	800852a <_printf_common+0x8e>
	...

08008578 <_printf_i>:
 8008578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800857c:	7e0f      	ldrb	r7, [r1, #24]
 800857e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008580:	2f78      	cmp	r7, #120	@ 0x78
 8008582:	4691      	mov	r9, r2
 8008584:	4680      	mov	r8, r0
 8008586:	460c      	mov	r4, r1
 8008588:	469a      	mov	sl, r3
 800858a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800858e:	d807      	bhi.n	80085a0 <_printf_i+0x28>
 8008590:	2f62      	cmp	r7, #98	@ 0x62
 8008592:	d80a      	bhi.n	80085aa <_printf_i+0x32>
 8008594:	2f00      	cmp	r7, #0
 8008596:	f000 80d1 	beq.w	800873c <_printf_i+0x1c4>
 800859a:	2f58      	cmp	r7, #88	@ 0x58
 800859c:	f000 80b8 	beq.w	8008710 <_printf_i+0x198>
 80085a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085a8:	e03a      	b.n	8008620 <_printf_i+0xa8>
 80085aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085ae:	2b15      	cmp	r3, #21
 80085b0:	d8f6      	bhi.n	80085a0 <_printf_i+0x28>
 80085b2:	a101      	add	r1, pc, #4	@ (adr r1, 80085b8 <_printf_i+0x40>)
 80085b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085b8:	08008611 	.word	0x08008611
 80085bc:	08008625 	.word	0x08008625
 80085c0:	080085a1 	.word	0x080085a1
 80085c4:	080085a1 	.word	0x080085a1
 80085c8:	080085a1 	.word	0x080085a1
 80085cc:	080085a1 	.word	0x080085a1
 80085d0:	08008625 	.word	0x08008625
 80085d4:	080085a1 	.word	0x080085a1
 80085d8:	080085a1 	.word	0x080085a1
 80085dc:	080085a1 	.word	0x080085a1
 80085e0:	080085a1 	.word	0x080085a1
 80085e4:	08008723 	.word	0x08008723
 80085e8:	0800864f 	.word	0x0800864f
 80085ec:	080086dd 	.word	0x080086dd
 80085f0:	080085a1 	.word	0x080085a1
 80085f4:	080085a1 	.word	0x080085a1
 80085f8:	08008745 	.word	0x08008745
 80085fc:	080085a1 	.word	0x080085a1
 8008600:	0800864f 	.word	0x0800864f
 8008604:	080085a1 	.word	0x080085a1
 8008608:	080085a1 	.word	0x080085a1
 800860c:	080086e5 	.word	0x080086e5
 8008610:	6833      	ldr	r3, [r6, #0]
 8008612:	1d1a      	adds	r2, r3, #4
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6032      	str	r2, [r6, #0]
 8008618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800861c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008620:	2301      	movs	r3, #1
 8008622:	e09c      	b.n	800875e <_printf_i+0x1e6>
 8008624:	6833      	ldr	r3, [r6, #0]
 8008626:	6820      	ldr	r0, [r4, #0]
 8008628:	1d19      	adds	r1, r3, #4
 800862a:	6031      	str	r1, [r6, #0]
 800862c:	0606      	lsls	r6, r0, #24
 800862e:	d501      	bpl.n	8008634 <_printf_i+0xbc>
 8008630:	681d      	ldr	r5, [r3, #0]
 8008632:	e003      	b.n	800863c <_printf_i+0xc4>
 8008634:	0645      	lsls	r5, r0, #25
 8008636:	d5fb      	bpl.n	8008630 <_printf_i+0xb8>
 8008638:	f9b3 5000 	ldrsh.w	r5, [r3]
 800863c:	2d00      	cmp	r5, #0
 800863e:	da03      	bge.n	8008648 <_printf_i+0xd0>
 8008640:	232d      	movs	r3, #45	@ 0x2d
 8008642:	426d      	negs	r5, r5
 8008644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008648:	4858      	ldr	r0, [pc, #352]	@ (80087ac <_printf_i+0x234>)
 800864a:	230a      	movs	r3, #10
 800864c:	e011      	b.n	8008672 <_printf_i+0xfa>
 800864e:	6821      	ldr	r1, [r4, #0]
 8008650:	6833      	ldr	r3, [r6, #0]
 8008652:	0608      	lsls	r0, r1, #24
 8008654:	f853 5b04 	ldr.w	r5, [r3], #4
 8008658:	d402      	bmi.n	8008660 <_printf_i+0xe8>
 800865a:	0649      	lsls	r1, r1, #25
 800865c:	bf48      	it	mi
 800865e:	b2ad      	uxthmi	r5, r5
 8008660:	2f6f      	cmp	r7, #111	@ 0x6f
 8008662:	4852      	ldr	r0, [pc, #328]	@ (80087ac <_printf_i+0x234>)
 8008664:	6033      	str	r3, [r6, #0]
 8008666:	bf14      	ite	ne
 8008668:	230a      	movne	r3, #10
 800866a:	2308      	moveq	r3, #8
 800866c:	2100      	movs	r1, #0
 800866e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008672:	6866      	ldr	r6, [r4, #4]
 8008674:	60a6      	str	r6, [r4, #8]
 8008676:	2e00      	cmp	r6, #0
 8008678:	db05      	blt.n	8008686 <_printf_i+0x10e>
 800867a:	6821      	ldr	r1, [r4, #0]
 800867c:	432e      	orrs	r6, r5
 800867e:	f021 0104 	bic.w	r1, r1, #4
 8008682:	6021      	str	r1, [r4, #0]
 8008684:	d04b      	beq.n	800871e <_printf_i+0x1a6>
 8008686:	4616      	mov	r6, r2
 8008688:	fbb5 f1f3 	udiv	r1, r5, r3
 800868c:	fb03 5711 	mls	r7, r3, r1, r5
 8008690:	5dc7      	ldrb	r7, [r0, r7]
 8008692:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008696:	462f      	mov	r7, r5
 8008698:	42bb      	cmp	r3, r7
 800869a:	460d      	mov	r5, r1
 800869c:	d9f4      	bls.n	8008688 <_printf_i+0x110>
 800869e:	2b08      	cmp	r3, #8
 80086a0:	d10b      	bne.n	80086ba <_printf_i+0x142>
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	07df      	lsls	r7, r3, #31
 80086a6:	d508      	bpl.n	80086ba <_printf_i+0x142>
 80086a8:	6923      	ldr	r3, [r4, #16]
 80086aa:	6861      	ldr	r1, [r4, #4]
 80086ac:	4299      	cmp	r1, r3
 80086ae:	bfde      	ittt	le
 80086b0:	2330      	movle	r3, #48	@ 0x30
 80086b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086ba:	1b92      	subs	r2, r2, r6
 80086bc:	6122      	str	r2, [r4, #16]
 80086be:	f8cd a000 	str.w	sl, [sp]
 80086c2:	464b      	mov	r3, r9
 80086c4:	aa03      	add	r2, sp, #12
 80086c6:	4621      	mov	r1, r4
 80086c8:	4640      	mov	r0, r8
 80086ca:	f7ff fee7 	bl	800849c <_printf_common>
 80086ce:	3001      	adds	r0, #1
 80086d0:	d14a      	bne.n	8008768 <_printf_i+0x1f0>
 80086d2:	f04f 30ff 	mov.w	r0, #4294967295
 80086d6:	b004      	add	sp, #16
 80086d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	f043 0320 	orr.w	r3, r3, #32
 80086e2:	6023      	str	r3, [r4, #0]
 80086e4:	4832      	ldr	r0, [pc, #200]	@ (80087b0 <_printf_i+0x238>)
 80086e6:	2778      	movs	r7, #120	@ 0x78
 80086e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	6831      	ldr	r1, [r6, #0]
 80086f0:	061f      	lsls	r7, r3, #24
 80086f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80086f6:	d402      	bmi.n	80086fe <_printf_i+0x186>
 80086f8:	065f      	lsls	r7, r3, #25
 80086fa:	bf48      	it	mi
 80086fc:	b2ad      	uxthmi	r5, r5
 80086fe:	6031      	str	r1, [r6, #0]
 8008700:	07d9      	lsls	r1, r3, #31
 8008702:	bf44      	itt	mi
 8008704:	f043 0320 	orrmi.w	r3, r3, #32
 8008708:	6023      	strmi	r3, [r4, #0]
 800870a:	b11d      	cbz	r5, 8008714 <_printf_i+0x19c>
 800870c:	2310      	movs	r3, #16
 800870e:	e7ad      	b.n	800866c <_printf_i+0xf4>
 8008710:	4826      	ldr	r0, [pc, #152]	@ (80087ac <_printf_i+0x234>)
 8008712:	e7e9      	b.n	80086e8 <_printf_i+0x170>
 8008714:	6823      	ldr	r3, [r4, #0]
 8008716:	f023 0320 	bic.w	r3, r3, #32
 800871a:	6023      	str	r3, [r4, #0]
 800871c:	e7f6      	b.n	800870c <_printf_i+0x194>
 800871e:	4616      	mov	r6, r2
 8008720:	e7bd      	b.n	800869e <_printf_i+0x126>
 8008722:	6833      	ldr	r3, [r6, #0]
 8008724:	6825      	ldr	r5, [r4, #0]
 8008726:	6961      	ldr	r1, [r4, #20]
 8008728:	1d18      	adds	r0, r3, #4
 800872a:	6030      	str	r0, [r6, #0]
 800872c:	062e      	lsls	r6, r5, #24
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	d501      	bpl.n	8008736 <_printf_i+0x1be>
 8008732:	6019      	str	r1, [r3, #0]
 8008734:	e002      	b.n	800873c <_printf_i+0x1c4>
 8008736:	0668      	lsls	r0, r5, #25
 8008738:	d5fb      	bpl.n	8008732 <_printf_i+0x1ba>
 800873a:	8019      	strh	r1, [r3, #0]
 800873c:	2300      	movs	r3, #0
 800873e:	6123      	str	r3, [r4, #16]
 8008740:	4616      	mov	r6, r2
 8008742:	e7bc      	b.n	80086be <_printf_i+0x146>
 8008744:	6833      	ldr	r3, [r6, #0]
 8008746:	1d1a      	adds	r2, r3, #4
 8008748:	6032      	str	r2, [r6, #0]
 800874a:	681e      	ldr	r6, [r3, #0]
 800874c:	6862      	ldr	r2, [r4, #4]
 800874e:	2100      	movs	r1, #0
 8008750:	4630      	mov	r0, r6
 8008752:	f7f7 fd5d 	bl	8000210 <memchr>
 8008756:	b108      	cbz	r0, 800875c <_printf_i+0x1e4>
 8008758:	1b80      	subs	r0, r0, r6
 800875a:	6060      	str	r0, [r4, #4]
 800875c:	6863      	ldr	r3, [r4, #4]
 800875e:	6123      	str	r3, [r4, #16]
 8008760:	2300      	movs	r3, #0
 8008762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008766:	e7aa      	b.n	80086be <_printf_i+0x146>
 8008768:	6923      	ldr	r3, [r4, #16]
 800876a:	4632      	mov	r2, r6
 800876c:	4649      	mov	r1, r9
 800876e:	4640      	mov	r0, r8
 8008770:	47d0      	blx	sl
 8008772:	3001      	adds	r0, #1
 8008774:	d0ad      	beq.n	80086d2 <_printf_i+0x15a>
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	079b      	lsls	r3, r3, #30
 800877a:	d413      	bmi.n	80087a4 <_printf_i+0x22c>
 800877c:	68e0      	ldr	r0, [r4, #12]
 800877e:	9b03      	ldr	r3, [sp, #12]
 8008780:	4298      	cmp	r0, r3
 8008782:	bfb8      	it	lt
 8008784:	4618      	movlt	r0, r3
 8008786:	e7a6      	b.n	80086d6 <_printf_i+0x15e>
 8008788:	2301      	movs	r3, #1
 800878a:	4632      	mov	r2, r6
 800878c:	4649      	mov	r1, r9
 800878e:	4640      	mov	r0, r8
 8008790:	47d0      	blx	sl
 8008792:	3001      	adds	r0, #1
 8008794:	d09d      	beq.n	80086d2 <_printf_i+0x15a>
 8008796:	3501      	adds	r5, #1
 8008798:	68e3      	ldr	r3, [r4, #12]
 800879a:	9903      	ldr	r1, [sp, #12]
 800879c:	1a5b      	subs	r3, r3, r1
 800879e:	42ab      	cmp	r3, r5
 80087a0:	dcf2      	bgt.n	8008788 <_printf_i+0x210>
 80087a2:	e7eb      	b.n	800877c <_printf_i+0x204>
 80087a4:	2500      	movs	r5, #0
 80087a6:	f104 0619 	add.w	r6, r4, #25
 80087aa:	e7f5      	b.n	8008798 <_printf_i+0x220>
 80087ac:	08009246 	.word	0x08009246
 80087b0:	08009257 	.word	0x08009257

080087b4 <__sflush_r>:
 80087b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087bc:	0716      	lsls	r6, r2, #28
 80087be:	4605      	mov	r5, r0
 80087c0:	460c      	mov	r4, r1
 80087c2:	d454      	bmi.n	800886e <__sflush_r+0xba>
 80087c4:	684b      	ldr	r3, [r1, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	dc02      	bgt.n	80087d0 <__sflush_r+0x1c>
 80087ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dd48      	ble.n	8008862 <__sflush_r+0xae>
 80087d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087d2:	2e00      	cmp	r6, #0
 80087d4:	d045      	beq.n	8008862 <__sflush_r+0xae>
 80087d6:	2300      	movs	r3, #0
 80087d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087dc:	682f      	ldr	r7, [r5, #0]
 80087de:	6a21      	ldr	r1, [r4, #32]
 80087e0:	602b      	str	r3, [r5, #0]
 80087e2:	d030      	beq.n	8008846 <__sflush_r+0x92>
 80087e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	0759      	lsls	r1, r3, #29
 80087ea:	d505      	bpl.n	80087f8 <__sflush_r+0x44>
 80087ec:	6863      	ldr	r3, [r4, #4]
 80087ee:	1ad2      	subs	r2, r2, r3
 80087f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087f2:	b10b      	cbz	r3, 80087f8 <__sflush_r+0x44>
 80087f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087f6:	1ad2      	subs	r2, r2, r3
 80087f8:	2300      	movs	r3, #0
 80087fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087fc:	6a21      	ldr	r1, [r4, #32]
 80087fe:	4628      	mov	r0, r5
 8008800:	47b0      	blx	r6
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	d106      	bne.n	8008816 <__sflush_r+0x62>
 8008808:	6829      	ldr	r1, [r5, #0]
 800880a:	291d      	cmp	r1, #29
 800880c:	d82b      	bhi.n	8008866 <__sflush_r+0xb2>
 800880e:	4a2a      	ldr	r2, [pc, #168]	@ (80088b8 <__sflush_r+0x104>)
 8008810:	40ca      	lsrs	r2, r1
 8008812:	07d6      	lsls	r6, r2, #31
 8008814:	d527      	bpl.n	8008866 <__sflush_r+0xb2>
 8008816:	2200      	movs	r2, #0
 8008818:	6062      	str	r2, [r4, #4]
 800881a:	04d9      	lsls	r1, r3, #19
 800881c:	6922      	ldr	r2, [r4, #16]
 800881e:	6022      	str	r2, [r4, #0]
 8008820:	d504      	bpl.n	800882c <__sflush_r+0x78>
 8008822:	1c42      	adds	r2, r0, #1
 8008824:	d101      	bne.n	800882a <__sflush_r+0x76>
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	b903      	cbnz	r3, 800882c <__sflush_r+0x78>
 800882a:	6560      	str	r0, [r4, #84]	@ 0x54
 800882c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800882e:	602f      	str	r7, [r5, #0]
 8008830:	b1b9      	cbz	r1, 8008862 <__sflush_r+0xae>
 8008832:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008836:	4299      	cmp	r1, r3
 8008838:	d002      	beq.n	8008840 <__sflush_r+0x8c>
 800883a:	4628      	mov	r0, r5
 800883c:	f7ff fa94 	bl	8007d68 <_free_r>
 8008840:	2300      	movs	r3, #0
 8008842:	6363      	str	r3, [r4, #52]	@ 0x34
 8008844:	e00d      	b.n	8008862 <__sflush_r+0xae>
 8008846:	2301      	movs	r3, #1
 8008848:	4628      	mov	r0, r5
 800884a:	47b0      	blx	r6
 800884c:	4602      	mov	r2, r0
 800884e:	1c50      	adds	r0, r2, #1
 8008850:	d1c9      	bne.n	80087e6 <__sflush_r+0x32>
 8008852:	682b      	ldr	r3, [r5, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d0c6      	beq.n	80087e6 <__sflush_r+0x32>
 8008858:	2b1d      	cmp	r3, #29
 800885a:	d001      	beq.n	8008860 <__sflush_r+0xac>
 800885c:	2b16      	cmp	r3, #22
 800885e:	d11e      	bne.n	800889e <__sflush_r+0xea>
 8008860:	602f      	str	r7, [r5, #0]
 8008862:	2000      	movs	r0, #0
 8008864:	e022      	b.n	80088ac <__sflush_r+0xf8>
 8008866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800886a:	b21b      	sxth	r3, r3
 800886c:	e01b      	b.n	80088a6 <__sflush_r+0xf2>
 800886e:	690f      	ldr	r7, [r1, #16]
 8008870:	2f00      	cmp	r7, #0
 8008872:	d0f6      	beq.n	8008862 <__sflush_r+0xae>
 8008874:	0793      	lsls	r3, r2, #30
 8008876:	680e      	ldr	r6, [r1, #0]
 8008878:	bf08      	it	eq
 800887a:	694b      	ldreq	r3, [r1, #20]
 800887c:	600f      	str	r7, [r1, #0]
 800887e:	bf18      	it	ne
 8008880:	2300      	movne	r3, #0
 8008882:	eba6 0807 	sub.w	r8, r6, r7
 8008886:	608b      	str	r3, [r1, #8]
 8008888:	f1b8 0f00 	cmp.w	r8, #0
 800888c:	dde9      	ble.n	8008862 <__sflush_r+0xae>
 800888e:	6a21      	ldr	r1, [r4, #32]
 8008890:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008892:	4643      	mov	r3, r8
 8008894:	463a      	mov	r2, r7
 8008896:	4628      	mov	r0, r5
 8008898:	47b0      	blx	r6
 800889a:	2800      	cmp	r0, #0
 800889c:	dc08      	bgt.n	80088b0 <__sflush_r+0xfc>
 800889e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088a6:	81a3      	strh	r3, [r4, #12]
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b0:	4407      	add	r7, r0
 80088b2:	eba8 0800 	sub.w	r8, r8, r0
 80088b6:	e7e7      	b.n	8008888 <__sflush_r+0xd4>
 80088b8:	20400001 	.word	0x20400001

080088bc <_fflush_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	690b      	ldr	r3, [r1, #16]
 80088c0:	4605      	mov	r5, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	b913      	cbnz	r3, 80088cc <_fflush_r+0x10>
 80088c6:	2500      	movs	r5, #0
 80088c8:	4628      	mov	r0, r5
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	b118      	cbz	r0, 80088d6 <_fflush_r+0x1a>
 80088ce:	6a03      	ldr	r3, [r0, #32]
 80088d0:	b90b      	cbnz	r3, 80088d6 <_fflush_r+0x1a>
 80088d2:	f7fe ff5f 	bl	8007794 <__sinit>
 80088d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0f3      	beq.n	80088c6 <_fflush_r+0xa>
 80088de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088e0:	07d0      	lsls	r0, r2, #31
 80088e2:	d404      	bmi.n	80088ee <_fflush_r+0x32>
 80088e4:	0599      	lsls	r1, r3, #22
 80088e6:	d402      	bmi.n	80088ee <_fflush_r+0x32>
 80088e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088ea:	f7ff fa06 	bl	8007cfa <__retarget_lock_acquire_recursive>
 80088ee:	4628      	mov	r0, r5
 80088f0:	4621      	mov	r1, r4
 80088f2:	f7ff ff5f 	bl	80087b4 <__sflush_r>
 80088f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088f8:	07da      	lsls	r2, r3, #31
 80088fa:	4605      	mov	r5, r0
 80088fc:	d4e4      	bmi.n	80088c8 <_fflush_r+0xc>
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	059b      	lsls	r3, r3, #22
 8008902:	d4e1      	bmi.n	80088c8 <_fflush_r+0xc>
 8008904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008906:	f7ff f9f9 	bl	8007cfc <__retarget_lock_release_recursive>
 800890a:	e7dd      	b.n	80088c8 <_fflush_r+0xc>

0800890c <fiprintf>:
 800890c:	b40e      	push	{r1, r2, r3}
 800890e:	b503      	push	{r0, r1, lr}
 8008910:	4601      	mov	r1, r0
 8008912:	ab03      	add	r3, sp, #12
 8008914:	4805      	ldr	r0, [pc, #20]	@ (800892c <fiprintf+0x20>)
 8008916:	f853 2b04 	ldr.w	r2, [r3], #4
 800891a:	6800      	ldr	r0, [r0, #0]
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	f7ff fca5 	bl	800826c <_vfiprintf_r>
 8008922:	b002      	add	sp, #8
 8008924:	f85d eb04 	ldr.w	lr, [sp], #4
 8008928:	b003      	add	sp, #12
 800892a:	4770      	bx	lr
 800892c:	20000030 	.word	0x20000030

08008930 <__swhatbuf_r>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	460c      	mov	r4, r1
 8008934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008938:	2900      	cmp	r1, #0
 800893a:	b096      	sub	sp, #88	@ 0x58
 800893c:	4615      	mov	r5, r2
 800893e:	461e      	mov	r6, r3
 8008940:	da0d      	bge.n	800895e <__swhatbuf_r+0x2e>
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008948:	f04f 0100 	mov.w	r1, #0
 800894c:	bf14      	ite	ne
 800894e:	2340      	movne	r3, #64	@ 0x40
 8008950:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008954:	2000      	movs	r0, #0
 8008956:	6031      	str	r1, [r6, #0]
 8008958:	602b      	str	r3, [r5, #0]
 800895a:	b016      	add	sp, #88	@ 0x58
 800895c:	bd70      	pop	{r4, r5, r6, pc}
 800895e:	466a      	mov	r2, sp
 8008960:	f000 f896 	bl	8008a90 <_fstat_r>
 8008964:	2800      	cmp	r0, #0
 8008966:	dbec      	blt.n	8008942 <__swhatbuf_r+0x12>
 8008968:	9901      	ldr	r1, [sp, #4]
 800896a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800896e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008972:	4259      	negs	r1, r3
 8008974:	4159      	adcs	r1, r3
 8008976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800897a:	e7eb      	b.n	8008954 <__swhatbuf_r+0x24>

0800897c <__smakebuf_r>:
 800897c:	898b      	ldrh	r3, [r1, #12]
 800897e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008980:	079d      	lsls	r5, r3, #30
 8008982:	4606      	mov	r6, r0
 8008984:	460c      	mov	r4, r1
 8008986:	d507      	bpl.n	8008998 <__smakebuf_r+0x1c>
 8008988:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	6123      	str	r3, [r4, #16]
 8008990:	2301      	movs	r3, #1
 8008992:	6163      	str	r3, [r4, #20]
 8008994:	b003      	add	sp, #12
 8008996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008998:	ab01      	add	r3, sp, #4
 800899a:	466a      	mov	r2, sp
 800899c:	f7ff ffc8 	bl	8008930 <__swhatbuf_r>
 80089a0:	9f00      	ldr	r7, [sp, #0]
 80089a2:	4605      	mov	r5, r0
 80089a4:	4639      	mov	r1, r7
 80089a6:	4630      	mov	r0, r6
 80089a8:	f7ff fa52 	bl	8007e50 <_malloc_r>
 80089ac:	b948      	cbnz	r0, 80089c2 <__smakebuf_r+0x46>
 80089ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b2:	059a      	lsls	r2, r3, #22
 80089b4:	d4ee      	bmi.n	8008994 <__smakebuf_r+0x18>
 80089b6:	f023 0303 	bic.w	r3, r3, #3
 80089ba:	f043 0302 	orr.w	r3, r3, #2
 80089be:	81a3      	strh	r3, [r4, #12]
 80089c0:	e7e2      	b.n	8008988 <__smakebuf_r+0xc>
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	6020      	str	r0, [r4, #0]
 80089c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ca:	81a3      	strh	r3, [r4, #12]
 80089cc:	9b01      	ldr	r3, [sp, #4]
 80089ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089d2:	b15b      	cbz	r3, 80089ec <__smakebuf_r+0x70>
 80089d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089d8:	4630      	mov	r0, r6
 80089da:	f000 f86b 	bl	8008ab4 <_isatty_r>
 80089de:	b128      	cbz	r0, 80089ec <__smakebuf_r+0x70>
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	f023 0303 	bic.w	r3, r3, #3
 80089e6:	f043 0301 	orr.w	r3, r3, #1
 80089ea:	81a3      	strh	r3, [r4, #12]
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	431d      	orrs	r5, r3
 80089f0:	81a5      	strh	r5, [r4, #12]
 80089f2:	e7cf      	b.n	8008994 <__smakebuf_r+0x18>

080089f4 <_putc_r>:
 80089f4:	b570      	push	{r4, r5, r6, lr}
 80089f6:	460d      	mov	r5, r1
 80089f8:	4614      	mov	r4, r2
 80089fa:	4606      	mov	r6, r0
 80089fc:	b118      	cbz	r0, 8008a06 <_putc_r+0x12>
 80089fe:	6a03      	ldr	r3, [r0, #32]
 8008a00:	b90b      	cbnz	r3, 8008a06 <_putc_r+0x12>
 8008a02:	f7fe fec7 	bl	8007794 <__sinit>
 8008a06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a08:	07d8      	lsls	r0, r3, #31
 8008a0a:	d405      	bmi.n	8008a18 <_putc_r+0x24>
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	0599      	lsls	r1, r3, #22
 8008a10:	d402      	bmi.n	8008a18 <_putc_r+0x24>
 8008a12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a14:	f7ff f971 	bl	8007cfa <__retarget_lock_acquire_recursive>
 8008a18:	68a3      	ldr	r3, [r4, #8]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	60a3      	str	r3, [r4, #8]
 8008a20:	da05      	bge.n	8008a2e <_putc_r+0x3a>
 8008a22:	69a2      	ldr	r2, [r4, #24]
 8008a24:	4293      	cmp	r3, r2
 8008a26:	db12      	blt.n	8008a4e <_putc_r+0x5a>
 8008a28:	b2eb      	uxtb	r3, r5
 8008a2a:	2b0a      	cmp	r3, #10
 8008a2c:	d00f      	beq.n	8008a4e <_putc_r+0x5a>
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	6022      	str	r2, [r4, #0]
 8008a34:	701d      	strb	r5, [r3, #0]
 8008a36:	b2ed      	uxtb	r5, r5
 8008a38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a3a:	07da      	lsls	r2, r3, #31
 8008a3c:	d405      	bmi.n	8008a4a <_putc_r+0x56>
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	059b      	lsls	r3, r3, #22
 8008a42:	d402      	bmi.n	8008a4a <_putc_r+0x56>
 8008a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a46:	f7ff f959 	bl	8007cfc <__retarget_lock_release_recursive>
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	bd70      	pop	{r4, r5, r6, pc}
 8008a4e:	4629      	mov	r1, r5
 8008a50:	4622      	mov	r2, r4
 8008a52:	4630      	mov	r0, r6
 8008a54:	f7fe ffb1 	bl	80079ba <__swbuf_r>
 8008a58:	4605      	mov	r5, r0
 8008a5a:	e7ed      	b.n	8008a38 <_putc_r+0x44>

08008a5c <memmove>:
 8008a5c:	4288      	cmp	r0, r1
 8008a5e:	b510      	push	{r4, lr}
 8008a60:	eb01 0402 	add.w	r4, r1, r2
 8008a64:	d902      	bls.n	8008a6c <memmove+0x10>
 8008a66:	4284      	cmp	r4, r0
 8008a68:	4623      	mov	r3, r4
 8008a6a:	d807      	bhi.n	8008a7c <memmove+0x20>
 8008a6c:	1e43      	subs	r3, r0, #1
 8008a6e:	42a1      	cmp	r1, r4
 8008a70:	d008      	beq.n	8008a84 <memmove+0x28>
 8008a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a7a:	e7f8      	b.n	8008a6e <memmove+0x12>
 8008a7c:	4402      	add	r2, r0
 8008a7e:	4601      	mov	r1, r0
 8008a80:	428a      	cmp	r2, r1
 8008a82:	d100      	bne.n	8008a86 <memmove+0x2a>
 8008a84:	bd10      	pop	{r4, pc}
 8008a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a8e:	e7f7      	b.n	8008a80 <memmove+0x24>

08008a90 <_fstat_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4d07      	ldr	r5, [pc, #28]	@ (8008ab0 <_fstat_r+0x20>)
 8008a94:	2300      	movs	r3, #0
 8008a96:	4604      	mov	r4, r0
 8008a98:	4608      	mov	r0, r1
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	602b      	str	r3, [r5, #0]
 8008a9e:	f7f9 fefd 	bl	800289c <_fstat>
 8008aa2:	1c43      	adds	r3, r0, #1
 8008aa4:	d102      	bne.n	8008aac <_fstat_r+0x1c>
 8008aa6:	682b      	ldr	r3, [r5, #0]
 8008aa8:	b103      	cbz	r3, 8008aac <_fstat_r+0x1c>
 8008aaa:	6023      	str	r3, [r4, #0]
 8008aac:	bd38      	pop	{r3, r4, r5, pc}
 8008aae:	bf00      	nop
 8008ab0:	20000db4 	.word	0x20000db4

08008ab4 <_isatty_r>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	4d06      	ldr	r5, [pc, #24]	@ (8008ad0 <_isatty_r+0x1c>)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	4604      	mov	r4, r0
 8008abc:	4608      	mov	r0, r1
 8008abe:	602b      	str	r3, [r5, #0]
 8008ac0:	f7f9 fefc 	bl	80028bc <_isatty>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d102      	bne.n	8008ace <_isatty_r+0x1a>
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	b103      	cbz	r3, 8008ace <_isatty_r+0x1a>
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	20000db4 	.word	0x20000db4

08008ad4 <_sbrk_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4d06      	ldr	r5, [pc, #24]	@ (8008af0 <_sbrk_r+0x1c>)
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4604      	mov	r4, r0
 8008adc:	4608      	mov	r0, r1
 8008ade:	602b      	str	r3, [r5, #0]
 8008ae0:	f7f9 ff04 	bl	80028ec <_sbrk>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_sbrk_r+0x1a>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_sbrk_r+0x1a>
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	20000db4 	.word	0x20000db4

08008af4 <abort>:
 8008af4:	b508      	push	{r3, lr}
 8008af6:	2006      	movs	r0, #6
 8008af8:	f000 f85a 	bl	8008bb0 <raise>
 8008afc:	2001      	movs	r0, #1
 8008afe:	f7f9 fe7d 	bl	80027fc <_exit>

08008b02 <_realloc_r>:
 8008b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b06:	4607      	mov	r7, r0
 8008b08:	4614      	mov	r4, r2
 8008b0a:	460d      	mov	r5, r1
 8008b0c:	b921      	cbnz	r1, 8008b18 <_realloc_r+0x16>
 8008b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b12:	4611      	mov	r1, r2
 8008b14:	f7ff b99c 	b.w	8007e50 <_malloc_r>
 8008b18:	b92a      	cbnz	r2, 8008b26 <_realloc_r+0x24>
 8008b1a:	f7ff f925 	bl	8007d68 <_free_r>
 8008b1e:	4625      	mov	r5, r4
 8008b20:	4628      	mov	r0, r5
 8008b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b26:	f000 f85f 	bl	8008be8 <_malloc_usable_size_r>
 8008b2a:	4284      	cmp	r4, r0
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	d802      	bhi.n	8008b36 <_realloc_r+0x34>
 8008b30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b34:	d8f4      	bhi.n	8008b20 <_realloc_r+0x1e>
 8008b36:	4621      	mov	r1, r4
 8008b38:	4638      	mov	r0, r7
 8008b3a:	f7ff f989 	bl	8007e50 <_malloc_r>
 8008b3e:	4680      	mov	r8, r0
 8008b40:	b908      	cbnz	r0, 8008b46 <_realloc_r+0x44>
 8008b42:	4645      	mov	r5, r8
 8008b44:	e7ec      	b.n	8008b20 <_realloc_r+0x1e>
 8008b46:	42b4      	cmp	r4, r6
 8008b48:	4622      	mov	r2, r4
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	bf28      	it	cs
 8008b4e:	4632      	movcs	r2, r6
 8008b50:	f7ff f8dd 	bl	8007d0e <memcpy>
 8008b54:	4629      	mov	r1, r5
 8008b56:	4638      	mov	r0, r7
 8008b58:	f7ff f906 	bl	8007d68 <_free_r>
 8008b5c:	e7f1      	b.n	8008b42 <_realloc_r+0x40>

08008b5e <_raise_r>:
 8008b5e:	291f      	cmp	r1, #31
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4605      	mov	r5, r0
 8008b64:	460c      	mov	r4, r1
 8008b66:	d904      	bls.n	8008b72 <_raise_r+0x14>
 8008b68:	2316      	movs	r3, #22
 8008b6a:	6003      	str	r3, [r0, #0]
 8008b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b70:	bd38      	pop	{r3, r4, r5, pc}
 8008b72:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b74:	b112      	cbz	r2, 8008b7c <_raise_r+0x1e>
 8008b76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b7a:	b94b      	cbnz	r3, 8008b90 <_raise_r+0x32>
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	f000 f831 	bl	8008be4 <_getpid_r>
 8008b82:	4622      	mov	r2, r4
 8008b84:	4601      	mov	r1, r0
 8008b86:	4628      	mov	r0, r5
 8008b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b8c:	f000 b818 	b.w	8008bc0 <_kill_r>
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d00a      	beq.n	8008baa <_raise_r+0x4c>
 8008b94:	1c59      	adds	r1, r3, #1
 8008b96:	d103      	bne.n	8008ba0 <_raise_r+0x42>
 8008b98:	2316      	movs	r3, #22
 8008b9a:	6003      	str	r3, [r0, #0]
 8008b9c:	2001      	movs	r0, #1
 8008b9e:	e7e7      	b.n	8008b70 <_raise_r+0x12>
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	4798      	blx	r3
 8008baa:	2000      	movs	r0, #0
 8008bac:	e7e0      	b.n	8008b70 <_raise_r+0x12>
	...

08008bb0 <raise>:
 8008bb0:	4b02      	ldr	r3, [pc, #8]	@ (8008bbc <raise+0xc>)
 8008bb2:	4601      	mov	r1, r0
 8008bb4:	6818      	ldr	r0, [r3, #0]
 8008bb6:	f7ff bfd2 	b.w	8008b5e <_raise_r>
 8008bba:	bf00      	nop
 8008bbc:	20000030 	.word	0x20000030

08008bc0 <_kill_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	4d07      	ldr	r5, [pc, #28]	@ (8008be0 <_kill_r+0x20>)
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	4608      	mov	r0, r1
 8008bca:	4611      	mov	r1, r2
 8008bcc:	602b      	str	r3, [r5, #0]
 8008bce:	f7f9 fe05 	bl	80027dc <_kill>
 8008bd2:	1c43      	adds	r3, r0, #1
 8008bd4:	d102      	bne.n	8008bdc <_kill_r+0x1c>
 8008bd6:	682b      	ldr	r3, [r5, #0]
 8008bd8:	b103      	cbz	r3, 8008bdc <_kill_r+0x1c>
 8008bda:	6023      	str	r3, [r4, #0]
 8008bdc:	bd38      	pop	{r3, r4, r5, pc}
 8008bde:	bf00      	nop
 8008be0:	20000db4 	.word	0x20000db4

08008be4 <_getpid_r>:
 8008be4:	f7f9 bdf2 	b.w	80027cc <_getpid>

08008be8 <_malloc_usable_size_r>:
 8008be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bec:	1f18      	subs	r0, r3, #4
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	bfbc      	itt	lt
 8008bf2:	580b      	ldrlt	r3, [r1, r0]
 8008bf4:	18c0      	addlt	r0, r0, r3
 8008bf6:	4770      	bx	lr

08008bf8 <_init>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	bf00      	nop
 8008bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfe:	bc08      	pop	{r3}
 8008c00:	469e      	mov	lr, r3
 8008c02:	4770      	bx	lr

08008c04 <_fini>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	bf00      	nop
 8008c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0a:	bc08      	pop	{r3}
 8008c0c:	469e      	mov	lr, r3
 8008c0e:	4770      	bx	lr
